{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"jy-hf\u7684\u4ee3\u7801\u7a7a\u95f4","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"mkdocs-guide/","title":"about","text":""},{"location":"mkdocs-guide/#jy-hf","title":"\u6b22\u8fce\u6765\u5230JY-HF\u7684\u4ee3\u7801\u7a7a\u95f4","text":"<p>\u4ee5\u4e0b\u7b80\u8981\u4ecb\u7ecd\u672c\u7ad9\u7684\u4e3b\u8981\u5185\u5bb9\u4ee5\u53ca\u642d\u5efa\u3001\u7ef4\u62a4\u7f51\u7ad9\u7684\u65b9\u6cd5\u3001\u66f4\u65b0\u65e5\u5fd7</p>"},{"location":"mkdocs-guide/#_1","title":"\u4e3b\u8981\u5185\u5bb9","text":"<p>\u4e00\u76f4\u5f88\u60f3\u642d\u5efa\u4e2a\u4eba\u7684\u5b66\u4e60\u7f51\u7ad9\uff0c\u5f53\u5185\u5bb9\u5b58\u50a8\u5728\u672c\u5730\u65f6\u867d\u7136\u7ef4\u62a4\u975e\u5e38\u65b9\u4fbf\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u7edf\u4e00\u6574\u5408\u7684\u9875\u9762\u4f1a\u4fc3\u4f7f\u6211\u53bb\u8bb0\u7b14\u8bb0\u3002\u7ef4\u62a4\u7684\u8fc7\u7a0b\u5e0c\u671b\u4e0d\u8981\u5f62\u5f0f\u5927\u4e8e\u5185\u5bb9\uff0c\u800c\u662f\u80fd\u591f\u4ece\u5b9e\u8d28\u4e0a\u4fc3\u8fdb\u5b66\u4e60\u3002\u5982\u679c\u89c9\u5f97\u91cd\u65b0\u56de\u5f52\u7eb8\u8d28\u5316\u5b66\u4e60\u6548\u7387\u66f4\u9ad8\uff0c\u4e5f\u5b8c\u5168ok~</p>"},{"location":"mkdocs-guide/#1","title":"1\u3001\u8bfe\u5185\u8bfe\u7a0b\u5b66\u4e60\u8d44\u6599","text":"<p>FDS DIP \u7535\u8def\u7535\u5b50\uff0c\u6211\u4e5f\u60f3\u5b66\u590d\u53d8\uff08bushi\uff0c\u4ee5\u540e\u7684\u7ade\u8d5b\u5185\u5bb9\uff0csrtp....</p> <p>\u4ee5\u5f80\u7684\u5fae\u79ef\u5206\uff0c\u7ebf\u4ee3\uff0c\u79bb\u6563\uff0c\u5e38\u5fae\u5206\uff0c\u53ea\u8981\u662f\u786c\u8bfe\uff0c\u5927\u53ef\u5168\u90e8\u4e0a\u4f20</p> <p>\u5f00\u4e2a\u4e13\u697c\u7eaa\u5ff5\uff08\u5f00\u55b7\uff09\u67d0\u51e0\u95e8\u901a\u8bc6\u8bfe</p> <p>\u4e3b\u8981\u652f\u6301markdown\u8bed\u6cd5\uff0c\u4f46\u662f\u53ef\u4ee5\u76f4\u63a5\u4ece\u7f51\u7ad9\u4e0b\u8f7dpdf\u6587\u6863\u54e6~~</p>"},{"location":"mkdocs-guide/#2-blog","title":"2\u3001\u751f\u6d3b \u4e2a\u4ebablog","text":"<p>\u53c2\u8003\u6768xjgg\u7684blog\uff0c\u4ec0\u4e48\u90fd\u53ef\u4ee5\u55b7\uff0c\u4e0a\u4f20\u4e00\u5806\u5806picture</p>"},{"location":"mkdocs-guide/#3","title":"3\u3001\u8bfe\u5916\u81ea\u5b66\u5185\u5bb9\uff0c\u5b9e\u7528\u5de5\u5177\u5b66\u4e60","text":"<p>git bash  shell    linux     \u6444\u5f71\u6280\u672f\uff1f  \u5316\u5986\u6280\u672f       \u8fd0\u52a8\u6280\u5de7...</p>"},{"location":"mkdocs-guide/#4","title":"4\u3001\u60f3\u5bf9\u5f7c\u6b64\u8bf4\u7684\u8bdd\uff0c\u53ef\u4ee5\u52a0\u5bc6\u54e6","text":"<p>[still developing......]</p>"},{"location":"mkdocs-guide/#_2","title":"\u672c\u5730\u90e8\u7f72\u65b9\u5f0f","text":"<p>\u672c\u6587\u6863\u4f7f\u7528 mkdocs \u6784\u5efa\uff0c\u5e76\u4f7f\u7528\u4e86 material \u7b2c\u4e09\u65b9\u4e3b\u9898\uff0c\u4f60\u9700\u8981\u5728\u672c\u5730\u4f9d\u6b21\u5e8f\u5b89\u88c5 Python\u3001mkdocs\u3001material \u4e3b\u9898\u3002</p>"},{"location":"mkdocs-guide/#python","title":"Python \u5b89\u88c5","text":"<p>\u5b98\u7f51\u5b89\u88c5\u6307\u5bfc\u5df2\u7ecf\u7ed9\u51fa\u5404\u7cfb\u7edf\u5b89\u88c5\u65b9\u5f0f\uff0c\u6839\u636e\u5b98\u7f51\u5185\u5bb9\u5b89\u88c5\u5373\u53ef\u3002</p>"},{"location":"mkdocs-guide/#mkdocsmaterial","title":"mkdocs\u3001material \u4e3b\u9898","text":"<p>\u5747\u53ef\u4ee5\u901a\u8fc7 pip\uff08Python \u7684\u5305\u7ba1\u7406\u5668\uff09 \u8fdb\u884c\u5b89\u88c5\u3002</p> Text Only<pre><code>$ pip install mkdocs\n$ pip install mkdocs-material\n</code></pre> <p>\u5177\u4f53\u5730\uff0c\u4f60\u53ef\u4ee5\u5206\u522b\u67e5\u770b mkdocs \u7684\u5b89\u88c5\u6307\u5bfc \u4e0e material \u7684\u5b89\u88c5\u6307\u5bfc\u3002</p>"},{"location":"mkdocs-guide/#_3","title":"\u672c\u5730\u6784\u5efa","text":"<p>\u4f60\u53ea\u9700\u8981\u5c06\u672c\u4ed3\u5e93\u62c9\u81f3\u672c\u5730\uff0c\u540e\u4f7f\u7528 <code>mkdocs serve</code> \u90e8\u7f72\u5373\u53ef\u3002</p> Text Only<pre><code># \u62c9\u53d6\u4ed3\u5e93\uff0c\u4e24\u8005\u7686\u53ef\n$ git clone git@github.com:little612pea/jy-hf.git\n$ git clone https://github.com/little612pea/jy-hf.git\n# \u6784\u5efa\n$ cd jy-hf\n$ mkdocs serve\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528\u672c\u5730\u90e8\u7f72\u67e5\u770b\u6587\u6863\uff0c\u8bf7\u5728\u6bcf\u6b21\u4f7f\u7528\u524d\u67e5\u770b\u5e76\u62c9\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u7684 <code>main</code> \u5206\u652f\u66f4\u65b0 <code>git pull</code></p>"},{"location":"mkdocs-guide/#_4","title":"\u5982\u4f55\u642d\u5efa\u7f51\u7ad9","text":"<p>\u539f\u6765\u66fe\u7ecf\u60f3\u81ea\u884c\u7ef4\u62a4\u4e00\u4e2a\u767d\u5ad6\u6765\u76842\u68384G \u963f\u91cc\u4e91\u670d\u52a1\u5668,\u4f7f\u7528wordpress\u7f51\u7ad9\u5efa\u7ad9\uff0c</p> <p>GitHub Pages\u662fGitHub\u63d0\u4f9b\u7684\u4e00\u9879\u514d\u8d39\u9759\u6001\u7f51\u7ad9\u6258\u7ba1\u670d\u52a1\uff0c\u5141\u8bb8\u7528\u6237\u5c06\u4ed6\u4eec\u7684\u9879\u76ee\u6258\u7ba1\u5728GitHub\u4e0a\uff0c\u5e76\u901a\u8fc7GitHub Pages\u670d\u52a1\u53d1\u5e03\u9879\u76ee\u7684\u9759\u6001\u7f51\u7ad9\u3002\u8fd9\u4e2a\u670d\u52a1\u975e\u5e38\u9002\u5408\u7528\u4e8e\u5c55\u793a\u4e2a\u4eba\u3001\u56e2\u961f\u6216\u9879\u76ee\u7684\u6587\u6863\u3001\u535a\u5ba2\u3001\u4f5c\u54c1\u96c6\u7b49\u9759\u6001\u5185\u5bb9\u3002</p> <p>\u4ee5\u4e0b\u662fGitHub Pages\u7684\u4e00\u4e9b\u5173\u952e\u7279\u70b9\u548c\u4fe1\u606f\uff1a</p> <ol> <li>\u514d\u8d39\u6258\u7ba1\uff1a GitHub Pages\u662f\u514d\u8d39\u7684\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u81ea\u5df1\u7684\u9759\u6001\u7f51\u7ad9\u76f4\u63a5\u6258\u7ba1\u5728GitHub\u4e0a\uff0c\u65e0\u9700\u652f\u4ed8\u989d\u5916\u8d39\u7528\u3002</li> <li>\u57df\u540d\u652f\u6301\uff1a \u7528\u6237\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528GitHub\u63d0\u4f9b\u7684\u9ed8\u8ba4\u57df\u540d\uff08\u5982<code>username.github.io</code>\uff09\uff0c\u4e5f\u53ef\u4ee5\u5c06\u81ea\u5b9a\u4e49\u57df\u540d\u5173\u8054\u5230\u4ed6\u4eec\u7684GitHub Pages\u7f51\u7ad9\u4e0a\u3002</li> <li>\u652f\u6301Jekyll\uff1a GitHub Pages\u539f\u751f\u652f\u6301Jekyll\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\u3002\u7528\u6237\u53ef\u4ee5\u4f7f\u7528Jekyll\u6765\u81ea\u5b9a\u4e49\u548c\u4f18\u5316\u4ed6\u4eec\u7684\u7f51\u7ad9\uff0c\u6dfb\u52a0\u535a\u5ba2\u3001\u9875\u9762\u5e03\u5c40\u7b49\u3002</li> <li>\u81ea\u52a8\u6784\u5efa\uff1a \u5f53\u7528\u6237\u5c06\u65b0\u7684\u5185\u5bb9\u63a8\u9001\u5230\u4ed6\u4eec\u7684GitHub\u4ed3\u5e93\u65f6\uff0cGitHub Pages\u4f1a\u81ea\u52a8\u91cd\u65b0\u6784\u5efa\u548c\u90e8\u7f72\u7f51\u7ad9\uff0c\u786e\u4fdd\u6700\u65b0\u7684\u5185\u5bb9\u80fd\u591f\u5feb\u901f\u5730\u5728\u7f51\u7ad9\u4e0a\u66f4\u65b0\u3002</li> <li>\u7248\u672c\u63a7\u5236\uff1a \u7531\u4e8eGitHub Pages\u4e0eGitHub\u4ed3\u5e93\u7d27\u5bc6\u96c6\u6210\uff0c\u7528\u6237\u53ef\u4ee5\u5145\u5206\u5229\u7528Git\u7684\u7248\u672c\u63a7\u5236\u529f\u80fd\u6765\u7ba1\u7406\u548c\u8ddf\u8e2a\u7f51\u7ad9\u7684\u53d8\u5316\u3002</li> </ol> <p>\u4f7f\u7528GitHub Pages\u7684\u4e00\u822c\u6b65\u9aa4\u5305\u62ec\uff1a</p> <ul> <li>\u5728GitHub\u4e0a\u521b\u5efa\u4e00\u4e2a\u4ed3\u5e93\uff0c\u4ed3\u5e93\u540d\u5b57\u5e94\u8be5\u662f<code>username.github.io</code>\uff08\u5176\u4e2d<code>username</code>\u662f\u4f60\u7684GitHub\u7528\u6237\u540d\uff09\u6ce8\u610f\uff0c\u8fd9\u91cc\u65b0\u5efa\u7684\u662f\u4e2a\u4eba/\u4f01\u4e1a\u7f51\u7ad9\u7684\u9996\u9875\uff0c\u76f8\u5f53\u4e8e\u670d\u52a1\u5668\u672c\u8eab\uff0c\u5982\u679c\u8981\u65b0\u5efa\u7684\u4ed3\u5e93\u4e0d\u662f\u8fd9\u4e2a\u540d\u79f0\uff0c\u5c31\u53ef\u4ee5\u5728username.github.io/repo_name\u5904\u8bbf\u95ee\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u7aef\u53e3\u3002\u53ea\u4e0d\u8fc7github pages\u662f\u5e2e\u4f60\u8fd0\u7ef4\u597d\u7684\u670d\u52a1\u5668\uff0c\u6bd4\u8f83\u9760\u8c31</li> <li>\u5728\u4ed3\u5e93\u4e2d\u6dfb\u52a0\u4f60\u7684\u9759\u6001\u7f51\u7ad9\u6587\u4ef6\uff0c\u53ef\u4ee5\u662fHTML\u3001CSS\u3001JavaScript\u7b49\u3002</li> <li>\u5c06\u6587\u4ef6\u63a8\u9001\u5230GitHub\u4ed3\u5e93\u3002</li> <li>\u5728\u4ed3\u5e93\u7684Settings\u9875\u9762\u4e2d\u627e\u5230GitHub Pages\u8bbe\u7f6e\uff0c\u9009\u62e9\u4e3b\u5206\u652f\uff08\u901a\u5e38\u662f<code>main</code>\u6216<code>master</code>\uff09\u4f5c\u4e3a\u6e90\uff0c\u7136\u540e\u4fdd\u5b58\u8bbe\u7f6e\u3002</li> <li>\u5728\u51e0\u5206\u949f\u5185\uff0c\u4f60\u7684\u7f51\u7ad9\u5c31\u4f1a\u5728<code>username.github.io</code>\u4e0a\u53ef\u8bbf\u95ee\u3002</li> </ul> <p>\u603b\u4f53\u800c\u8a00\uff0cGitHub Pages\u662f\u4e00\u4e2a\u65b9\u4fbf\u3001\u7b80\u5355\u4e14\u529f\u80fd\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u9002\u7528\u4e8e\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u9759\u6001\u7f51\u7ad9\u6258\u7ba1\u9700\u6c42\u3002</p>"},{"location":"mkdocs-guide/#github-action-gitlabci","title":"github action \u548c gitlab.ci\u7b49\u5185\u5bb9\u5b9e\u64cd\u539f\u7406\u7b49\u5f85\u540e\u7eed\u5b8c\u5584","text":""},{"location":"mkdocs-guide/#_5","title":"\u5efa\u7ad9\u5177\u4f53\u64cd\u4f5c","text":""},{"location":"mkdocs-guide/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs-guide/#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>\u53c2\u8003Material for MkDocs (squidfunk.github.io)\u7ed9\u51fa\u7684\u8be6\u7ec6\u5efa\u7ad9\u8fc7\u7a0b\uff0c\u5927\u4f6c\u7684UI\u671b\u5c18\u83ab\u53ca\u5450</p> <p>\u5b98\u65b9\u6587\u6863\u53c2\u8003\uff1aFor full documentation visit mkdocs.org.</p>"},{"location":"mkdocs-guide/#aliyun","title":"\u4f7f\u7528aliyun\u5b58\u50a8\u6876","text":"<p>github pages\u9650\u5236\u5b58\u50a8\u5bb9\u91cf\u4e3a1GB</p> <p>\u4f7f\u7528\u963f\u91cc\u4e91\u670d\u52a1\u5668\u6216\u5176\u4ed6\u4e91\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u5916\u90e8\u5b58\u50a8\u6765\u6258\u7ba1 GitHub Pages \u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b9e\u73b0\uff1a</p> <ol> <li>\u5728\u963f\u91cc\u4e91\u4e0a\u521b\u5efa\u5b58\u50a8\u6876 \u767b\u5f55\u963f\u91cc\u4e91\u63a7\u5236\u53f0\uff0c\u5bfc\u822a\u5230\u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\uff08OSS\uff09\u3002 \u521b\u5efa\u4e00\u4e2a\u5b58\u50a8\u6876\uff08Bucket\uff09\uff0c\u7528\u4e8e\u5b58\u50a8\u4f60\u7684\u9759\u6001\u7f51\u7ad9\u6587\u4ef6\u3002</li> <li>\u4e0a\u4f20\u6587\u4ef6\u5230\u5b58\u50a8\u6876 \u5c06\u4f60\u7684\u9759\u6001\u7f51\u7ad9\u6587\u4ef6\u4e0a\u4f20\u5230\u521a\u521b\u5efa\u7684\u5b58\u50a8\u6876\u4e2d\u3002 \u786e\u4fdd\u4f60\u7684\u6587\u4ef6\u5728\u5b58\u50a8\u6876\u4e2d\u7684\u9002\u5f53\u8def\u5f84\u3002</li> <li>\u8bbe\u7f6e\u5b58\u50a8\u6876\u4e3a\u516c\u5171\u8bfb \u5728\u5b58\u50a8\u6876\u7ba1\u7406\u9875\u9762\uff0c\u627e\u5230 \"\u6743\u9650\u7ba1\u7406\" \u90e8\u5206\u3002 \u8bbe\u7f6e\u5b58\u50a8\u6876\u7684\u6743\u9650\uff0c\u786e\u4fdd\u5b83\u5bf9\u516c\u4f17\u53ef\u8bfb\uff08Public Read\uff09\u3002</li> <li>\u83b7\u53d6\u5916\u90e8\u5b58\u50a8\u7684\u8bbf\u95ee\u57df\u540d \u5728\u5b58\u50a8\u6876\u7ba1\u7406\u9875\u9762\uff0c\u627e\u5230\u5b58\u50a8\u6876\u7684\u8bbf\u95ee\u57df\u540d\u3002 \u8fd9\u4e2a\u57df\u540d\u5c06\u7528\u4e8e\u8bbf\u95ee\u5b58\u50a8\u6876\u4e2d\u7684\u6587\u4ef6\u3002</li> <li> <p>\u914d\u7f6e GitHub Pages \u4f7f\u7528\u5916\u90e8\u5b58\u50a8 \u5728 GitHub \u4ed3\u5e93\u4e2d\u7684\u8bbe\u7f6e\uff08Settings\uff09\u4e2d\uff0c\u627e\u5230 \"GitHub Pages\" \u90e8\u5206\uff0c\u5c06\u6e90\u8bbe\u7f6e\u4e3a \"master branch\"\uff08\u6216\u4f60\u4e0a\u4f20\u6587\u4ef6\u7684\u5206\u652f\uff09\uff0c\u7136\u540e\u8f93\u5165\u4f60\u5728\u963f\u91cc\u4e91\u4e0a\u83b7\u53d6\u7684\u5916\u90e8\u5b58\u50a8\u8bbf\u95ee\u57df\u540d\u3002</p> </li> <li> <p>\u6d4b\u8bd5 GitHub Pages \u786e\u4fdd\u4f60\u7684\u4ed3\u5e93\u4e2d\u5305\u542b\u4e00\u4e2a index.html \u6587\u4ef6\u6216\u5176\u4ed6\u9ed8\u8ba4\u6587\u6863\u3002 \u8bbf\u95ee\u4f60\u7684 GitHub Pages \u7f51\u7ad9\u7684 URL\uff0c\u786e\u4fdd\u5b83\u6b63\u786e\u52a0\u8f7d\u3002 \u8fd9\u6837\uff0c\u4f60\u7684 GitHub Pages \u5c31\u4f1a\u4ece\u963f\u91cc\u4e91\u5b58\u50a8\u6876\u4e2d\u52a0\u8f7d\u6587\u4ef6\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u662f\u53ef\u4ee5\u5229\u7528\u4e91\u5b58\u50a8\u7684\u9ad8\u53ef\u7528\u6027\u548c\u5feb\u901f\u52a0\u8f7d\u901f\u5ea6\u3002\u8bf7\u786e\u4fdd\u5b58\u50a8\u6876\u7684\u6743\u9650\u6b63\u786e\u914d\u7f6e\uff0c\u4ee5\u4fbf GitHub Pages \u53ef\u4ee5\u8bfb\u53d6\u5b58\u50a8\u6876\u4e2d\u7684\u6587\u4ef6\u3002</p> </li> </ol>"},{"location":"mkdocs-guide/#_6","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>11-18 20\uff1a55 \u5f00\u59cb\u5efa\u7ad9</p> <p>11-19 12\uff1a30 \u89e3\u51b3\u5185\u8054\u516c\u5f0f\u65e0\u6cd5\u663e\u793a\u95ee\u9898\uff0c\u4f7f\u7528mathJax\u683c\u5f0f</p> <p>11-19 16\uff1a12 \u57fa\u672c\u5b8c\u6210\u5efa\u7ad9</p> <p>\u63a5\u4e0b\u6765\u8bf7\u51af\u51af\u540c\u5b66\u5e2e\u5fd9\u770b\u770b\u56fe\u7247\u76f8\u5bf9\u8def\u5f84\u8bbe\u7f6e\u600e\u4e48\u65b9\u4fbf\u6e32\u67d3\uff0c\u4f3c\u4e4e\u6e32\u67d3\u4e0d\u4e86html\u683c\u5f0f\uff0c\u5b83\u53ea\u4f1a\u5f62\u5982</p> <p>\"[2-2] (/assets/imgs)\"\u7684\u5f62\u5f0f</p> <p>11-20 20\uff1a15 pdf\u5d4c\u5165\uff0c\u5bf9\u76f8\u5bf9\u8def\u5f84\u4ee5\u53capathconverter\u7684\u5185\u5bb9\u6709\u57fa\u672c\u7406\u89e3</p> <p>11-22 \u89e3\u51b3remote\u6587\u4e0d\u5bf9\u677f\u7684\u95ee\u9898\uff0c\u91cd\u5b9a\u5411\u4e86remote\uff0c\u53c2\u8003\u5b98\u7f51\u6559\u7a0b\u6b63\u786e\u914d\u7f6e\u4e86katex\u683c\u5f0f\uff0c\u6e32\u67d3\u884c\u5185\u516c\u5f0f</p> <p>\u4f7f\u7528pymdownx.highlight\u9ad8\u4eae\u8bed\u6cd5</p> <p>11-22 20\uff1a40 nested tab \u683c\u5f0f\u5d4c\u5165 \u4f7f\u7528\u6559\u7a0b</p> <p></p>"},{"location":"JY_FENG/JY-Feng/","title":"Preview","text":"<p>\u7f16\u5199\u8005\u4e3aZJU 22\u7ea7\u7535\u5b50\u4fe1\u606f\u5de5\u7a0b\u4e13\u4e1a\u5b66\u751f\uff0c\u7531\u4e8e\u52a0\u5165\u7231\u8fea\u751f\u73ed\uff0c\u6240\u4ee5\u5185\u5bb9\u4e3b\u8981\u9762\u5411\u7231\u8fea\u751f\u73ed\u4e13\u4e1a\u5185\u5bb9\uff08\u7231\u8fea\u751f\u73ed\u5185\u5bb9\u4f1a\u5728\u540e\u9762\u6807\u6ce8\\(\\alpha\\)\uff09\u3002</p> <p>\u8fd9\u91cc\u4f5c\u4e3a\u6211\u5bf9\u672c\u4e13\u4e1a\u7684\u56de\u987e\uff0c\u4ee5\u53ca\u4e00\u4e9b\u7ecf\u9a8c~</p> <p>\u4e13\u4e1a\u8bfe\u5927\u81f4\u5185\u5bb9\u5982\u4e0b\uff1a\uff08\u6253\u52fe\u5185\u5bb9\u4e3a\u5df2\u66f4\u65b0\uff09</p> <ul> <li>\u7535\u8def\u4e0e\u7535\u5b50\u6280\u672fI\u4e0eII\u5b9e\u9a8c(\\(\\alpha\\)) \u5b9e\u9a8c\u62a5\u544a \u2713</li> <li>\u7535\u7f51\u7edc\u5206\u6790(\\(\\alpha\\)) \u8bfe\u7a0b\u5185\u5bb9\u4e0e\u62d3\u5c55</li> <li>\u7535\u8def\u4e0e\u7535\u5b50\u6280\u672fI\u4e0eII(\\(\\alpha\\))\u4e00\u4e9b\u7b14\u8bb0\u548c\u7ecf\u9a8c\u4e4b\u8c08</li> <li>\u5de5\u7a0b\u7535\u78c1\u573a\u4e0e\u6ce2</li> <li>\u5fae\u673a\u539f\u7406\u53ca\u5e94\u7528(\\(\\alpha\\))</li> <li>\u5fae\u673a\u539f\u7406\u53ca\u5e94\u7528\u7efc\u5408\u5b9e\u9a8c(\\(\\alpha\\))</li> <li>\u4fe1\u53f7\u5206\u6790\u4e0e\u5904\u7406\u5b9e\u9a8c(\\(\\alpha\\))\uff0c\u3010\u4e3a\u4ec0\u4e48\u6ca1\u6709\u7406\u8bba\u8bfe\uff1f\u56e0\u4e3a\u6211\u6068\u5085\u91cc\u53f6\u3011</li> <li>......</li> </ul> <p>\u5404\u7c7b\u901a\u8bc6\u8bfe\uff1a</p> <ul> <li>\u5fae\u89c2\u7ecf\u6d4e\u5b66\u539f\u7406</li> <li>\u6982\u7387\u8bba\u53ca\u6570\u7406\u7edf\u8ba1</li> <li>\u5fae\u79ef\u5206</li> <li>\u5927\u5b66\u7269\u7406</li> <li>......</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/lab7/","title":"Lab 7","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/lab7/#_1","title":"\u53c2\u8003\u4ee3\u7801","text":"<p>\u4ee5\u4e0b\u4ee3\u7801\u6709\u4e9b\u8bb8\u8bed\u6cd5\u9519\u8bef</p> Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n\nentity DIVX is\n    port(\n        Freq_in,Clr_n: in std_logic;\n        Div_num: in natural range 0 to 49999999;\n        Freq_out: out std_logic;\n    );  \nend DIVX;\n\narchitecture BEHAV of DIVX is\nbegin\np1:process (Freq_in,Clr_n)\nvariable cnt_val: natural range 0 to 49999999;\nbegin\n    if(Clr_n='0')then\n        cnt_val:=0;\n    elsif(Freq_in'event and Freq_in='1')then\n        if(cnt_val=Div_num)then \n            cnt_val:=0;\n        elsif(cnt_val&lt;Div_num/2)then\n            cnt_val:=cnt_val+1;\n            Freq_out&lt;='0';\n        else\n            cnt_val:=cnt_val+1;\n            Freq_out&lt;='1';\n        end if;\n    end if;\nend process;\nend BEHAV;\n</code></pre> Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n\nentity CNT16 is\n    port(\n        Clk,Clr_n:in std_logic;\n        Q:out std_logic_vector(3 downto 0);\n    );\nend CNT16;\n\narchitecture BEHAV of CNT16 is\nsignal Q_tmp: std_logic_vector(3 downto 0);\nbegin\n    P1:process(Clk,Clr_n)\n    begin\n        if(Clr_n='0')then\n            Q_tmp&lt;=\"0000\";\n        elsif(Clk'event and Clk='1')then\n            Q_tmp&lt;=Q_tmp+1;\n        end if;\n    end process;\n        Q&lt;=Q_tmp;\nend BEHAV;\n</code></pre> Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n\nentity COMP4BIT is\n    port(\n        A,B: in std_logic_vector(3 downto 0);\n        AGB:out std_logic;\n    );\nend COMP4BIT;\narchitecture BEHAV of COM4BIT is\nbegin\n    process(A,B)\n    begin\n        if(A&gt;B)then\n            AGB&lt;='1';\n        else\n            AGB&lt;='0';\n        end if;\n    end proscess;\nend BEHAV;\n</code></pre> Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n\nentity TOP is\nPort ( \n    swtch:in std_logic_vector(3 downto 0);\n    Freq_in:in std logic;\n    PWM:out std_logic;);\nend TOP;\narchitecture Behavioral of TOP is\ncomponent DIVX is\n    Port(Freq_in, Clr_n:in std_logic;\n         Div_num:in natural range 0 to 49999999;\n         Freq_out:out std_logic);\nend component;\n\ncomponent CNT16 is\n    port(\n        Clk,Clr_n:in std_logic;\n        Q:out std_logic_vector(3 downto 0);\n    );\nend component;\ncomponent COMP4BIT is\n    port(\n        A,B: in std_logic_vector(3 downto 0);\n        AGB:out std_logic;\n    );\nend component;\nsignal Freq_out:std_logic;\nsignal cnt_out:std_logic_vector (3 downto 0);\nbegin\n    ul:DIVX port map (Freq_in=&gt;Freq_in, Clr_n=&gt;'1', Div_num=&gt;26315, Freq_out=&gt;Freq_out);\n    u2:CNT16 port map (Clk=&gt;Freq_out, Clr_n=&gt;'1', Q=&gt;cnt_out);\n    u3:CMP4BIT port map (A=&gt;cnt_out, B=&gt;swtch, AGB=&gt;PWM)\nend Behavioral;\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/preview/","title":"Preview","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/preview/#for-i","title":"\u5199\u5728\u524d\u9762 for \u7535\u8def\u4e0e\u7535\u5b50\u6280\u672f\u5b9e\u9a8cI","text":"<p>\u7535\u9662\u5b9e\u9a8c\u8bfe\u672c\u8eab\u5185\u5bb9\u5e76\u4e0d\u590d\u6742\uff0c\u5177\u4f53\u64cd\u4f5c\u8001\u5e08\u57fa\u672c\u4e0a\u4f1a\u7ed9\u51fa\uff0c\u4f46\u662f\u5b8c\u6210\u5b9e\u9a8c\u5e76\u5f97\u5230\u6548\u679c\u8fd8\u662f\u4e00\u4e2a\u6bd4\u8f83\u7e41\u7410\u7684\u5185\u5bb9\uff0c\u518d\u52a0\u4e0a\u5bf9\u5b9e\u9a8c\u62a5\u544a\u6709\u4e00\u5b9a\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u4f1a\u89c9\u5f97\u8fd92\u5b66\u5206\u7684\u8bfe\u5b9e\u5728\u662f\u6027\u4ef7\u6bd4\u8fc7\u9ad8\u3002</p> <p>\u7efc\u5408\u5b9e\u9a8c\u62a5\u544a\u6210\u7ee9\u548c\u4e24\u6b21\u8003\u6838\u6210\u7ee9\uff0c\u672c\u4eba\u6700\u7ec8\u6210\u7ee9\u4e3a94\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u57fa\u51c6\u53c2\u8003\u9700\u8981\u7684\u52aa\u529b\u7a0b\u5ea6\u3002</p> <p>\u7efc\u5408\u4e00\u5e74\u7684\u5b9e\u9a8c\u611f\u53d7\uff0c\u5b9e\u9a8c\u62a5\u544a\u603b\u7684\u5b8c\u6210\u4ee5\u4e0b\u4e24\u70b9\u8981\u6c42\u5dee\u4e0d\u591a\u5c31\u53ef\u4ee5\u62ff\u5230\u4e00\u4e2a\u4e0d\u9519\u7684\u6210\u7ee9\uff1a</p> <ul> <li>\u5b9e\u9a8c\u5185\u5bb9\u4e0d\u7f3a\u4e0d\u6f0f</li> <li>\u5b9e\u9a8c\u7ed3\u679c\u51c6\u786e\u65e0\u8bef\uff0c\u548c\u7406\u8bba\u57fa\u672c\u4e00\u81f4</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/preview/#_1","title":"\u5b66\u4e60\u5185\u5bb9","text":"<p>\u79cb\u5b66\u671f\uff1a\u7efc\u5408\u5b9e\u9a8c\uff0c\u5404\u7c7b\u5185\u5bb9\u5747\u6709\u6d89\u53ca\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e86\u89e3\u5b9e\u9a8c\u5668\u6750\uff0c\u7136\u540e\u5bf9\u201d\u7535\u201c\u6709\u4e00\u5b9a\u7684\u6982\u5ff5\u3002\u7941\u624d\u519b\u8001\u5e08\u8d1f\u8d23\uff0c\u4f46\u5e94\u8be5\u6559\u5b8c\u6211\u4eec\u8fd9\u4e00\u5c4a\u5c31\u9000\u4f11\u4e86\u3002\u671f\u672b\u8003\u8bd5\u5185\u5bb9\u6d89\u53caPPT\u5185\u5bb9\u8f83\u591a\uff0c\u8ba4\u771f\u9605\u8bfbPPT\uff0c\u5bf9\u671f\u672b\u8003\u8bd5\u6709\u8f83\u5927\u5e2e\u52a9\u3002</p> <p>\u51ac\u5b66\u671f\uff1a\u7535\u8def\u539f\u7406\u90e8\u5206\u5b9e\u9a8c\u3002\u5b9e\u9645\u4e0a\u6d89\u53ca\u8f83\u591a\u6a21\u7535\u5b9e\u9a8c\u7684\u5185\u5bb9\u3002\u59da\u7f28\u82f1\u8001\u5e08\u4e3b\u8981\u8d1f\u8d23\u3002\u59da\u8001\u5e08\u867d\u7136\u770b\u4e0a\u53bb\u4e8b\u60c5\u5f88\u591a\uff0c\u5b9e\u9645\u4e0a\u4e8b\u60c5\u4e5f\u662f\u771f\u7684\u591a\u3002PPT\u4e0a\u7684\u5b9e\u9a8c\u5185\u5bb9\u4e5f\u6bd4\u8f83\u6742\u4e71\uff0c\u4f46\u53ef\u4ee5\u6839\u636e\u5f80\u5c4a\u7684\u5b9e\u9a8c\u62a5\u544a\u63a8\u6d4b\u8001\u5e08\u7684\u5b9e\u9a8c\u8981\u6c42\u3002\u540c\u65f6\u6709\u4efb\u4f55\u4e0d\u7406\u89e3\u7684\u5185\u5bb9\u548c\u8981\u6c42\uff0c\u4e5f\u5efa\u8bae\u4e3b\u52a8\u95ee\u59da\u8001\u5e08\u3002\u59da\u8001\u5e08\u4f1a\u975e\u5e38\u8010\u5fc3\u5730\u89e3\u7b54\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/preview/#_2","title":"\u8003\u8bd5","text":"<p>\u79cb\u5b66\u671f\uff1a\u671f\u672b\u8003\u8bd5\u4ee5\u7b14\u8bd5\u5f62\u5f0f\u8003\u5bdf\u79cb\u5b66\u671f\u7684\u6240\u6709\u5b9e\u9a8c\u5185\u5bb9\uff0c\u8ba4\u771f\u9605\u8bfbPPT</p> <p>\u51ac\u5b66\u671f\uff1a\u59da\u8001\u5e08\u57fa\u672c\u4e0a\u4f1a\u4ee5\u5404\u79cd\u65b9\u5f0f\u63d0\u793a\u671f\u672b\u8003\u8bd5\u7684\u5185\u5bb9\uff0c\u8ba4\u771f\u590d\u4e60\u59da\u8001\u5e08\u6240\u7ed9\u6750\u6599</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Final/Final/","title":"WLab Final","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/","title":"Lab 1","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_1","title":"\u5e38\u7528\u4eea\u5668\u4f7f\u7528\u7ec3\u4e60\u5b9e\u9a8c","text":"<p>\u5b9e\u9a8c\u65e5\u671f\uff1a2023/9/18</p> <p>\u5730\u70b9\uff1a\u4e1c3-406</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_2","title":"\u5b9e\u9a8c\u76ee\u7684","text":"<ol> <li>\u8ba4\u8bc6\u548c\u5b66\u4f1a\u9009\u62e9\u5e38\u7528\u65e0\u6e90\u7535\u5b50\u5668\u4ef6\uff08\u4e3b\u8981\u662f\u7535\u963b\u4e0e\u7535\u5bb9\uff09</li> <li>\u638c\u63e1\u5e38\u7528\u7535\u5b50\u4eea\u5668\u7684\u4f7f\u7528\uff08\u4e07\u7528\u8868\u3001\u76f4\u6d41\u7a33\u538b\u7535\u6e90\u3001\u793a\u6ce2\u5668\u3001\u4fe1\u53f7\u6e90\u3001ADCL-I\u6a21\u62df\u6570\u5b57\u7535\u5b50\u6280\u672f\u5b9e\u9a8c\u7bb1\uff09</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_3","title":"\u57fa\u672c\u5b9e\u9a8c\u5185\u5bb9","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#1","title":"\u5b9e\u9a8c1\uff1a\u4e07\u7528\u8868\u4f7f\u7528","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_4","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u4e07\u7528\u8868\uff08HY63\uff09</li> <li>ADCL-I\u6a21\u62df\u6570\u5b57\u7535\u5b50\u6280\u672f\u5b9e\u9a8c\u7bb1\u4e2d\u7684\u70b9\u89e3\u7535\u5bb9\u3001\u7535\u963b\u3001\u7535\u4f4d\u5668</li> <li>\u76f4\u6d41\u7a33\u538b\u7535\u6e90</li> <li>\u8fde\u63a5\u7ebf</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_5","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<ol> <li>\u7528\u4e07\u7528\u8868\u6d4b\u51fa\u4efb\u610f\u4e8c\u4e2a\u7535\u963b\uff08R\uff09\u7684\u963b\u503c\uff0c\u5e76\u4e0e\u5176\u8272\u73af\u6240\u6307\u793a\u7684\u7535\u963b\u503c\u8fdb\u884c\u6bd4\u8f83\u3002</li> <li>\u68c0\u67e5\u5e76\u9a8c\u8bc1\u7535\u4f4d\u5668\uff08M\uff09 \u4e2d\u5fc3\u5934\u7684\u529f\u80fd\u3002</li> <li>\u67e5\u770b\u7535\u89e3\u7535\u5bb9\u5668(CD\uff09\u4e0a\u7684\u89c4\u683c\u548c\u6781\u6027\u6807\u8bb0\uff0c\u5e76\u7528\u4e07\u7528\u8868\u68c0\u67e5\u7535\u89e3\u7535\u5bb9\u5668\u7684\u6f0f\u7535\u963b\uff08\u6ce8\u610f\u4e07\u7528\u8868\u7b14\u7684\u6781\u6027\uff09\uff0c\u6d4b\u51fa\u4efb\u610f\u4e8c\u4e2a\u7535\u5bb9\u5668\u7684\u6f0f\u7535\u963b\u503c\u3002</li> <li>\u8c03\u8282\u7a33\u538b\u7535\u6e90\u8f93\u51fa \uff0b/-12V\uff0c\u7528\u4e07\u7528\u8868\u6d4b\u91cf\u5e76\u9a8c\u8bc1\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_6","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u548c\u7ed3\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_7","title":"\uff08\u4e00\uff09\u4e07\u7528\u8868\u6d4b\u7535\u963b","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_8","title":"\u6d4b\u8bd5\u8fc7\u7a0b","text":"<ol> <li>\u6253\u5f00\u4e07\u7528\u8868\u5e76\u9009\u62e9\u7535\u963b\u6d4b\u91cf\u6a21\u5f0f\uff0c\u5c06\u7ea2\u8272\u8fde\u63a5\u7ebf\u8fde\u7ed3\u5230\u03a9\u6d4b\u91cf\u53e3\uff0c\u9ed1\u8272\u94fe\u63a5COM\u8f93\u5165\u53e3\u3002</li> <li>\u9009\u62e9\u4e00\u4e2a\u7535\u963b\uff0c\u8c03\u8282\u6863\u4f4d\u81f3\u76f8\u5e94\u6863\u4f4d\u3002</li> <li>\u5c06\u7ea2\u9ed1\u8868\u7b14\u5206\u522b\u63d2\u5165\u7535\u963b\u5bf9\u5e94\u7684\u63d2\u5b54\u3002</li> <li>\u8bfb\u53d6\u6db2\u6676\u5c4f\u8bfb\u6570\uff0c\u5e76\u8bb0\u5f55\u8bfb\u6570\u3002</li> <li>\u9009\u53d6\u4e0d\u540c\u7684\u7535\u963b\uff0c\u91cd\u590d2\uff5e4\u6b65\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_9","title":"\u6d4b\u8bd5\u7ed3\u679c","text":"<p>\u8fd9\u4e9b\u7535\u963b\u4e3a\u4e94\u9053\u8272\u73af\u5bf9\u5e94\u8bfb\u6570</p> \u7535\u963b\u6807\u79f0\u963b\u503c \u6807\u79f0\u5141\u8bb8\u8bef\u5dee \u6d4b\u91cf\u503c \u5b9e\u9645\u8bef\u5dee \u662f\u5426\u5728\u5bb9\u8bb8\u8bef\u5dee\u5185 2K\u03a9\uff08\u7ea2\u9ed1\u9ed1\u68d5200*10^1^\uff09 \u00b11% 1.992K\u03a9 0.40% \u662f 510\u03a9(\u7eff\u68d5\u9ed1\u9ed1510*10^0^) \u00b11% 505.8\u03a9 0.82% \u662f"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_10","title":"\u7ed3\u679c\u5206\u6790","text":"<p>\u4f7f\u7528\u4e07\u7528\u8868\u6b27\u59c6\u6863\u6240\u6d4b\u91cf\u7684\u7535\u963b\u963b\u503c\u4e0e\u6807\u79f0\u963b\u503c\u7565\u6709\u504f\u5dee\uff0c\u4f46\u5747\u5728\u5141\u8bb8\u8bef\u5dee\u8303\u56f4\u5185\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#m","title":"\uff08\u4e8c\uff09\u7535\u4f4d\u5668\uff08M\uff09 \u4e2d\u5fc3\u5934\u7684\u529f\u80fd","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_11","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u6d4b\u8bd5\u7ed3\u679c","text":"<ol> <li> <p>\u6253\u5f00\u4e07\u7528\u8868\u5e76\u9009\u62e9\u7535\u963b\u6d4b\u91cf\u6a21\u5f0f\uff0c\u5c06\u7ea2\u8272\u8fde\u63a5\u7ebf\u8fde\u7ed3\u5230\u03a9\u6d4b\u91cf\u53e3\uff0c\u9ed1\u8272\u94fe\u63a5COM\u8f93\u5165\u53e3\u3002</p> </li> <li> <p>\u9009\u62e9\u5408\u9002\u7684\u91cf\u7a0b\uff0c\u7531\u4e8e\u6211\u4eec\u9009\u62e9\u7684\u662f10K\u03a9\u7684\u7535\u4f4d\u5668\uff0c\u6240\u4ee5\u5c06\u6b27\u59c6\u8868\u8c03\u4e3a60K\u03a9\u6863\u4f4d\u3002</p> </li> <li> <p>\u5c06\u9ed1\u8272\u8868\u7b14\u63d2\u5165\u7535\u4f4d\u5668\u4f4d\u4e8e\u4e2d\u5fc3\u7684\u5b54\uff0c\u7ea2\u8868\u7b14\u63d2\u5165\u4e24\u65c1\u7684\u5b54\u3002</p> </li> </ol> <p></p> <ol> <li>\u65cb\u8f6c\u7535\u4f4d\u5668\u65cb\u94ae\uff0c\u53d1\u73b0\u4e07\u80fd\u8868\u793a\u6570\u53d1\u751f\u53d8\u5316\u3002</li> </ol> <p>\u6211\u4eec\u89c2\u5bdf\u5230\u963b\u503c\u4ece8.71K\u03a9\uff0c\u53d8\u81f310.15K\u03a9\u3002</p> <p></p> <ol> <li> <p>\u8c03\u6362\u7ea2\u8868\u7b14\u81f3\u53e6\u4e00\u7aef\u7684\u63d2\u5b54\uff0c\u53d1\u73b0\u8bfb\u4e66\u53d8\u4e3a0\uff0c\u53cd\u65b9\u5411\u65cb\u8f6c\u7535\u4f4d\u5668\uff0c\u793a\u6570\u589e\u5927\u3002</p> </li> <li> <p>\u5c06\u7ea2\u9ed1\u8868\u7b14\u63d2\u5165\u7535\u4f4d\u5668\u4e24\u7aef\u63a5\u53e3\uff0c\u53d1\u73b0\u793a\u6570\u5373\u4e3a\u4e4b\u524d\u6240\u5f97\u6700\u5927\u503c10.15K\u03a9\u3002</p> </li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_12","title":"\u7ed3\u679c\u5206\u6790","text":"<p>\u65cb\u8f6c\u7535\u4f4d\u5668\uff0c\u80fd\u591f\u6539\u53d8\u7535\u4f4d\u5668\u7684\u963b\u503c\u3002\u4e2d\u5fc3\u5934\u5e94\u8be5\u8d77\u5230\u8c03\u8282\u77ed\u8def\u90e8\u5206\u7535\u963b\u7684\u4f5c\u7528\uff0c\u4ece\u800c\u4f7f\u5f97\u7535\u4f4d\u5668\u963b\u503c\u53d1\u751f\u53d8\u5316\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_13","title":"\uff08\u4e09\uff09\u6d4b\u91cf\u7535\u5bb9\u6f0f\u7535\u963b","text":"<p>\u7406\u60f3\u7535\u5bb9\u5728\u5145\u6ee1\u7535\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u5b8c\u5168\u7edd\u7f18\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u5e76\u975e\u5982\u6b64\uff0c\u4ecd\u6709\u4e00\u5b9a\u91cf\u7684\u7535\u6d41\u901a\u8fc7\uff0c\u8bf4\u660e\u6b64\u65f6\u7535\u5bb9\u5b58\u5728\u4e00\u4e2a\u7535\u963b\uff0c\u8fd9\u4e2a\u7535\u963b\u88ab\u79f0\u4e3a\u6f0f\u7535\u963b\u3002\u4ece\u4ee5\u4e0a\u5206\u6790\u4e5f\u53ef\u4ee5\u77e5\u9053\uff0c\u7535\u5bb9\u7684\u6f0f\u7535\u963b\u5e94\u8be5\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u9009\u53d6\u7684\u4e07\u7528\u8868\u6b27\u59c6\u6700\u5927\u6863\u8fdb\u884c\u6d4b\u91cf\u3002\u5728\u6d4b\u9a8c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u9009\u62e9\u8fc7\u8f83\u5c0f\u6863\u4f4d\uff0c\u4f46\u662f\uff0c\u5f88\u5feb\u5c31\u4f1a\u51fa\u73b0OL\u663e\u793a\uff0c\u8bf4\u660e\u7535\u5bb9\u7684\u6f0f\u7535\u963b\u975e\u5e38\u5927\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_14","title":"\u6d4b\u8bd5\u8fc7\u7a0b","text":"<ol> <li>\u6253\u5f00\u4e07\u7528\u8868\u5e76\u9009\u62e9\u6700\u5927\u6b27\u59c6\u6863\uff0860M\u03a9\uff09\u6d4b\u91cf\u6a21\u5f0f\uff0c\u5c06\u7ea2\u8272\u8fde\u63a5\u7ebf\u8fde\u7ed3\u5230\u03a9\u6d4b\u91cf\u53e3\uff0c\u9ed1\u8272\u94fe\u63a5COM\u8f93\u5165\u53e3\u3002</li> <li>\u5c06\u7ea2\u8868\u7b14\u63a5\u5728\u7535\u89e3\u7535\u5bb9\u6b63\u7ea7\uff0c\u9ed1\u8868\u7b14\u63a5\u5728\u8d1f\u6781\uff0c\u7b49\u5f85\u7535\u8868\u793a\u6570\u7a33\u5b9a\u4ee5\u540e\uff0c\u8bfb\u51fa\u793a\u6570\u3002</li> <li>\u66f4\u6362\u4e00\u4e2a\u7535\u963b\uff0c\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa42\uff0c\u5f97\u5230\u591a\u4e2a\u7535\u5bb9\u7684\u6f0f\u7535\u7535\u963b\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_15","title":"\u6d4b\u8bd5\u7ed3\u679c\u4e0e\u5206\u6790","text":"\u7535\u5bb9\u91cf/\u6700\u5927\u5de5\u4f5c\u8010\u538b \u6d4b\u8bd5\u7ed3\u679c \u5206\u6790 100\u00b5F/25V \u672a\u77e5\uff0c&gt;8.3M\u03a9 \u7531\u4e8e\u4e07\u7528\u8868\u4e2d\u7684\u963b\u503c\u4e5f\u975e\u5e38\u5927\uff0c\u5145\u7535\u65f6\u95f4\u975e\u5e38\u957f\uff0c\u793a\u6570\u4e00\u76f4\u5728\u589e\u5927\uff0c\u6240\u4ee5\u672a\u77e5\u5b9e\u9645\u6f0f\u7535\u7535\u963b\u4e3a\u591a\u5c11 1000\u00b5F/25V &gt;8.61M\u03a9 \u7b49\u5f85\u7535\u5bb9\u5145\u5b8c\u7535\u540e\uff0c\u4e07\u7528\u8868\u793a\u6570\uff0c\u4fdd\u6301\u7a33\u5b9a\uff0c\u8be5\u5927\u7535\u5bb9\u7684\u793a\u6570\u4e5f\u4e00\u76f4\u5728\u589e\u5927\uff0c\u4f46\u589e\u5927\u901f\u5ea6\u5c0f\u4e8e100\u00b5F\u7684\u7535\u5bb9\uff0c\u6839\u636et=CR\uff0c\u53ef\u4ee5\u731c\u60f3\uff0c\u6240\u9700\u8981\u7684\u5145\u7535\u65f6\u95f4\u66f4\u957f\uff0c\u5145\u7535\u901f\u5ea6\u66f4\u6162\uff0c\u56e0\u6b64\u76f8\u5e94\u7684\u6b27\u59c6\u8868\u793a\u6570\u8df3\u5927\u7684\u901f\u7387\u4e5f\u6bd4\u8f83\u5c0f\u3002"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#-12v","title":"\uff08\u56db\uff09\u8c03\u8282\u7a33\u538b\u7535\u6e90\u8f93\u51fa \uff0b/-12V","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_16","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u6d4b\u8bd5\u7ed3\u679c","text":"<ol> <li>\u6253\u5f00\u76f4\u6d41\u7a33\u538b\u6e90\uff0c\u5207\u6362\u81f3channel2\uff0c\u65cb\u8f6cVoltage\u6309\u94ae\uff0c\u76f4\u81f3\u663e\u793a12V\uff08\u8fd9\u91cc\u8981\u6162\u6162\u5730\u65cb\u8f6c\uff0c\u5426\u5219\u4f1a\u4ee5\u4e3a\u793a\u6570\u5e76\u6ca1\u6709\u53d8\u5316\uff09</li> <li>\u5c06\u4e07\u7528\u8868\u5207\u6362\u81f360V\u7535\u538b\u6863\uff0c\u5c06\u7ea2\u8868\u7b14\u4e0e\u7535\u6e90\u6b63\u6781\u8fde\u63a5\uff0c\u9ed1\u8868\u7b14\u4e0e\u8d1f\u6781\u8fde\u63a5\uff0c\u6309\u8f93\u51fa\u6309\u94ae\uff0c\u6d4b\u5f97\u8bfb\u657012.09V\uff0c\u6b64\u65f6\u7535\u6e90\u7684\u7535\u6d41\u793a\u6570\u81ea\u52a8\u8df3\u4e3a0A</li> <li>\u518d\u6309\u4e00\u6b21\u8f93\u51fa\u6309\u94ae\uff0c\u505c\u6b62\u7535\u6e90\u8f93\u51fa\uff0c\u4ea4\u6362\u7ea2\u9ed1\u8868\u7b14\uff0c\u518d\u6309\u8f93\u51fa\u6309\u94ae\uff0c\u6b64\u65f6\uff0c\u4e07\u7528\u8868\u663e\u793a-12.09V</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_17","title":"\u7ed3\u679c\u5206\u6790","text":"<p>\u60f3\u8981\u8f93\u51fa-12V\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u4ea4\u6362\u6b63\u5e38\u7684\u8f93\u51fa\u65b9\u5f0f\u5373\u53ef</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#2i","title":"\u5b9e\u9a8c2\uff1a\u793a\u6ce2\u5668\u548c\u4fe1\u53f7\u6e90\u7684\u8054\u5408\u4f7f\u7528I","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_18","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u793a\u6ce2\u5668\uff081000 X-Series\uff09</li> <li>\u4fe1\u53f7\u6e90\uff08 SDG2000X\uff09</li> <li>\u8fde\u63a5\u7ebf\uff08\u5305\u542b10:1 \u65e0\u6e90\u63a2\u5934\uff09</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_19","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<ol> <li>\u7528\u673a\u5185\u201c\u63a2\u5934\u8865\u507f\u4fe1\u53f7\u201d \u5bf9\u793a\u6ce2\u5668\u8fdb\u884c\u81ea\u68c0\uff0c\u5e76\u8bb0\u5f55\u6ce2\u5f62\uff0c\u9877\u7387\uff0c\u5468\u671f\uff0c\u5e45\u503c\uff0c\u4e0a\u5347\u4e0b\u964d\u6cbf\u65f6\u95f4\u7b49\u3002</li> <li>\u4fe1\u53f7\u6e90\u8bbe\u7f6e\u6ce2\u5f62\uff0c\u793a\u6ce2\u5668\u8fdb\u884c\u6d4b\u91cf</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_20","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_21","title":"\uff08\u4e00\uff09\u63a2\u5934\u8865\u507f\u4fe1\u53f7\u81ea\u68c0","text":"<ol> <li>\u6253\u5f00\u793a\u6ce2\u5668\u7535\u6e90\uff0c\u5c0610:1\u65e0\u6e90\u63a2\u5934\u8fde\u63a5\u7ebf\u8fde\u63a5\u5728channel1\u7684\u53e3\u548cdemo\u8f93\u51fa\u7aef\u3002</li> <li>\u6309<code>AutoScale</code>\u6309\u94ae\uff0c\u5c06\u6ce2\u5f62\u7a33\u5b9a\u5730\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002</li> <li>\u70b9\u6309<code>Meas</code>\u6309\u94ae\u8fdb\u884c\u6570\u636e\u6d4b\u91cf\u3002</li> </ol> \u6ce2\u5f62 \u9891\u7387 \u5cf0\u5cf0\u503c \u5468\u671f \u4e0a\u5347\u6cbf\u65f6\u95f4 \u4e0b\u964d\u6cbf\u65f6\u95f4 \u65b9\u6ce2 1.0002kHz 2.61V 999.78\u00b5s 1.95\u00b5s 1.95\u00b5s"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_22","title":"\uff08\u4e8c\uff09\u4fe1\u53f7\u6e90\u8bbe\u7f6e\u6ce2\u5f62\uff0c\u793a\u6ce2\u5668\u8fdb\u884c\u6d4b\u91cf","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_23","title":"\u64cd\u4f5c\u8fc7\u7a0b","text":"<ol> <li>\u6253\u5f00\u4fe1\u53f7\u6e90\u548c\u793a\u6ce2\u5668\u7535\u6e90\uff0c\u4f7f\u7528\u8fde\u63a5\u7ebf\u5c06\u4e24\u53f0\u673a\u5668\u76f8\u8fde\u3002\u6211\u4eec\u7ec4\u9009\u62e9\u4f7f\u7528\u4fe1\u53f7\u6e901\u548c\u8f93\u5165\u7aef2\u8fdb\u884c\u5b9e\u9a8c\u3002</li> <li>\u5728\u4fe1\u53f7\u6e90\u5904\u8fdb\u884c\u64cd\u4f5c\uff0c\u9009\u62e9\u6240\u9700\u7684\u4fe1\u53f7\u7c7b\u578b\uff0c\u4f8b\u5982\u6b63\u5f26\u6ce2\u3002</li> <li>\u8c03\u6574\u4fe1\u53f7\u6e90\u7684\u9891\u7387\u548c\u632f\u5e45\uff0c\u4ee5\u4ea7\u751f\u6240\u9700\u7684\u4fe1\u53f7\uff0c\u5e76\u6309<code>output</code>\u6309\u952e\u8f93\u51fa\u4fe1\u53f7\u3002</li> <li>\u4f7f\u7528\u793a\u6ce2\u5668\u89c2\u5bdf\u4fe1\u53f7\u6e90\u4ea7\u751f\u7684\u4fe1\u53f7\u6ce2\u5f62\uff0c\u5229\u7528<code>AutoScale</code>\u6309\u94ae\uff0c\u7b49\u5f85\u793a\u6ce2\u5668\u8c03\u8282\u597d\u6ce2\u5f62\uff0c\u5e76\u5229\u7528<code>Horizontal</code> <code>Vertical</code>\u90e8\u5206\u7684\u65cb\u94ae\uff0c\u5c06\u6ce2\u5f62\u8c03\u81f3\u5408\u9002\u7684\u663e\u793a\u5c3a\u5bf8\uff0c\u5982\u679c\u6ce2\u5f62\u4ecd\u7136\u4e0d\u7a33\u5b9a\uff0c\u8c03\u8282<code>Trigger</code>\u90e8\u5206\u6309\u952e\uff08\u89e6\u53d1\u6a21\u5f0f\u548c\u89e6\u53d1\u7535\u5e73\uff09\u5f97\u5230\u60f3\u8981\u7684\u7a33\u5b9a\u7684\u6ce2\u5f62\u3002</li> <li>\u70b9\u6309<code>Meas</code>\u6309\u94ae\u8fdb\u884c\u6570\u636e\u6d4b\u91cf\u3002</li> <li>\u66f4\u6362\u4fe1\u53f7\u6e90\u4fe1\u53f7\uff0c\u91cd\u65b0\u6d4b\u91cf\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_24","title":"\u6570\u636e\u8bb0\u5f55\u4e0e\u5206\u6790","text":"\u4fe1\u53f7\u6e90\u8f93\u51fa\u7535\u538b\u53ca\u9891\u7387 \u5cf0\u5cf0\u503c \u6709\u6548\u503c \u5468\u671f \u9891\u7387 25kHz \u6b63\u5f26\u6ce2 80mV\uff0c\u504f\u79fb\u91cf 20mV 88mV 28.545mV 39.973us 25.017kHz 1kHz \u65b9\u6ce25V\uff0c\u504f\u79fb\u53e3\uff0c\u5360\u7a7a\u6bd440% 6.03V 2.4837V 1.0000ms 1.0000kHz 2kHz \u952f\u9f7f5V\uff0c\u504f\u79fb1V\uff0c\u5bf9\u79f0\u602720% 5.03V 1.4080V 501.1us 1.9955kHz IkHz\u8109\u51b23V\uff0c\u504f\u79fb1V\uff0c\u5360\u7a7a\u6bd450%\uff0c\u8fb9\u6cbft50ns 3.62V 1.5232V 1.0000ms 1.0000kHz <p>\u53ef\u89c1\uff0c\u4fe1\u53f7\u6e90\u8f93\u51fa\u6709\u4e00\u5b9a\u8bef\u5dee\uff0c\u5f53\u7136\u793a\u6ce2\u5668\u68c0\u6d4b\u4e5f\u6709\u4e00\u5b9a\u7684\u8bef\u5dee\uff0c\u5bfc\u81f4\u6d4b\u91cf\u503c\u4e0e\u6240\u8bbe\u60f3\u4e0d\u540c\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#3ii","title":"\u5b9e\u9a8c3\uff1a\u793a\u6ce2\u5668\u548c\u4fe1\u53f7\u6e90\u7684\u8054\u5408\u4f7f\u7528II","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_25","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u793a\u6ce2\u5668\uff081000 X-Series\uff09</li> <li>\u4fe1\u53f7\u6e90\uff08 SDG2000X\uff09</li> <li>\u8fde\u63a5\u7ebf</li> <li>0.01\u00b5F\u7684\u7535\u5bb9</li> <li>10k\u03a9\u7684\u7535\u963bU~R~</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_26","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<p>\u5b9e\u9a8c\u7535\u8def\u56fe\u5982\u4e0a\u3002\u8c03\u8282\u4fe1\u53f7\u6e90\u4e3a\u6b63\u5f26\u51fd\u6570\uff0c\u5e76\u4e14\u5c06\u4fe1\u53f7\u9891\u7387\u5206\u522b\u8c03\u81f310, 10^2^, 10^3^, 10^4^, 10^5^, 10^6^kHz\uff0c\u5e76\u5c06\u793a\u6ce2\u5668\u63a2\u6d4b\u5934\u4e24\u7aef\u5e76\u8054\u5728\u963b\u503cR\u5904\uff0c\u5229\u7528\u81ea\u5e26\u7684\u6d4b\u8bd5\u5de5\u5177\uff0c\u6d4b\u91cf\u51faU~R~\u7684\u6709\u6548\u503c\uff0c\u5e76\u7ed8\u56fe\uff0c\u5f97\u51fa\u7ed3\u8bba\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_27","title":"\u5b9e\u9a8c\u8fc7\u7a0b","text":"<ol> <li>\u5229\u7528\u8fde\u63a5\u7ebf\u5c06\u7535\u8def\u56fe\u8fde\u63a5\u5b8c\u6bd5\u3002</li> <li>\u8c03\u8282\u9891\u7387\uff0c\u5e76\u6309<code>Output</code>\u6309\u94ae\u3002</li> <li>\u89c2\u5bdf\u793a\u6ce2\u5668\u6ce2\u5f62\uff0c\u4f7f\u7528\u4e0a\u4e00\u4e2a\u5b9e\u9a8c\u4e2d\u7684\u8c03\u8282\u65b9\u6cd5\uff0c\u81f3\u6ce2\u5f62\u7a33\u5b9a\uff0c\u5e76\u6d4b\u91cf\u51fa\u5b9e\u9645\u7684\u6709\u6548\u503c\u5927\u5c0f\u3002</li> <li>\u8c03\u81f3\u4e0d\u540c\u9891\u7387\uff0c\u91cd\u590d\u4e0a\u8ff0\u5b9e\u9a8c\u3002</li> </ol> <p>\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\u53d1\u73b0\uff0c\u5f53\u9891\u7387\u4e3a10Hz\u65f6\uff0c\u793a\u6ce2\u5668\u4e2d\u663e\u793a\u7684\u6ce2\u5f62\u566a\u58f0\u975e\u5e38\u5927\uff08\u5982\u4e0a\u56fe\u663e\u793a\uff09\uff0c\u56e0\u6b64\uff0c\u4f7f\u7528\u4e86trigger\u6309\u952e\u4e2d\uff0c\u964d\u4f4e\u566a\u58f0\u7684\u6309\u94ae\uff0c\u4ece\u800c\u80fd\u591f\u8f83\u597d\u5730\u6d4b\u91cf\u51fa\u6709\u6548\u503c\uff0c\u800c\u975e\u663e\u793a\u5c4f\u6570\u5b57\u4e00\u76f4\u4e0a\u4e0b\u8df3\u52a8\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_28","title":"\u5b9e\u9a8c\u7ed3\u679c","text":"\u9891\u7387\uff08Hz\uff09 10 10^1.5 100 10^2.5 1000 10^3.5 10^4 10^4.5 10^5 10^5.5 10^6 \u7535\u538b\u6709\u6548\u503c\uff08mV\uff09 6.727 20.133 64.68 200.49 543.5 895.9 986.1 990.4 985.8 990.6 1004.1 <p>\u6839\u636e\u4ee5\u4e0a\u6570\u636e\uff0c\u7ed8\u5236\u51fa\u6570\u636e\u56fe</p> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_29","title":"\u7ed3\u8bba","text":"<p>\u7535\u963b\u4e24\u7aef\u7684\u6709\u6548\u503c\u968f\u7740\u4fe1\u53f7\u6e90\u9891\u7387\u7684\u5347\u9ad8\u5148\u662f\u7f13\u6162\u4e0a\u5347\uff0c\u7136\u540e\u572810^2^~10^4^\u533a\u95f4\u5feb\u901f\u4e0a\u5347\uff0c\u6700\u540e\u8d8b\u4e8e\u5e73\u7f13\uff0c\u76f4\u81f3\u8fd1\u4f3c\u4e8e\u7535\u538b\u6e90\u7684\u6709\u6548\u503c\u3002\u4f53\u73b0\u51fa\u7535\u5bb9\u201c\u9694\u76f4\u6d41\uff0c\u901a\u4ea4\u6d41\u201d\u6216\u8005\u201c\u901a\u9ad8\u9891\uff0c\u963b\u4f4e\u9891\u201d\u7684\u7279\u6027\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_30","title":"\u63a2\u7a76\u6027\u5b9e\u9a8c\uff1a\u4e07\u7528\u8868\u7535\u6d41\u6863","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_31","title":"\u5b9e\u9a8c\u76ee\u7684","text":"<p>\u63a2\u7a76\u4e07\u7528\u8868\u7535\u6d41\u6863\uff08\u4ee56mA\u548c60mA\u4e3a\u4f8b\uff09\u5185\u90e8\u963b\u503c\u5bf9\u6d4b\u91cf\u7ed3\u679c\u7684\u5f71\u54cd\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_32","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u4e07\u7528\u8868\uff08HY63\uff09</li> <li>ADCL-I\u6a21\u62df\u6570\u5b57\u7535\u5b50\u6280\u672f\u5b9e\u9a8c\u7bb1\u4e2d\u7684\u70b9\u7535\u963b\u3001\u7535\u4f4d\u5668</li> <li>\u76f4\u6d41\u7a33\u538b\u7535\u6e90</li> <li>\u8fde\u63a5\u7ebf</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_33","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<ol> <li>\u89c2\u5bdf\u4e0d\u540c\u7535\u6d41\u6863\u6863\u4f4d\u6d4b\u7535\u6d41\u65f6\u7684\u793a\u6570\uff0c\u4ece\u800c\u5b9a\u6027\u5730\u63a2\u7a76\u7535\u6d41\u6863\u5185\u90e8\u7684\u963b\u503c\u5927\u5c0f\u5206\u6790\u3002</li> <li>\u4f7f\u7528\u534a\u504f\u6cd5\u4f30\u6d4b\u7535\u6d41\u6863\u5185\u90e8\u7684\u963b\u503c\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_34","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_35","title":"\uff08\u4e00\uff09\u63a2\u7a76\u4e0d\u540c\u7535\u6d41\u6863\u5bf9\u771f\u503c\u7684\u5f71\u54cd","text":"<ol> <li>\u9009\u62e9\u7535\u963b\u963b\u503c\u4e3a2k\u03a9\uff0c\u6309\u7167\u5982\u4e0b\u7535\u8def\u56fe\u8fdb\u884c\u8fde\u63a5\u3002</li> <li>\u8c03\u8282\u7535\u6e90\u7535\u538b\u4e3a6.00V\u3002</li> <li>\u5206\u522b\u4f7f\u7528\u4e07\u7528\u8868\u76846mA\u548c60mA\u6863\u6d4b\u91cf\u7535\u8def\u4e2d\u7684\u7535\u6d41\u5927\u5c0f\u3002</li> </ol> <p>\u7ed3\u679c\u5982\u4e0b\uff1a</p> \u7535\u6d41\u8868\u6863\u4f4d 6mA 60mA \u5dee \u4e07\u7528\u8868\u793a\u6570 2.862mA 2.98mA 0.118mA \\(R_\u603b=\\dfrac{U}{I}\\)\uff0c\u7535\u8def\u5185\u7535\u963b\u548c 2096.4\u03a9 2013.4\u03a9 83\u03a9 \u4f30\u7b97\u5f97\\(R_A=R_\u603b-R\\) 96.4\u03a9 13.4\u03a9 83\u03a9 <p>\u53ef\u4ee5\u770b\u5230\uff0c\u7535\u6d41\u6863\u4e24\u6863\u7684\u6d4b\u91cf\u76f8\u5dee\u4e860.118mA\u3002\u6240\u4ee5\uff0c\u5982\u679c\u60f3\u5229\u7528\u4f0f\u5b89\u6cd5\u6d4b\u91cf\u7535\u963b\u963b\u503c\uff0c\u5f97\u5230\u7684\u7535\u963b\u503c\u5c06\u76f8\u5dee83\u03a9\uff0c\u6240\u4ee5\u7535\u6d41\u8868\u5185\u963b\u5bf9\u6d4b\u91cf\u6709\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_36","title":"\uff08\u4e8c\uff09\u5229\u7528\u534a\u504f\u6cd5\u6d4b\u91cf\u7535\u6d41\u8868\u5185\u963b","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_37","title":"\u5b9e\u9a8c\u8fc7\u7a0b","text":"<ol> <li>\u5c06\u7535\u8def\u8fde\u63a5\u6210\u4e0b\u56fe\u6240\u793a\u3002\u6839\u636e\u4e00\u5b9a\u7684\u4f30\u6d4b\uff0c\u6211\u4eec\u9009\u62e9\u4f7f\u752820V\u7535\u6e90\u548c\u6700\u5927\u963b\u503c\u4e3a1k\u03a9\u7684\u7535\u4f4d\u5668\u3002</li> <li>\u5148\u5c0660mA\u6863\u7535\u6d41\u8868\u4e32\u5165\u7535\u8def\uff0c\u65ad\u5f00S~2~\u5f00\u5173\uff0c\u95ed\u5408S~1~\u5f00\u5173\uff0c\u8c03\u8282R~H~\u963b\u503c\uff0c\u76f4\u81f3\u7535\u6d41\u8868\u663e\u793a50mA\uff0860mA\u662f\u6700\u5927\u91cf\u7a0b\uff0c\u4f46\u662f\u7531\u4e8e\u662f\u6570\u5b57\u7535\u6d41\u8868\uff0c\u5f88\u5bb9\u6613\u663e\u793aOL\uff0c\u6240\u4ee5\u9009\u62e950mA\uff09</li> <li>\u518d\u95ed\u5408S~2~\u5f00\u5173\uff0c\u7136\u540e\u4fdd\u8bc1R~H~\u963b\u503c\u4e0d\u53d1\u751f\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u8c03\u8282R~B~\u7684\u963b\u503c\uff0c\u76f4\u5230\u7535\u6d41\u8868\u663e\u793a25mA\u3002</li> <li>\u65ad\u5f00\u7535\u8def\uff0c\u7531\u4e8eR~B~\u4e0d\u80fd\u663e\u793a\u7535\u963b\uff0c\u6240\u4ee5\u4f7f\u7528\u4e86\u4e07\u7528\u8868\u6b27\u59c6\u6863\u6d4b\u91cf\u5176\u7535\u963b\uff0c\u5f97\u5230\u7ed3\u679c\u5373\u53ef\u8fd1\u4f3c\u4e3a\u7535\u6d41\u8868\u5185\u963b\u3002</li> <li>\u5c06\u7535\u6d41\u8868\u6863\u4f4d\u8c03\u4e3a6mA\uff0c\u91cd\u590d2\uff5e4\u6b65\uff0c\u5176\u4e2d\u7b2c2\u6b65\u4e2d\u7535\u6d41\u8868\u663e\u793a\u6539\u4e3a6mA\uff08\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b06mA\u53ef\u4ee5\u8c03\u5230\u6240\u4ee5\u6ca1\u6709\u8003\u8651\u51cf\u5c0f\uff09\uff0c\u7b2c3\u6b65\u6539\u4e3a3mA\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_38","title":"\u5b9e\u9a8c\u7ed3\u679c","text":"\u7535\u6d41\u8868\u6863\u4f4d 6mA 60mA \u963b\u503c 99.8\u03a9 11.2\u03a9"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_39","title":"\u5b9e\u9a8c\u8bef\u5dee\u5206\u6790","text":"<p>\u8be5\u65b9\u6cd5\u5b58\u5728\u7cfb\u7edf\u8bef\u5dee\uff0c\u5e76\u4e0d\u80fd\u5f88\u51c6\u786e\u5730\u4ee3\u8868\u7535\u6d41\u8868\u7684\u963b\u503c\uff0c\u4f46\u662f\u7ecf\u8fc7\u4e00\u5b9a\u6539\u8fdb\u7684\u65b9\u6cd5\uff0c\u4f7f\u5f97\u6d4b\u91cf\u503c\u975e\u5e38\u63a5\u8fd1\u4e8e\u771f\u5b9e\u963b\u503c\uff0c\u539f\u7406\u5982\u4e0b\uff1a</p> \\[ I_1=\\dfrac{E}{R_H+R_A}\\\\ I_{2}=\\dfrac{E}{R_H+\\dfrac{R_AR_B}{R_A+R_B}} \\] <p>\u6211\u4eec\u5728\u4f7f\u7528\u534a\u504f\u6cd5\u7684\u65f6\u5019\uff0c\u5047\u5b9a\u6574\u4f53\u7535\u6d41\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u7531\u4e8e\u65b0\u7535\u963b\u7684\u5e76\u8054\uff0c\u7535\u8def\u4e2d\u7684\u603b\u963b\u503c\u53d8\u5c0f\uff0c\u5916\u90e8\u7535\u6d41\\(I\\)\u53d8\u5927\u3002\u5982\u679c\u60f3\u8981\\(R_B\\)\u7684\u963b\u503c\u7b49\u540c\u4e8e\\(R_A\\)\uff0c\u90a3\u4e48\u4e07\u7528\u8868\u6240\u663e\u793a\u7684\u7535\u6d41\u5e94\u8be5\u8981\u66f4\u5927\uff08\\(I_A=I_B=\\dfrac{1}{2}I_2\\)\uff09\u3002\u7136\u800c\u5b9e\u9645\u4e0a\uff0c\\(I_A\\)\u7684\u7535\u6d41\u4ecd\u7136\u4e3a \\(\\dfrac{1}{2}I_1&lt;\\dfrac{1}{2}I_2\\)\uff0c\u56e0\u6b64\uff0c\u7ecf\u8fc7\\(R_B\\)\u7684\u7535\u6d41\u5927\u4e8e\\(R_A\\)\uff0c\\(R_B&lt;R_A\\)\uff0c\u6d4b\u91cf\u503c\u5c0f\u4e8e\u771f\u5b9e\u503c\u3002</p> <p>\u4f46\u662f\u518d\u5206\u6790\uff0c</p> <p>\u60c5\u51b51: </p> \\[ (R_A+R_H)\\cdot{I_1}=E \\] <p>\u60c5\u51b52: </p> \\[ \\dfrac{1}{2}I_1\\cdot{R_A}+R_H\\cdot(\\dfrac{1}{2}I_1+I_B)=E \\] <p>\u53ef\u4ee5\u5217\u51fa\u65b9\u7a0b</p> \\[ \\begin{cases} (R_A+R_H)\\cdot{I_1}=E\\\\ \\dfrac{1}{2}I_1\\cdot{R_A}+R_H\\cdot(\\dfrac{1}{2}I_1+I_B)=E \\end{cases}          \\] <p>\u89e3\u5f97\uff0c</p> \\[ \\begin{cases} I_B=\\dfrac{E\\cdot\\dfrac{1}{2}I_1}{E-IR}\\\\ R_B=R_A-\\dfrac{I_1\\cdot{R_A^2}}{E}=\\dfrac{1}{1+\\dfrac{R_A}{R_H}}\\cdot{R_A} \\end{cases} \\] <p>\u6839\u636e\uff085\uff09\u4e2d\u76842\u5f0f\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\\(R_A&lt;&lt;R_H\\)\u65f6\uff0c\\(R_B\u2248R_A\\)\u3002</p> <p>\u6240\u4ee5\uff0c\u5728\u5df2\u7ecf\u786e\u5b9a\u7535\u6d41\u8868\u963b\u503c\u548c\u7535\u6d41\u7684\u60c5\u51b5\u4e0b\uff0c\u6269\u5927\\(R_H\\)\u7684\u963b\u503c\u663e\u5f97\u975e\u5e38\u5fc5\u8981\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6269\u5927\u7535\u538b\u6e90\u7535\u538b\u7684\u65b9\u6cd5\uff0c\u6765\u589e\u5927</p> <p>\\(R_H\\)\u7684\u963b\u503c\uff0c\u6240\u4ee5\u7535\u538b\u6e90\u9009\u62e9\u4e8620V\u3002</p> <p>\u4ee560mA\u4e3a\u4f8b\uff0c\u5206\u6790\u5176\u4e2d\u8bef\u5dee\uff1a $$ R_A=\\dfrac{R_B\\cdot{R_H}}{R_H-R_B}\\ \u76f8\u5bf9\u8bef\u5dee\uff1a 1-\\dfrac{R_B}{R_A}=\\dfrac{R_B}{R_H}\u22482.88\\% $$ \u7531\u4e8e\u7ea6\u4e3a10\u03a9\u5de6\u53f3\uff0c\u6240\u4ee5\u76f8\u5dee0.3\u03a9\u5de6\u53f3\u7684\u963b\u503c\uff0c\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\u3002</p> <p>\u800c6mA\u7684\u8bef\u5dee\u53ea\u4f1a\u66f4\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u9009\u7528\u534a\u504f\u6cd5\u8fdb\u884c\u6d4b\u91cf\u3002</p> <p>\u6700\u540e\u6211\u4eec\u53d1\u73b0\uff0c60mA\u6863\u76846mA\u6863\u5185\u90e8\u7684\u963b\u503c\u76f8\u5dee\u5341\u500d\u3002\u56e0\u6b64\u5728\u5e73\u65f6\u9009\u7528\u5408\u7406\u6863\u4f4d\u6d4b\u91cf\u7535\u8def\u4e2d\u7684\u7535\u6d41\u65f6\u5e94\u8be5\u59a5\u5584\u9009\u62e9\u91cf\u7a0b\u3002</p> <p>\u7ed3\u5408\u7535\u6d41\u8868\u7684\u7ec4\u88c5\uff0c\u5373\u5c06\u4e00\u4e2a\u5fae\u5c0f\u7535\u6d41\u8868\u548c\u5206\u6d41\u7535\u963b\u5e76\u8fde\u7684\u7ed3\u6784\u53ef\u77e5\uff0c\u91cf\u7a0b\u8d8a\u5927\u76f8\u5bf9\u5e94\u7684\u963b\u503c\u8d8a\u5c0f\u3002</p> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_40","title":"\u793a\u6ce2\u5668\u663e\u793a\u674e\u8428\u5982\u56fe\u50cf","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_41","title":"\u5b9e\u9a8c\u76ee\u7684","text":"<p>\u5b66\u4f1a\u5229\u7528\u793a\u6ce2\u5668\u4e0a\u7684<code>Acquire</code>\u952e\uff0c\u8c03\u8282\u51fa\u4e24\u4e2a\u4fe1\u53f7\u6e90\u5408\u5e76\u4e4b\u540e\u7684\u674e\u8428\u5982\u56fe\u50cf\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_42","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u793a\u6ce2\u5668</li> <li>\u4fe1\u53f7\u6e90</li> <li>\u8fde\u63a5\u7ebf</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_43","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u548c\u7ed3\u679c","text":"<ol> <li>\u6253\u5f00\u4fe1\u53f7\u6e90\u548c\u793a\u6ce2\u5668\uff0c\u5e76\u7528\u8fde\u63a5\u7ebf\u5c06\u4e24\u53f0\u673a\u5668\u76f8\u8fde\uff08\u672c\u7ec4\u91c7\u7528Channel1\u5bf9Channel1\uff0cChannel2\u5bf9Channel2\uff09\u3002</li> <li>\u7136\u540e\u8c03\u5236\u4fe1\u53f7\u6e90\u8f93\u51fa\u6ce2\u5f62\u5747\u4e3a1kHz\u7684\u6b63\u5f26\u6ce2\uff0c\u7136\u540e\u70b9\u6309\u8f93\u51fa\u952e\u3002</li> <li>\u6309\u793a\u6ce2\u5668\u4e2d\u7684<code>AutoScale</code>\u6309\u94ae\uff0c\u7136\u540e\u53d1\u73b0\u4e24\u5217\u6ce2\u7a33\u5b9a\u5730\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002</li> </ol> <ol> <li>\u70b9\u6309<code>Acquire</code>\u6309\u94ae\uff0c\u7136\u540e\u5c06\u65f6\u95f4\u6a21\u5f0f\u8c03\u4e3aXY\u663e\u793a\uff0c\u968f\u540e\uff0c\u53d1\u73b0\u793a\u6ce2\u5668\u754c\u9762\u5e76\u6ca1\u6709\u53d8\u6210\u9884\u60f3\u7684\u76f4\u7ebf\uff0c\u540e\u610f\u8bc6\u5230\uff0c\u8f93\u51fa\u7684\u6ce2\u5f62\u5e76\u6ca1\u6709\u540c\u76f8\u4f4d\uff0c\u56e0\u6b64\u53ea\u8981\u5728\u4fe1\u53f7\u6e90\u4e2d\u70b9\u6309<code>\u540c\u76f8\u4f4d</code>\u5373\u53ef\u3002</li> <li>\u8c03\u5236\u4e0d\u540c\u76f8\u4f4d\u5dee\u53ca\u9891\u7387\u4e4b\u6bd4\u7684\u6ce2\u5f62\uff0c\u91cd\u590d2\uff5e3\u6b65\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab1/Lab1%20%E5%B8%B8%E7%94%A8%E4%BB%AA%E5%99%A8%E4%BD%BF%E7%94%A8%E7%BB%83%E4%B9%A0%E5%AE%9E%E9%AA%8C/#_44","title":"\u5b9e\u9a8c\u7ed3\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/","title":"Lab 2","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_1","title":"\u534a\u5bfc\u4f53\u2f06\u6781\u7ba1\u7279\u6027\u6d4b\u8bd5","text":"<p>\u5b9e\u9a8c\u65e5\u671f\uff1a2023/9/26</p> <p>\u5730\u70b9\uff1a\u4e1c3-406</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_2","title":"\u5b9e\u9a8c\u76ee\u7684","text":"<ol> <li>\u638c\u63e1\u534a\u5bfc\u4f53\u2f06\u6781\u7ba1\u7279\u6027\u6d4b\u8bd5</li> <li>\u5b66\u4e60MULTISIM\u7535\u8def\u4eff\u771f\u8f6f\u4ef6\u7684\u4f7f\u2f64</li> <li>\u8fdb\u2f00\u6b65\u719f\u6089\u7535\u2f26\u4eea\u5668\u7684\u4f7f\u2f64</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_3","title":"\u57fa\u672c\u5b9e\u9a8c\u5185\u5bb9","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_4","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u4e07\u7528\u8868\uff08HY63\uff09</li> <li>ADCL-I\u6a21\u62df\u6570\u5b57\u7535\u5b50\u6280\u672f\u5b9e\u9a8c\u7bb1\u4e2d\u7684\u534a\u5bfc\u4f53\u4e8c\u6781\u7ba1\u30101N4007\u7684\u6574\u6d41\u4e8c\u6781\u7ba1\uff0c5V/1W\u7684\u7a33\u538b\u4e8c\u6781\u7ba1\u3011</li> <li>\u8fde\u63a5\u7ebf</li> <li>\u793a\u6ce2\u5668\uff081000 X-Series\uff09</li> <li>\u4fe1\u53f7\u6e90\uff08 SDG2000X\uff09</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_5","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<p>\u672c\u5b9e\u9a8c\u9996\u5148\u638c\u63e1\u5224\u65ad\u4e8c\u6781\u7ba1\u597d\u574f\u7684\u65b9\u6cd5\u3002\u63a5\u7740\u91c7\u7528\u4e09\u79cd\u65b9\u6cd5\u7ed8\u5236\u4e8c\u6781\u7ba1VA\u7279\u6027\u66f2\u7ebf\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u2f64\u4e07\u2f64\u8868\u7c97\u7565\u5224\u522b\u2f06\u6781\u7ba1\u597d\u574f\u3002</p> </li> <li> <p>\u91c7\u2f64\u9010\u70b9\u6d4b\u91cf\u6cd5\u6d4b\u91cf\u2f06\u6781\u7ba1\u7684VA\u7279\u6027\u3002</p> </li> <li> <p>\u91c7\u2f64\u626b\u63cf\u6d4b\u91cf\u6cd5\u6d4b\u91cf\u2f06\u6781\u7ba1\u7684VA\u7279\u6027\uff0c\u5e76\u53cc\u8e2a\u89c2\u5bdf\u4fe1\u53f7\u6e90\u4e0e\u2f06\u6781\u7ba1\u4e24\u7aef\u7535\u538b\uff08\u6ce8\u610f\u5176\u51fb\u7a7f\u503c\uff09\u3002</p> </li> </ol> <p>\u91c7\u2f64\u626b\u63cf\u6d4b\u91cf\u6cd5\u6d4b\u91cf\u7a33\u538b\u7ba1\u7684VA\u7279\u6027\uff0c\u5e76\u53cc\u8e2a\u89c2\u5bdf\u4fe1\u53f7\u6e90\u4e0e\u2f06\u6781\u7ba1\u4e24\u7aef\u7535\u538b\uff08\u6ce8\u610f\u5176\u51fb\u7a7f\u503c\uff09\u3002</p> <ol> <li>\u5e94\u2f64MULTISIM\u8f6f\u4ef6\u4eff\u771f\u2f06\u6781\u7ba1\u7684VA\u7279\u6027\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_6","title":"\u5b9e\u9a8c\u4e00\uff1a\u5e94\u2f64\u4e07\u2f64\u8868\u521d\u6b65\u6d4b\u8bd5\u2f06\u6781\u7ba1\u7684\u597d\u574f","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_7","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u8ba4\u8bc6\u4e07\u7528\u8868\u6d4b\u91cf\u4e8c\u6781\u7ba1\u6863</li> </ol> <ol> <li> <p>\u5c06\u9ed1\u8868\u7b14\u63d2\u5165<code>COM</code>\u53e3\uff0c\u7ea2\u8868\u7b14\u63d2\u5165\u4e8c\u6781\u7ba1\u6d4b\u8bd5\u5bf9\u5e94\u4e8c\u6781\u7ba1\u6d4b\u8bd5\u63d2\u53e3\uff0c\u5e76\u5c06\u6863\u4f4d\u8c03\u81f3\u4e8c\u6781\u7ba1\u6d4b\u91cf\u6863\u4f4d\u3002\u7531\u4e8e\u8702\u9e23\u5668\u6863\u4f4d\u548c\u4e8c\u6781\u7ba1\u662f\u540c\u4e00\u6863\u4f4d\uff0c\u70b9\u6309\u5de6\u4e0a\u89d2<code>Select</code>\u6309\u94ae\uff0c\u5207\u6362\u81f3\u4e8c\u6781\u7ba1\u6863\u4f4d\u3002</p> </li> <li> <p>\u5c06\u4e07\u7528\u8868\u7ea2\u8868\u7b14\u63a5\u51651N4007\u6b63\u7ea7\uff0c\u9ed1\u8272\u63a5\u8d1f\u6781\uff0c\u6b64\u65f6\u4e07\u7528\u8868\u663e\u793a\u4e8c\u6781\u7ba1\u5bfc\u901a\u7535\u538b\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6d4b\u5f971N4007\u7684\u6b63\u5411\u5bfc\u901a\u7535\u538b\u7ea6\u4e3a0.568V\u3002</p> </li> </ol> <p></p> <ol> <li>\u5c06\u7ea2\u9ed1\u8868\u7b14\u4ea4\u6362\uff0c\u6d4b\u91cf\u65b9\u5411\u7535\u538b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u663e\u793aOL\uff0c\u8d85\u51fa\u91cf\u7a0b\u3002</li> </ol> <p></p> <ol> <li>\u5229\u7528\u76f8\u540c\u65b9\u6cd5\u6d4b\u91cf\u7a33\u538b\u4e8c\u6781\u7ba1\uff0c\u5f97\u5230\u76f8\u4f3c\u7ed3\u679c</li> </ol> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_8","title":"\u7ed3\u679c\u5206\u6790","text":"<p>\u9996\u5148\u901a\u8fc7\u4e07\u7528\u8868\u53ef\u4ee5\u5f88\u597d\u5730\u5bf9\u4e8c\u6781\u7ba1\u8fdb\u884c\u68c0\u6d4b\uff0c\u5982\u68c0\u9a8c\u5176\u662f\u5426\u88ab\u51fb\u7a7f\u3002\u540c\u65f6\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u540c\u6837\u7684\u6d4b\u91cf\u6761\u4ef6\u4e0b\uff0c\u7a33\u538b\u4e8c\u6781\u7ba1\u6bd4\u6574\u6d41\u4e8c\u6781\u7ba1\u6b63\u5411\u5bfc\u901a\u7535\u538b\u8981\u9ad8\u3002\u53ef\u4ee5\u4e0e\u8bfe\u4e0a\u6240\u7ed9\u7684VA\u7279\u6027\u66f2\u7ebf\u76f8\u8054\u7cfb\uff0c\u4e07\u7528\u8868\u6240\u63d0\u4f9b\u7684\u7535\u538b\u4e3a\u4e09\u4f0f\uff0c\u7a33\u538b\u4e8c\u6781\u7ba1\u5bfc\u901a\u540e\uff0c\u7535\u538b\u5c06\u4fdd\u63010.7V\u5de6\u53f3\uff0c\u800c\u6574\u6d41\u4e8c\u6781\u7ba1\u7684\u66f2\u7ebf\u7c7b\u4f3c\u4e8e\u5927\u7535\u963b\uff0c\u56e0\u800c\u4e07\u7528\u8868\u663e\u793a\u7684\u7535\u538b\u503c\u57280.568V\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#va","title":"\u5b9e\u9a8c\u4e8c\uff1a\u9010\u70b9\u6cd5\u6d4b\u91cf\u4e8c\u6781\u7ba1VA\u7279\u6027\u66f2\u7ebf","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_9","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<p>\u91c7\u7528\u4ee5\u4e0b\u7535\u8def\uff0c\u5229\u7528\u6b27\u59c6\u5b9a\u5f8b\u5bf9\u4e8c\u6781\u7ba1\u5728\u6bcf\u4e00\u70b9\u7535\u538b\u4e0b\u7684\u963b\u503c\u8fdb\u884c\u6d4b\u91cf\u3002\u6700\u540e\u5229\u7528excel\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u7ed8\u5236\u66f2\u7ebf\u3002</p> <p></p> <p>\u7531\u4e8e\u4e07\u7528\u8868\u7684\u5b89\u57f9\u8868\u963b\u503c\u5728\u8be5\u6d4b\u8bd5\u6761\u4ef6\u4e0b\uff08mA\u7ea7\u522b\uff09\uff0c\u89c6\u4e3a\u77ed\u8def\uff1b\u800c\u76f8\u53cd\uff0c\u7535\u538b\u8868\u7684\u963b\u503c\u8db3\u591f\u5927\uff0c\u53ef\u4ee5\u89c6\u4e3a\u5f00\u8def\uff0c\u6240\u4ee5\u5b9e\u9a8c\u4e2d\u53ea\u4f7f\u7528\u7535\u538b\u8868\u6765\u8fdb\u884c\u6d4b\u91cf\uff0c\u5c06\u7535\u538b\u8868\u5e76\u8054\u5728R~1~\u4e24\u7aef\u3002\u5e76\u4e14\u5229\u7528\u7535\u538b\u6e90\u7684\u793a\u6570\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u4e8c\u6781\u7ba1\u4e24\u7aef\u7535\u538b\u4e0e\u7535\u6d41\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_10","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u8fde\u63a5\u7535\u8def\uff0c\u5e76\u5c06\u7535\u538b\u6e90\u8f93\u51fa\u503c\u8c03\u4e3a0\u3002</li> </ol> <ol> <li> <p>\u5c06\u4e07\u7528\u8868\u5e76\u8054\u5728\u7535\u963b\u4e24\u7aef\uff0c\u6d4b\u5f97\u7535\u538b\u793a\u6570\u3002\u5c06\u6b64\u793a\u6570\u548c\u7535\u538b\u6e90\u793a\u6570\uff0c\u4e00\u8d77\u8bb0\u5f55\u5230excel\u8868\u683c\u4e2d\u3002</p> </li> <li> <p>\u9010\u6e10\u589e\u5927\u7535\u538b\u6e90\u8f93\u51fa\u7535\u538b\uff0c\u5e76\u91cd\u590d\u6b65\u9aa42\u3002</p> </li> <li> <p>\u4f7f\u7528excel\u5904\u7406\u6570\u636e\uff0c\u5e76\u4e14\u7ed8\u5236\u66f2\u7ebf\uff0c\u5728\u53d8\u5316\u8f83\u4e3a\u5267\u70c8\u5904\uff0c\u589e\u52a0\u591a\u7ec4\u6570\u636e\u6d4b\u91cf\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u4e3a\u5149\u6ed1\u3001\u51c6\u786e\u7684\u66f2\u7ebf\u3002</p> </li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_11","title":"\u6570\u636e\u5904\u7406\u4e0e\u5206\u6790","text":"\u7535\u538b\u6e90\u8f93\u51fa\u7535\u538b\uff08V\uff09 R1\u4e24\u7aef\u7535\u538b\uff08V\uff09 \u4e8c\u6781\u7ba1\u4e24\u7aef\u7535\u538b\uff08=A#-B#\uff09 \u7535\u6d41\uff08=B#/1000\uff09 0 0 0 0 0.3 0.0014 0.2986 0.0000014 0.403 0.0134 0.3896 0.0000134 0.452 0.0302 0.4218 0.0000302 0.502 0.0554 0.4466 0.0000554 0.55 0.085 0.465 0.000085 0.602 0.1209 0.4811 0.0001209 0.703 0.1979 0.5051 0.0001979 0.803 0.281 0.522 0.000281 0.903 0.3678 0.5352 0.0003678 1.102 0.5481 0.5539 0.0005481 1.202 0.645 0.557 0.000645 1.3 0.739 0.561 0.000739 1.551 0.976 0.575 0.000976 1.751 1.169 0.582 0.001169 1.851 1.265 0.586 0.001265 1.951 1.362 0.589 0.001362 2.151 1.557 0.594 0.001557 2.451 1.851 0.6 0.001851 2.751 2.147 0.604 0.002147 2.951 2.344 0.607 0.002344 3.551 2.938 0.613 0.002938 4.551 3.931 0.62 0.003931 5.551 4.928 0.623 0.004928 7.65 7.02 0.63 0.00702 9.55 8.92 0.63 0.00892 11.049 10.42 0.629 0.01042"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#va_1","title":"\u5b9e\u9a8c\u4e09\uff1a\u626b\u63cf\u6cd5\u6d4b\u91cf\u4e8c\u6781\u7ba1VA\u7279\u6027\u66f2\u7ebf","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_12","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<ol> <li>\u5c06\u7535\u8def\u8fde\u63a5\u6210\u4e0b\u56fe\u6240\u793a\u3002\u7531\u4e8e\u4fe1\u53f7\u6e90\u4e0e\u793a\u6ce2\u5668\u7684\u63a5\u5730\u8bbe\u7f6e\uff0c\u88c5\u7f6e\u53ea\u80fd\u8bbe\u7f6e\u4e3a\u5982\u56fe\u6240\u793a\uff0c\u6240\u6709\u7684\u63a5\u5730\u7ebf\u5e94\u8be5\u8fde\u63a5\u5728\u4e00\u8d77\u3002</li> <li> <p>\u5e76\u5c06\u4fe1\u53f7\u6e90\u8bbe\u7f6e\u4e3a1kHz\uff0c10Vp\u7684\u952f\u9f7f\u6ce2\u3002\u901a\u8fc7\u4fe1\u53f7\u6e90\u7684XY\u663e\u793a\uff0c\u5c55\u793aVA\u7279\u6027\u66f2\u7ebf\u76f4\u89c2\u6837\u5f0f\u3002\u7531\u4e8e\\(U_{diode}=U_{ch1}-U_{ch2},I_{diode}=\\dfrac{U_{ch1}}{51\u03a9}\\)\uff0c\u56e0\u6b64\uff0cXY\u66f2\u7ebf\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53cd\u6620\u4e86\u6700\u7ec8\u7ed3\u679c\u7684\u56fe\u7ebf\u3002</p> </li> <li> <p>\u540e\u901a\u8fc7matlab\u7b49\u6570\u636e\u5904\u7406\uff0c\u751f\u6210\u6b63\u786e\u7684\u66f2\u7ebf\u3002</p> </li> </ol> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_13","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li> <p>\u8fde\u63a5\u7535\u8def\uff08\u4e8c\u6781\u7ba1\u9009\u62e91N4007\u6574\u6d41\u4e8c\u6781\u7ba1\uff0c\u7535\u963b\u9009\u62e951\u03a9\uff09\uff0c\u8c03\u8282\u4fe1\u53f7\u6e90\u3001\u793a\u6ce2\u5668\uff0c\u89c2\u5bdf\u56fe\u6837\u3002</p> </li> <li> <p>\u5229\u7528\u793a\u6ce2\u5668\u7684USB\u63a5\u53e3\uff0c\u5c06\u56fe\u6837\u4fe1\u606f\u548c\u6570\u636e\u4fdd\u5b58\u3002</p> </li> <li> <p>\u5229\u7528Matlab\u5904\u7406\u4fe1\u606f\uff0c\u751f\u6210\u56fe\u50cf\u3002</p> </li> </ol> <p>Matlab\u4ee3\u7801\u5982\u4e0b\uff1a</p> Matlab<pre><code>% \u8bfb\u53d6\u6570\u636e\ndata = readmatrix('./Lab2/\u6570\u636e/111.csv');\n\n% \u83b7\u53d6vd\u548cid\u5217\nv1 = data(:, 2);\nv2= data(:, 3);\nvd=v1-v2;\nid=v2/51*1000;\nplot(vd, id);\n\n%\u751f\u6210\u5e73\u6ed1\u66f2\u7ebf\nsmoothed_vd = smooth(vd, 0.1, 'loess'); \nsmoothed_id = smooth(id, 0.1, 'loess');\nhold on;\nplot(smoothed_vd, smoothed_id, 'b-', 'LineWidth', 0.2);\nlegend('\u539f\u59cb\u6570\u636e', '\u5149\u6ed1\u66f2\u7ebf');\nxlabel('\u7535\u538b\uff08V\uff09');\nylabel('\u7535\u6d41\uff08mA\uff09');\nlegend('\u5b9e\u9a8c\u6570\u636e','VA\u7279\u6027\u66f2\u7ebf');\n</code></pre> <ol> <li>\u5c06\u4e8c\u6781\u7ba1\u66f4\u6362\u4e3a\u7a33\u538b\u4e8c\u6781\u7ba1\uff0c\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_14","title":"\u7ed3\u679c\u5206\u6790","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_15","title":"\u6574\u6d41\u4e8c\u6781\u7ba1","text":"<p>\u89c2\u5bdf\u5230\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6b8a\u7684\u5730\u65b9\uff1a</p> <ol> <li> <p>\u622a\u6b62\u65f6\uff0c\u7535\u6d41\u4e0d\u5b8c\u5168\u4e3a0\uff0c\u7531\u4e8eR~1~\u4e24\u7aef\u5b58\u5728\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u7535\u538b\uff0c\u8be5\u66f2\u7ebf\u5728\u622a\u6b62\u90e8\u5206\u7684\u7535\u6d41\u4e0d\u4e3a0\u3002</p> </li> <li> <p>\u8be5\u66f2\u7ebf\u5728\u5bfc\u901a\u4e0e\u622a\u6b62\u90e8\u5206\uff0c\u5b58\u5728\u4e24\u6761\u66f2\u7ebf\uff0c\u4e0a\u9762\u90a3\u6761\u66f2\u7ebf\u4e00\u822c\u8ba4\u4e3a\u662f\u7406\u60f3\u60c5\u51b5\u4e0b\u7684VA\u7279\u6027\u66f2\u7ebf\u3002\u800c\u4e0b\u9762\u90a3\u6761\u66f2\u7ebf\u8bf4\u660e\uff0c\u4e8c\u6781\u7ba1\u5b58\u5728\u4e00\u4e2a\u53cd\u5411\u7684\u7535\u6d41\u3002\u518d\u7ecf\u8fc7\u6570\u636e\u5206\u6790\u53ef\u77e5\uff0c\u5728\u622a\u6b62\u4e0e\u5bfc\u901a\u90e8\u5206\uff0c\u5f53\u4e8c\u6781\u7ba1\u4e24\u7aef\u7535\u538b\u9010\u6e10\u589e\u5927\u65f6\uff0c\u5373\u7531\u622a\u6b62\u5207\u6362\u5230\u5bfc\u901a\u6a21\u5f0f\u65f6\uff0c\u7535\u6d41\u589e\u5927\uff1b\u800c\u5f53\u7535\u538b\u51cf\u5c0f\u65f6\uff0c\u5373\u7531\u5bfc\u901a\u5207\u6362\u4e3a\u622a\u6b62\u6a21\u5f0f\u65f6\uff0c\u5b58\u5728\u4e00\u4e2a\u53cd\u5411\u7535\u6d41\u3002\u540e\u7ecf\u8fc7\u8d44\u6599\u67e5\u8be2\u53ef\u77e5\uff0c\u4e8c\u6781\u7ba1\u5b58\u5728\u4e00\u4e2a\u7279\u6027\uff1a</p> </li> </ol> <p>\u4e8c\u6781\u7ba1\u65b9\u5411\u6062\u590d\u7535\u6d41\uff08Reverse Recovery Current\uff09 \u5728\u4e8c\u6781\u7ba1\u7531\u5bfc\u901a\u72b6\u6001\u8f6c\u53d8\u4e3a\u622a\u6b62\u72b6\u6001\u65f6\uff0c\u7535\u6d41\u53cd\u5411\u6d41\u52a8\u7684\u73b0\u8c61\u3002\u5f53\u4e8c\u6781\u7ba1\u4ece\u6b63\u5411\u5bfc\u901a\u72b6\u6001\u5207\u6362\u5230\u53cd\u5411\u622a\u6b62\u72b6\u6001\u65f6\uff0c\u8f7d\u6d41\u5b50\u9700\u8981\u4e00\u5b9a\u65f6\u95f4\u6765\u6e05\u9664\u3002\u5728\u8fd9\u4e2a\u77ed\u6682\u7684\u65f6\u95f4\u5185\uff0c\u4e8c\u6781\u7ba1\u4e2d\u7684\u7535\u6d41\u4f1a\u53cd\u5411\u6d41\u52a8\uff0c\u8fd9\u5c31\u662f\u65b9\u5411\u6062\u590d\u7535\u6d41\u3002\u65b9\u5411\u6062\u590d\u7535\u6d41\u7684\u5927\u5c0f\u548c\u6301\u7eed\u65f6\u95f4\u53d6\u51b3\u4e8e\u4e8c\u6781\u7ba1\u7684\u7279\u6027\u548c\u5de5\u4f5c\u6761\u4ef6\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_16","title":"\u7a33\u538b\u4e8c\u6781\u7ba1","text":"<p>\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u7a33\u538b\u4e8c\u6781\u7ba1\u7684\u622a\u6b62\u7535\u538b\u7ea6\u4e3a5.2V\u5de6\u53f3\uff0c\u4e0e\u6807\u79f0\u76845V/1W\u76f8\u5339\u914d\uff0c\u540c\u65f6\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u7a33\u538b\u4e8c\u6781\u7ba1\u76f8\u6bd4\u4e8e\u6574\u6d41\u4e8c\u6781\u7ba1\uff0c\u5728\u4e24\u7aef\u7535\u538b\u589e\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u4fdd\u6301\u4e00\u4e2a\u8f83\u4e3a\u7a33\u5b9a\u7684\u7535\u538b\u503c\uff0c\u7ea6\u4e3a0.76V\u5de6\u53f3\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#va_2","title":"\u5b9e\u9a8c\u4e09\uff1a\u4eff\u771f\u2f06\u6781\u7ba1\u7684VA\u7279\u6027","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_17","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<p>\u5229\u7528Multisim\u5e73\u53f0\u642d\u5efa\u7535\u8def\uff0c\u5229\u7528\u626b\u63cf\u6cd5\u7ed8\u5236\u4e8c\u6781\u7ba1\u66f2\u7ebf\u3002</p> <p>Multisim\u5e73\u53f0\u4e00\u5b9a\u9700\u8981\u4e00\u4e2a\u63a5\u5730\u7aef\uff0c\u540c\u65f6\u793a\u6ce2\u5668\u7684\u63a5\u5730\u7aef\u5e76\u4e0d\u5f71\u54cd\u7535\u8def\u4e2d\u7684\u7535\u4f4d\uff0c\u56e0\u800c\u5b9e\u9a8c\u7535\u8def\u5982\u4e0b\uff1a</p> <p></p> <p>\u793a\u6ce2\u5668A\u63a5\u53e3\u4e3a\u4e8c\u6781\u7ba1\u4e24\u7aef\u7535\u538b\uff0cB\u63a5\u53e3\u4e3aR1\u4e24\u7aef\u7535\u538b\u3002\u5229\u7528\u793a\u6ce2\u5668\u7684B/A\u6309\u94ae\uff0c\u5b9a\u6027\u5730\u663e\u793aVA\u7279\u6027\u66f2\u7ebf\uff0c\u518d\u5229\u7528Matlab\u5904\u7406\u8f93\u51fa\u7684\u6570\u636e\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_18","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u6253\u5f00Multisim\u5e73\u53f0\uff0c\u9009\u62e9\u5668\u4ef6\uff0c\u5e76\u5c06\u5668\u4ef6\u8fde\u63a5\u4e3a\u4e0a\u56fe\u6240\u793a\u3002</li> <li>\u53cc\u51fb\u4fe1\u53f7\u6e90\u548c\u793a\u6ce2\u5668\uff0c\u5c06\u4fe1\u53f7\u6e90\u8c03\u4e3a1kHz\u6bcf\u79d2\uff0c\u632f\u5e45\u5206\u522b\u4e3a1V\u548c700V\uff0c\u793a\u6ce2\u5668\u89c6\u56fe\u4e3aB/A\u3002</li> <li>\u6253\u5f00\u56fe\u50cf\u89c6\u56fe\uff0c\u5bfc\u51fa\u56fe\u50cf\u4e3acsv\u683c\u5f0f\u3002</li> <li>\u5229\u7528Matlab\u5904\u7406csv\u4e2d\u7684\u6570\u636e\u3002</li> </ol> <p>\u6839\u636e\u4e0d\u540c\u66f2\u7ebf\u7684\u7279\u70b9\uff0c\u91c7\u7528\u4e86\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u6570\u636e\u62df\u5408\uff1a</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#1v","title":"1V\uff0c\u6ca1\u6709\u4e3a\u8d1f\u6570\u7684\u70b9\uff0c\u56e0\u800c\u91c7\u7528\u4e86\u6307\u6570\u7684\u62df\u5408\u65b9\u5f0f","text":"Matlab<pre><code>data = readmatrix('./Lab2/\u6570\u636e/1V.csv');\nvd = data(:, 1);\nvr = data(:, 2);\nid = vr * 0.1;\n\n% \u4f7f\u7528fit\u51fd\u6570\u8fdb\u884c\u6570\u636e\u62df\u5408\nfitType = fittype('a * exp(b * x)'); % \u9009\u62e9\u9002\u5f53\u7684\u62df\u5408\u51fd\u6570\nfitOptions = fitoptions('Method', 'NonlinearLeastSquares'); % \u9009\u62e9\u62df\u5408\u65b9\u6cd5\nfitOptions.StartPoint = [1, -0.1]; % \u521d\u59cb\u62df\u5408\u53c2\u6570\u731c\u6d4b\n\n% \u8fdb\u884c\u6570\u636e\u62df\u5408\nfitResult = fit(vd, id, fitType, fitOptions);\n\n% \u7ed8\u5236\u62df\u5408\u66f2\u7ebf\nplot(fitResult,vd, id);\nxlabel('\u7535\u538b\uff08V\uff09');\nylabel('\u7535\u6d41\uff08mA\uff09');\nlegend('VA\u7279\u6027\u66f2\u7ebf');\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#700v","title":"700V\uff0c\u7531\u4e8e\u6570\u636e\u70b9\u975e\u5e38\u591a\uff0c\u76f4\u63a5\u8f93\u51fa\u5373\u4f4d\u8f83\u5149\u6ed1\u7684\u66f2\u7ebf","text":"Matlab<pre><code>% \u8bfb\u53d6\u6570\u636e\ndata = readmatrix('./Lab2/\u6570\u636e/700V_2.csv');\n\n% \u83b7\u53d6vd\u548cid\u5217\nv1 = data(:, 1);\nv2= data(:, 2);\nvd=v1;\nid=v2*0.1;\nplot(vd, id);\nxlabel('\u7535\u538b\uff08V\uff09');\nylabel('\u7535\u6d41\uff08mA\uff09');\nlegend('\u5b9e\u9a8c\u6570\u636e','VA\u7279\u6027\u66f2\u7ebf');\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_19","title":"\u7ed3\u679c\u5206\u6790","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#1v_1","title":"1V\uff0c\u4e3b\u8981\u5206\u6790\u4e8c\u6781\u7ba1\u7531\u5bfc\u901a\u5230\u622a\u6b62\u8fd9\u4e00\u6bb5\u7684\u7279\u70b9","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#700v1n4007","title":"700V\uff0c\u4e3b\u8981\u5206\u67901N4007\u622a\u6b62\u7535\u538b\u7684\u7279\u6027","text":"<p>\u53ef\u4ee5\u770b\u51fa\uff0c\u7531\u5bfc\u901a\u5230\u622a\u6b62\u8fd9\u4e00\u90e8\u5206\uff0c\u4e8c\u6781\u7ba1\u7684\u6027\u8d28\u5e76\u4e0d\u662f\u975e\u5e38\u7a33\u5b9a\uff0c\u6240\u4ee5\u66f2\u7ebf\u51e0\u4e4e\u586b\u6ee1\u4e86\u8be5\u6bb5\u533a\u57df\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_20","title":"\u63a2\u7a76\u6027\u5b9e\u9a8c\uff1a\u4fe1\u53f7\u6e90\u5185\u90e8\u7535\u963b","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_21","title":"\u5f15\u5165","text":"<p>\u89c2\u5bdf\u4e0a\u9762\u7684\u9ec4\u8272\u66f2\u7ebf\uff0c\u4f1a\u53d1\u73b0\uff0c\u5f53\u4e8c\u6781\u7ba1\u5bfc\u901a\u540e\uff0c\u5cf0\u503c\u7535\u538b\u9aa4\u964d\u3002\u800c\u5206\u6790\u53ef\u77e5\uff0cChannel1\u6240\u6d4b\u7684\u662f\u4fe1\u53f7\u6e90\u4e24\u7aef\u7535\u538b\uff0c\u800c\u7535\u538b\u9aa4\u964d\u8bf4\u660e\u4e86\u4fe1\u53f7\u6e90\u5185\u90e8\u6709\u7535\u963b\uff0c\u8fdb\u884c\u5206\u538b\uff0c\u5bfc\u81f4\u5176\u5cf0\u503c\u51cf\u5c0f\u3002\u73b0\u6d4b\u91cf\u4fe1\u53f7\u6e90\u4e24\u7aef\u7684\u7535\u963b\u5927\u5c0f\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_22","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<p>\u91c7\u7528\u4ee5\u4e0b\u7535\u8def\uff0c\u5229\u7528\u6b27\u59c6\u5b9a\u5f8b\u5bf9\u5176\u8fdb\u884c\u6d4b\u91cf\u3002\u901a\u8fc7\u6d4b\u91cf\u5cf0\u503c\u7535\u538b\u7684\u53d8\u5316\uff0c\u5f97\u51fa\u4fe1\u53f7\u6e90\u5185\u90e8\u7535\u963b\u5927\u5c0f</p> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_23","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u5c06\u793a\u6ce2\u5668\u63a5\u53e3\u4e24\u7aef\u4e0e\u4fe1\u53f7\u6e90\u4e24\u7aef\u8fde\u63a5\u3002\u6d4b\u51fa\u539f\u672c\u8f93\u51fa\u7684\u7535\u538b\u5e45\u503c\uff0c\\(V_{p1}=10.5V\\)\u3002</li> </ol> <ol> <li>\u8fde\u63a5\u65b9\u6848\u4e2d\u7684\u7535\u8def\u56fe\u3002</li> </ol> <ol> <li>\u6d4b\u51fa\u6b64\u65f6\u7684\u7535\u538b\u5cf0\u503c\u4e3a\uff0c\\(V_{p2}=5.23V\\)</li> </ol> <ol> <li>\u518d\u6b21\u6d4b\u91cf\u4fe1\u53f7\u6e90\u4e24\u7aef\u7535\u538b\uff0c\u53d1\u73b0\u4fdd\u6301\u572810.5V\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u4fe1\u53f7\u6e90\u4e24\u7aef\u7535\u538b\u89c6\u4e3a10.5V\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab2/Lab2%20%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_24","title":"\u7ed3\u679c\u5206\u6790","text":"\\[ I_R=\\dfrac{V_{p2}}{R}=5.23V\u00f751\u03a9=0.102A\\\\ R_S=\\dfrac{V_{p1}-V_{p2}}{I_R}=5.27V\u00f70.102A=51.7\u03a9 \\] <p>\u8ba1\u7b97\u5f97\u5230\uff0c\u4fe1\u53f7\u6e90\u5185\u963b\u4e3a51.7\u03a9\uff0c\u67e5\u9605\u8bf4\u660e\u4e66\uff0c\u5f97\u77e5Channel1\u8f93\u51fa\u7684\u5185\u963b\u572850\u03a9\u5de6\u53f3\uff0c\u56e0\u6b64\u53ef\u77e5\u6d4b\u91cf\u57fa\u672c\u51c6\u786e\u3002</p> <p>\u4fe1\u53f7\u6e90\u5185\u90e8\u670950\u03a9\u5de6\u53f3\u7684\u963b\u503c\uff0c\u6240\u4ee5\uff0c\u4ee5\u540e\u5728\u5b9a\u91cf\u6d4b\u91cf\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u5185\u963b\u8003\u8651\u5728\u5185\uff0c\u4ee5\u514d\u5f71\u54cd\u6700\u540e\u7ed3\u679c\u7684\u51c6\u786e\u6027\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/","title":"Lab 3","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_1","title":"\u6570\u5b57\u7535\u8def\u903b\u8f91\u8bbe\u8ba1","text":"<p>\u5b9e\u9a8c\u65e5\u671f\uff1a2023/10/9</p> <p>\u5730\u70b9\uff1a\u4e1c3-406</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_2","title":"\u5b9e\u9a8c\u76ee\u7684","text":"<ol> <li>\u4e86\u89e3\u6570\u5b57\u7535\u8def\u57fa\u7840\u77e5\u8bc6</li> <li>\u638c\u63e1\u7b80\u5355\u6570\u5b57\u903b\u8f91\u7535\u8def\u7684\u8bbe\u8ba1</li> <li>\u5b66\u4e60FPGA\u5f00\u53d1\u5de5\u5177</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_3","title":"\u5b9e\u9a8c\u5185\u5bb9","text":"<p>\u7528QUARTUS\u8f6f\u4ef6\u548cDE10\u5f00\u53d1\u677f\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u5982\u4e0b\u903b\u8f91\u529f\u80fd</p> <ol> <li> <p>\u8f93\u5165\u662f\u4e09\u4f4d\u4e8c\u8fdb\u5236\u6570A\uff0cB\uff0cC\uff0c\u8981\u6c42\u5f53\u8f93\u5165\u662f2\u62163\u7684\u500d\u6570\u65f6\u8f93\u51fa\u7b49\u4e8e\u903b\u8f911\uff0c\u5176\u5b83\u60c5\u51b5\uff0c\u8f93\u51fa\u7b49\u4e8e0\u3002</p> </li> <li> <p>\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4f4d\u4e8c\u8fdb\u5236\u5168\u52a0\u5668\uff08\u8f93\u5165\u662f\u4e00\u4f4d\u4e8c\u8fdb\u5236\u52a0\u6570\u3001\u88ab\u52a0\u6559\u548c\u4f4e\u4f4d\u8fdb\u4f4d\uff0c\u51713\u4e2a\u903b\u8f91\u53d8\u91cf\uff09\u3002</p> </li> <li> <p>\u3010\u63a2\u7a76\u3011\u67d0\u5ba2\u5385\u56db\u5468\u67094\u4e2a\u623f\u95f4\uff0c\u6bcf\u4e2a\u623f\u95f4\u95e8\u53e3\u6709\u4e00\u4e2a\u5f00\u5173\uff0c\u5ba2\u5385\u4e2d\u95f4\u6709\u4e00\u76cf\u706fA\u3002\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u903b\u8f91\u7535\u8def\uff0c\u8981\u6c42\u6bcf\u4e2a\u5f00\u5173\u90fd\u80fd\u63a7\u5236</p> </li> </ol> <p>\u706fA\u7684\u4eae\u706d\uff0c\u5e76\u5728DE10\u5f00\u53d1\u677f\u4e0a\u6a21\u62df\u6b64\u903b\u8f91\u7535\u8def\u7684\u529f\u80fd\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_4","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>QUARTUS\u8f6f\u4ef6</li> <li>DE10\u5f00\u53d1\u677f</li> <li>\u7535\u8111</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#23","title":"\u5b9e\u9a8c\u4e00\uff1a\u5224\u65ad2\u62163\u7684\u500d\u6570","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#1","title":"1. \u5206\u6790\u771f\u503c\u8868","text":"num A B C Z 0 0 0 0 1 1 0 0 1 0 2 0 1 0 1 3 0 1 1 1 4 1 0 0 1 5 1 0 1 0 6 1 1 0 1 7 1 1 1 0 <p>\u7531\u4e8e\u603b\u60c5\u51b5\u8f83\u5c11\uff0c\u6240\u4ee5\u9009\u62e9\u6253\u8868\u7684\u65b9\u5f0f\u5217\u5199\u4ee3\u7801\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#2-quartus-intel-fpgamultisim","title":"2. \u5229\u7528QUARTUS INTEL FPGA\u8f6f\u4ef6\u81ea\u5e26\u7684Multisim\u8f6f\u4ef6\u5148\u8fdb\u884c\u6a21\u62df","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#task1vhd","title":"\u903b\u8f91\u8bbe\u8ba1\u8f93\u5165 task1.vhd","text":"Vhdl<pre><code>---------\u5e93\u8bf4\u660e\u4e0e\u5e93\u5f15\u7528------------\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n---------------------------------\n\n\n---------\u5b9e\u4f53\u5b9a\u4e49Task1------------\nentity Task1 is\n    port (  A,B,C: in std_logic;\n            Z: out std_logic);\nend Task1;\n---------------------------------\n\n\n----------\u7ed3\u6784\u4f53\u5b9a\u4e49 BEHAV---------    \narchitecture BEHAV of Task1 is\n\nbegin\n----------\u8fdb\u7a0b\u8bed\u53e5 P1---------------\nP1:process(A,B,C)\nvariable tmp:std_logic_vector(2 downto 0); -- \u5b9a\u4e49\u53d8\u91cftmp\uff08std_logic_vector\uff09\u8bb0\u5f55ABC\u7684\u8f93\u5165 \nbegin\n    tmp:=A&amp;B&amp;C;-- \u5c06ABC\u7684\u8f93\u5165\u503c\u8fde\u63a5\n    --case\u8bed\u53e5 \u6839\u636e\u4e0d\u540c\u60c5\u51b5\u8f93\u51fa\u4e0d\u540c\u7684Z\u503c\n    case tmp is\n    when \"000\" =&gt; Z&lt;='1';\n    when \"001\" =&gt; Z&lt;='0';\n    when \"010\" =&gt; Z&lt;='1';\n    when \"011\" =&gt; Z&lt;='1';\n    when \"100\" =&gt; Z&lt;='1';\n    when \"101\" =&gt; Z&lt;='0';\n    when \"110\" =&gt; Z&lt;='1';\n    when \"111\" =&gt; Z&lt;='0';\n    when others =&gt; Z&lt;='0';\n    end case;\nend process;        \n---------------------------------\n\nend BEHAV ;\n---------------------------------\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#test_tbvhd","title":"\u903b\u8f91\u8bbe\u8ba1\u4eff\u771f test_tb.vhd","text":"Vhdl<pre><code>---------\u5e93\u8bf4\u660e\u4e0e\u5e93\u5f15\u7528------------\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n---------------------------------\n\n------\u5b9e\u4f53\u5b9a\u4e49TEST_tb\u4eff\u771f\u5143\u4ef6--------\nentity TEST_tb is\nend TEST_tb;\n---------------------------------\n\n----------\u7ed3\u6784\u4f53\u5b9a\u4e49 BEHAV---------  \narchitecture BEHAV of TEST_tb is\n\n----------\u5f15\u7528\u5143\u4ef6Task1---------\ncomponent Task1 is\n    port (  A,B,C: in std_logic;\n            Z: out std_logic);\nend component;\nsignal A,B,C,Z: std_logic;--\u5b9a\u4e49\u5b9e\u53c2\uff0c\u65b9\u4fbf\u540e\u7eed\u63a7\u5236\u8f93\u5165\u8f93\u51fa\n\nbegin\nU1: Task1 port map (A=&gt;A,B=&gt;B,C=&gt;C,Z=&gt;Z);--\u7aef\u53e3\u6620\u5c04\uff0c\u5c06ABC\u7684\u503c\u8f93\u5165\u5230\u5143\u4ef6Task1\u4e2d\nP1: process\nbegin -- \u4eff\u771f\n    A&lt;='0';B&lt;='0';C&lt;='0';wait for 10ns;\n    A&lt;='0';B&lt;='0';C&lt;='1';wait for 10ns;\n    A&lt;='0';B&lt;='1';C&lt;='0';wait for 10ns;\n    A&lt;='0';B&lt;='1';C&lt;='1';wait for 10ns;\n    A&lt;='1';B&lt;='0';C&lt;='0';wait for 10ns;\n    A&lt;='1';B&lt;='0';C&lt;='1';wait for 10ns;\n    A&lt;='1';B&lt;='1';C&lt;='0';wait for 10ns;\n    A&lt;='1';B&lt;='1';C&lt;='1';wait for 10ns;\nend process;\nend BEHAV;\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_5","title":"\u4eff\u771f\u7ed3\u679c","text":"<p>\u6839\u636e\u6ce2\u5f62\u56fe\u7ed3\u679c\uff0c\u53ef\u77e5\uff0c\u8be5\u5143\u4ef6\u7684\u4ee3\u7801\u7f16\u5199\u6b63\u786e\uff0c\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u64cd\u4f5c\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#3","title":"3. \u751f\u6210\u7f16\u7a0b\u6587\u4ef6","text":"<ol> <li>\u65b0\u5efaproject</li> </ol> <ol> <li>\u5bfc\u5165\u5173\u4e8e\u5143\u4ef6\u7684\u6587\u4ef6task1.vhd</li> </ol> <ol> <li>\u7f16\u8bd1\u751f\u6210\u6587\u4ef6\uff0c\u5e76\u5bfc\u5165DE10\u82af\u7247</li> </ol> <p>\u70b9\u6309\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>Analysis&amp;Synthesis\uff0c\u53ef\u5728RTL Viewer\u4e2d\u67e5\u770b\u903b\u8f91\u7ebf\u8def</li> <li>Fitter</li> <li>Assemble</li> </ul> <p></p> <ul> <li>pin planner\uff0c\u8fdb\u884c\u7ebf\u811a\u5b89\u6392<ul> <li>ABC\u4ee5\u5f00\u5173\u7684\u5f62\u5f0f\u8f93\u5165\u8f93\u51fa</li> <li>Z\u4ee5LED\u7684\u65b9\u5f0f\u663e\u793a</li> </ul> </li> </ul> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_6","title":"\u5b9e\u9a8c\u6210\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_7","title":"\u5b9e\u9a8c\u4e8c\uff1a\u4e8c\u8fdb\u5236\u5168\u52a0\u5668","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#1_1","title":"1. \u5206\u6790\u771f\u503c\u8868","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#2","title":"2. \u4eff\u771f\u6a21\u62df","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#task2vhd","title":"\u903b\u8f91\u8bbe\u8ba1\u8f93\u5165 task2.vhd","text":"Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n---------\u5b9a\u4e49\u5b9e\u4f53--------------------\nentity Task2 is\n    port (  A,B,C0: in std_logic;\n            C,Z: out std_logic);\nend Task2;\n\n---------\u5b9a\u4e49\u7ed3\u6784\u4f53--------------------\narchitecture BEHAV of Task2 is\nbegin\nP1:process(A,B,C0)\nvariable tmp:std_logic_vector(2 downto 0);--\u53d8\u91cftmp\u8bb0\u5f55ABC0\u7684\u8f93\u5165\u503c\nbegin\n    tmp:=A&amp;B&amp;C0;\n    case tmp is -- case\u8bed\u53e5\u6839\u636eABC0\u4e0d\u540c\u7684\u503c\u8f93\u51fa\u4e0d\u540c\u7684C\u4e0eZ\n    when \"000\" =&gt; C&lt;='0';Z&lt;='0';\n    when \"001\" =&gt; C&lt;='0';Z&lt;='1';\n    when \"010\" =&gt; C&lt;='0';Z&lt;='1';\n    when \"011\" =&gt; C&lt;='1';Z&lt;='0';\n    when \"100\" =&gt; C&lt;='0';Z&lt;='1';\n    when \"101\" =&gt; C&lt;='1';Z&lt;='0';\n    when \"110\" =&gt; C&lt;='1';Z&lt;='0';\n    when \"111\" =&gt; C&lt;='1';Z&lt;='1';\n    when others =&gt; C&lt;='0';Z&lt;='0';\n    end case;\nend process;\nend BEHAV ;\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#test_tbvhd_1","title":"\u903b\u8f91\u8bbe\u8ba1\u4eff\u771f test_tb.vhd","text":"Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n\nentity TEST_tb is\nend TEST_tb;\n\n\narchitecture BEHAV of TEST_tb is\n\ncomponent Task2 is\n    port (  A,B,C0: in std_logic;\n            C,Z: out std_logic);\nend component;\n\nsignal A,B,C0,Z,C: std_logic;\n\nbegin\nU1: Task2 port map (A=&gt;A,B=&gt;B,C0=&gt;C0,Z=&gt;Z,C=&gt;C);\nP1: process\n-----------\u4e3b\u8981\u7684\u4eff\u771f\u90e8\u5206-------------------------------------------------\nbegin\n    A&lt;='0';B&lt;='0';C0&lt;='0';wait for 10ns;\n    A&lt;='0';B&lt;='0';C0&lt;='1';wait for 10ns;\n    A&lt;='0';B&lt;='1';C0&lt;='0';wait for 10ns;\n    A&lt;='0';B&lt;='1';C0&lt;='1';wait for 10ns;\n    A&lt;='1';B&lt;='0';C0&lt;='0';wait for 10ns;\n    A&lt;='1';B&lt;='0';C0&lt;='1';wait for 10ns;\n    A&lt;='1';B&lt;='1';C0&lt;='0';wait for 10ns;\n    A&lt;='1';B&lt;='1';C0&lt;='1';wait for 10ns;\nend process;\nend BEHAV;\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_8","title":"\u4eff\u771f\u7ed3\u679c","text":"<p>\u4e0e\u9884\u671f\u4e00\u81f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#3_1","title":"3. \u751f\u6210\u7f16\u7a0b\u6587\u4ef6","text":"<ol> <li> <p>\u7f16\u8bd1\u8f93\u51fa\uff0c\u5f97\u5230\u4ee5\u4e0b\u903b\u8f91\u56fe</p> </li> <li> <p>pin planner</p> </li> </ol> <p></p> <ul> <li>A, B, C0\u5bf9\u5e94\u4e09\u4e2a\u5f00\u5173</li> <li>C\u4e0eZ\u5bf9\u5e94\u4e24\u76cfLED\u706f</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_9","title":"\u5b9e\u9a8c\u6210\u679c","text":"<p>\u4e0a\u56fe\u5bf9\u5e94A=0, B=0, C0=0\u7684\u60c5\u51b5\uff0c\u8f93\u51faC=0\uff0cZ=0\u7684\u60c5\u51b5\u3002</p> <p></p> <p>\u4e0a\u56fe\u5bf9\u5e94A=0, B=1, C0=0\u7684\u60c5\u51b5\uff0c\u8f93\u51faC=0\uff0cZ=1\u7684\u60c5\u51b5\u3002</p> <p></p> <p>\u4e0a\u56fe\u5bf9\u5e94A=1, B=1, C0=0\u7684\u60c5\u51b5\uff0c\u8f93\u51faC=1\uff0cZ=0\u7684\u60c5\u51b5\u3002</p> <p></p> <p>\u4e0a\u56fe\u5bf9\u5e94A=1, B=1, C0=1\u7684\u60c5\u51b5\uff0c\u8f93\u51faC=1\uff0cZ=1\u7684\u60c5\u51b5\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_10","title":"\u5b9e\u9a8c\u4e09\uff1a\u5f00\u706f\u5173\u706f\u7684\u63a2\u7a76\u6027\u5b9e\u9a8c\u00a0 !\u6ce8\u610f\uff1a\u8fd9\u4e2a\u90e8\u5206\u6211\u5199\u7684\u4e9b\u8bb8\u6709\u70b9\u9519\u8bef\uff0c\u76f4\u63a5\u5355\u6570\u5f00\u5173\u5f00\u5219\u6253\u5f00\u7684\u601d\u8def\u5373\u53ef","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#1_2","title":"1. \u5206\u6790\u7535\u8def\u903b\u8f91","text":"<p>ABCD\u4f5c\u4e3a\u56db\u4e2a\u5f00\u5173\uff0c\u4efb\u610f\u7684\u6539\u53d8\u72b6\u6001\u90fd\u5c06\u6539\u53d8\u7535\u706f\u7684\u72b6\u6001\uff0c\u4e0d\u540c\u4e8e\u4e0a\u9762\u7684\u7535\u8def\uff0c\u8be5\u7535\u8def\u6ca1\u6709\u771f\u503c\u8868\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#2_1","title":"2. \u4eff\u771f\u6a21\u62df","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#task3vhd","title":"\u8bbe\u8ba1\u5143\u4ef6 task3.vhd","text":"Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n------------\u5b9a\u4e49\u5b9e\u4f53Task3-----------------------------------\nentity Task3 is\n    port (  A,B,C,D: in std_logic;\n            Z: out std_logic);\nend Task3;\n\narchitecture BEHAV of Task3 is\n\nbegin\n---------\u5173\u952e\u90e8\u5206\uff1aprocess-----------------------------------\nP1:process\n---------\u5b9a\u4e49\u53d8\u91cf \u8bb0\u5f55\u5f00\u5173A\uff0cB\uff0cC\uff0cD\uff0cZ\u5148\u524d\u7684\u72b6\u6001----------------\nvariable mA:std_logic:='0';\nvariable mB:std_logic:='0';\nvariable mC:std_logic:='0';\nvariable mD:std_logic:='0';\nvariable mZ:std_logic:='0';\nvariable tmp:std_logic:='0';\n\nbegin\nif (mA /= A) then  --\u5982\u679cA\u5f00\u5173\u72b6\u6001\u53d1\u751f\u6539\u53d8\uff0c\u4e0b\u65b9\u5404\u4e2a\u7ed3\u6784\u540c\u7406\nmA:=A; mZ:=not mZ;Z&lt;=mZ; --\u6539\u53d8mA\u7684\u503c\uff0c\u5e76\u4e14\u8f93\u51fa\u4e0eZ\u7684\u8bb0\u5f55\u503c\u76f8\u53cd\u7684\u503c\nend if;\nif (mB /= B) then \nmB:=B; mZ:=not mZ;Z&lt;=mZ;\nend if;\nif (mC /= C) then \nmC:=C; mZ:=not mZ;Z&lt;=mZ;\nend if;\nif (mD /= D) then \nmD:=D; mZ:=not mZ;Z&lt;=mZ;\nend if;\n\nend process;\n\nend BEHAV ;\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#task3_tbvhd","title":"\u4eff\u771ftask3_tb.vhd","text":"Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n\nentity TEST_tb is\nend TEST_tb;\n\narchitecture BEHAV of TEST_tb is\n\ncomponent Task3 is\n    port (  A,B,C,D: in std_logic;\n            Z: out std_logic);\nend component;\n\nsignal A,B,C,D,Z: std_logic;\n\nbegin\nU1: Task3 port map (A=&gt;A,B=&gt;B,C=&gt;C,D=&gt;D,Z=&gt;Z);\n------------\u4eff\u771f\u8fc7\u7a0b-------------------------------------------\nP1: process\nbegin\n    A&lt;='0';B&lt;='0';C&lt;='0';D&lt;='0';wait for 10ns;\n    A&lt;='0';B&lt;='0';C&lt;='0';D&lt;='1';wait for 10ns;\n    A&lt;='1';B&lt;='0';C&lt;='0';D&lt;='1';wait for 10ns;\n    A&lt;='0';B&lt;='0';C&lt;='0';D&lt;='1';wait for 10ns;\nend process;\nend BEHAV;\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_11","title":"\u4eff\u771f\u7ed3\u679c","text":"<p>\u4efb\u610f\u6539\u53d8ABCD\u56db\u4e2a\u5f00\u5173\u4e2d\u4efb\u610f\u72b6\u6001\uff0cZ\u5c31\u4f1a\u8f93\u51fa\u4e0e\u539f\u6765\u76f8\u53cd\u7684\u7ed3\u679c\uff0c\u4eff\u771f\u7ed3\u679c\u6b63\u786e\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#3_2","title":"3. \u751f\u6210\u7f16\u7a0b\u6587\u4ef6","text":"<ol> <li>\u7f16\u8bd1\u8f93\u51fa</li> </ol> <ol> <li> <p>Pin Planner</p> </li> <li> <p>ABCD\u5bf9\u5e94\u56db\u4e2a\u5f00\u5173</p> </li> <li>Z\u5bf9\u5e94\u4e00\u4e2aLED\u706f</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab3/Lab3%20%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/#_12","title":"\u5b9e\u9a8c\u6210\u679c","text":"<p>\u5b9e\u9a8c\u7ed3\u679c\u89c6\u9891</p> <p>\u7ed3\u679c\u5206\u6790\uff0c\u7531\u4e8e\u8fd9\u4e2a\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u5728\u82af\u7247\u6700\u5f00\u59cb\u6267\u884c\u7ed3\u6784\u4f53\u90e8\u5206\u7684\u4ee3\u7801\u65f6\uff0c\u7531\u4e8emA\u4e0eA\u5e76\u4e0d\u4e00\u5b9a\u76f8\u5339\u914d\uff0c\u6240\u4ee5\u521a\u521a\u5f00\u59cb\uff0cZ\u7684\u706f\u53ef\u80fd\u6df7\u4e71\u95ea\u70c1\u3002\u4f46\u662f\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4e5f\u5c31\u662f\u5f53\u6240\u6709mA\uff0cmB\uff0cmC\uff0cmD\u90fd\u5df2\u7ecf\u4e0e\u73b0\u5b9e\u60c5\u51b5\u76f8\u5339\u914d\u4ee5\u540e\uff0c\u5c31\u80fd\u591f\u6b63\u5e38\u663e\u793a\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/","title":"Lab 4","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_1","title":"\u4e09\u6781\u7ba1\u548c\u95e8\u7535\u8def\u7279\u6027\u6d4b\u8bd5","text":"<p>\u5b9e\u9a8c\u65e5\u671f\uff1a2023/10/9</p> <p>\u5730\u70b9\uff1a\u4e1c3-406</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_2","title":"\u5b9e\u9a8c\u76ee\u7684","text":"<ol> <li>\u638c\u63e1\u534a\u5bfc\u4f53\u4e09\u6781\u7ba1\u7279\u6027\u6d4b\u8bd5\u3002</li> <li>\u638c\u63e1\u95e8\u7535\u8def\u7535\u6c14\u7279\u6027\u6d4b\u8bd5\u3002</li> <li>\u5b66\u4e60MULTISIM\u7535\u8def\u4eff\u771f\u8f6f\u4ef6\u7684\u4f7f\u7528\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_3","title":"\u5b9e\u9a8c\u4e00\uff1a\u4e07\u7528\u8868\u6d4b\u91cf\u4e09\u6781\u7ba1","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_4","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u4e07\u7528\u8868\uff08HY63\uff09</li> <li>\u4e09\u6781\u7ba1</li> <li>\u8fde\u63a5\u7ebf</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_5","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<ol> <li>\u5224\u522b\u4e09\u6781\u7ba1\u7c7b\u578b\uff0cE\\B\\C\u4e09\u6781\uff0c\u6d4b\u91cf\u653e\u5927\u500d\u6570\u3002</li> <li>\u6d4b\u91cfVCE=0 ; 1V ; 5V\u6761\u4ef6\u4e0b\u7684\u8f93\u5165\u7279\u6027\u3002</li> <li>\u6d4b\u91cfIB =2.5uA ; 5uA ; 7.5uA;10uA\u6761\u4ef6\u4e0b\u8f93\u51fa\u7279\u6027\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_6","title":"\u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_7","title":"\u4e00\u3001\u5224\u522b\u4e09\u6781\u7ba1\u7c7b\u578b","text":"<ul> <li>\u5c06\u4e09\u6781\u7ba1\u4ece\u53f3\u5230\u5de6\u4e09\u53ea\u811a\u547d\u540d\u4e3aa,b,c\uff0c\u5229\u7528\u4e07\u7528\u8868\u4e8c\u6781\u7ba1\u6d4b\u8bd5\u7ea7\uff0c\u6d4b\u91cf\u4e09\u6781\u7ba1\u4e09\u53ea\u811a\u7684\u6781\u6027\u3002</li> </ul> <p>\u6839\u636e\u4ee5\u4e0a\u8868\u683c\u53ef\u4ee5\u5224\u65ad\uff0c\u8be5\u4e09\u6781\u7ba1\u4e2d\u95f4\u7684\u7aef\u53e3\u4e3ab\u57fa\u6781\uff0c\u4e14\u4e3aNPN\u578b\u4e09\u6781\u7ba1\u3002</p> <ul> <li>\u63a5\u4e0b\u6765\u5224\u65adE\u548cC\u6781</li> </ul> <p></p> <p>\u5c06\u4e07\u7528\u8868\u5207\u6362\u5230HFE\u6863\uff0c\u901a\u8fc7\u5bf9\u4e09\u6781\u7ba1\u7684\u653e\u5927\u500d\u6570\u7684\u6d4b\u91cf\uff0c\u5224\u65ad\u4e09\u6781\u7ba1\u7684e\u548cc\u6781\u3002\u5df2\u77e5\u6b63\u5e38\u7684\u00df\u5e94\u8be5\u5728100\uff5e300\u4e4b\u95f4\u3002</p> <p>\u5c06\u4e09\u6781\u7ba1\u4e2d\u95f4\u7684\u6781\u811a\u63d2\u5165b\u53e3\uff0c\u4e24\u7aef\u5206\u522b\u63d2\u5165e\u548cc\u3002\u53ef\u89c1\u5f53\u793a\u6570\u663e\u793a\u4e3a249\u65f6\uff0ce,b,c\u811a\u63d2\u5165\u6b63\u786e\uff0c\u653e\u5927\u500d\u6570\u00df=249\u3002\u4ece\u800c\u53ef\u5224\u65ad\u4e09\u6781\u7ba1\u7684\u4e09\u53ea\u811a\u7684\u6781\u6027\uff1a\u5f53\u5e73\u9762\u5bf9\u5411\u81ea\u5df1\u65f6\uff0c\u4ece\u5de6\u5230\u53f3\u4e09\u53ea\u811a\u5206\u522b\u4e3ae,b,c\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#va","title":"\u4e8c\u3001\u91c7\u7528\u9010\u70b9\u6cd5\u6d4b\u91cf\u4e09\u6781\u7ba1\u8f93\u5165VA\u7279\u6027","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#1vceibvbe","title":"\uff081\uff09\u56fa\u5b9aV~CE~\u4e0b\uff0cI~B~\u4e0eV~BE~\u7684\u5173\u7cfb","text":"<ol> <li>\u5c06\u7535\u8def\u8fde\u63a5\u4e3a\u4e0b\u56fe</li> </ol> fig1 \u56fa\u5b9aVCE\u4e0b\u7684\u5b9e\u9a8c\u7535\u8def\u56fe <ol> <li> <p>\u8c03\u6574V2\u7684\u5927\u5c0f\uff0c\u5373\u8c03\u6574V~CE~\u7684\u5927\u5c0f\u5206\u522b\u4e3a0V\u548c15V\u3002\u8c03\u6574\u76f4\u6d41\u8f93\u51fa\u6e90V1\u7684\u5927\u5c0f\uff0c\u7528\u4e07\u7528\u8868\u6d4b\u91cfR1\u4e24\u7aef\u7535\u538b\uff0c\u4ece\u800c\u5f97\u51faV~BE~\u548cI~B~\u7684\u5927\u5c0f\u3002</p> </li> <li> <p>\u5229\u7528Matlab\u7ed8\u5236\u4f0f\u5b89\u7279\u6027\u66f2\u7ebf\u3002</p> </li> </ol> Matlab<pre><code>% \u4f7f\u7528xlsread\u51fd\u6570\u4eceExcel\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\ndata1 = readtable('./1016all.xlsx', 'Sheet','0V','Range', 'C2:D17');\ndata2 = readtable('./1016all.xlsx', 'Sheet','15V', 'Range','C2:D19');\n\n% \u63d0\u53d6\u7535\u538b\u548c\u7535\u6d41\u6570\u636e\nvbe1 = data1{:, 1};\nib1 = data1{:, 2};\nvbe2 = data2{:,1};\nib2 = data2{:,2};\n\n% \u7ed8\u5236\u4f0f\u5b89\u7279\u6027\u66f2\u7ebf\nplot(vbe1, ib1, 'o'); % \u7ed8\u5236\u6570\u636e\u70b9\u548c\u8fde\u63a5\u7ebf\ntitle('\u56fa\u5b9aVCE\u4e0b\u4e09\u6781\u7ba1\u8f93\u51faVA\u66f2\u7ebf'); % \u6dfb\u52a0\u6807\u9898\nxlabel('V_{BE}(V)'); % \u6dfb\u52a0x\u8f74\u6807\u7b7e\nylabel('I_B(uA)'); % \u6dfb\u52a0y\u8f74\u6807\u7b7e\ngrid on; % \u6dfb\u52a0\u7f51\u683c\u7ebf\n\n% \u5bf9\u66f2\u7ebf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\nsmoothed_ib1 = smooth(ib1, 5, 'loess'); \nhold on; % \u5728\u540c\u4e00\u56fe\u4e2d\u53e0\u52a0\u5e73\u6ed1\u66f2\u7ebf\nplot(vbe1, smoothed_ib1, 'b-', 'LineWidth', 1); % \u7ed8\u5236\u5e73\u6ed1\u66f2\u7ebf\n\n%\u7ed8\u5236\u66f2\u7ebf2\nhold on;\nplot(vbe2, ib2, 'o'); % \u7ed8\u5236\u6570\u636e\u70b9\u548c\u8fde\u63a5\u7ebf\ngrid on; % \u6dfb\u52a0\u7f51\u683c\u7ebf\n\n% \u5bf9\u66f2\u7ebf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\nsmoothed_ib2 = smooth(ib2, 5, 'loess'); % \u4f7f\u7528rloess\u5e73\u6ed1\u7b97\u6cd5\nhold on; % \u5728\u540c\u4e00\u56fe\u4e2d\u53e0\u52a0\u5e73\u6ed1\u66f2\u7ebf\nplot(vbe2, smoothed_ib2, 'r-', 'LineWidth', 1); % \u7ed8\u5236\u5e73\u6ed1\u66f2\u7ebf\nlegend('\u539f\u59cb\u6570\u636e(0V)', '\u66f2\u7ebf\uff080V\u4e0b\uff09','\u539f\u59cb\u6570\u636e(15V)', '\u66f2\u7ebf\uff0815V\u4e0b\uff09');\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_8","title":"\u5b9e\u9a8c\u7ed3\u679c\u4e0e\u5206\u6790","text":"<p>\u5b9e\u9a8c\u6570\u636e\u5982\u4e0b\uff1a</p> <p></p>VCE=0V <p></p> <p></p>VCE=15V\u4e0b <p></p> <p></p> <p></p>fig2 \u4e09\u6781\u7ba1VA\u7279\u6027\u66f2\u7ebf"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#2ib-icvce","title":"\uff082\uff09\u56fa\u5b9aI~B~ \u4e0b\uff0cI~C~\u4e0eV~CE~\u7684\u5173\u7cfb","text":"<ol> <li>\u5c06\u7535\u8def\u56fe\u8fde\u63a5\u4e3a\u4e0b\u56fe</li> </ol> fig3 \u56fa\u5b9aIb\u4e0b\u7684\u5b9e\u9a8c\u7535\u8def\u56fe <ol> <li>\u8bbe\u5b9aV1\u7684\u5927\u5c0f\uff0c\u901a\u8fc7\u6d4b\u91cfR1\u4e24\u7aef\u7684\u7535\u538b\uff0c\u5f97\u51faI~b~\u7684\u7535\u6d41\u5927\u5c0f\uff0c\u5e76\u5728\u63a5\u4e0b\u6765\u7684\u5b9e\u9a8c\u4e2d\u4e0d\u518d\u6539\u53d8V1\uff0c\u7531\u4e8eV2\u5bf9I~b~\u7684\u6539\u53d8\u975e\u5e38\u5c0f\uff0c\u5728\u6b64\u5b9e\u9a8c\u4e2d\u5ffd\u7565\u4e0d\u8ba1\u3002</li> <li>\u8c03\u8282V2\uff0c\u6d4b\u91cfR2\u4e24\u7aef\u7535\u538b\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u51faV~CE~\u548cIc\u7684\u5927\u5c0f\u3002</li> <li>\u7ed8\u5236\u4f0f\u5b89\u7279\u6027\u66f2\u7ebf\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_9","title":"\u5b9e\u9a8c\u7ed3\u679c\u4e0e\u5206\u6790","text":"Ib=2.5uA Ib=5uA Ib=7.5uA Ib=10uA fig4 \u7ed8\u5236VA\u7279\u6027\u66f2\u7ebf"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_10","title":"\u4e00\u4e9b\u7279\u6b8a\u70b9\u7684\u5206\u6790","text":"fig5 I_b=2.5uA\u4e0b\u7684VA\u66f2\u7ebf <p>\u6211\u4eec\u53d1\u73b0\uff0c\u5f53I~b~=2.5uA\u65f6ce\u7684\u538b\u964d\u4f7f\u5f97Ic\u5230\u8fbe\u9971\u548c\u533a\u65f6\uff0c\u653e\u5927\u7535\u6d41\u968f\u7740\u538b\u964d\u589e\u5927\u800c\u51cf\u5c0f\u3002</p> <p></p> <p></p>fig6 I=10uA\u4e0b\u7684VA\u66f2\u7ebf <p>\u800c\u5f53I~b~=10uA\u65f6\uff0c\u653e\u5927\u7535\u6d41\u968f\u7740V~CE~\u589e\u52a0\u589e\u5927\u3002\u8fd9\u79cd\u73b0\u8c61\uff0c\u53ef\u80fd\u4e5f\u6070\u597d\u53cd\u6620\u4e86\u57fa\u6781\u7535\u6d41\u4f1a\u968f\u7740CE\u4e24\u7aef\u7535\u538b\u7684\u5927\u5c0f\u53d8\u5316\u800c\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u662f\u6240\u9020\u6210\u7684\u53d8\u5316\u5e76\u4e0d\u660e\u663e\uff0c\u6240\u4ee5\u4e0a\u8ff0\u5b9e\u9a8c\u53ef\u4ee5\u901a\u8fc7\u4fdd\u6301V1\u4e0d\u53d8\u63a7\u5236I~b~\u4e0d\u53d8\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#multisimva","title":"\u5b9e\u9a8c\u4e8c\uff1a\u91c7\u7528MULTISIM\u9010\u70b9\u4eff\u771f\u4e09\u6781\u7ba1\u8f93\u5165VA\u7279\u6027","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_11","title":"\u4eff\u771f\u8fc7\u7a0b","text":"<ol> <li>\u5229\u7528MULTISIM\u8f6f\u4ef6\u642d\u5efa\u4ee5\u4e0b\u7535\u8def\uff1a</li> </ol> fig7 \u63a7\u5236VCE\u4e0d\u53d8\u4e0b\u7684\u5b9e\u9a8c\u7535\u8def fig8 \u63a7\u5236Ib\u4e0d\u53d8\u4e0b\u7684\u5b9e\u9a8c\u7535\u8def <ol> <li>\u5229\u7528\u8f6f\u4ef6\u81ea\u5e26\u7684\u4eff\u771f\u529f\u80fd<code>\u4eff\u771f</code>-&gt;<code>\u76f4\u6d41\u626b\u63cf</code>\u529f\u80fd\uff0c\u6539\u53d8\u6240\u8981\u8c03\u8282\u7684\u53c2\u6570\uff0c\u83b7\u5f97\u6240\u8981\u7684\u7279\u6027\u66f2\u7ebf\u3002</li> </ol> fig9 \u56fa\u5b9aVce=15V\uff0c\u6539\u53d8V1\u7684\u503c\uff0c\u83b7\u5f97\u7684\u626b\u63cf\u66f2\u7ebf <ol> <li>\u5229\u7528matlab\u8fdb\u884c\u6570\u636e\u5904\u7406\uff0c\u83b7\u5f97\u6700\u7ec8\u503c\u3002</li> </ol> <p>\u56fa\u5b9aVce</p> Matlab<pre><code>data1 = readmatrix('./1016/1_0V.csv','NumHeaderLines',1);\n% \u63d0\u53d6\u7535\u538b\u548c\u7535\u6d41\u6570\u636e\nvbe1 = data1(:, 5);\nib1 = data1(:, 2);\n\n% \u5bf9\u66f2\u7ebf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\nsmoothed_ib1 = smooth(ib1, 5, 'loess'); \nplot(vbe1, smoothed_ib1, 'b-', 'LineWidth', 1); % \u7ed8\u5236\u5e73\u6ed1\u66f2\u7ebf\ntitle('\u56fa\u5b9aVCE\u4e0b\u4e09\u6781\u7ba1\u8f93\u51faVA\u66f2\u7ebf'); % \u6dfb\u52a0\u6807\u9898\nxlabel('V_{BE}(V)'); % \u6dfb\u52a0x\u8f74\u6807\u7b7e\nylabel('I_B(uA)'); % \u6dfb\u52a0y\u8f74\u6807\u7b7e\ngrid on; % \u6dfb\u52a0\u7f51\u683c\u7ebf\n\ndata2 = readmatrix('./1016/2_15V.csv','NumHeaderLines',1);\n% \u63d0\u53d6\u7535\u538b\u548c\u7535\u6d41\u6570\u636e\nvbe2 = data2(:,5);\nib2 = data2(:,2);\n% \u5bf9\u66f2\u7ebf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\nsmoothed_ib2 = smooth(ib2, 5, 'loess'); % \u4f7f\u7528rloess\u5e73\u6ed1\u7b97\u6cd5\nhold on; % \u5728\u540c\u4e00\u56fe\u4e2d\u53e0\u52a0\u5e73\u6ed1\u66f2\u7ebf\nplot(vbe2, smoothed_ib2, 'r-', 'LineWidth', 1); % \u7ed8\u5236\u5e73\u6ed1\u66f2\u7ebf\nlegend('V_{CE}=0V','V_{CE}=15V');\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_12","title":"\u5b9e\u9a8c\u7ed3\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_13","title":"\u5b9e\u9a8c\u4e09\uff1a\u6d4b\u8bd5\u4e0e\u975e\u95e8\u903b\u8f91\u529f\u80fd","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_14","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u4e07\u7528\u8868\uff08HY63\uff09</li> <li>74LS00\u4e0e\u975e\u95e8</li> <li>\u8fde\u63a5\u7ebf</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_15","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u8fde\u63a5\u7535\u8def\u4e3a\u4e0b\u56fe\uff0c\u6ce8\u610f7\u811a\u63a5\u5730\u548c14\u811a\u63a5\u9ad8\u7535\u5e73</li> </ol> fig10 \u8fde\u63a5\u7535\u8def <ol> <li>\u70b9\u6309\u6309\u94ae\uff0c\u6539\u53d8\u8f93\u5165\u4e24\u7aef\u7535\u538b\u3002</li> <li>\u5229\u7528\u4e07\u7528\u8868\u6d4b\u91cf\u5f15\u811a\u7535\u538b\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_16","title":"\u5b9e\u9a8c\u7ed3\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_17","title":"\u5b9e\u9a8c\u56db\uff1a\u4e0e\u975e\u95e8\u4f20\u8f93\u7279\u6027\u6d4b\u91cf","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_18","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u793a\u6ce2\u5668\uff081000 X-Series\uff09</li> <li>\u4fe1\u53f7\u6e90\uff08 SDG2000X\uff09</li> <li>74LS00\u4e0e\u975e\u95e8</li> <li>\u8fde\u63a5\u7ebf</li> <li>\u4e07\u7528\u8868\uff08HY63\uff09</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_19","title":"\u6d4b\u8bd5\u65b9\u6848\u4e0e\u7ed3\u679c","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#1","title":"\uff081\uff09\u9010\u70b9\u8f93\u5165\u76f4\u6d41\u7535\u538b\uff0c\u6d4b\u91cf\u5176\u4f20\u8f93\u7279\u6027\u3002","text":"<ol> <li>\u8fde\u63a5\u7535\u8def</li> </ol> fig11 \u6d4b\u8bd5\u7535\u8def <ol> <li> <p>\u8c03\u82822\u811a\u7684\u7535\u4f4d\uff0c\u4f7f\u7528\u4e07\u7528\u8868\u6d4b\u91cf2\u811a\u4ee5\u53ca\u8f93\u51fa\u7aef\u7535\u538b\u3002</p> </li> <li> <p>\u8bb0\u5f55\u6570\u636e\uff0c\u5e76\u6839\u636e\u6570\u636e\u7ed8\u5236\u56fe\u7ebf\u3002</p> </li> </ol> <p></p> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#205v","title":"\uff082\uff09\u8f93\u51650\u81f35V\u53d8\u5316\u7684\u7535\u538b\uff0c\u5229\u7528\u626b\u63cf\u6cd5\u6d4b\u91cf\u4f20\u8f93\u7279\u6027","text":"<ol> <li>\u8fde\u63a5\u7535\u8def\u3002</li> </ol> fig12 \u6d4b\u8bd5\u7535\u8def <ol> <li> <p>\u8c03\u8282\u4fe1\u53f7\u6e90\u4e3a0V\uff5e5V\u952f\u9f7f\u6ce2\uff0c\u5bf9\u79f0\u6027\u4e3a50%\uff0c\u9891\u7387\u4e3a10Hz\u3002</p> </li> <li> <p>\u8c03\u8282\u793a\u6ce2\u5668\u81f3\u663e\u793a\u6e05\u6670\u7a33\u5b9a\u56fe\u50cf\u3002</p> </li> </ol> <p></p> <ol> <li>\u5207\u6362\u89c2\u5bdf\u9009\u9879\u4e3aXY\u663e\u793a\u3002</li> </ol> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_20","title":"\u7ed3\u679c\u5206\u6790","text":"<ul> <li> <p>\u6839\u636eXY\u663e\u793a\uff0c\u5b9e\u9645\u4e0a\uff0c\u4ece\u9ad8\u7535\u4f4d\u53d8\u5230\u4f4e\u70b9\u4f4d\uff0c\u4e34\u754c\u503c\u504f\u5927\uff1b\u800c\u5f53\u4f4e\u70b9\u4f4d\u53d8\u5230\u9ad8\u7535\u4f4d\u8fc7\u7a0b\u4e2d\uff0c\u4e34\u754c\u503c\u504f\u5c0f\u3002\u6240\u4ee5\uff0c\u5728\u8fdb\u884c\u4e07\u7528\u8868\u6d4b\u91cf\u65f6\uff0c\u6b63\u53cd\u4e24\u6b21\u8c03\u8282\u7535\u538b\u6240\u83b7\u6570\u636e\u4e0d\u540c\u5c5e\u4e8e\u662f\u6b63\u5e38\u73b0\u8c61\u3002</p> </li> <li> <p>\u6839\u636e\u793a\u6ce2\u5668\u8bfb\u6570\uff0c\u5f53\u7535\u4f4d\u57282.3V\u52303.5V\u4e4b\u95f4\u65f6\uff0c\u8f93\u5165\u5e76\u4e0d\u662f\u51c6\u786e\u7684\u9ad8\u7535\u4f4d\u6291\u6216\u4f4e\u7535\u4f4d\uff0c\u6b64\u5904\u7684\u5f15\u811a\u8f93\u51fa\u4e5f\u5e76\u4e0d\u662f\u51c6\u786e\u7684\u9ad8\u7535\u4f4d/\u4f4e\u70b9\u4f4d\u3002\u56e0\u6b64\u5728\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u5e94\u8be5\u907f\u514d\u5f15\u811a\u8f93\u5165\u5904\u4e8e\u8fd9\u4e2a\u503c\u4e4b\u95f4\u3002</p> </li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_21","title":"\u5b9e\u9a8c\u4e94\uff1a\u4e0e\u975e\u95e8\u8f93\u5165\u7535\u6d41\u6d4b\u91cf","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_22","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>74LS00\u4e0e\u975e\u95e8</li> <li>\u8fde\u63a5\u7ebf</li> <li>\u4e07\u7528\u8868\uff08HY63\uff09</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_23","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u8fde\u63a5\u7535\u8def</li> </ol> <ol> <li>\u5229\u7528\u4e07\u7528\u8868\u6d4b\u91cf\u7535\u538b\uff0c\u5e76\u8bb0\u5f55\u6570\u636e</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_24","title":"\u7ed3\u679c\u5206\u6790","text":"<ul> <li>\u5f532\u811a\u63a5\u4f4e\u70b9\u4f4d\u65f6\uff0c\u4e0e\u975e\u95e8\u5185\u90e8\u7684\u7535\u538b\u9ad8\u4e8e\u5916\u754c\u7535\u538b\uff0c\u5bfc\u81f4\u6709\u7535\u6d41\u901a\u8fc7\u3002</li> <li>\u5f532\u811a\u63a5\u9ad8\u7535\u4f4d\u65f6\uff0c\u4e0e\u975e\u95e8\u4e5f\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5185\u963b\uff0c\u5e76\u4e0d\u80fd\u5b8c\u5168\u53cd\u6620\u9ad8\u7535\u4f4d\u7535\u538b\uff0c\u800c\u662f\u8fdb\u884c\u4e00\u5b9a\u7684\u5206\u538b\u3002\u4e0d\u8fc7\uff0c\u7531\u4e8e\u7535\u6d41\u975e\u5e38\u5c0f\uff08\u57281e-5A\u7684\u6570\u91cf\u7ea7\uff09\uff0c\u5f80\u5f80\u53ef\u4ee5\u5c06\u4e0e\u975e\u95e8\u5f53\u4f5c\u65e0\u7a77\u5927\u5185\u963b\uff1b\u4f46\u662f\u5982\u679c\u5916\u63a5\u7535\u963b\u975e\u5e38\u5927\uff081e5\u03a9\u6570\u91cf\u7ea7\uff09\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u5728\u5185\u3002</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_25","title":"\u5b9e\u9a8c\u516d\uff1a","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_26","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>74LS00\u4e0e\u975e\u95e8</li> <li>\u8fde\u63a5\u7ebf</li> <li>\u4e07\u7528\u8868\uff08HY63\uff09</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_27","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u8fde\u63a5\u7535\u8def</li> </ol> \u8f93\u51fa\u9ad8\u7535\u5e73\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u8f93\u51fa\u4f4e\u7535\u5e73 <p>200\u03a9\u4f5c\u4e3a\u4fdd\u62a4\u7535\u963b\uff0c\u4fdd\u62a4\u7535\u8def</p> <ol> <li> <p>\u7528\u4e07\u7528\u8868\u6b27\u59c6\u6863\u6d4b\u91cfR~L~\u963b\u503c\uff0c\u5e76\u5c06R~L~\u8c03\u8282\u4e3a\u5408\u9002\u5927\u5c0f\u3002\u540e\u8fde\u63a5\u7535\u8def\u5229\u7528\u4e07\u7528\u8868\u6d4b\u91cf\u7535\u538b\uff0c\u5e76\u8bb0\u5f55\u6570\u636e\u3002</p> </li> <li> <p>\u8ba1\u7b97\u51fa\u96c6\u6210\u95e8\u7535\u8def\u7684\u8f93\u51fa\u8d1f\u8f7d\u7535\u6d41\uff0c\u5728\u5750\u6807\u7cfb\u4e2d\u753b\u51fa\u8f93\u51fa\u7aef\u8d1f\u8f7d\u7279\u6027\u66f2\u7ebf\u3002</p> </li> <li> <p>\u6ce8\u610f\uff1a\u6bcf\u6b21\u6d4b\u91cf\u7535\u963bRL\u7684\u503c\u65f6\u987b\u65ad\u7535\uff0c\u5e76\u5c06R~L~\u4e24\u7aef\u4e2d\u7684\u4efb\u610f\u4e00\u7aef\u4ece\u7535\u8def\u4e2d\u65ad\u5f00\uff0c\u4ee5\u514d\u8fde\u63a5\u7684\u7535\u8def\u5f71\u54cd\u7535\u963b\u7684\u6d4b\u91cf\u503c\u3002</p> </li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab4/lab4%20%E4%B8%89%E6%9E%81%E7%AE%A1%E5%92%8C%E9%97%A8%E7%94%B5%E8%B7%AF%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95/#_28","title":"\u5b9e\u9a8c\u7ed3\u679c\u4e0e\u5206\u6790","text":"<p>\u53ef\u4ee5\u770b\u5230\u4e0e\u975e\u95e8\u8f93\u51fa\u5728\u5916\u7aef\u4e32\u8054\u7535\u963b\u65f6\uff0c\u5c24\u5176\u662f\u5c0f\u7535\u963b\uff0c\u8f93\u51fa\u5e76\u4e0d\u662f\u6807\u51c6\u7684\u9ad8\u7535\u5e73\u6216\u8005\u4f4e\u7535\u5e73\u3002\u4e0e\u975e\u95e8\u5185\u90e8\u5448\u73b0\u4e00\u5b9a\u7684\u5b9a\u503c\u7535\u963b\u7279\u6027\uff08\u7531\u4e24\u6bb5\u66f2\u7ebf\u5448\u73b0\u76f4\u7ebf\u53ef\u4ee5\u770b\u51fa\uff09\u3002\u7ecf\u8fc7\u4e00\u5b9a\u7684\u8ba1\u7b97\uff0c\u53ef\u4ee5\u5f97\u51fa\u4e0e\u975e\u95e8\u5185\u90e8\u7684\u7535\u963b\u53ef\u4ee5\u8fd1\u4f3c\u4f30\u8ba1\u4e3a0.02\u03a9\u3002</p> <p></p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/","title":"Lab 5","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_1","title":"\u5c0f\u8f66\u68c0\u6d4b\u7535\u8def\u548c\u7535\u673a\u9a71\u52a8\u7535\u8def\u6d4b\u8bd5","text":"<p>\u5b9e\u9a8c\u65e5\u671f\uff1a2023/10/23</p> <p>\u5730\u70b9\uff1a\u4e1c3-406</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_2","title":"\u5b9e\u9a8c\u76ee\u7684","text":"<ol> <li>\u4e86\u89e3\u667a\u80fd\u5c0f\u8f66\u7ed3\u6784\u548c\u5de5\u4f5c\u539f\u7406\u3002</li> <li>\u638c\u63e1\u5149\u7535\u68c0\u6d4b\u7684\u539f\u7406\u548c\u6d4b\u91cf\u65b9\u6cd5\u3002</li> <li>\u4e86\u89e3\u76f4\u6d41\u7535\u673a\u9a71\u52a8\u7535\u8def\u5de5\u4f5c\u539f\u7406\u548c\u6d4b\u8bd5\u65b9\u6cd5\u3002</li> <li>\u5b66\u4f1a\u53c2\u7167\u539f\u7406\u56fe\u6d4b\u91cf\u548c\u8c03\u8bd5PCB\u677f\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_3","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li> <p>\u4e07\u7528\u8868\uff08HY63\uff09</p> </li> <li> <p>\u5b9e\u9a8c\u5ba4\u914d\u5907\u5c0f\u8f66</p> </li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_4","title":"\u5b9e\u9a8c\u4e00\uff1a\u7ea2\u5916\u5149\u7535\u68c0\u6d4b\u7535\u8def\u6d4b\u8bd5","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_5","title":"\u6d4b\u8bd5\u65b9\u6848","text":"<ol> <li>\u5206\u6790\u7ea2\u5916\u5149\u7535\u68c0\u6d4b\u7535\u8def\u53c2\u6570\u8bbe\u8ba1\u3002</li> <li>\u7f3a\u7701\u9ad8\u5ea6\uff082CM\uff09\uff0c\u767d\u5e95/\u9ed1\u5e95/\u5176\u5b83\u8868\u9762\u4e0b\uff0c\u5149\u7535\u7ba1\u53cd\u5c04\u7535\u538b\u6d4b\u91cf\u6bd4\u8f83\uff08\u81f3\u5c11\u6d4b\u8bd52\u7ec4\u5149\u7535\u7ba1\uff09\u3002</li> <li>\u8ba1\u7b97\u5e76\u786e\u5b9a\u533a\u5206\u9ed1\u767d\u5730\u9762\u7684\u6bd4\u8f83\u7535\u538b\u503c\uff0c\u603b\u7ed3\u5149\u7535\u68c0\u6d4b\u8f68\u9053\u5bf9\u5730\u9762\u7684\u6700\u4f4e\u8981\u6c42\u3002</li> <li>\u4e0d\u540c\u9ad8\u5ea6\uff082\u81f36CM\uff09\uff0c\u5149\u7535\u7ba1\u53cd\u5c04\u7535\u538b\u6d4b\u91cf\u6bd4\u8f83\uff0c\u603b\u7ed3\u5149\u7535\u68c0\u6d4b\u8f68\u9053\u5bf9\u5b89\u88c5\u9ad8\u5ea6\u7684\u8981\u6c42\u3002</li> <li>\u89c2\u5bdf\u73af\u5883\u5149\u4eae\u5bf9\u5149\u7535\u68c0\u6d4b\u7535\u8def\u7684\u5f71\u54cd\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_6","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u5206\u6790\u7535\u8def</li> </ol> fig1 OPTO5\u5185\u90e8\u7535\u8def <p>\u6211\u4eec\u4e3b\u8981\u8ba8\u8bbaR17\u7684\u963b\u503c\uff0cR19\u7684\u963b\u503c\u548cW5\u4e3a\u4ec0\u4e48\u4e3a\u5927\u7535\u963b\uff0810k\uff09\u3002</p> <ol> <li> <p>\u4f7f\u76f4\u6d41\u7535\u538b\u6e90\u8f93\u51fa\u7a33\u5b9a15V\u7535\u538b\uff0c\u7ed9\u5c0f\u8f66\u4f9b\u7535\u3002</p> </li> <li> <p>\u5c06\u5c0f\u8f66\u7684\u7ea2\u5916\u63a2\u6d4b\u4eea\u7f6e\u4e8e\u4e0d\u540c\u8868\u9762\uff0c\u4f7f\u7528\u4e07\u7528\u88686V\u7535\u538b\u6863\u6d4b\u91cf\u7535\u8def\u5404\u53c2\u6570\u3002</p> </li> </ol> <p>##### \u30101.1 \u5206\u6790\u7ea2\u5916\u5149\u7535\u68c0\u6d4b\u7535\u8def\u53c2\u6570\u8bbe\u8ba1\u3011</p> Led05 11\u811a\u8f93\u5165/V 10\u811a\u8f93\u5165/V 13\u811a\u8f93\u51fa/V \u706f V~R19~/V V~R20~/V V~R17~/V V~R18~/V 5V\u5b9e\u9645\u8f93\u5165\u7535\u538b/V 3.3V\u5b9e\u9645\u8f93\u5165\u7535\u538b/V \u684c\u9762\u767d 0.200 1.992 0.153 \u4eae 1.253 3.168 3.708 4.721 4.933 3.329 \u684c\u9762\u9ed1 3.655 1.992 3.320 \u6697 0.000 0.000 3.709 1.340 ~ ~ <ul> <li> <p>R19\u4e0eR20</p> <p>\u8fd9\u4e24\u4e2a\u7535\u963b\u4f4d\u4e8e\u53d1\u5149\u7535\u8def\u4e4b\u4e2d\u3002R19\u4f5c\u4e3aLED\u706f\u7684\u9650\u6d41\u7535\u963b\uff0cR20\u4f5c\u4e3aLED\u7684\u5e76\u8054\u7535\u963b\u3002  $$  \\begin{array}{l}  I_{19}=\\dfrac{U_{R_{19}}}{R_{19}} = 1.253/680mA=1.84mA\\  U_{LED}=V_{I}-U_{R_{19}}=3.329-1.253=2.076V  \\end{array}  $$</p> <p></p> <p></p>fig2 \u53d1\u5149\u4e8c\u6781\u7ba1I-V\u7279\u6027\u66f2\u7ebf <p>\u6839\u636e\u4e0a\u8ff0\u56fe\u8868\uff0c\u540c\u65f6\u6839\u636e\u6211\u4eec\u7684\u4e8c\u6781\u7ba1\u4e3a\u7eff\u8272\u4e8c\u6781\u7ba1\u53ef\u77e5\uff0c\u5f53\u9009\u75283.3V\u7684\u53d1\u5149\u4e8c\u6781\u7ba1\u65f6\uff0c\u5df2\u7ecf\u80fd\u591f\u8f83\u597d\u5730\u4f53\u73b0\u53d1\u5149\u7279\u6027\uff0c\u7535\u6d41\u4ee5\u6beb\u5b89\u7ea7\u522b\u901a\u8fc7\u3002</p> <p>R20\u4f5c\u4e3a\u5e76\u8054\u7535\u963b\uff0c\u641c\u7d22\u8d44\u6599\u5f97\u77e5\uff0c\u5728LED\u4e24\u7aef\u5e76\u8054\u5927\u7535\u963b\uff0c\u5f53\u6709\u53cd\u5411\u7535\u6d41\u6d41\u8fc7\u65f6\uff0c\u80fd\u7a33\u5b9aLED\u4e24\u7aef\u7535\u538b\uff0c\u907f\u514d\u6240\u6709\u5206\u538b\u5728\u4e00\u4e2aLED\u706f\u4e0a\uff0c\u5bfc\u81f4LED\u706f\u53cd\u5411\u51fb\u7a7f\uff1b\u540c\u65f6\uff0c\u80fd\u591f\u5f88\u597d\u7684\u91ca\u653eLED\u5185\u90e8\u5b58\u50a8\u7684\u80fd\u91cf\uff0c\u4f7f\u5f97LED\u706f\u5feb\u901f\u7184\u706d\u3002</p> </li> <li> <p>W5\uff0c10\u811a\u8f93\u5165\u7535\u538b</p> <p>W5\u91c7\u752810k\u03a9\u5927\u7535\u963b\uff0c\u5728\u63a7\u5236\u7535\u4f4d\u538b\u964d\u7684\u540c\u65f6\uff0c\u4e5f\u5f88\u597d\u5730\u63a7\u5236\u8fdb\u5165\u6bd4\u8f83\u5668\u7684\u7535\u6d41\u5927\u5c0f\uff0c\uff0c\u4e00\u822c\u8981\u5c06\u8f93\u5165\u6bd4\u8f83\u5668\u7684\u7535\u6d41\u63a7\u5236\u572810mA\u4ee5\u4e0b\u3002</p> </li> <li> <p>\u7ea2\u5916\u68c0\u6d4b\u7535\u8def\u90e8\u5206R17\uff0cR18</p> <p>R17\u4f5c\u4e3a\u7ea2\u5916\u53d1\u5149\u4e8c\u6781\u7ba1\u7684\u9650\u6d41\u7535\u963b\uff0c\u63a7\u5236\u6d41\u8fc7\u4e8c\u6781\u7ba1\u7684\u7535\u6d41\u5927\u5c0f\u3002  $$  I_{R_{17}}=U_{R_{17}}/R_{17}=3.708/150=24.72mA  $$  \u540c\u6837\u6839\u636efig2\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5c06\u7ea2\u5916\u53d1\u5149\u4e8c\u6781\u7ba1\u7ef4\u6301\u572820mA\u5de6\u53f3\u7684\u7535\u6d41\u901a\u8fc7\uff0c\u80fd\u4f7f\u5176\u66f4\u597d\u5730\u53d1\u6325\u4f5c\u7528\u3002</p> <p>R18\u4f5c\u4e3a\u68c0\u6d4b\u652f\u8def\u4e0a\u7684\u7535\u963b\uff0c\u4e0e\u5149\u7535\u4e8c\u6781\u7ba1\u6784\u6210\u4e86\u4e00\u4e2a\u4e3a11\u811a\u63d0\u4f9b\u7535\u4f4d\u7684\u4e4b\u8def\u3002  $$  \\begin{array}{l}  1. \u5f53\u5149\u7535\u4e8c\u6781\u7ba1\u63a5\u6536\u7ea2\u5916\u5149\u7ebf\uff0c\u4ea7\u751f\u7535\u6d41\u65f6\uff0c\u7b49\u4e8e\u5149\u7535\u4e8c\u6781\u7ba1\u5bfc\u901a\uff1a\\  I_{R_{18}}=U_{R_{18}}/R_{18}=4.721/10k=0.47mA\\  U_d=U_s-U_{R_{18}}=0.2V\\  \\  2. \u5f53\u5149\u7535\u4e8c\u6781\u7ba1\u672a\u63a5\u6536\u5230\u7ea2\u5916\u5149\u7ebf\uff0c\u7b49\u4e8e\u5149\u7535\u4e8c\u6781\u7ba1\u622a\u6b62\uff1a\\  I_{R_{18}}=U_{R_{18}}/R_{18}=0.13mA\\  U_d=U_s-U_{R_{18}}=3.655V\\  \\end{array}  $$  \u5f53\u7136\uff0c\u63a5\u6536\u5230\u7684\u7ea2\u5916\u5149\u7ebf\u8d8a\u5c11\uff0c\u5149\u7535\u4e8c\u6781\u7ba1\u4e24\u7aef\u7535\u538b\u8d8a\u5927\uff0c11\u811a\u7535\u4f4d\u8d8a\u9ad8\u3002</p> </li> <li> <p>\u6bd4\u8f83\u5668\u7684\u4f7f\u7528</p> <p>11\u811a\u7535\u4f4d\u6bd410\u811a\u7535\u4f4d\u4f4e\uff0c\u5219\u8f93\u51fa\u4f4e\u7535\u538b\uff0c\u7a33\u5b9a\u57280.153V\u3002</p> <p>11\u811a\u7535\u4f4d\u6bd410\u811a\u7535\u4f4d\u9ad8\uff0c\u8fd9\u8f93\u51fa\u9ad8\u7535\u538b\uff0c\u7a33\u5b9a\u57283.320V\u3002</p> </li> </ul> LED06 11\u811a\u8f93\u5165/V 10\u811a\u8f93\u5165/V 13\u811a\u8f93\u51fa/V \u706f V~R19~/V V~R20~/V V~R17~/V V~R18~/V \u767d 0.193 1.965 0.152 \u4eae 1.249 3.169 3.712 4.711 \u9ed1 3.201 1.965 3.320 \u6697 0 0 3.713 1.728 <p>\u6d4b\u91cfLED06\u963b\u503c\u4e24\u7aef\u7684\u7535\u538b\u4e0eLED05\u6240\u5f97\u7ed3\u679c\u57fa\u672c\u76f8\u4f3c\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#12","title":"\u30101.2 \u4e0d\u540c\u8868\u9762\uff0c\u5149\u7535\u7ba1\u53cd\u5c04\u7535\u538b\u6d4b\u91cf\u3011","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#13","title":"\u30101.3 \u533a\u5206\u9ed1\u767d\u5730\u9762\u7684\u6bd4\u8f83\u7535\u538b\u503c\u3011","text":"<p>\u6839\u636e\u5b9e\u9a8c\u7ed3\u679c\uff0c\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u7ed3\u8bba\uff1a\u53cd\u5c04\u8868\u9762\u5bf9\u7ea2\u5916\u7ebf\u5438\u6536\u80fd\u529b\u8d8a\u5f3a\uff0c\u5149\u7535\u7ba1\u53cd\u5c04\u7535\u538b\u8d8a\u9ad8\u3002</p> <p>\u968f\u7740\u53cd\u5c04\u8868\u9762\u5bf9\u7ea2\u5916\u7ebf\u80fd\u529b\u7684\u5438\u6536\u589e\u5f3a\uff0c\u5149\u7535\u7ba1\u4e24\u7aef\u7535\u538b\u589e\u52a0\uff0c\u5f53\u8d85\u8fc7\u53e6\u5916\u4e00\u53ea\u5f15\u811a\u7684\u8f93\u5165\u7535\u538b\u540e\uff0c\u6bd4\u8f83\u5668\u8f93\u51fa\u76f8\u53cd\u7684\u6027\u8d28\u3002</p> <ol> <li>\u5c06\u7ea2\u5916\u63a2\u6d4b\u4eea\u7f6e\u4e8e\u767d\u8272\u8868\u9762\u4e0d\u540c\u9ad8\u5ea6\u5904\uff08\u901a\u8fc7\u5c0f\u8f66\u4e0b\u9762\u57ab\u7f6e\u4e66\u672c\u5b9e\u73b0\uff09\uff0c\u6d4b\u91cf\u5149\u7535\u7ba1\u53cd\u5c04\u7535\u538b\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#1426cm","title":"\u30101.4\u4e0d\u540c\u9ad8\u5ea6\uff082\u81f36CM)\uff0c\u5149\u7535\u7ba1\u53cd\u5c04\u7535\u538b\u6d4b\u91cf\u6bd4\u8f83\u3011","text":"<ul> <li>\u5f53\u5149\u7535\u7ba1\u79bb\u5730\u8d8a\u6765\u8d8a\u9ad8\uff0c\u6240\u80fd\u5438\u6536\u7684\u7ea2\u5916\u5149\u7ebf\u8d8a\u6765\u8d8a\u5c11\uff0c\u4e24\u7aef\u7535\u538b\u8d8a\u6765\u8d8a\u5927\u3002</li> <li>\u5f53\u5149\u7535\u7ba1\u9ad8\u5ea6\u5927\u7ea6\u4e3a3.5\uff5e3.7cm\u5de6\u53f3\u65f6\uff0c\u5149\u7535\u7ba1\u4e24\u7aef\u7535\u538b\u9010\u6e10\u9760\u8fd11.992V\uff08\u53e6\u4e00\u53ea\u811a\u7684\u7535\u538b\uff09\uff0c\u6b64\u65f6\u4ece\u6bd4\u8f83\u5668\u4ece\u8f93\u51fa\u4f4e\u7535\u538b\u8f6c\u53d8\u4e3a\u9ad8\u7535\u538b\uff0c\u5728\u8fd9\u4e2a\u7535\u538b\u503c\u4ee5\u4e0b\uff0c\u6307\u793aLED\u706f\u53d1\u5149\uff0c\u4ee5\u4e0a\u5219\u7184\u706d\u3002</li> <li>\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u4e3a\u4e86\u907f\u514d\u9ad8\u5ea6\u5bf9\u6d4b\u91cf\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u5f53\u4e00\u53ea\u811a\u7684\u5f15\u811a\u4e3a2V\u5de6\u53f3\uff0c\u5e94\u8be5\u5c06\u5149\u7535\u7ba1\u7f6e\u4e8e&lt;2.5cm\u7684\u4f4d\u7f6e\u3002\u5f53\u7136\uff0c\u4e5f\u8981\u6839\u636e\u5177\u4f53\u7684\u53e6\u4e00\u53ea\u811a\u7684\u7535\u4f4d\uff0c\u5177\u4f53\u8c03\u6574\u5149\u7535\u7ba1\u79bb\u5730\u9ad8\u5ea6\u3002</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#15","title":"\u30101.5 \u89c2\u5bdf\u73af\u5883\u5149\u4eae\u5bf9\u5149\u7535\u68c0\u6d4b\u7535\u8def\u7684\u5f71\u54cd\u3011","text":"<ul> <li>\u53ef\u89c1\uff0c\u73af\u5883\u5bf9\u5b9e\u9a8c\u6709\u4e00\u5b9a\u7684\u5f71\u54cd\uff0c\u5f53\u5176\u5f71\u54cd\u57281%\u5de6\u53f3\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002</li> <li>\u5728\u660f\u6697\u73af\u5883\u4e0b\uff0c\u53bb\u9664\u4e86\u65e5\u5149\u4e2d\u7684\u7ea2\u5916\u7ebf\u5bf9\u5149\u7535\u7ba1\u7684\u5f71\u54cd\uff0c\u4ece\u800c\u4f7f\u5f97\u5176\u5f15\u811a11\u4e24\u7aef\u7535\u538b\u7565\u5fae\u5347\u9ad8</li> <li>\u5728\u660e\u4eae\u7684\u6761\u4ef6\u4e0b\uff0c\u65b0\u589e\u52a0\u7684\u5149\u6e90\u4e2d\u7684\u7ea2\u5916\u7ebf\u5bf9\u5149\u7535\u7ba1\u9020\u6210\u4e00\u5b9a\u5f71\u54cd\uff0c\u4f7f\u5f97\u5f15\u811a11\u4e24\u7aef\u7535\u538b\u7565\u5fae\u4e0b\u964d\uff080.001V\u7684\u504f\u5dee\u53ef\u89c6\u4e3a\u8f66\u8f86\u4e0a\u7684\u4e0d\u7cbe\u786e\uff0c\u53ef\u4ee5\u5ffd\u7565\uff09\u3002</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#va","title":"\u5b9e\u9a8c\u4e8c\uff1a\u6d4b\u91cf\u76f4\u6d41\u7535\u673a\u6b63\u8f6c\u548c\u53cd\u8f6c\u65f6\u7684VA\u7279\u6027","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_7","title":"\u6d4b\u8bd5\u65b9\u6848","text":"<p>\u6d4b\u91cf\u4e0d\u540c\u8f93\u5165\u76f4\u6d41\u7535\u538b\u65f6\uff0c\u7ecf\u8fc7\u5c0f\u8f66\u4e0a\u7684\u7535\u673a\u7684\u7535\u6d41\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_8","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u62c6\u4e0b\u5c0f\u8f66\u7535\u6e90\u7ebf\uff0c\u5c06\u5176\u4e0e\u76f4\u6d41\u8f93\u5165\u7535\u538b\u6e90\u3001\u4e07\u7528\u886860mA\u7535\u6d41\u6863\u4e32\u8054\uff0c60mA\u7684\u7535\u6d41\u6863\u5185\u963b\u7ea6\u4e3a10\u03a9\u5de6\u53f3\uff0c\u5bf9\u66f2\u7ebf\u7684\u5f71\u54cd\u8f83\u5c0f</li> <li>\u8c03\u8282\u76f4\u6d41\u7a33\u538b\u6e90\u7684\u7535\u538b\uff0c\u8bb0\u5f55\u4e07\u7528\u8868\u8bfb\u6570</li> <li>\u4ea4\u6362\u8f93\u5165\u7535\u538b\u6e90\u6b63\u8d1f\u6781\uff0c\u6d4b\u91cf\u7535\u673a\u53cd\u8f6c\u65f6\u7684VA\u7279\u6027\u3002</li> </ol> <ul> <li>\u76f4\u6d41\u7535\u538b\u6e90\u4ece\u9ad8\u5230\u4f4e\u53d8\u5316\u65f6\uff0c\u7535\u6d41\u9010\u6e10\u8f83\u5c0f\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u7535\u52a8\u673a\u7684\u8f6c\u901f\u6162\u6162\u51cf\u5c0f\u3002</li> <li>\u5f53\u7535\u538b\u6e90\u7535\u538b\u8fc7\u5c0f\u65f6\uff0c\u7535\u52a8\u673a\u505c\u8f6c\uff0c\u540c\u65f6\u7535\u6d41\u6025\u5267\u4e0a\u5347\uff0c\u6b64\u65f6\u4e0d\u518d\u5bf9\u5916\u8f93\u51fa\u673a\u68b0\u80fd\uff0c\u800c\u662f\u7b49\u6548\u4e3a\u4e00\u4e2a\u7535\u963b\uff0c\u53ea\u8f93\u51fa\u70ed\u80fd\u3002</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_9","title":"\u5b9e\u9a8c\u4e09\uff1a\u7535\u673a\u9a71\u52a8\u6a21\u5757\u529f\u80fd\u9a8c\u8bc1","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_10","title":"\u6d4b\u8bd5\u65b9\u6848","text":"<p>\u5bf9\u96c6\u6210H\u6865\u5404\u7aef\u53e3\u8f93\u5165\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u7535\u538b\uff0c\u68c0\u9a8c\u82af\u7247\u5404\u7aef\u53e3\u7684\u8f93\u51fa\u7279\u6027\uff0c\u9a8c\u8bc1\u7535\u673a\u7684\u8f6c\u52a8\u60c5\u51b5\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_11","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>\u5206\u6790PCB\u677f\u4e0a\u7684\u7535\u8def\u56fe\u3002</li> </ol> fig3 \u7535\u673a\u63a7\u5236\u7535\u8def\u7535\u8def\u56fe <p>\u8be5\u7535\u8def\u5206\u4e3a\u4e09\u4e2a\u6a21\u5757\uff1a</p> <ul> <li>\u5149\u7535\u63a7\u5236\u7535\u8def</li> </ul> <p>\u901a\u8fc7IN1\uff0cIN2\u7b49\u5404\u63a5\u53e3\u8f93\u5165\u7535\u538b\uff0c\u5f53\u8f93\u5165\u9ad8\u7535\u4f4d\u540e\uff0c\u63a7\u5236\u706f\u5149\u53d1\u4eae\uff0c\u5149\u7535\u7ba1\u63a5\u6536\u5230\u5149\u4fe1\u53f7\u5bfc\u901a\uff0c\u96c6\u6210H\u6865\u82af\u7247\u4e2d\u7684IN1\u811a\u53d8\u4e3a\u9ad8\u7535\u4f4d\u3002</p> <p>\u8fd9\u6837\u5b50\u5229\u7528\u5149\u7535\u63a7\u5236\u7684\u597d\u5904\u5728\u4e8e\uff0c\u4f4e\u7535\u6d41\u63a7\u5236\u9ad8\u7535\u6d41\uff0c\u5c06\u63a7\u5236\u7535\u8def\u4e0e\u9ad8\u7535\u538b\u3001\u5927\u7535\u6d41\u9a71\u52a8\u7535\u8def\u5206\u5f00\uff0c\u907f\u514d\u9ad8\u7535\u538b\u3001\u9ad8\u7535\u6d41\u51fa\u95ee\u9898\u540e\uff0c\u9020\u6210\u63a7\u5236\u7535\u8def\u7684\u635f\u574f\u3002</p> <ul> <li>\u96c6\u6210H\u6865\u9a71\u52a8\u82af\u7247</li> </ul> <p>\u6709\u8f93\u5165\u7aef4\u56db\u4e2a\uff0c\u5176\u4e2dIN1\u3001IN2\u548cOUT1\u3001OUT2\u63a7\u5236\u4e00\u4e2a\u7535\u673a\u7684\u4e24\u7aef\uff0cIN3\u3001IN4\u548cOUT3\u3001OUT4\u63a7\u5236\u53e6\u5916\u4e00\u4e2a\u7535\u673a\u3002</p> <ul> <li>\u7535\u673a\u90e8\u5206</li> </ul> <p>\u7535\u673a\u6709\u4e24\u4e2a\u7aef\u53e3\uff0c\u4e24\u7aef\u7684\u7535\u538b\u5dee\u9a71\u52a8\u7535\u673a\u7684\u8f6c\u52a8\u3002</p> <ol> <li>\u5c06\u7535\u677f\u63a5\u5165\u7535\u6e90\uff0c\u6839\u636e\u5f15\u811a\u56fe\u8fde\u63a5\u7535\u8def</li> </ol> <p></p> <p></p>fig4 \u5f15\u811a\u8f93\u5165\u56fe <p>\u5c06\u8f93\u5165\u811aENA\u603b\u63a7\u5236\u5f00\u5173\uff0cIN1\u3001IN2\u7b49\u8f93\u5165\u5f15\u811a\u4e0e3.3V\u6216\u8005GND\u811a\u8fde\u63a5\uff0c\u4ee5\u63a7\u5236\u8f93\u5165\u7535\u4f4d\u7684\u9ad8\u4f4e\u3002</p> <ol> <li>\u5229\u7528\u4e07\u7528\u8868\u6d4b\u91cf\u5404\u7535\u4f4d\u7535\u538b\uff0c\u8bb0\u5f55\u6570\u636e\u3002</li> </ol> <p></p> <ul> <li>\u8f93\u5165IN1\uff0cIN2\uff0c\u8f93\u5165\u7aef\u7684\u9ad8\u7535\u538b\u5bf9\u5e94\u4e86OUT1\u548cOUT2\u7684\u9ad8\u7535\u538b\u3002</li> <li>\u5f53\u8f93\u51fa\u7aefOUT1\u3001OUT2\u5bf9\u5e94\u7684\u7535\u538b\u6709\u4e00\u5b9a\u7684\u7535\u538b\u5dee\u65f6\uff0c\u7535\u673a\u8f6c\u52a8\u3002</li> <li>ENA\u7c7b\u4f3c\u4e8e\u603b\u5f00\u5173\uff0c\u5f53\u8f93\u5165\u4e3a\u9ad8\u7535\u538b\u65f6\uff0c\u82af\u7247\u6b63\u5e38\u5de5\u4f5c\uff1b\u8f93\u5165\u4e3a\u4f4e\u7535\u538b\u7684\u65f6\u5019\uff0c\u82af\u7247\u4e0d\u5de5\u4f5c\uff0c\u4e24\u8f93\u51fa\u811a\u8f93\u51fa\u8f83\u4f4e\u7535\u538b\uff0c\u4f46\u5e76\u6ca1\u6709\u975e\u5e38\u4f4e\uff081.3V\u5de6\u53f3\uff0c\u76f8\u6bd4\u4e8e0.17/0.71\u7684\u4f4e\u7535\u538b\uff09\u3002</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_12","title":"\u5b9e\u9a8c\u56db\uff1a\u7535\u673a\u5f00\u73af\u63a7\u5236\u65f6\u5c0f\u8f66\u8fd0\u884c\u72b6\u6001\u89c2\u6d4b","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_13","title":"\u6d4b\u8bd5\u65b9\u6848","text":"<p>\u89c2\u5bdf\u7535\u673a\u6b63\u8f6c/\u53cd\u8f6c\u65f6\uff0c\u5c0f\u8f66\u7684\u8fd0\u52a8\u60c5\u51b5\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab5/Lab5%20%E5%B0%8F%E8%BD%A6%E6%A3%80%E6%B5%8B%E7%94%B5%E8%B7%AF%E5%92%8C%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF%E6%B5%8B%E8%AF%95/#_14","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li>ENA\u8f93\u5165\u9ad8\u7535\u538b\u3002\u8c03\u8282IN1\u3001IN2\u3001IN3\u3001IN4\u7684\u8f93\u5165\u903b\u8f91\u4ee5\u63a7\u5236\u7535\u673a\u6b63\u53cd\u8f6c\u3002</li> <li>\u89c2\u5bdf\u5c0f\u8f66\u7684\u8fd0\u8f6c\u60c5\u51b5\u3002</li> </ol> <ul> <li>\u5f53\u4e24\u7aef\u5747\u6b63\u8f6c\u540e\uff0c\u7531\u4e8e\u4e24\u7aef\u7684\u7535\u673a\u5e76\u4e0d\u4e00\u5b9a\u5b8c\u5168\u4e00\u81f4\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u4e24\u7535\u673a\u5747\u6b63\u8f6c\u65f6\uff0c\u5e76\u4e0d\u5982\u8bbe\u60f3\u4e00\u822c\u76f4\u8d70\uff0c\u800c\u662f\u6709\u5fae\u5fae\u7684\u504f\u79fb\uff0c\u5728\u6211\u4eec\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\uff0c\u5c0f\u8f66\u5fae\u5fae\u5de6\u8f6c\uff0c\u53ef\u89c1\u5de6\u8fb9\u7535\u673a\u7684\u8f6c\u901f\u7565\u5fae\u6162\u4e8e\u53f3\u8fb9\u3002\u5728\u540e\u7eed\u7f16\u7a0b\u5c0f\u8f66\u7684\u65f6\u5019\uff0c\u9700\u8981\u5bf9\u7535\u8def\u8fdb\u884c\u4e00\u5b9a\u7684\u6539\u8fdb\uff0c\u4f7f\u5f97\u8f93\u51fa\u7535\u538b\u80fd\u591f\u4f7f\u5c0f\u8f66\u6b63\u8d70\u3002</li> <li>\u5de6\u53f3\u7535\u673a\u4e00\u6b63\u4e00\u53cd\u65f6\uff0c\u5c0f\u8f66\u7ed5\u4e24\u8f6e\u7ebf\u6bb5\u7684\u4e2d\u5fc3\u65cb\u8f6c\u3002</li> <li>\u5de6\u53f3\u7535\u673a\u4e2d\u4e00\u4e2a\u4e3a\u6b63\uff0c\u4e00\u4e2a\u505c\u8f6c\u65f6\uff0c\u8fd9\u57fa\u672c\u4e0a\u7ed5\u505c\u8f6c\u7684\u8f6e\u8f6c\u3002</li> </ul>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/","title":"Lab 6","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/#_1","title":"\u667a\u80fd\u5c0f\u8f66\u63a7\u5236","text":"<p>\u5b9e\u9a8c\u65e5\u671f\uff1a2023/10/30</p> <p>\u5730\u70b9\uff1a\u4e1c3-406</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/#_2","title":"\u5b9e\u9a8c\u76ee\u7684","text":"<ol> <li>\u590d\u4e60\u4e4b\u524d\u6240\u5b66\u77e5\u8bc6\uff1aFPGA\u677f\u7684\u7f16\u7a0b\uff0c\u5c0f\u8f66\u5404\u63a7\u5236\u82af\u7247\u7684\u8fde\u63a5\u3002</li> <li>\u7f16\u5199\u7a0b\u5e8f\uff0c\u4f7f\u5c0f\u8f66\u80fd\u591f\u6cbf\u7740\u8f68\u9053\u8fd0\u884c\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/#_3","title":"\u5b9e\u9a8c\u5668\u6750","text":"<ol> <li>\u667a\u80fd\u5c0f\u8f66\u4e00\u53f0</li> <li>\u7f16\u7a0b\u7535\u8111</li> <li>\u8fde\u63a5\u7ebf</li> <li>\u7535\u6e90</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/#_4","title":"\u5b9e\u9a8c\u65b9\u6848","text":"<ol> <li>\u7f16\u5199\u7a0b\u5e8f\uff0c\u5e76\u4eff\u771f\u3002</li> <li>\u5c06\u5404\u529f\u80fd\u6a21\u5757\u82af\u7247\u8fde\u63a5\u3002</li> <li>\u5229\u7528Quartus\u8f6f\u4ef6\u5c06\u8fa8\u6790\u7684\u597d\u7684\u7a0b\u5e8f\u4f20\u5165FPGA\u677f\u3002</li> <li>\u8fde\u5165\u7535\u6e90\uff0c\u6d4b\u8bd5\u5c0f\u8f66\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/#_5","title":"\u6d4b\u8bd5\u8fc7\u7a0b\u4e0e\u7ed3\u679c","text":"<ol> <li> <p>\u6d4b\u91cf\u8f68\u9053\u90e8\u5206\u6570\u636e\uff0c\u9009\u62e9\u5408\u9002\u7684\u7ea2\u5916\u68c0\u6d4b\u7ba1\uff0c\u4f5c\u4e3a\u672c\u6b21\u8bd5\u9a8c\u4f5c\u4e3a\u5224\u5b9a\u7684\u5149\u7535\u7ba1\u3002</p> </li> <li> <p>\u8f68\u9053\u7ecf\u6d4b\u91cf\uff0c\u7ea6\u4e3a\u4e24\u6307\u5bbd\u3002\u6240\u4ee5\uff0c\u9009\u62e9\u4e2d\u95f4\u4e24\u76cf\u5c0f\u706f\u4f5c\u4e3a\u6cbf\u8f68\u9053\u884c\u8fdb\u5224\u5b9a\uff0c\u548c\u95f4\u9694\u4e00\u4e2a\u65c1\u8fb9\u7684\u5c0f\u706f\u4f5c\u4e3a\u8f6c\u5f2f\u5224\u5b9a\u3002</p> </li> </ol> <p></p> <p></p>fig1 \u5149\u7535\u7ba1\u793a\u610f\u56fe\uff08\u84dd\u8272\u4e3a\u9009\u62e9\u7684\u5149\u7535\u7ba1\uff09 <ul> <li> <p>\u5206\u6790\u8f93\u51fa\u7aef\u53e3\u7535\u4f4d</p> <p>\u6839\u636e\u4e0a\u4e00\u6b21\u5b9e\u9a8c\uff0c\u5f97\u77e5\u5730\u9762\u4e3a\u9ed1\u8272\uff0c\u6bd4\u8f83\u5668\u51fa\u9ad8\uff0c\u706f\u7184\u706d\uff1b\u5730\u9762\u4e3a\u767d\u8272\uff0c\u6bd4\u8f83\u5668\u51fa\u4f4e\uff0c\u706f\u53d1\u5149\u3002</p> </li> <li> <p>\u7f16\u5199\u7a0b\u5e8f\uff0c\u5e76\u8fdb\u884c\u7f16\u8bd1\u4eff\u771f\u3002</p> </li> </ul> <p>\u6839\u636e\u7b2c\u4e00\u6b65\u7684\u5206\u6790\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4ee5\u4e0b\u67095\u4e2a\u63a5\u53e3\uff0c7\u4e2a\u8f93\u51fa\u53e3\u7684\u903b\u8f91\u82af\u7247\u3002</p> <p></p> <p></p>fig2 \u8bbe\u8ba1\u903b\u8f91\u793a\u610f\u56fe <ul> <li> <p>\u5f00\u5173\u8bbe\u8ba1\uff0c\u5229\u7528FPGA\u677f\u4e0a\u7684\u5f00\u5173\u952eSwitch0\uff0c\u6765\u63a7\u5236\u5b9e\u4f53\u7684\u8fd0\u4f5c\u4e0e\u5426\u3002</p> <ul> <li>\u5f53\u5f00\u5173\u6253\u5f00\uff0cLED0\u53d1\u5149\uff0cENA\uff0cENB\u8f93\u51fa\u9ad8\u7535\u4f4d</li> <li>\u5f53\u5f00\u5173\u5173\u95ed\uff0cLED0\u7184\u706d\uff0cENA\uff0cENB\u8f93\u51fa\u4f4e\u7535\u4f4d</li> </ul> </li> </ul> Vhdl<pre><code>if (swt='1') then\n  swto&lt;='1';\n  ena&lt;='1';\n  enb&lt;='1';\nelse\n  swto&lt;='0';\n  ena&lt;='0';\n  enb&lt;='0';\nend if;\n</code></pre> <ul> <li> <p>\u5c0f\u8f66\u76f4\u7ebf\u5faa\u8f68</p> <ul> <li> <p>\u56db\u4e2a\u63a2\u6d4b\u5668\uff0c\u4ece\u5de6\u5230\u53f3\u5206\u522b\u4e3ainp1, inc1, inc2, inp2</p> </li> <li> <p>\u5de6\u8f6e\u4e3ain1\uff0cin2\u63a7\u5236\uff0c\u53f3\u8f6e\u4e3ain3\uff0cin4\u63a7\u5236</p> </li> </ul> <p>\u5f53\u5de6\u8f6e\u8f6c\u52a8\u65f6\uff0cin1\u8f93\u51fa1\uff0cin2\u8f93\u51fa0</p> <p>\u5f53\u5de6\u8f6e\u8f6c\u52a8\u65f6\uff0cin3\u8f93\u51fa1\uff0cin4\u8f93\u51fa0</p> <p></p> </li> </ul> Vhdl<pre><code>-------------\u76f4\u884c\u5faa\u8f68-------------------------------\nwhen \"0110\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='1';in4&lt;='0';\nwhen \"0010\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"0100\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='1';in4&lt;='0';\n</code></pre> <ul> <li> <p>\u5c0f\u8f66\u9047\u5230\u5c94\u8def\u5224\u65ad</p> <ul> <li>\u4e3b\u8981\u5c94\u8def\u5224\u65ad\u8fc7\u7a0b\uff0c\u5c0f\u8f66\u5728\u884c\u8fdb\u8fc7\u7a0b\u4e2d\uff0c\u6700\u65c1\u8fb9\u7684\u706f\u5224\u65ad\u4e86\u5728\u5de6/\u53f3\u9047\u5230\u5c94\u8def\u7684\u60c5\u51b5</li> </ul> <p></p> <ul> <li>\u5982\u679c\u5728\u9047\u5230\u5c94\u8def\u8fc7\u7a0b\u4e2d\uff0c\u4e2d\u95f4\u7684\u4e24\u76cf\u706f\u51fa\u73b0\u4e86\u4e00\u4eae\u4e00\u706d\u7684\u60c5\u51b5\uff0c\u5177\u4f53\u5982\u4e0b\u56fe\uff08\u5de6\u8fb9\u9047\u5230\u5c94\u8def\u7684\u60c5\u51b5\uff0c\u53f3\u8fb9\u9047\u5230\u5c94\u8def\u540c\u7406\uff09\u6240\u793a\uff0c\u5219\u5e94\u8be5\u4e00\u5b9a\u5730\u4fee\u6b63\u8f68\u8ff9\u3002</li> </ul> <p></p> </li> </ul> Vhdl<pre><code>-------------\u5c94\u8def\u5224\u65ad-------------------------------\nwhen \"0111\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='1';in4&lt;='0';\nwhen \"0011\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"0101\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='1';in4&lt;='0';\n\nwhen \"1110\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='1';in4&lt;='0';\nwhen \"1010\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"1100\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='1';in4&lt;='0';\n</code></pre> <ul> <li> <p>\u5c0f\u8f66\u76f4\u89d2\u8f6c\u5f2f</p> <p></p> <p>\u5f53\u5c0f\u8f66\u56de\u5230\u8f68\u9053\u540e\uff0c\u7531\u4e8e\u5149\u7535\u7ba1\u5e76\u4e0d\u4e00\u5b9a\u7a33\u5b9a\u8fd0\u884c\uff0c\u6240\u4ee5\u5229\u7528\u4e4b\u524d\u7684\u53d1\u5149\u5224\u65ad\uff0c\u5c0f\u8f66\u4f1a\u81ea\u884c\u6cbf\u7740\u8f68\u9053\u5de6\u8f6c\u6216\u8005\u53f3\u8f6c\u3002</p> </li> <li> <p>\u5c0f\u8f66\u505c\u6b62\u8fd0\u884c</p> <p>\u5f53\u5c0f\u8f66\u56db\u4e2a\u5149\u7535\u7ba1\u5747\u4f4d\u4e8e\u505c\u8f66\u5904\u7684\u9ed1\u6846\u65f6\uff0c\u5373tmp=0000\u65f6\uff0c\u5c0f\u8f66\u505c\u6b62\u8fd0\u884c</p> </li> </ul> Vhdl<pre><code>when \"0000\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"1111\"=&gt; in1&lt;='0';in2&lt;='1';in3&lt;='0';in4&lt;='1';\n</code></pre>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/#_6","title":"\u5168\u4ee3\u7801","text":"Vhdl<pre><code>library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.std_logic_unsigned.all; \nuse IEEE.numeric_std.all;\nuse IEEE.std_logic_arith.all;\n\n\nentity controller is\n  port (\nledc1,ledc2,ledp1,ledp2,swt: in std_logic;\n      ena,enb,in1,in2,in3,in4,swto: out std_logic);\nend controller;\n\n\narchitecture runner of controller is\n\nbegin\nP1:process(ledc1,ledc2,ledp1,ledp2)\nvariable tmp:std_logic_vector(3 downto 0);\nbegin\ntmp:=ledp1&amp;ledc1&amp;ledc2&amp;ledp2;\ncase tmp is\nwhen \"0000\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"1111\"=&gt; in1&lt;='0';in2&lt;='1';in3&lt;='0';in4&lt;='1';\n\nwhen \"0110\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='1';in4&lt;='0';\nwhen \"0010\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"0100\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='1';in4&lt;='0';\n\nwhen \"0111\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='1';in4&lt;='0';\nwhen \"0011\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"0101\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='1';in4&lt;='0';\n\nwhen \"1110\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='1';in4&lt;='0';\nwhen \"1010\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"1100\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='1';in4&lt;='0';\n\nwhen \"1000\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='1';in4&lt;='0';\nwhen \"1001\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"0001\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"1101\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen \"1011\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='0';in4&lt;='0';\nwhen others =&gt;in1&lt;='X';in2&lt;='X';in3&lt;='X';in4&lt;='X';\n\nend case;\nend process;\n\nP2: process(swt)\nbegin\nif (swt='1') then\nswto&lt;='1';\nena&lt;='1';\nenb&lt;='1';\nelse\nswto&lt;='0';\nena&lt;='0';\nenb&lt;='0';\nend if;\nend process;\nend runner;\n</code></pre> <ol> <li>\u8fde\u63a5\u5404\u529f\u80fd\u82af\u7247\u6a21\u5757\u3002</li> </ol> <p>\u6839\u636e\u4ee5\u4e0a\u793a\u610f\u56fe\uff0c\u5148\u7269\u7406\u4e0a\u8fde\u63a5\u5404\u5f15\u811a\u7684\u8f93\u5165\u8f93\u51fa\u3002</p> <p>\u540e\u5728Quartus\u8f6f\u4ef6\u4e0a\uff0c\u5bf9FPGA\u8fdb\u884cpin planner</p> <p></p> <p>\u5728Quartars\u4e2d\u7f16\u8bd1\u6587\u4ef6\uff0c\u6210\u529f\u8fd0\u884c\u5e76\u5bfc\u5165FPGA\u677f\u4e2d\u3002</p> <ol> <li>\u8fde\u5165\u7535\u6e90\uff0c\u6d4b\u8bd5\u5c0f\u8f66\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/#_7","title":"\u6d4b\u8bd5\u7ed3\u679c","text":"<ol> <li>\u76f4\u89d2\u8f6c\u5f2f\u65f6\u975e\u5e38\u56f0\u96be\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5c0f\u8f66\u6709\u6982\u7387\u5730\u5728\u76f4\u89d2\u8f6c\u5f2f\u5904\u505c\u4e0b\uff0c\u540e\u89c2\u5bdf\u5149\u7535\u7ba1\u60c5\u51b5\uff0c\u53d1\u73b0\uff0c\u4e00\u4e9b\u65f6\u5019\uff0ctmp\u53ef\u80fd\u51fa\u73b0\u201c0001\u201d\u6216\u8005\u201c1000\u201d\u7684\u60c5\u51b5\uff0c\u5373\u6700\u65c1\u8fb9\u7684\u5f15\u811a\u5728\u8f68\u9053\u5185\uff0c\u800c\u5176\u4ed6\u5149\u7535\u7ba1\u504f\u79bb\u8f68\u9053\u3002\u4e8e\u662f\uff0c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u4fee\u6539\uff0c</li> </ol> Vhdl<pre><code>when \"1000\"=&gt; in1&lt;='0';in2&lt;='0';in3&lt;='1';in4&lt;='0';\nwhen \"0001\"=&gt; in1&lt;='1';in2&lt;='0';in3&lt;='0';in4&lt;='0';\n</code></pre> <p>\u4fee\u6539\u540e\uff0c\u5c0f\u8f66\u80fd\u591f\u987a\u5229\u8f6c\u5f2f\u3002</p> <ol> <li>\u5c0f\u8f66\u80fd\u4f9d\u7167\u8f68\u9053\u8fdb\u884c\u8fd0\u52a8\u3002</li> </ol>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/Lab6/Lab6%20%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6/#_8","title":"\u7ed3\u679c\u5206\u6790","text":"<p>\u5373\u8981\u4ece\u903b\u8f91\u4e0a\u5206\u6790\u5c0f\u8f66\u8fd0\u52a8\u7684\u60c5\u51b5\uff0c\u4e5f\u8981\u6839\u636e\u5b9e\u9a8c\u4e2d\u5177\u4f53\u51fa\u73b0\u7684\u95ee\u9898\u8fdb\u884c\u8c03\u6574\u3002\u8fd9\u4e5f\u8bf4\u660e\uff0c\u5728\u672a\u6765\u7684\u5b9e\u9a8c\u4e2d\uff0c\u4e0d\u5149\u5149\u8981\u4ece\u7406\u8bba\u4e0a\u4e25\u8c28\u5206\u6790\uff0c\u4e5f\u8981\u4ece\u5177\u4f53\u5b9e\u9645\u4e2d\u5b9e\u8df5\uff0c\u4fee\u6539\uff0c\u7136\u540e\u5b8c\u5584\u3002</p>"},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/WLab1/WLab1/","title":"WLab 1","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/WLab2/WLab2/","title":"WLab 2","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/WLab3/WLab3/","title":"WLab 3","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/WLab4/WLab4/","title":"WLab 4","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/WLab6/WLab6/","title":"WLab 6","text":""},{"location":"JY_FENG/1%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFI%E5%AE%9E%E9%AA%8C/WLab7/WLab7/","title":"WLab 7","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab1/Lab1/","title":"Lab 1 PSpice\u4f7f\u7528\u7ec3\u4e60","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab10/Lab10/","title":"Lab 10 \u89e6\u53d1\u5668","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab11/Lab11/","title":"Lab 11 \u65f6\u5e8f\u7535\u8def","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab12/Lab12/","title":"Lab 12 \u4e00\u4f4d\u5168\u52a0\u5668\u548c\u56db\u4f4d\u52a0\u6cd5\u5668","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab13/Lab13/","title":"Lab 13 \u6570\u5b57\u949f\uff08Quartus\uff09","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab14/Lab14/","title":"Lab 14 \u6b65\u8fdb\u7535\u673a\u8109\u51b2\u5206\u914d\u5668","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab2/Lab2/","title":"Lab 2 \u4fe1\u53f7\u53d1\u751f\u7535\u8def\u5b9e\u9a8c","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab3/Lab3/","title":"Lab 3 \u7535\u538b\u6bd4\u8f83\u5668","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab4/Lab4/","title":"Lab 4 \u5149\u8026\u5408\u7535\u8def\u53ca\u5176\u5e94\u7528\u5b9e\u9a8c","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab5/Lab5/","title":"Lab 5 \u4eea\u7528\u653e\u5927\u7535\u8def\u53ca\u5176\u5e94\u7528\u5b9e\u9a8c","text":"<p>\u4eff\u771f\u6240\u7528\u6587\u4ef6\u5728\u8fd9\u91cc\uff1a Lab5 PSpice\u4eff\u771f.zip </p>"},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab6/Lab6/","title":"Lab 6 \u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0","text":"<p>Lab6\u6240\u4f7f\u7528\u4eff\u771f\u8f6f\u4ef6 Lab6 PSpice\u4eff\u771f.zip </p>"},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab7/Lab7/","title":"Lab 7 \u6269\u97f3\u673a\u7535\u8def\u7684\u8bbe\u8ba1\u5236\u4f5c\u4e0e\u6d4b\u8bd5","text":"<p>Lab7\u4e2d\u6240\u4f7f\u7528\u7684\u4eff\u771f\u6587\u4ef6\uff1a Lab7PSpice\u4eff\u771f.zip </p>"},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab8/Lab8/","title":"Lab 8 \u6570\u5b57\u949f","text":""},{"location":"JY_FENG/2%20%E7%94%B5%E8%B7%AF%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFII%E5%AE%9E%E9%AA%8C/Lab9/Lab9/","title":"Lab 9 \u5168\u52a0\u5668\u4e0e\u5947\u5076\u4f4d\u68c0\u9a8c\u7535\u8def","text":"<p>Lab9\u4e2d\u6240\u4f7f\u7528\u7684Multisim\u4eff\u771f\u6587\u4ef6\uff1a Lab9 Multisim.zip </p>"},{"location":"JY_FENG/3%20%E7%94%B5%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/Preview/","title":"\u5199\u5728\u524d\u9762 for \u7535\u7f51\u7edc\u5206\u6790","text":""},{"location":"JY_HU/AI/Approach%20almost/","title":"Approaching-almost","text":""},{"location":"JY_HU/AI/Approach%20almost/#approaching-almost-any-machine-learning-problem","title":"Approaching almost any machine learning problem","text":"<p>Principal Component Analysis (PCA):</p> <p>PCA \u662f\u4e00\u79cd\u7528\u4e8e\u964d\u7ef4\u548c\u6570\u636e\u538b\u7f29\u7684\u7ebf\u6027\u6280\u672f\u3002\u5b83\u7684\u76ee\u6807\u662f\u627e\u5230\u6570\u636e\u4e2d\u6700\u91cd\u8981\u7684\u65b9\u5411\uff0c\u5373\u65b9\u5dee\u6700\u5927\u7684\u65b9\u5411\uff0c\u7136\u540e\u5c06\u6570\u636e\u6295\u5f71\u5230\u8fd9\u4e9b\u65b9\u5411\u4e0a\u3002\u8fd9\u4e9b\u65b9\u5411\u88ab\u79f0\u4e3a\u4e3b\u6210\u5206\u3002\u901a\u8fc7\u9009\u62e9\u6700\u91cd\u8981\u7684\u4e3b\u6210\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u6570\u636e\u4e2d\u7684\u5927\u90e8\u5206\u4fe1\u606f\uff0c\u540c\u65f6\u964d\u4f4e\u6570\u636e\u7684\u7ef4\u5ea6\u3002</p> <ol> <li>\u8ba1\u7b97\u534f\u65b9\u5dee\u77e9\u9635\uff1a \u9996\u5148\uff0c\u8ba1\u7b97\u6570\u636e\u96c6\u7684\u534f\u65b9\u5dee\u77e9\u9635\u3002\u534f\u65b9\u5dee\u77e9\u9635\u63cf\u8ff0\u4e86\u6570\u636e\u4e2d\u4e0d\u540c\u7ef4\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</li> <li>\u8ba1\u7b97\u7279\u5f81\u5411\u91cf\u548c\u7279\u5f81\u503c\uff1a \u5bf9\u534f\u65b9\u5dee\u77e9\u9635\u8fdb\u884c\u7279\u5f81\u503c\u5206\u89e3\uff0c\u5f97\u5230\u7279\u5f81\u5411\u91cf\u548c\u7279\u5f81\u503c\u3002\u7279\u5f81\u5411\u91cf\u8868\u793a\u4e3b\u6210\u5206\u7684\u65b9\u5411\uff0c\u800c\u7279\u5f81\u503c\u8868\u793a\u5728\u8fd9\u4e2a\u65b9\u5411\u4e0a\u7684\u65b9\u5dee\u5927\u5c0f\u3002</li> <li>\u9009\u62e9\u4e3b\u6210\u5206\uff1a \u6839\u636e\u7279\u5f81\u503c\u7684\u5927\u5c0f\u9009\u62e9\u4e3b\u6210\u5206\u3002\u7279\u5f81\u503c\u8d8a\u5927\uff0c\u8bf4\u660e\u76f8\u5e94\u7684\u7279\u5f81\u5411\u91cf\u6240\u4ee3\u8868\u7684\u4e3b\u6210\u5206\u8d8a\u91cd\u8981\u3002</li> <li>\u6295\u5f71\u6570\u636e\uff1a \u5c06\u6570\u636e\u6295\u5f71\u5230\u9009\u5b9a\u7684\u4e3b\u6210\u5206\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u964d\u7ef4\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8f83\u5c11\u7684\u4e3b\u6210\u5206\u8868\u793a\u539f\u59cb\u6570\u636e\u3002</li> </ol> <p>PCA \u5728\u6570\u636e\u538b\u7f29\u3001\u7279\u5f81\u63d0\u53d6\u548c\u53ef\u89c6\u5316\u7b49\u9886\u57df\u5e7f\u6cdb\u5e94\u7528\u3002</p> <p>t-distributed Stochastic Neighbor Embedding (t-SNE):</p> <p>t-SNE \u662f\u4e00\u79cd\u975e\u7ebf\u6027\u964d\u7ef4\u7b97\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u53ef\u89c6\u5316\u9ad8\u7ef4\u6570\u636e\u3002\u5b83\u80fd\u591f\u4fdd\u7559\u6570\u636e\u70b9\u4e4b\u95f4\u7684\u76f8\u5bf9\u8ddd\u79bb\uff0c\u7279\u522b\u9002\u7528\u4e8e\u53d1\u73b0\u6570\u636e\u4e2d\u7684\u805a\u7c7b\u7ed3\u6784\u3002</p> <ol> <li>\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff1a \u5bf9\u4e8e\u6bcf\u5bf9\u6570\u636e\u70b9\uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u4f7f\u7528\u9ad8\u65af\u5206\u5e03\u8868\u793a\u3002</li> <li>\u6784\u5efa\u6761\u4ef6\u6982\u7387\u5206\u5e03\uff1a \u57fa\u4e8e\u76f8\u4f3c\u5ea6\u6784\u5efa\u6761\u4ef6\u6982\u7387\u5206\u5e03\uff0c\u63cf\u8ff0\u6570\u636e\u70b9\u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5206\u5e03\u3002</li> <li>\u6784\u5efa t \u5206\u5e03\uff1a \u5728\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u6784\u5efa t \u5206\u5e03\uff0c\u8868\u793a\u6570\u636e\u70b9\u5728\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5206\u5e03\u3002</li> <li>\u6700\u5c0f\u5316 KL \u6563\u5ea6\uff1a \u901a\u8fc7\u6700\u5c0f\u5316 KL \u6563\u5ea6\uff08Kullback-Leibler divergence\uff09\uff0c\u8c03\u6574\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\u7684\u6570\u636e\u70b9\u4f4d\u7f6e\uff0c\u4f7f\u5176\u5c3d\u53ef\u80fd\u7b26\u5408\u6761\u4ef6\u6982\u7387\u5206\u5e03\u3002</li> </ol> <p>t-SNE \u901a\u5e38\u7528\u4e8e\u53ef\u89c6\u5316\u9ad8\u7ef4\u6570\u636e\uff0c\u5c24\u5176\u5728\u53d1\u73b0\u805a\u7c7b\u7ed3\u6784\u65b9\u9762\u8868\u73b0\u51fa\u8272\u3002\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ct-SNE \u5bf9\u4e8e\u4e0d\u540c\u7684\u521d\u59cb\u5316\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u5728\u89e3\u91ca\u7ed3\u679c\u65f6\u9700\u8981\u8c28\u614e\u3002</p> <p>Image compression using PCA (Principal Component Analysis) involves applying PCA to the pixel values of an image and retaining only the most significant principal components. The basic idea is to reduce the dimensionality of the image while preserving as much information as possible. Here's a step-by-step guide on how to perform image compression using PCA:</p> <ol> <li>Flatten the Image:</li> <li>Convert the 2D image matrix to a 1D vector by flattening the pixel values. For a color image, you'll have separate vectors for each color channel (e.g., Red, Green, Blue).</li> <li>Standardize the Data:</li> <li>Standardize the pixel values (subtract mean, divide by standard deviation) to ensure that each color channel has zero mean and unit variance.</li> <li>Compute Covariance Matrix:</li> <li>Calculate the covariance matrix of the standardized pixel values. The covariance matrix represents the relationships between different color channels.</li> <li>Perform PCA:</li> <li>Use PCA to compute the eigenvectors and eigenvalues of the covariance matrix. The eigenvectors represent the principal components, and the eigenvalues indicate their significance.</li> <li>Select Principal Components:</li> <li>Select the top-k eigenvectors corresponding to the k largest eigenvalues. These principal components capture the most important information in the image.</li> <li>Project Data onto Lower-Dimensional Space:</li> <li>Project the standardized pixel values onto the subspace spanned by the selected principal components. This effectively reduces the dimensionality of the image.</li> <li>Reconstruction:</li> <li>Reconstruct the compressed image by reversing the PCA transformation. This involves multiplying the lower-dimensional representation by the transpose of the selected principal components and adding back the mean.</li> <li>Visualize the Results:</li> <li>Compare the original image with the compressed image to assess the quality of the compression.</li> </ol>"},{"location":"JY_HU/AI/ML-zju/","title":"\u4e00\u4e9b\u622a\u56fe","text":""},{"location":"JY_HU/AI/ML-zju/#ml-for-zju","title":"ML-for-zju","text":"<p>generative model \u751f\u6210\u5f0f\u6a21\u578b\u548c\u975e\u751f\u6210\u5f0f\u6a21\u578b</p> <p>linear model/none linear model</p> <p></p> <p>\u751f\u6210\u6a21\u578b\uff08Generative Model\uff09\u548c\u5224\u522b\u6a21\u578b\uff08Discriminative Model\uff09\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6a21\u578b\uff0c\u5b83\u4eec\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u5bf9\u6570\u636e\u7684\u5efa\u6a21\u65b9\u5f0f\u548c\u5e94\u7528\u9886\u57df\u3002</p> <ol> <li>\u751f\u6210\u6a21\u578b\uff08Generative Model\uff09\uff1a</li> <li>\u751f\u6210\u6a21\u578b\u8bd5\u56fe\u5bf9\u6574\u4e2a\u6570\u636e\u5206\u5e03\u8fdb\u884c\u5efa\u6a21\uff0c\u5b83\u5b66\u4e60\u5982\u4f55\u751f\u6210\u6570\u636e\u3002\u751f\u6210\u6a21\u578b\u80fd\u591f\u751f\u6210\u4e0e\u8bad\u7ec3\u6570\u636e\u96c6\u76f8\u4f3c\u7684\u65b0\u6570\u636e\u70b9\u3002</li> <li>\u751f\u6210\u6a21\u578b\u901a\u5e38\u7528\u4e8e\u751f\u6210\u65b0\u6570\u636e\u3001\u6837\u672c\u5408\u6210\u3001\u7f3a\u5931\u6570\u636e\u586b\u8865\u4ee5\u53ca\u5bc6\u5ea6\u4f30\u8ba1\u7b49\u4efb\u52a1\u3002</li> <li>\u4ee3\u8868\u6027\u7684\u751f\u6210\u6a21\u578b\u5305\u62ec\u53d8\u5206\u81ea\u7f16\u7801\u5668\uff08Variational Autoencoders\uff0cVAE\uff09\u3001\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08Generative Adversarial Networks\uff0cGAN\uff09\u3001\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\uff08Hidden Markov Models\uff0cHMM\uff09\u7b49\u3002</li> <li>\u751f\u6210\u6a21\u578b\u901a\u5e38\u9700\u8981\u66f4\u591a\u7684\u6570\u636e\u548c\u8ba1\u7b97\u8d44\u6e90\u6765\u8bad\u7ec3\uff0c\u56e0\u4e3a\u5b83\u4eec\u8981\u5b66\u4e60\u6574\u4e2a\u6570\u636e\u5206\u5e03\u3002</li> <li>\u5224\u522b\u6a21\u578b\uff08Discriminative Model\uff09\uff1a</li> <li>\u5224\u522b\u6a21\u578b\u5173\u6ce8\u7684\u662f\u5bf9\u4e0d\u540c\u7c7b\u522b\u4e4b\u95f4\u7684\u8fb9\u754c\u8fdb\u884c\u5efa\u6a21\uff0c\u5b83\u5b66\u4e60\u5982\u4f55\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u6216\u6807\u8bb0\u3002</li> <li>\u5224\u522b\u6a21\u578b\u901a\u5e38\u7528\u4e8e\u5206\u7c7b\u3001\u56de\u5f52\u548c\u6807\u8bb0\u4efb\u52a1\uff0c\u5176\u4e2d\u76ee\u6807\u662f\u9884\u6d4b\u8f93\u5165\u6570\u636e\u7684\u6807\u7b7e\u6216\u5c5e\u6027\u3002</li> <li>\u4ee3\u8868\u6027\u7684\u5224\u522b\u6a21\u578b\u5305\u62ec\u903b\u8f91\u56de\u5f52\u3001\u652f\u6301\u5411\u91cf\u673a\u3001\u51b3\u7b56\u6811\u3001\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u7b49\u3002</li> <li>\u5224\u522b\u6a21\u578b\u901a\u5e38\u5728\u5c0f\u89c4\u6a21\u6570\u636e\u4e0a\u6548\u679c\u8f83\u597d\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u9700\u8981\u5efa\u6a21\u4e0e\u4efb\u52a1\u76f8\u5173\u7684\u90e8\u5206\u4fe1\u606f\uff0c\u800c\u4e0d\u9700\u8981\u5b66\u4e60\u6574\u4e2a\u6570\u636e\u5206\u5e03\u3002</li> </ol> <p>\u603b\u7ed3\u6765\u8bf4\uff0c\u751f\u6210\u6a21\u578b\u548c\u5224\u522b\u6a21\u578b\u7684\u5173\u952e\u533a\u522b\u5728\u4e8e\u5176\u5efa\u6a21\u76ee\u6807\u3002\u751f\u6210\u6a21\u578b\u8bd5\u56fe\u7406\u89e3\u6574\u4e2a\u6570\u636e\u5206\u5e03\u5e76\u751f\u6210\u65b0\u6570\u636e\uff0c\u800c\u5224\u522b\u6a21\u578b\u5173\u6ce8\u7684\u662f\u5bf9\u6570\u636e\u7684\u5206\u7c7b\u6216\u6807\u8bb0\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u9009\u62e9\u751f\u6210\u6a21\u578b\u8fd8\u662f\u5224\u522b\u6a21\u578b\u901a\u5e38\u53d6\u51b3\u4e8e\u5177\u4f53\u95ee\u9898\u548c\u4efb\u52a1\u7684\u6027\u8d28\u3002\u6709\u65f6\uff0c\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u6a21\u578b\u53ef\u4ee5\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002</p> <p></p> <p>linear feature+nonlinear model/ nonlinear feature+linear model\u662f\u4ec0\u4e48\u610f\u601d</p> <p>ChatGPT</p> <p>\"\u7ebf\u6027\u7279\u5f81 + \u975e\u7ebf\u6027\u6a21\u578b\" \u548c \"\u975e\u7ebf\u6027\u7279\u5f81 + \u7ebf\u6027\u6a21\u578b\" \u662f\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u4e24\u79cd\u4e0d\u540c\u65b9\u6cd5\uff0c\u7528\u4e8e\u5904\u7406\u6570\u636e\u548c\u5efa\u7acb\u9884\u6d4b\u6a21\u578b\u3002\u5b83\u4eec\u53ef\u4ee5\u5728\u7279\u5f81\u5de5\u7a0b\u548c\u6a21\u578b\u9009\u62e9\u65b9\u9762\u7528\u4e8e\u5904\u7406\u975e\u7ebf\u6027\u5173\u7cfb\u3002</p> <ol> <li>\u7ebf\u6027\u7279\u5f81 + \u975e\u7ebf\u6027\u6a21\u578b\uff1a</li> <li>\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u7279\u5f81\u662f\u539f\u59cb\u6570\u636e\u6216\u7ebf\u6027\u7ec4\u5408\u7684\u7ed3\u679c\uff0c\u800c\u6a21\u578b\u662f\u975e\u7ebf\u6027\u7684\u3002\u8fd9\u610f\u5473\u7740\u6a21\u578b\u53ef\u4ee5\u5b66\u4e60\u975e\u7ebf\u6027\u5173\u7cfb\uff0c\u4f46\u7279\u5f81\u672c\u8eab\u662f\u7ebf\u6027\u7684\u3002</li> <li>\u4e3e\u4f8b\uff1a\u7279\u5f81\u53ef\u4ee5\u662f\u539f\u59cb\u6570\u636e\uff0c\u5982\u957f\u5ea6\u3001\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u4f46\u6a21\u578b\u53ef\u4ee5\u662f\u591a\u9879\u5f0f\u56de\u5f52\u6a21\u578b\uff0c\u80fd\u591f\u62df\u5408\u975e\u7ebf\u6027\u5173\u7cfb\uff0c\u4f8b\u5982\u957f\u5ea6\u548c\u5bbd\u5ea6\u7684\u4e58\u79ef\u5bf9\u8f93\u51fa\u7684\u5f71\u54cd\u3002</li> <li>\u975e\u7ebf\u6027\u7279\u5f81 + \u7ebf\u6027\u6a21\u578b\uff1a</li> <li>\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u7279\u5f81\u672c\u8eab\u662f\u7ecf\u8fc7\u975e\u7ebf\u6027\u53d8\u6362\u7684\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u5e94\u7528\u67d0\u79cd\u975e\u7ebf\u6027\u51fd\u6570\uff08\u4f8b\u5982\u5bf9\u6570\u3001\u6307\u6570\u3001\u591a\u9879\u5f0f\u7b49\uff09\u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002\u7136\u540e\uff0c\u7ebf\u6027\u6a21\u578b\u88ab\u7528\u4e8e\u5b66\u4e60\u7279\u5f81\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u3002</li> <li>\u4e3e\u4f8b\uff1a\u7279\u5f81\u53ef\u4ee5\u662f\u539f\u59cb\u6570\u636e\u7684\u5bf9\u6570\uff0c\u6a21\u578b\u53ef\u4ee5\u662f\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u901a\u8fc7\u5bf9\u6570\u53d8\u6362\u80fd\u591f\u6355\u6349\u6570\u636e\u4e2d\u7684\u975e\u7ebf\u6027\u5173\u7cfb\uff0c\u5982\u6307\u6570\u589e\u957f\u3002</li> </ol> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u901a\u5e38\u7528\u4e8e\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u548c\u95ee\u9898\u3002\u9009\u62e9\u54ea\u79cd\u65b9\u6cd5\u901a\u5e38\u53d6\u51b3\u4e8e\u95ee\u9898\u7684\u6027\u8d28\u4ee5\u53ca\u6570\u636e\u7684\u5206\u5e03\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e24\u79cd\u65b9\u6cd5\uff0c\u7136\u540e\u6839\u636e\u6a21\u578b\u6027\u80fd\u6765\u9009\u62e9\u6700\u4f73\u65b9\u6cd5\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\"\u975e\u7ebf\u6027\u7279\u5f81 + \u7ebf\u6027\u6a21\u578b\" \u4e5f\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4e00\u79cd\"\u7ebf\u6027\u7279\u5f81 + \u975e\u7ebf\u6027\u6a21\u578b\"\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u56e0\u4e3a\u7ebf\u6027\u6a21\u578b\u672c\u8eab\u53ef\u4ee5\u5b66\u4e60\u975e\u7ebf\u6027\u5173\u7cfb\uff0c\u53ea\u8981\u7279\u5f81\u7ecf\u8fc7\u9002\u5f53\u7684\u975e\u7ebf\u6027\u53d8\u6362\u3002\u8fd9\u79cd\u7075\u6d3b\u6027\u4f7f\u5f97\u7ebf\u6027\u6a21\u578b\u6210\u4e3a\u8bb8\u591a\u673a\u5668\u5b66\u4e60\u95ee\u9898\u7684\u6709\u529b\u5de5\u5177\u3002</p> Truth/Prediction Positive Positive TP Negative FP <p></p> <p>mean-squared error</p> <p></p> <p></p>"},{"location":"JY_HU/AI/ML-zju/#10-25","title":"10-25","text":""},{"location":"JY_HU/AI/ML-zju/#symbolism","title":"symbolism","text":"<p>logic theorist</p> <p>expert system</p> <p>automated theoroem proving</p>"},{"location":"JY_HU/AI/ML-zju/#connectionism","title":"connectionism","text":"<p>transformers</p> <p>recurrent neural networks</p> <p>convolution neural netorks</p>"},{"location":"JY_HU/AI/ML-zju/#neyman-pearson","title":"Neyman-Pearson\u65b9\u6cd5","text":"<p>Neyman-Pearson\u65b9\u6cd5\u662f\u7edf\u8ba1\u5b66\u4e2d\u7684\u4e00\u79cd\u5047\u8bbe\u68c0\u9a8c\u65b9\u6cd5\uff0c\u7531Jerzy Neyman\u548cEgon Pearson\u547d\u540d\u3002\u5b83\u5728\u9891\u7387\u4e3b\u4e49\u7edf\u8ba1\u5b66\u4e2d\u88ab\u5e7f\u6cdb\u5e94\u7528\uff0c\u7528\u4e8e\u6839\u636e\u89c2\u5bdf\u5230\u7684\u6570\u636e\u5728\u4e24\u4e2a\u7ade\u4e89\u6027\u5047\u8bbe\u4e4b\u95f4\u505a\u51fa\u51b3\u7b56\u3002\u8be5\u65b9\u6cd5\u7740\u91cd\u4e8e\u63a7\u5236\u7b2c\u4e00\u7c7b\u9519\u8bef\u7684\u6982\u7387\uff0c\u5373\u5f53\u771f\u5b9e\u7684\u96f6\u5047\u8bbe\u88ab\u9519\u8bef\u62d2\u7edd\u65f6\u53d1\u751f\u7684\u9519\u8bef\u3002</p> <p>\u4ee5\u4e0b\u662fNeyman-Pearson\u65b9\u6cd5\u7684\u5173\u952e\u8981\u70b9\uff1a</p> <ol> <li>\u96f6\u5047\u8bbe\uff08\\(H_0\\)\uff09\u548c\u5907\u62e9\u5047\u8bbe\uff08\\(H_1\\)\u6216\\(H_a\\)\uff09\uff1a</li> <li>\\(H_0\\)\uff1a\u96f6\u5047\u8bbe\u4ee3\u8868\u9ed8\u8ba4\u5047\u8bbe\uff0c\u901a\u5e38\u662f\u65e0\u6548\u679c\u6216\u65e0\u5dee\u5f02\u7684\u9648\u8ff0\u3002</li> <li>\\(H_1\\)\uff1a\u5907\u62e9\u5047\u8bbe\u8868\u793a\u4e0e\u96f6\u5047\u8bbe\u76f8\u5bf9\u7684\u9648\u8ff0\uff0c\u901a\u5e38\u6d89\u53ca\u6548\u679c\u6216\u5dee\u5f02\u7684\u5b58\u5728\u3002</li> <li>\u663e\u8457\u6027\u6c34\u5e73\uff08Significance Level\uff09\uff1a</li> <li>\u5b9a\u4e49\uff1a\u663e\u8457\u6027\u6c34\u5e73\u662f\u5728\u96f6\u5047\u8bbe\u4e3a\u771f\u7684\u60c5\u51b5\u4e0b\u62d2\u7edd\u96f6\u5047\u8bbe\u7684\u6982\u7387\u3002</li> <li>\u5e94\u7528\uff1a\u7814\u7a76\u8005\u5728\u5b9e\u9a8c\u8bbe\u8ba1\u65f6\u9009\u62e9\u663e\u8457\u6027\u6c34\u5e73\uff0c\u901a\u5e38\u7528\u7b26\u53f7 \ufffd\u03b1 \u8868\u793a\u3002</li> <li>\u8bd5\u9a8c\u7edf\u8ba1\u91cf\uff08Test Statistic\uff09\uff1a</li> <li>\u5b9a\u4e49\uff1a\u4e00\u4e2a\u6570\u503c\uff0c\u6839\u636e\u89c2\u5bdf\u5230\u7684\u6570\u636e\u8ba1\u7b97\u800c\u5f97\uff0c\u7528\u4e8e\u51b3\u5b9a\u662f\u5426\u62d2\u7edd\u96f6\u5047\u8bbe\u3002</li> <li>\u5e94\u7528\uff1a\u6839\u636e\u8bd5\u9a8c\u7edf\u8ba1\u91cf\u4e0e\u4e34\u754c\u503c\uff08\u7531\u663e\u8457\u6027\u6c34\u5e73\u786e\u5b9a\uff09\u7684\u5173\u7cfb\u6765\u505a\u51fa\u51b3\u7b56\u3002</li> <li>\u62d2\u7edd\u57df\u548c\u63a5\u53d7\u57df\uff08Rejection Region and Acceptance Region\uff09\uff1a</li> <li>\u5b9a\u4e49\uff1a\u62d2\u7edd\u57df\u662f\u8bd5\u9a8c\u7edf\u8ba1\u91cf\u7684\u503c\uff0c\u5f53\u5b83\u843d\u5728\u8fd9\u4e2a\u533a\u57df\u5185\u65f6\uff0c\u62d2\u7edd\u96f6\u5047\u8bbe\u3002\u63a5\u53d7\u57df\u5219\u662f\u62d2\u7edd\u57df\u7684\u8865\u96c6\u3002</li> <li>\u5e94\u7528\uff1a\u901a\u8fc7\u9009\u62e9\u62d2\u7edd\u57df\u7684\u8fb9\u754c\uff0c\u7814\u7a76\u8005\u53ef\u4ee5\u63a7\u5236\u7b2c\u4e00\u7c7b\u9519\u8bef\u7684\u6982\u7387\u3002</li> </ol> <p>Neyman-Pearson\u65b9\u6cd5\u901a\u8fc7\u5728\u63a7\u5236\u663e\u8457\u6027\u6c34\u5e73\u7684\u540c\u65f6\u6700\u5c0f\u5316\u7b2c\u4e8c\u7c7b\u9519\u8bef\u7684\u6982\u7387\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f3a\u5047\u8bbe\u68c0\u9a8c\u7684\u6846\u67b6\u3002\u8fd9\u79cd\u65b9\u6cd5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5bf9\u4e8e\u9700\u8981\u660e\u786e\u63a7\u5236\u9519\u8bef\u7387\u7684\u95ee\u9898\u975e\u5e38\u6709\u7528\u3002</p>"},{"location":"JY_HU/AI/ML-zju/#posterior-betapdfp-a-b","title":"posterior = beta.pdf(p, a, b)\u662f\u4ec0\u4e48\u610f\u601d","text":"<p>\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u8868\u793a\u4e86\u540e\u9a8c\u6982\u7387\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u5176\u4e2d<code>beta.pdf(p, a, b)</code>\u8868\u793a\u4e86\u4e00\u4e2aBeta\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08probability density function\uff0cPDF\uff09\u3002\u5728\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4e2d\uff0c<code>p</code>\u662f\u6982\u7387\u7684\u53d6\u503c\uff0c<code>a</code>\u548c<code>b</code>\u662fBeta\u5206\u5e03\u7684\u53c2\u6570\u3002</p> <p>Beta\u5206\u5e03\u662f\u4e00\u4e2a\u5e38\u7528\u7684\u6982\u7387\u5206\u5e03\uff0c\u5b83\u5728\u6982\u7387\u8bba\u548c\u7edf\u8ba1\u5b66\u4e2d\u7ecf\u5e38\u88ab\u7528\u4e8e\u63cf\u8ff0\u968f\u673a\u53d8\u91cf\u7684\u53d6\u503c\u8303\u56f4\u5728[0, 1]\u4e4b\u95f4\u7684\u60c5\u51b5\u3002\u5b83\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a</p> \\[ \\text{Beta}(p|a, b) = \\frac{1}{B(a, b)} \\cdot p^{a-1} \\cdot (1-p)^{b-1} \\] <p>\u5176\u4e2d\uff0c$$ \\text{Beta}(p|a, b)$$\u662fBeta\u51fd\u6570\uff08Beta function\uff09\uff0c\u7528\u4e8e\u5f52\u4e00\u5316Beta\u5206\u5e03\u3002\u5728\u540e\u9a8c\u6982\u7387\u7684\u8ba1\u7b97\u4e2d\uff0c\u901a\u5e38\u4f1a\u5047\u8bbe\u5148\u9a8c\u5206\u5e03\u4e3aBeta\u5206\u5e03\uff0c\u5e76\u7ed3\u5408\u89c2\u6d4b\u6570\u636e\uff0c\u901a\u8fc7\u8d1d\u53f6\u65af\u5b9a\u7406\u8ba1\u7b97\u5f97\u5230\u540e\u9a8c\u5206\u5e03\u3002\u8fd9\u91cc\u7684<code>beta.pdf(p, a, b)</code>\u5c31\u662f\u8ba1\u7b97\u7ed9\u5b9a\u53c2\u6570<code>a</code>\u548c<code>b</code>\u7684Beta\u5206\u5e03\u5728\u6982\u7387\u503c<code>p</code>\u5904\u7684\u6982\u7387\u5bc6\u5ea6\u3002</p> <p>\u56e0\u6b64\uff0c<code>posterior = beta.pdf(p, a, b)</code>\u8868\u793a\u8ba1\u7b97\u540e\u9a8c\u6982\u7387\uff0c\u5373\u7ed9\u5b9a\u5148\u9a8c\u5206\u5e03\u548c\u89c2\u6d4b\u6570\u636e\uff0c\u901a\u8fc7Beta\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u8ba1\u7b97\u5728\u6982\u7387\u503c<code>p</code>\u5904\u7684\u540e\u9a8c\u6982\u7387\u5bc6\u5ea6\u3002</p>"},{"location":"JY_HU/AI/ML-zju/#metropolis-hastings","title":"Metropolis-Hastings\u7b97\u6cd5","text":"<p>Metropolis-Hastings\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u4e8e\u4ece\u76ee\u6807\u5206\u5e03\u4e2d\u62bd\u6837\u7684\u9a6c\u5c14\u53ef\u592b\u94fe\u8499\u7279\u5361\u7f57\uff08MCMC\uff09\u65b9\u6cd5\u3002\u8fd9\u4e2a\u7b97\u6cd5\u5141\u8bb8\u6211\u4eec\u5728\u65e0\u6cd5\u76f4\u63a5\u4ece\u76ee\u6807\u5206\u5e03\u4e2d\u62bd\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u6784\u5efa\u4e00\u4e2a\u9a6c\u5c14\u53ef\u592b\u94fe\u6765\u95f4\u63a5\u5730\u751f\u6210\u6837\u672c\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u901a\u4fd7\u7684\u89e3\u91ca\uff1a</p> <ol> <li>\u80cc\u666f\uff1a</li> <li>\u76ee\u6807\u5206\u5e03\uff08Target Distribution\uff09\uff1a \u6211\u4eec\u60f3\u8981\u4ece\u4e2d\u62bd\u6837\u7684\u5206\u5e03\uff0c\u901a\u5e38\u662f\u7531\u4e8e\u5b83\u5f88\u96be\u76f4\u63a5\u4ece\u4e2d\u62bd\u6837\u3002</li> <li>\u9a6c\u5c14\u53ef\u592b\u94fe\uff08Markov Chain\uff09\uff1a \u4e00\u7cfb\u5217\u968f\u673a\u53d8\u91cf\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u53d8\u91cf\u7684\u72b6\u6001\u4ec5\u4f9d\u8d56\u4e8e\u524d\u4e00\u4e2a\u72b6\u6001\u3002</li> <li>\u601d\u60f3\uff1a</li> <li>\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u9a6c\u5c14\u53ef\u592b\u94fe\uff0c\u4f7f\u5176\u5e73\u7a33\u5206\u5e03\uff08\u7a33\u6001\u5206\u5e03\uff09\u4e3a\u6211\u4eec\u60f3\u8981\u62bd\u6837\u7684\u76ee\u6807\u5206\u5e03\u3002</li> <li>\u6b65\u9aa4\uff1a</li> <li>\u63d0\u8bae\u6b65\u9aa4\uff08Proposal Step\uff09\uff1a \u4ece\u5f53\u524d\u72b6\u6001\u751f\u6210\u4e00\u4e2a\u63d0\u8bae\u72b6\u6001\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ece\u67d0\u4e2a\u7b80\u5355\u5206\u5e03\u4e2d\u62bd\u6837\u6765\u5b9e\u73b0\u3002</li> <li>\u63a5\u53d7/\u62d2\u7edd\u6b65\u9aa4\uff08Accept/Reject Step\uff09\uff1a \u4ee5\u4e00\u5b9a\u7684\u6982\u7387\u63a5\u53d7\u63d0\u8bae\u72b6\u6001\uff0c\u5426\u5219\u4fdd\u6301\u5f53\u524d\u72b6\u6001\u3002\u8fd9\u4e2a\u6982\u7387\u7531\u76ee\u6807\u5206\u5e03\u548c\u63d0\u8bae\u5206\u5e03\u7684\u6bd4\u4f8b\u51b3\u5b9a\u3002</li> <li>\u5177\u4f53\u6d41\u7a0b\uff1a</li> <li>\u4ece\u5f53\u524d\u72b6\u6001\u5f00\u59cb\uff0c\u901a\u8fc7\u63d0\u8bae\u6b65\u9aa4\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u3002</li> <li>\u8ba1\u7b97\u63a5\u53d7\u6982\u7387\uff0c\u5b83\u8003\u8651\u4e86\u76ee\u6807\u5206\u5e03\u5728\u65b0\u72b6\u6001\u548c\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u6982\u7387\u5bc6\u5ea6\u6bd4\u3002</li> <li>\u6839\u636e\u63a5\u53d7\u6982\u7387\u51b3\u5b9a\u662f\u5426\u63a5\u53d7\u65b0\u72b6\u6001\u3002\u5982\u679c\u63a5\u53d7\uff0c\u5219\u66f4\u65b0\u4e3a\u65b0\u72b6\u6001\uff1b\u5426\u5219\uff0c\u4fdd\u6301\u5f53\u524d\u72b6\u6001\u3002</li> <li>\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5f97\u5230\u4e00\u4e2a\u9a6c\u5c14\u53ef\u592b\u94fe\u3002</li> <li>\u6536\u655b\u6027\uff1a</li> <li>\u968f\u7740\u62bd\u6837\u6b21\u6570\u7684\u589e\u52a0\uff0c\u9a6c\u5c14\u53ef\u592b\u94fe\u8d8b\u5411\u4e8e\u7a33\u6001\u5206\u5e03\uff0c\u4ece\u800c\u751f\u6210\u7684\u6837\u672c\u8d8b\u8fd1\u4e8e\u76ee\u6807\u5206\u5e03\u3002</li> </ol> <p>\u603b\u4f53\u800c\u8a00\uff0cMetropolis-Hastings\u7b97\u6cd5\u901a\u8fc7\u5f15\u5165\u63d0\u8bae\u6b65\u9aa4\u548c\u63a5\u53d7/\u62d2\u7edd\u6b65\u9aa4\uff0c\u5229\u7528\u9a6c\u5c14\u53ef\u592b\u94fe\u7684\u6027\u8d28\uff0c\u9010\u6b65\u63a2\u7d22\u5e76\u903c\u8fd1\u76ee\u6807\u5206\u5e03\uff0c\u4ece\u800c\u5b9e\u73b0\u4ece\u76ee\u6807\u5206\u5e03\u4e2d\u62bd\u6837\u7684\u76ee\u7684\u3002\u8fd9\u79cd\u65b9\u6cd5\u5728\u8d1d\u53f6\u65af\u7edf\u8ba1\u5b66\u3001\u7edf\u8ba1\u7269\u7406\u5b66\u7b49\u9886\u57df\u4e2d\u5e7f\u6cdb\u5e94\u7528\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/","title":"d2l\u7b14\u8bb0","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#d2l-zh-pytorch","title":"d2l-zh-pytorch","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#120","title":"1.20","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#torchtensor","title":"torch.tensor\u4f7f\u7528","text":"<p>\u5e7f\u64ad\u673a\u5236</p> <p>\u964d\u7ef4</p> Python<pre><code>torch.tensor()\n</code></pre> <p>\u8f74\uff08axis\uff09\u5c31\u662f\u5f20\u91cf\u7684\u7ef4\u5ea6</p> <p>torch.arange(a): \u751f\u6210\u4ece0~a-1\u7684\u4e00\u4e2a\u5411\u91cf</p> <p>torch.dot</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#pandas","title":"\u6570\u636e\u9884\u5904\u7406\uff1apandas\u7528\u6cd5","text":"Python<pre><code>import pandas as pd\nimport torch\n\ndata = pd.read_csv(data_file) #\u5047\u8bbe\u5df2\u7ecf\u5199\u597d\u4e86csv\u6587\u4ef6\uff0c\u4f7f\u7528pandas\u7684read_csv\u65b9\u6cd5\u521b\u5efa\u6570\u636e\u96c6\nprint(data)  \n\n#\u8f93\u51fa\u4e3a:\nNumRooms Alley Price\n0 NaN Pave 127500\n1 2.0 NaN 106000\n2 4.0 NaN 178100\n3 NaN NaN 140000\n\ninputs, outputs = data.iloc[:, 0:2], data.iloc[:, 2]\ninputs = inputs.fillna(inputs.mean()) #data\u6709iloc\uff0cfillna\uff0cget_dummies\u7b49\u65b9\u6cd5\n\nX = torch.tensor(inputs.to_numpy(dtype=float))\ny = torch.tensor(outputs.to_numpy(dtype=float)) #\u5728\u5904\u7406\u597d\u6570\u636e\u4e2d\u7684\u7f3a\u5931\u540e\uff0c\u4ece\u6570\u503c\u8f6c\u5316\u6210tensor\n</code></pre>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#autograd","title":"\u53cd\u5411\u4f20\u64ad\uff1aautograd","text":"<p>\u8f93\u51fa\u7684y\u662fx\u7684\u591a\u5143\u51fd\u6570\uff0c\u5bf9\\(x_i\\)\u6c42\u504f\u5bfc\u7684\u683c\u5f0f\u4e3a\uff1a</p> <p></p> <p>\u4f8b\u5982\\(y=2X^TX\\)</p> <p>y\u662f\u6807\u91cf\uff0cx\u662f\u4e00\u4e2a\u5411\u91cf</p> Python<pre><code>import torch\nx = torch.arange(4.0)  #\u8f93\u51fa tensor([0.,1.,2.,3.])\nx.requires_grad_(True) # \u7b49\u4ef7\u4e8ex=torch.arange(4.0,requires_grad=True)\nx.grad # \u9ed8\u8ba4\u503c\u662fNone\ny = 2 * torch.dot(x, x)\ny.backward()\nx.grad  #\u8f93\u51fa\u4e3a\uff1atensor([ 0., 4., 8., 12.])\nx.grad == 4 * x #\u8f93\u51fa\u4e3a: tensor([True, True, True, True]) \n\n# \u518d\u8ba1\u7b97\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u7684\u68af\u5ea6\u503c\uff1a\nx.grad.zero_()  # \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPyTorch\u4f1a\u7d2f\u79ef\u68af\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u6e05\u9664\u4e4b\u524d\u7684\u503c\ny = x.sum()\ny.backward()\nx.grad  #\u8f93\u51fatensor([1., 1., 1., 1.])\n</code></pre>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#122","title":"1.22","text":"<p>\u5f15\u5165\u6fc0\u6d3b\u51fd\u6570\u7684\u7406\u7531\uff1a</p> <p>1.\u5404\u5c42\u7ea7\u4e4b\u95f4\u7684\u7ebf\u6027\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u7b49\u4ef7\u4e8e\u4e00\u5c42\u7ebf\u6027\u64cd\u4f5c</p> <p>2.\u7531\u4e8e\u7ebf\u6027\u7ec4\u5408\u76f8\u5f53\u4e8e\u662f\u5bf9\u539f\u59cb\u53c2\u6570\u77e9\u9635\u5f20\u6210\u7684\u7a7a\u95f4\u8fdb\u884c\u4f38\u7f29\uff0c\u65cb\u8f6c\u548c\u526a\u5207</p> <p>\u4f46\u662f\u53ef\u80fd\u771f\u5b9e\u4e16\u754c\u6709\u4e9b\u539f\u59cb\u6570\u636e\u672c\u8eab\u5c31\u662f\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\uff0c\u5fc5\u987b\u8981\u5bf9\u539f\u59cb\u7a7a\u95f4\u8fdb\u884c\u4e00\u5b9a\u7684\u975e\u7ebf\u6027\u64cd\u4f5c(\u5bf9\u539f\u7a7a\u95f4\u8fdb\u884c\u4e00\u5b9a\u7684\u626d\u66f2\uff1f)</p> <p>\u5bf9\u4e8e\u56de\u5f52\u95ee\u9898\u4e5f\u53ef\u4ee5\u540c\u6837\u8fd0\u7528\u9ad8\u6570\u7684\u601d\u7ef4\uff0c\u628a\u56de\u5f52\u770b\u6210\u5206\u7c7b\u95ee\u9898\u7684\u65e0\u9650\u7ec6\u5206\uff0c\u5f53\u6781\u9650\u5b58\u5728\u65f6\uff0c\u5206\u7c7b\u4e5f\u5c31\u6210\u4e3a\u4e86\u56de\u5f52\u95ee\u9898\u3002</p> <p>\u6fc0\u6d3b\u51fd\u6570\u5e94\u8be5\u5177\u6709\u7684\u7279\u5f81 \u907f\u514d\u68af\u5ea6\u6d88\u5931\u7684\u7279\u6027\uff0c\u9020\u6210\u7f51\u7edc\u66f4\u65b0\u8fc7\u6162 \u8f93\u51fa\u6700\u597d\u5173\u4e8e0\u5bf9\u79f0\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u9020\u6210\u68af\u5ea6\u5411\u7279\u5b9a\u65b9\u5411\u79fb\u52a8 \u6fc0\u6d3b\u51fd\u6570\u5e94\u8be5\u4e3a\u795e\u7ecf\u7f51\u7edc\u5f15\u5165\u975e\u7ebf\u6027 \u6fc0\u6d3b\u51fd\u6570\u5e94\u8be5\u662f\u53ef\u5fae\u7684\uff0c\u4f7f\u5f97\u6ee1\u8db3\u5404\u5c42\u4e4b\u95f4\u68af\u5ea6\u4e0b\u964d\u7684\u8ba1\u7b97(\u81f3\u5c11\u90e8\u5206\u53ef\u5fae) \u68af\u5ea6\u7684\u8ba1\u7b97\u4e0d\u5e94\u8be5\u592a\u590d\u6742\uff0c\u5f71\u54cd\u7f51\u7edc\u6027\u80fd</p> <p></p> C<pre><code>class Model(Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.conv1 = nn.Conv2d(1, 6, 5)\n        #1\uff0c6\uff0c5\u5206\u522b\u8868\u793a\u8f93\u5165\u901a\u9053\u6570\uff0c\u8f93\u51fa\u901a\u9053\u6570\uff0c\u5377\u79ef\u6838\u5927\u5c0f\n        self.relu1 = nn.ReLU()\n        self.pool1 = nn.MaxPool2d(2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.relu2 = nn.ReLU()\n        self.pool2 = nn.MaxPool2d(2)\n        self.fc1 = nn.Linear(256, 120)\n        self.relu3 = nn.ReLU()\n        self.fc2 = nn.Linear(120, 84)\n        self.relu4 = nn.ReLU()\n        self.fc3 = nn.Linear(84, 10)\n        self.relu5 = nn.ReLU()\n\n    def forward(self, x):\n        y = self.conv1(x)\n        y = self.relu1(y)\n        y = self.pool1(y)\n        y = self.conv2(y)\n        y = self.relu2(y)\n        y = self.pool2(y)\n        y = y.view(y.shape[0], -1)\n        # \u6b64\u5904view\u64cd\u4f5c\u662f\u4e3a\u4e86\u5c06y\u7684\u5f62\u72b6\u4ece[b, c, h, w]\u53d8\u4e3a[b, c*h*w]\uff0c\u4ee5\u4fbf\u9001\u5165\u5168\u8fde\u63a5\u5c42\n        # -1\u7684\u6db5\u4e49\u662f\u81ea\u9002\u5e94\uff0c\u5373\u81ea\u52a8\u8ba1\u7b97\u6b64\u5904\u5e94\u586b\u591a\u5c11\n        y = self.fc1(y)\n        y = self.relu3(y)\n        y = self.fc2(y)\n        y = self.relu4(y)\n        y = self.fc3(y)\n        y = self.relu5(y)\n        return y\n</code></pre> <p></p> <p></p> <p>\u4e0a\u56fe\u662f\u8bba\u6587\u4e2d Transformer \u7684\u5185\u90e8\u7ed3\u6784\u56fe\uff0c\u5de6\u4fa7\u4e3a Encoder block\uff0c\u53f3\u4fa7\u4e3a Decoder block\u3002\u7ea2\u8272\u5708\u4e2d\u7684\u90e8\u5206\u4e3a Multi-Head Attention\uff0c\u662f\u7531\u591a\u4e2a Self-Attention\u7ec4\u6210\u7684\uff0c\u53ef\u4ee5\u770b\u5230 Encoder block \u5305\u542b\u4e00\u4e2a Multi-Head Attention\uff0c\u800c Decoder block \u5305\u542b\u4e24\u4e2a Multi-Head Attention (\u5176\u4e2d\u6709\u4e00\u4e2a\u7528\u5230 Masked)\u3002Multi-Head Attention \u4e0a\u65b9\u8fd8\u5305\u62ec\u4e00\u4e2a Add &amp; Norm \u5c42\uff0cAdd \u8868\u793a\u6b8b\u5dee\u8fde\u63a5 (Residual Connection) \u7528\u4e8e\u9632\u6b62\u7f51\u7edc\u9000\u5316\uff0cNorm \u8868\u793a Layer Normalization\uff0c\u7528\u4e8e\u5bf9\u6bcf\u4e00\u5c42\u7684\u6fc0\u6d3b\u503c\u8fdb\u884c\u5f52\u4e00\u5316\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#ai","title":"\u8ddf\u674e\u6c90\u5b66ai","text":"<p>masked  multi-head attention</p> <p>batch norm \u548clayer norm\u7684\u533a\u522b</p> <p>ChatGPT</p> <p>ChatGPT</p> <p>Batch Normalization\uff08\u6279\u5f52\u4e00\u5316\uff0c\u7b80\u79f0 Batch Norm\uff09\u548c Layer Normalization\uff08\u5c42\u5f52\u4e00\u5316\uff0c\u7b80\u79f0 Layer Norm\uff09\u662f\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u6b63\u5219\u5316\u6280\u672f\uff0c\u5b83\u4eec\u6709\u4e00\u4e9b\u5173\u952e\u7684\u533a\u522b\uff1a</p> <ol> <li>\u5f52\u4e00\u5316\u7684\u5c42\u7ea7\uff1a</li> <li>Batch Normalization\uff1a \u5f52\u4e00\u5316\u662f\u5728\u6bcf\u4e2a mini-batch \u4e2d\u7684\u6bcf\u4e2a\u7279\u5f81\u7ef4\u5ea6\u4e0a\u8fdb\u884c\u7684\u3002\u5b83\u5bf9\u6bcf\u4e2a\u7279\u5f81\u7ef4\u5ea6\u8fdb\u884c\u5e73\u5747\u548c\u6807\u51c6\u5dee\u7684\u5f52\u4e00\u5316\uff0c\u56e0\u6b64\u53ef\u4ee5\u770b\u4f5c\u662f\u5bf9 mini-batch \u7ef4\u5ea6\u548c\u7279\u5f81\u7ef4\u5ea6\u7684\u5f52\u4e00\u5316\u3002</li> <li>Layer Normalization\uff1a \u5f52\u4e00\u5316\u662f\u5728\u6bcf\u4e2a\u6837\u672c\u7684\u6bcf\u4e2a\u7279\u5f81\u7ef4\u5ea6\u4e0a\u8fdb\u884c\u7684\u3002\u5b83\u5bf9\u6bcf\u4e2a\u7279\u5f81\u7ef4\u5ea6\u8fdb\u884c\u5e73\u5747\u548c\u6807\u51c6\u5dee\u7684\u5f52\u4e00\u5316\uff0c\u56e0\u6b64\u53ef\u4ee5\u770b\u4f5c\u662f\u5bf9\u6837\u672c\u7ef4\u5ea6\u548c\u7279\u5f81\u7ef4\u5ea6\u7684\u5f52\u4e00\u5316\u3002</li> <li>\u5f52\u4e00\u5316\u7684\u8ba1\u7b97\u65b9\u5f0f\uff1a</li> <li>Batch Normalization\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u7279\u5f81\u7ef4\u5ea6\uff0c\u8ba1\u7b97 mini-batch \u4e2d\u6240\u6709\u6837\u672c\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\u3002\u4f7f\u7528\u8fd9\u4e9b\u5747\u503c\u548c\u6807\u51c6\u5dee\u8fdb\u884c\u5f52\u4e00\u5316\u3002</li> <li>Layer Normalization\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u6837\u672c\u7684\u6bcf\u4e2a\u7279\u5f81\u7ef4\u5ea6\uff0c\u8ba1\u7b97\u8be5\u6837\u672c\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\u3002\u4f7f\u7528\u8fd9\u4e9b\u5747\u503c\u548c\u6807\u51c6\u5dee\u8fdb\u884c\u5f52\u4e00\u5316\u3002</li> <li>\u8ba1\u7b97\u65f6\u7684\u4f9d\u8d56\u5173\u7cfb\uff1a</li> <li>Batch Normalization\uff1a \u5728\u8bad\u7ec3\u65f6\uff0c\u7531\u4e8e\u9700\u8981\u8ba1\u7b97 mini-batch \u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u5f53\u524d mini-batch \u4e2d\u7684\u6240\u6709\u6837\u672c\u3002\u5728\u6d4b\u8bd5\u65f6\uff0c\u901a\u5e38\u4f7f\u7528\u8bad\u7ec3\u9636\u6bb5\u8ba1\u7b97\u7684\u79fb\u52a8\u5e73\u5747\u503c\u8fdb\u884c\u5f52\u4e00\u5316\u3002</li> <li>Layer Normalization\uff1a \u5728\u8bad\u7ec3\u548c\u6d4b\u8bd5\u65f6\u90fd\u662f\u72ec\u7acb\u8ba1\u7b97\u6bcf\u4e2a\u6837\u672c\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4f7f\u7528 mini-batch\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a</li> <li>Batch Normalization\uff1a \u5728\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u7279\u522b\u662f\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNNs\uff09\u4e2d\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5bf9\u4e8e\u6df1\u5c42\u7f51\u7edc\u7684\u8bad\u7ec3\u6709\u52a9\u4e8e\u68af\u5ea6\u4f20\u64ad\u3002</li> <li>Layer Normalization\uff1a \u66f4\u9002\u7528\u4e8e\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff08RNNs\uff09\u7b49\u4e0d\u9002\u5408\u4f7f\u7528 mini-batch \u5f52\u4e00\u5316\u7684\u573a\u666f\uff0c\u56e0\u4e3a RNNs \u7684\u8f93\u5165\u5e8f\u5217\u957f\u5ea6\u53ef\u80fd\u4e0d\u540c\u3002</li> </ol> <p>\u603b\u4f53\u800c\u8a00\uff0cBatch Normalization \u548c Layer Normalization\u90fd\u662f\u7528\u4e8e\u52a0\u901f\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u3001\u9632\u6b62\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u7684\u5b9e\u73b0\u548c\u5e94\u7528\u573a\u666f\u6709\u6240\u4e0d\u540c\u3002</p> <p>\u6b8b\u5dee\u8fde\u63a5\uff08Residual Connection\uff09\u662f\u4e00\u79cd\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u5efa\u6a21\u6280\u672f\uff0c\u65e8\u5728\u89e3\u51b3\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8\u95ee\u9898\u3002\u8fd9\u4e00\u6280\u672f\u6700\u521d\u7531\u4f55\u607a\u660e\u7b49\u4eba\u63d0\u51fa\uff0c\u5e76\u57282016\u5e74\u7684\u8bba\u6587 \"Deep Residual Learning for Image Recognition\" \u4e2d\u9996\u6b21\u5f15\u5165\u3002</p> <p>\u5728\u6b8b\u5dee\u8fde\u63a5\u4e2d\uff0c\u7f51\u7edc\u7684\u67d0\u4e9b\u5c42\uff08\u901a\u5e38\u662f\u5377\u79ef\u5c42\uff09\u7684\u8f93\u5165\u76f4\u63a5\u901a\u8fc7\u8df3\u8dc3\u8fde\u63a5\uff08skip connection\uff09\u6dfb\u52a0\u5230\u7f51\u7edc\u7684\u8f93\u51fa\u4e2d\u3002\u8fd9\u6837\u7684\u8fde\u63a5\u4f7f\u5f97\u7f51\u7edc\u53ef\u4ee5\u76f4\u63a5\u5b66\u4e60\u6b8b\u5dee\uff0c\u800c\u4e0d\u662f\u5b8c\u6574\u5730\u5b66\u4e60\u7279\u5f81\u6620\u5c04\u3002\u6b8b\u5dee\u8fde\u63a5\u7684\u6570\u5b66\u8868\u8fbe\u5982\u4e0b\uff1a</p> <p>\u8f93\u51fa=\u8f93\u5165+\u6b8b\u5dee\u8f93\u51fa=\u8f93\u5165+\u6b8b\u5dee</p> <p>\u5177\u4f53\u800c\u8a00\uff0c\u5982\u679c \ufffd(\ufffd)F(x) \u8868\u793a\u7f51\u7edc\u7684\u6620\u5c04\u51fd\u6570\uff08\u4f8b\u5982\u5377\u79ef\u5c42\u548c\u6fc0\u6d3b\u51fd\u6570\u7684\u7ec4\u5408\uff09\uff0c\u90a3\u4e48\u6b8b\u5dee\u5757\u7684\u8f93\u51fa\u4e3a\uff1a</p> <p>\u8f93\u51fa=\ufffd(\ufffd)+\ufffd\u8f93\u51fa=F(x)+x</p> <p>\u5176\u4e2d\uff0c\ufffdx \u662f\u8f93\u5165\u3002</p> <p>\u6b8b\u5dee\u8fde\u63a5\u7684\u4e3b\u8981\u4f18\u52bf\u5305\u62ec\uff1a</p> <ol> <li>\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898\uff1a \u901a\u8fc7\u76f4\u63a5\u4f20\u64ad\u6b8b\u5dee\uff0c\u68af\u5ea6\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u4f20\u64ad\u56de\u8f83\u65e9\u7684\u5c42\uff0c\u4ece\u800c\u51cf\u8f7b\u4e86\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u3002</li> <li>\u7b80\u5316\u7f51\u7edc\u8bad\u7ec3\uff1a \u4f7f\u5f97\u66f4\u6df1\u7684\u7f51\u7edc\u66f4\u5bb9\u6613\u8bad\u7ec3\uff0c\u56e0\u4e3a\u7f51\u7edc\u53ef\u4ee5\u5b66\u4e60\u5c06\u8f93\u5165\u76f4\u63a5\u4f20\u9012\u5230\u8f93\u51fa\u7684\u6052\u7b49\u6620\u5c04\uff0c\u800c\u4e0d\u9700\u8981\u5bf9\u8f93\u5165\u8fdb\u884c\u590d\u6742\u7684\u53d8\u6362\u3002</li> <li>\u964d\u4f4e\u7279\u5f81\u6620\u5c04\u5b66\u4e60\u7684\u96be\u5ea6\uff1a \u7f51\u7edc\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u5b66\u4e60\u6b8b\u5dee\uff0c\u800c\u4e0d\u662f\u5b8c\u6574\u5730\u5b66\u4e60\u7279\u5f81\u6620\u5c04\uff0c\u8fd9\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u6355\u6349\u6570\u636e\u4e2d\u7684\u53d8\u5316\u3002</li> </ol> <p>\u6b8b\u5dee\u8fde\u63a5\u5728\u8bb8\u591a\u6df1\u5ea6\u5b66\u4e60\u4efb\u52a1\u4e2d\u90fd\u53d6\u5f97\u4e86\u663e\u8457\u7684\u6210\u529f\uff0c\u5e76\u88ab\u5e7f\u6cdb\u7528\u4e8e\u5404\u79cd\u67b6\u6784\uff0c\u5982 ResNet\u3001DenseNet \u7b49\u3002</p> <p></p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#scaled-dot-product-attention","title":"\u6ce8\u610f\u529b\u51fd\u6570\uff1ascaled dot-product attention","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#attentionqkvsoftmaxqkt-sqrtd_k-v","title":"\\(\\(Attention(Q,K,V)=softmax(QK^T / sqrt(d_k)) V\\)\\)\u200b","text":"<p>\u5c06query\u548ckey-value\u5bf9</p> <p>output\u662fvalue\u7684\u52a0\u6743\u548c</p> <p>value\u7684\u52a0\u6743\u548c\u662fquery\u548ckey\u7684\u76f8\u4f3c\u5ea6\u7b97\u51fa\u7684</p> <p>key\u662f\u540d\u5b57\uff0cquery\u662f\u60f3\u67e5\u8c01\u7684\u540d\u5b57\uff0c\u4e5f\u662f\u4e00\u4e2a\u540d\u5b57\uff0cvalue\u662fkey\u5bf9\u5e94\u7684\u503c</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#_1","title":"\u5173\u4e8e\u77e9\u9635\u4e58\u6cd5\uff1a\u975e\u5e38\u4fbf\u4e8e\u5e76\u884c","text":"<p>\u5047\u8bbe\u8fdb\u884c\u4e86n\u6b21query\uff0cdk\u4e3akey\u7684\u7279\u5f81\u7ef4\u5ea6\u6570\uff0cdv\u4e3a\u5355\u8bcd\u7279\u5f81\u7ef4\u6570\uff0c\u4e00\u822c\u6765\u8bf4dk\u548cdv\u76f8\u540c</p> <p>\u4e00\u822c\u6765\u8bf4Query\uff0cKey\uff0cValue\u77e9\u9635\u7684\u5f62\u72b6\u4e00\u81f4</p> <p>Query\u77e9\u9635 n\u884cdk\u5217</p> <p>Key\u77e9\u9635 m\u884cdk\u5217</p> <p>weight\u77e9\u9635 n\u884cm\u5217\uff0c\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u6b21query\uff0c\u5bf9\u5e94\u4e00\u4e2a\u5355\u8bcd</p> <p>value\u77e9\u9635\uff0cm\u884cdv\u5217\uff0c\u6bcf\u4e00\u5217\u662f\u4e00\u4e2a\u5355\u8bcd\uff0cdv\u662f\u5355\u8bcd\u7279\u5f81\u7684\u7ef4\u5ea6</p> <p>output\u77e9\u9635\uff0cn\u884cdv\u5217\uff0cn\u6b21query\uff0c\u8f93\u51fa\u4e86</p> <p>multi-head \u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\uff0c\u62c6\u5f00\u6765\u518d\u5408\u5e76</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#attention","title":"\u5728\u6a21\u578b\u4e2dattention\u673a\u5236\u7684\u4e09\u6b21\u4f7f\u7528\u573a\u666f","text":"<ol> <li>\u5f00\u59cb\u8f93\u5165\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u8f93\u5165\u590d\u7528\u4e3a\u4e09\u6761\u7ebf\uff0cQ,K,V\u90fd\u662f\u81ea\u5df1\u672c\u8eab</li> <li>masked-multihead-attention \u6765\u6e90\u4e8e\u4e0a\u4e00\u5c42decoder\u7684\u8f93\u51fa\uff0c\u4e5f\u662f\u590d\u7528\u4e09\u6b21</li> <li>multihead-attention\uff0ckey-value\u5bf9\u6765\u6e90\u4e8edecoder\uff0cquery\u6765\u6e90\u4e8eencoder</li> </ol> <p>\u5982\u4e0b\u56fe\uff0c\u5728\u7b2c\u4e00\u6b21multi-head-attention\u4e4b\u540e\uff0c\u5b9e\u9645\u4e0a\u6574\u4e2a\u5e8f\u5217\u7684\u4fe1\u606f\u5df2\u7ecf\u901a\u8fc7attention\u5c42\uff0c\u628a\u4e0d\u540c\u7684query\u548cposition encoding\u88ab\u62c6\u89e3\u6210\u72ec\u7acb\u7684\u90e8\u5206\uff0c\u548cRNN\u4e0d\u540c</p> <p></p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#resnet","title":"ResNet \u6b8b\u5dee\u7f51\u7edc","text":"<p>\u5f88\u6df1\u7684\u795e\u7ecf\u7f51\u7edc\u8bef\u5dee\u53d8\u5927\u7684\u95ee\u9898</p> <p>\u4e0d\u662f\u8fc7\u62df\u5408\u9020\u6210\u7684</p> <p>\"Identity mapping\" \u662f\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u4e2d\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u901a\u5e38\u4e0e\u6b8b\u5dee\u7f51\u7edc\uff08Residual Networks\uff0c\u7b80\u79f0 ResNets\uff09\u76f8\u5173\u3002</p> <p>\u5728\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u5f53\u6a21\u578b\u53d8\u5f97\u975e\u5e38\u6df1\u65f6\uff0c\u8bad\u7ec3\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8\u662f\u8bad\u7ec3\u6df1\u5ea6\u7f51\u7edc\u65f6\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cResNet \u5f15\u5165\u4e86\u6b8b\u5dee\u5757\uff08Residual Block\uff09\uff0c\u5176\u4e2d\u7684\u5173\u952e\u90e8\u5206\u5c31\u662f \"identity mapping\"\u3002</p> <p>Identity Mapping \u7684\u5b9a\u4e49\uff1a</p> <p>\u5728 ResNet \u7684\u6b8b\u5dee\u5757\u4e2d\uff0c\u901a\u8fc7\u5f15\u5165\u8df3\u8dc3\u8fde\u63a5\uff08skip connection\uff09\u548c \"identity mapping\"\uff0c\u4f7f\u5f97\u7f51\u7edc\u53ef\u4ee5\u76f4\u63a5\u5b66\u4e60\u6b8b\u5dee\uff08residual\uff09\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6b8b\u5dee\u5757\uff0c\u5176\u8f93\u51fa\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a</p> <p>Output=F(Input)+Input</p> <p>\u5176\u4e2d\uff0cF(Input) \u662f\u7ecf\u8fc7\u6b8b\u5dee\u5757\u5185\u90e8\u64cd\u4f5c\u7684\u7ed3\u679c\uff0cInput \u662f\u8f93\u5165\u3002\u4e0a\u5f0f\u4e2d\u7684 \"input\" \u5c31\u662f \"identity mapping\"\uff0c\u5b83\u5141\u8bb8\u6a21\u578b\u5b66\u4e60\u5bf9\u8f93\u5165\u8fdb\u884c\u6052\u7b49\u6620\u5c04\uff08\u5373\u4e0d\u8fdb\u884c\u4efb\u4f55\u53d8\u6362\uff09\u3002</p> <p>\u4f5c\u7528\u548c\u4f18\u52bf\uff1a</p> <ol> <li>\u68af\u5ea6\u6d41\u52a8\uff1a \"Identity mapping\" \u4f7f\u5f97\u68af\u5ea6\u53ef\u4ee5\u66f4\u76f4\u63a5\u5730\u4f20\u64ad\u56de\u7f51\u7edc\u7684\u8f83\u65e9\u5c42\uff0c\u6709\u52a9\u4e8e\u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u95ee\u9898\uff0c\u4f7f\u8bad\u7ec3\u66f4\u52a0\u7a33\u5b9a\u3002</li> <li>\u6a21\u578b\u5b66\u4e60\u6b8b\u5dee\uff1a \u901a\u8fc7\u5f15\u5165 \"identity mapping\"\uff0c\u6a21\u578b\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u5b66\u4e60\u5bf9\u8f93\u5165\u8fdb\u884c\u53d8\u6362\uff0c\u800c\u4e0d\u662f\u5fc5\u987b\u5b66\u4e60\u6574\u4e2a\u6620\u5c04\u3002\u8fd9\u6709\u52a9\u4e8e\u6a21\u578b\u66f4\u8f7b\u677e\u5730\u9002\u5e94\u5e95\u5c42\u548c\u9ad8\u5c42\u7684\u7279\u5f81\u3002</li> <li>\u7f51\u7edc\u6df1\u5ea6\uff1a ResNet \u4e2d\u7684 \"identity mapping\" \u5141\u8bb8\u6784\u5efa\u975e\u5e38\u6df1\u7684\u7f51\u7edc\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u8bad\u7ec3\u56f0\u96be\u3002\u8fd9\u4f7f\u5f97 ResNet \u6210\u4e3a\u5904\u7406\u590d\u6742\u4efb\u52a1\u7684\u5f3a\u5927\u5de5\u5177\u3002</li> </ol> <p>\u603b\u4f53\u800c\u8a00\uff0c\"identity mapping\" \u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\u662f\u4e3a\u4e86\u63d0\u9ad8\u6a21\u578b\u7684\u8bad\u7ec3\u7a33\u5b9a\u6027\u548c\u6df1\u5ea6\u7f51\u7edc\u7684\u53ef\u8bad\u7ec3\u6027\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#mapping","title":"mapping \u6295\u5f71   \u7ebf\u6027\u6620\u5c04","text":"<p>\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\"downsample\" \u548c \"upsample\" \u662f\u6307\u6539\u53d8\u8f93\u5165\u6570\u636e\u7684\u7a7a\u95f4\u5206\u8fa8\u7387\u7684\u64cd\u4f5c\u3002</p> <ol> <li>Downsample\uff08\u4e0b\u91c7\u6837\uff09\uff1a</li> <li>\u4e0b\u91c7\u6837\u662f\u6307\u5c06\u8f93\u5165\u6570\u636e\u7684\u7a7a\u95f4\u5206\u8fa8\u7387\u964d\u4f4e\u7684\u8fc7\u7a0b\u3002\u5728\u56fe\u50cf\u5904\u7406\u4e2d\uff0c\u8fd9\u901a\u5e38\u901a\u8fc7\u964d\u4f4e\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u6765\u5b9e\u73b0\u3002\u5e38\u89c1\u7684\u4e0b\u91c7\u6837\u64cd\u4f5c\u5305\u62ec\u6c60\u5316\uff08Pooling\uff09\u548c\u6b65\u5e45\u5927\u4e8e1\u7684\u5377\u79ef\u64cd\u4f5c\u3002</li> <li>\u6c60\u5316\u64cd\u4f5c\u4e2d\uff0c\u901a\u5e38\u4f7f\u7528\u6700\u5927\u6c60\u5316\u6216\u5e73\u5747\u6c60\u5316\uff0c\u5c06\u6bcf\u4e2a\u6c60\u5316\u7a97\u53e3\u5185\u7684\u6570\u503c\u5408\u5e76\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u503c\uff0c\u4ece\u800c\u964d\u4f4e\u7a7a\u95f4\u5206\u8fa8\u7387\u3002</li> <li>Upsample\uff08\u4e0a\u91c7\u6837\uff09\uff1a</li> <li>\u4e0a\u91c7\u6837\u662f\u6307\u5c06\u8f93\u5165\u6570\u636e\u7684\u7a7a\u95f4\u5206\u8fa8\u7387\u589e\u52a0\u7684\u8fc7\u7a0b\u3002\u5728\u56fe\u50cf\u5904\u7406\u4e2d\uff0c\u8fd9\u901a\u5e38\u901a\u8fc7\u63d2\u503c\u64cd\u4f5c\u6765\u5b9e\u73b0\u3002\u5e38\u89c1\u7684\u4e0a\u91c7\u6837\u64cd\u4f5c\u5305\u62ec\u53cd\u5377\u79ef\uff08Deconvolution\uff09\u548c\u8f6c\u7f6e\u5377\u79ef\uff08Transpose Convolution\uff09\u3002</li> <li>\u4e0a\u91c7\u6837\u7684\u76ee\u6807\u662f\u901a\u8fc7\u586b\u5145\u989d\u5916\u7684\u50cf\u7d20\u6216\u7279\u5f81\u6765\u589e\u52a0\u56fe\u50cf\u7684\u7ef4\u5ea6\uff0c\u4ece\u800c\u63d0\u9ad8\u7a7a\u95f4\u5206\u8fa8\u7387\u3002</li> </ol> <p>\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7ecf\u5e38\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u4e0d\u540c\u5c42\u6b21\u548c\u4efb\u52a1\uff1a</p> <ul> <li>\u7279\u5f81\u63d0\u53d6\u5c42\uff1a \u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNNs\uff09\u4e2d\uff0c\u4e0b\u91c7\u6837\u901a\u5e38\u5728\u5377\u79ef\u5c42\u4e2d\u8fdb\u884c\uff0c\u4ee5\u51cf\u5c11\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u7ef4\u5ea6\uff0c\u6355\u6349\u66f4\u9ad8\u7ea7\u7684\u7279\u5f81\u3002\u6c60\u5316\u64cd\u4f5c\u662f\u5e38\u89c1\u7684\u4e0b\u91c7\u6837\u65b9\u6cd5\u3002</li> <li>\u7279\u5f81\u751f\u6210\u5c42\uff1a \u5728\u67d0\u4e9b\u4efb\u52a1\u4e2d\uff0c\u5982\u56fe\u50cf\u5206\u5272\u6216\u751f\u6210\uff0c\u4e0a\u91c7\u6837\u7528\u4e8e\u589e\u52a0\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u5206\u8fa8\u7387\uff0c\u4f7f\u5176\u80fd\u591f\u8f93\u51fa\u4e0e\u8f93\u5165\u76f8\u540c\u5927\u5c0f\u7684\u7ed3\u679c\u3002\u53cd\u5377\u79ef\u6216\u8f6c\u7f6e\u5377\u79ef\u662f\u5e38\u89c1\u7684\u4e0a\u91c7\u6837\u65b9\u6cd5\u3002</li> </ul> <p>\u8fd9\u4e9b\u64cd\u4f5c\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u4f7f\u7528\u53ef\u4ee5\u6839\u636e\u4efb\u52a1\u548c\u7f51\u7edc\u7ed3\u6784\u7684\u9700\u6c42\u800c\u53d8\u5316\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#123","title":"1.23","text":"<p>\"LR\" \u5728\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u4e2d\u901a\u5e38\u6307\u7684\u662f\u903b\u8f91\u56de\u5f52\uff08Logistic Regression\uff09\uff0c\u662f\u4e00\u79cd\u7528\u4e8e\u4e8c\u5206\u7c7b\u95ee\u9898\u7684\u6a21\u578b\u3002\u5bf9\u4e8e\u903b\u8f91\u56de\u5f52\u6a21\u578b\uff0c\u901a\u5e38\u4f7f\u7528\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff08Binary Cross Entropy Loss\uff09\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4f20\u7edf\u7684\u5747\u65b9\u8bef\u5dee\u635f\u5931\u3002</p> <p>\u903b\u8f91\u56de\u5f52\u7684\u635f\u5931\u51fd\u6570\u4e3a\uff1a</p> <p>\\(\\text{Binary Cross Entropy Loss} = - \\frac{1}{N} \\sum_{i=1}^{N} \\left[ y_i \\log(p_i) + (1 - y_i) \\log(1 - p_i) \\right]\\)</p> <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(N\\) \u662f\u6837\u672c\u6570\u91cf\u3002</li> <li>\\(y_i\\) \u662f\u7b2c \\(i\\) \u4e2a\u6837\u672c\u7684\u771f\u5b9e\u6807\u7b7e\u3002</li> <li>\\(p_i\\) \u662f\u6a21\u578b\u5bf9\u7b2c \\(i\\) \u4e2a\u6837\u672c\u7684\u9884\u6d4b\u6982\u7387\u3002</li> </ul> <p>\u4f18\u5316\u635f\u5931\u51fd\u6570\u7684\u8fc7\u7a0b\u901a\u5e38\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u6216\u5176\u53d8\u79cd\u3002\u68af\u5ea6\u4e0b\u964d\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u8fed\u4ee3\u8c03\u6574\u6a21\u578b\u53c2\u6570\uff0c\u4f7f\u635f\u5931\u51fd\u6570\u6700\u5c0f\u5316\u3002</p> <ol> <li>\u68af\u5ea6\u8ba1\u7b97\uff1a \u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5bf9\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\u3002\u5bf9\u4e8e\u903b\u8f91\u56de\u5f52\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u8ba1\u7b97\u5f97\u5230\u3002</li> <li> <p>\u53c2\u6570\u66f4\u65b0\uff1a \u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u6216\u5176\u4ed6\u4f18\u5316\u7b97\u6cd5\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002\u66f4\u65b0\u89c4\u5219\u901a\u5e38\u4e3a \\(\\theta_{\\text{new}} = \\theta_{\\text{old}} - \\alpha \\nabla L\\)\uff0c\u5176\u4e2d \\(\\alpha\\) \u662f\u5b66\u4e60\u7387\uff0c\u25bdL \u662f\u635f\u5931\u51fd\u6570\u5173\u4e8e\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\u3002</p> </li> <li> <p>\u8fed\u4ee3\uff1a \u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u5230\u6ee1\u8db3\u505c\u6b62\u6761\u4ef6\uff0c\u5982\u8fbe\u5230\u6700\u5927\u8fed\u4ee3\u6b21\u6570\u6216\u68af\u5ea6\u63a5\u8fd1\u96f6\u3002</p> </li> </ol> <p>\u5bf9\u4e8e\u903b\u8f91\u56de\u5f52\uff0c\u7531\u4e8e\u635f\u5931\u51fd\u6570\u662f\u51f8\u51fd\u6570\uff0c\u68af\u5ea6\u4e0b\u964d\u6cd5\u901a\u5e38\u80fd\u591f\u6536\u655b\u5230\u5168\u5c40\u6700\u5c0f\u503c\u3002\u5b66\u4e60\u7387\u7684\u9009\u62e9\u5f88\u91cd\u8981\uff0c\u8fc7\u5927\u7684\u5b66\u4e60\u7387\u53ef\u80fd\u5bfc\u81f4\u4e0d\u7a33\u5b9a\u7684\u8bad\u7ec3\uff0c\u800c\u8fc7\u5c0f\u7684\u5b66\u4e60\u7387\u53ef\u80fd\u5bfc\u81f4\u6536\u655b\u7f13\u6162\u3002</p> <p>\u5728 PyTorch \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u5fae\u5206\u548c\u4f18\u5316\u5668\u6765\u5b9e\u73b0\u68af\u5ea6\u4e0b\u964d\u3002\u4f8b\u5982\uff1a</p> Python<pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\n# \u5b9a\u4e49\u903b\u8f91\u56de\u5f52\u6a21\u578b\nmodel = nn.Linear(in_features, out_features)\n# \u5b9a\u4e49\u635f\u5931\u51fd\u6570\ncriterion = nn.BCEWithLogitsLoss()\n# \u5b9a\u4e49\u4f18\u5316\u5668\noptimizer = optim.SGD(model.parameters(), lr=learning_rate)\n# \u8bad\u7ec3\u8fc7\u7a0b\nfor epoch in range(num_epochs):\n    # \u524d\u5411\u4f20\u64ad\n    outputs = model(inputs)\n    # \u8ba1\u7b97\u635f\u5931\n    loss = criterion(outputs, labels)\n    # \u53cd\u5411\u4f20\u64ad\n    optimizer.zero_grad()\n    loss.backward()\n    # \u53c2\u6570\u66f4\u65b0\n    optimizer.step()\n</code></pre>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#svm","title":"SVM\u539f\u7406\u7b80\u6790","text":"<p>\u600e\u6837\u624d\u662f\u6700\u597d\u7684\u5206\u5272\uff1a</p> <p>\u201c\u5206\u7684\u6e05\uff0c\u6ca1\u6709\u542b\u7cca\u4e0d\u6e05\u7684\u70b9\u201d\uff1a\u5404\u70b9\u79bb\u5e73\u9762\u7684\u8ddd\u79bb\u8bbe\u4e3a\\(r_i\\),\u6c42\u4f7f\u5f97\u6240\u6709\\(r_i\\)\u7684\u6700\u5c0f\u503c\u6700\u5927\u7684\u4e00\u4e2a\u5206\u5272</p> <p>\u7406\u89e3\u51f8\u4f18\u5316 - \u77e5\u4e4e (zhihu.com)</p> <p>\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u2014\u2014\u539f\u7406\u7bc7 (zhihu.com)</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#pytorch","title":"pytorch\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4f7f\u7528","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#pytorch-transform","title":"pytorch--transform\u5de5\u5177\u7bb1\u53ca\u7528\u6cd5","text":"Python<pre><code>from torchvision import transforms\nfrom PIL import image\n\nimg_path = \"relative/path/to/image\"\nimg = Image.open(img_path)\nprint(img)  #&lt;PIL.JpegImage.JpegImageFile image mode=RGB size = 768x512 at 0275820fe60&gt;\ntensor_trans = transforms.ToTensor(img)\n</code></pre> Python<pre><code>from torch.utils.tensorboard import SummaryWriter\nwriter = SummaryWriter(\"logs\")\n\nwriter.add_image(\"Tensor_img\",tensor_img)\nwriter.close()\n</code></pre>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#totensor","title":"ToTensor","text":"<p>\u628aPIL Image \u6216\u8005 numpy.ndarray\u8f6c\u6362\u4e3atensor\u7c7b\u578b</p> Python<pre><code>train_augs = torchvision.transforms.Compose([\ntorchvision.transforms.RandomHorizontalFlip(),\ntorchvision.transforms.ToTensor()])\n\ntest_augs = torchvision.transforms.Compose([\ntorchvision.transforms.ToTensor()])\n</code></pre>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#resize","title":"resize","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#torchvisiontransform","title":"torchvision\u63d0\u4f9b\u7684\u6807\u51c6\u6570\u636e\u96c6\u548ctransform\u7ed3\u5408\u4f7f\u7528","text":"<p>\u6807\u51c6\u6570\u636e\u96c6\u7f51\u5740\uff1aDatasets \u2014 Torchvision 0.16 documentation (pytorch.org)</p> <p>torchvision \u2014 Torchvision master documentation (pytorch.org)</p> Python<pre><code>#torchvision\u5b98\u65b9\u6570\u636e\u96c6\u548ctransforms\u8054\u5408\u4f7f\u7528\nimport torchvision\nfrom torch.utils.tensorboard import SummaryWriter\ndataset_transform = torchvision.transforms.Compose([\n    torchvision.transforms.ToTensor()\n])\ntrain_set = torchvision.datasets.CIFAR10(root = \"./dataset\",train = True,download=True,transform=dataset_transform)\ntest_set = torchvision.datasets.CIFAR10(root = \"./dataset\",train = False,download=True,transform=dataset_transform)\n#\u4e0b\u8f7d\u540e\u89e3\u538b\nprint(train_set[0])\nwriter = SummaryWriter(\"cifar10\")  #\u65b0\u5efa\u7684tensorboard\u65e5\u5fd7\u7684\u8def\u5f84\u6587\u4ef6\u5939\u540d\u79f0\nfor i in range(10):\n    img, target = test_set[i]\n    writer.add_image(\"test_set\",img,i)  #\u56fe\u7247\u5728tensorboard\u4f1a\u8bdd\u4e2d\u7684\u540d\u79f0\n</code></pre> <p>tensorboard\u4f7f\u7528\uff1a</p> <p>commandline\uff1a<code>tensorboard --logdir = \"mydirname\"</code></p> <p>\u6216\u5728vscode\u4e2d\u542f\u52a8tensorboard\u4f1a\u8bdd\u4e5f\u53ef</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#pytorch-dataloader","title":"pytorch-dataloader\u4f7f\u7528","text":"<p>\u628adataset\u4e2d\u7684\u6570\u636e\u4e00\u4e2a\u4e2a\u52a0\u8f7d\u5230\u795e\u7ecf\u7f51\u7edc\u4e2d</p> <p>dataloader\u7c7b\u5c5e\u6027\uff1a</p> <p>\u200b   dataset\uff0cfrom which to load the data</p> <p>\u200b   batch_size\uff0c\u6bcf\u6b21\u6293\u51e0\u5f20\u724c</p> <p>\u200b   shuffle \uff0c\u6bcf\u4e2aepoch\u662f\u5426\u91cd\u65b0\u52a0\u8f7d</p> <p>\u200b   num_workers \u4e3b\u8fdb\u7a0b\u52a0\u8f7d\uff0c=0\uff0c&gt;0\u5bf9windows\u53ef\u80fd\u6709\u95ee\u9898\uff0cbroken pipes</p> <p>\u200b   drop_last \u820d\u53bb\u6700\u540e\u4e00\u4efd\u724c\uff0c\u662f\u5426\u4fdd\u7559\u6574\u6570</p> <p></p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#torch-nn","title":"torch-nn\u4f7f\u7528","text":"Python<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module)\n    def __init__(self):\n        super(Model,self).__init__()\n        self.conv1 = nn.Conv2d(1,20,5)\n        self.conv2 = nn,Conv2d(20,20,5)\n\n    def forward(self,x)\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#torch-sequential-cifar-10","title":"torch-sequential \u7ed3\u5408CIFAR-10\u6570\u636e\u96c6\u4f7f\u7528","text":"<p>\u5c42\u7684\u53c2\u6570\u8bbe\u7f6e\uff1a</p> Python<pre><code>    Conv2d(input_channel,output_channel,kernel_size,padding)\n    #\u6bd4\u5982input \u7684\u901a\u9053\u6570\u4e3a\u524d\u540e\u76f8\u540c\u65b9\u5757\u7684\u5927\u5c0f \u4e3a3\uff0coutput channel\u4e3a32\uff0ckernel_size\u4e3a5\uff0cpadding\u4e3a2\n    maxpool2d(size)\n</code></pre>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#_2","title":"\u5fae\u8c03 \u8fc1\u79fb\u5b66\u4e60","text":"<ol> <li>\u8fc1\u79fb\u5b66\u4e60\u5c06\u4ece\u6e90\u6570\u636e\u96c6\u4e2d\u5b66\u5230\u7684\u77e5\u8bc6\u8fc1\u79fb\u5230\u76ee\u6807\u6570\u636e\u96c6\uff0c\u5fae\u8c03\u662f\u8fc1\u79fb\u5b66\u4e60\u7684\u5e38\u89c1\u6280\u5de7\u3002</li> <li>\u9664\u8f93\u51fa\u5c42\u5916\uff0c\u76ee\u6807\u6a21\u578b\u4ece\u6e90\u6a21\u578b\u4e2d\u590d\u5236\u6240\u6709\u6a21\u578b\u8bbe\u8ba1\u53ca\u5176\u53c2\u6570\uff0c\u5e76\u6839\u636e\u76ee\u6807\u6570\u636e\u96c6\u5bf9\u8fd9\u4e9b\u53c2\u6570\u8fdb\u884c\u5fae    \u8c03\u3002\u4f46\u662f\uff0c\u76ee\u6807\u6a21\u578b\u7684\u8f93\u51fa\u5c42\u9700\u8981\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\u3002</li> <li>\u901a\u5e38\uff0c\u5fae\u8c03\u53c2\u6570\u4f7f\u7528\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\uff0c\u800c\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\u8f93\u51fa\u5c42\u53ef\u4ee5\u4f7f\u7528\u66f4\u5927\u7684\u5b66\u4e60\u7387\u3002</li> </ol> <p>\u200b                                                        VGG \u7f51\u7edc\u7ed3\u6784\u793a\u610f</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#_3","title":"\u8ba1\u7b97\u673a\u89c6\u89c9\u57fa\u7840\u77e5\u8bc6","text":"<p>\u6211\u4eec\u4ee5\u56fe\u50cf\u7684\u6bcf\u4e2a\u50cf\u7d20\u4e3a\u4e2d\u5fc3\u751f\u6210\u4e0d\u540c\u5f62\u72b6\u7684\u951a\u6846\u3002 \u2022 \u4ea4\u5e76\u6bd4\uff08IoU\uff09\u4e5f\u88ab\u79f0\u4e3a\u6770\u5361\u5fb7\u7cfb\u6570\uff0c\u7528\u4e8e\u8861\u91cf\u4e24\u4e2a\u8fb9\u754c\u6846\u7684\u76f8\u4f3c\u6027\u3002\u5b83\u662f\u76f8\u4ea4\u9762\u79ef\u4e0e\u76f8\u5e76\u9762\u79ef\u7684\u6bd4\u7387\u3002 \u2022 \u5728\u8bad\u7ec3\u96c6\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u6bcf\u4e2a\u951a\u6846\u4e24\u79cd\u7c7b\u578b\u7684\u6807\u7b7e\u3002\u4e00\u4e2a\u662f\u4e0e\u951a\u6846\u4e2d\u76ee\u6807\u68c0\u6d4b\u7684\u7c7b\u522b\uff0c\u53e6\u4e00\u4e2a\u662f\u951a\u6846\u771f \u5b9e\u76f8\u5bf9\u4e8e\u8fb9\u754c\u6846\u7684\u504f\u79fb\u91cf\u3002 \u2022 \u9884\u6d4b\u671f\u95f4\u53ef\u4ee5\u4f7f\u7528\u975e\u6781\u5927\u503c\u6291\u5236\uff08NMS\uff09\u6765\u79fb\u9664\u7c7b\u4f3c\u7684\u9884\u6d4b\u8fb9\u754c\u6846\uff0c\u4ece\u800c\u7b80\u5316\u8f93\u51fa\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#nms","title":"\u975e\u6781\u5927\u503c\u6291\u5236 NMS","text":"<p>NMS\uff08\u975e\u6781\u5927\u503c\u6291\u5236\uff0cNon-Maximum Suppression\uff09\u662f\u4e00\u79cd\u5e38\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u6280\u672f\uff0c\u7528\u4e8e\u4ece\u4e00\u7ec4\u91cd\u53e0\u7684\u5019\u9009\u6846\u4e2d\u9009\u62e9\u6700\u7b26\u5408\u6761\u4ef6\u7684\u6846\u3002\u5176\u4e3b\u8981\u539f\u7406\u662f\u6d88\u9664\u591a\u4f59\u7684\u3001\u4e0e\u6700\u7ec8\u9009\u62e9\u6846\u9ad8\u5ea6\u91cd\u53e0\u7684\u5019\u9009\u6846\uff0c\u4ee5\u786e\u4fdd\u6700\u7ec8\u8f93\u51fa\u7684\u6846\u5177\u6709\u6700\u4f73\u7684\u8d28\u91cf\u548c\u975e\u91cd\u53e0\u6027\u3002</p> <p>\u4ee5\u4e0b\u662fNMS\u7684\u57fa\u672c\u539f\u7406\uff1a</p> <ol> <li>\u5f97\u5206\u6392\u5e8f\uff1a \u9996\u5148\uff0c\u5bf9\u6240\u6709\u7684\u5019\u9009\u6846\u6309\u7167\u5176\u5f97\u5206\uff08\u7f6e\u4fe1\u5ea6\u6216\u5176\u4ed6\u8bc4\u4f30\u6307\u6807\uff09\u8fdb\u884c\u964d\u5e8f\u6392\u5217\u3002\u901a\u5e38\uff0c\u5f97\u5206\u8d8a\u9ad8\u7684\u6846\u8d8a\u6709\u53ef\u80fd\u662f\u6b63\u786e\u7684\u76ee\u6807\u3002</li> <li>\u9009\u62e9\u6700\u9ad8\u5f97\u5206\u6846\uff1a \u9009\u53d6\u5f97\u5206\u6700\u9ad8\u7684\u5019\u9009\u6846\u4f5c\u4e3a\u8f93\u51fa\uff0c\u5c06\u5176\u52a0\u5165\u6700\u7ec8\u7684\u8f93\u51fa\u7ed3\u679c\u96c6\u5408\u3002</li> <li>\u8ba1\u7b97\u91cd\u53e0\u9762\u79ef\uff1a \u8ba1\u7b97\u5f53\u524d\u9009\u62e9\u7684\u6846\u4e0e\u5269\u4f59\u7684\u5019\u9009\u6846\u7684\u91cd\u53e0\u9762\u79ef\u3002\u8fd9\u91cc\u5e38\u7528\u7684\u662f IoU\uff08Intersection over Union\uff09\u6307\u6807\uff0c\u5373\u4e24\u4e2a\u6846\u76f8\u4ea4\u9762\u79ef\u4e0e\u5b83\u4eec\u7684\u5e76\u96c6\u9762\u79ef\u4e4b\u6bd4\u3002</li> <li>\u5220\u9664\u91cd\u53e0\u6846\uff1a \u5bf9\u4e8e\u4e0e\u5f53\u524d\u9009\u62e9\u7684\u6846\u91cd\u53e0\u9762\u79ef\u8d85\u8fc7\u67d0\u4e2a\u8bbe\u5b9a\u7684\u9608\u503c\u7684\u5176\u4ed6\u5019\u9009\u6846\uff0c\u5c06\u5176\u4ece\u5019\u9009\u6846\u96c6\u5408\u4e2d\u79fb\u9664\u3002</li> <li>\u91cd\u590d\u6b65\u9aa42\u81f3\u6b65\u9aa44\uff1a \u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u9009\u62e9\u4e0b\u4e00\u4e2a\u5f97\u5206\u6700\u9ad8\u7684\u6846\uff0c\u7136\u540e\u5220\u9664\u4e0e\u5b83\u91cd\u53e0\u9762\u79ef\u8d85\u8fc7\u9608\u503c\u7684\u5176\u4ed6\u6846\u3002\u76f4\u5230\u6240\u6709\u7684\u5019\u9009\u6846\u90fd\u88ab\u5904\u7406\u3002</li> </ol> <p>\u8fd9\u6837\uff0cNMS \u786e\u4fdd\u4e86\u6700\u7ec8\u8f93\u51fa\u7684\u6846\u5177\u6709\u8f83\u9ad8\u7684\u5f97\u5206\uff0c\u5e76\u4e14\u5f7c\u6b64\u4e4b\u95f4\u6709\u8f83\u4f4e\u7684\u91cd\u53e0\u5ea6\u3002\u8fd9\u5bf9\u4e8e\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u9632\u6b62\u5728\u540c\u4e00\u4e2a\u76ee\u6807\u4e0a\u4ea7\u751f\u591a\u4e2a\u9ad8\u5ea6\u91cd\u53e0\u7684\u68c0\u6d4b\u7ed3\u679c\uff0c\u4ece\u800c\u63d0\u9ad8\u68c0\u6d4b\u7684\u51c6\u786e\u6027\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#ssd","title":"\u5355\u53d1\u591a\u6846\u68c0\u6d4b SSD","text":"<p>\"\u5355\u53d1\u591a\u6846\u68c0\u6d4b\"\uff08Single Shot Multibox Detection\uff0cSSD\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u7684\u6df1\u5ea6\u5b66\u4e60\u67b6\u6784\uff0c\u65e8\u5728\u5b9e\u73b0\u5feb\u901f\u800c\u51c6\u786e\u7684\u76ee\u6807\u68c0\u6d4b\u3002SSD\u662f\u4e00\u79cd\u591a\u5c3a\u5ea6\u3001\u591a\u6846\u67b6\u7684\u68c0\u6d4b\u65b9\u6cd5\uff0c\u80fd\u591f\u5728\u4e00\u6b21\u524d\u5411\u4f20\u64ad\u4e2d\u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u591a\u4e2a\u76ee\u6807\u3002</p> <p>\u4ee5\u4e0b\u662fSSD\u7684\u4e3b\u8981\u7279\u70b9\u548c\u539f\u7406\uff1a</p> <ol> <li>\u591a\u5c3a\u5ea6\u7279\u5f81\u56fe\uff1a SSD \u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u5f15\u5165\u4e86\u591a\u4e2a\u4e0d\u540c\u5c3a\u5ea6\u7684\u7279\u5f81\u56fe\u3002\u6bcf\u4e2a\u7279\u5f81\u56fe\u5bf9\u5e94\u4e8e\u7f51\u7edc\u7684\u4e0d\u540c\u5c42\uff0c\u5177\u6709\u4e0d\u540c\u7684\u611f\u53d7\u91ce\u548c\u5206\u8fa8\u7387\u3002\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7f51\u7edc\u5728\u4e0d\u540c\u5c3a\u5ea6\u4e0a\u5bf9\u76ee\u6807\u8fdb\u884c\u68c0\u6d4b\u3002</li> <li>\u591a\u6846\u6846\u67b6\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u5c3a\u5ea6\u7684\u7279\u5f81\u56fe\uff0cSSD \u901a\u8fc7\u9884\u5b9a\u4e49\u7684\u4e00\u7cfb\u5217\u951a\u6846\uff08anchor boxes\uff09\u6765\u68c0\u6d4b\u4e0d\u540c\u5f62\u72b6\u548c\u5c3a\u5bf8\u7684\u76ee\u6807\u3002\u6bcf\u4e2a\u951a\u6846\u4e0e\u7f51\u7edc\u7684\u6bcf\u4e2a\u7a7a\u95f4\u4f4d\u7f6e\u76f8\u5173\u8054\uff0c\u901a\u8fc7\u5377\u79ef\u5c42\u7684\u9884\u6d4b\u6765\u8f93\u51fa\u76ee\u6807\u7684\u4f4d\u7f6e\u548c\u7c7b\u522b\u4fe1\u606f\u3002</li> <li>\u635f\u5931\u51fd\u6570\uff1a SSD \u4f7f\u7528\u591a\u4efb\u52a1\u635f\u5931\u51fd\u6570\uff0c\u540c\u65f6\u8003\u8651\u4f4d\u7f6e\u56de\u5f52\u548c\u7c7b\u522b\u5206\u7c7b\u3002\u4f4d\u7f6e\u56de\u5f52\u635f\u5931\u5173\u6ce8\u951a\u6846\u7684\u4f4d\u7f6e\u7cbe\u5ea6\uff0c\u800c\u7c7b\u522b\u5206\u7c7b\u635f\u5931\u5173\u6ce8\u9884\u6d4b\u7684\u76ee\u6807\u7c7b\u522b\u3002</li> <li>\u975e\u6781\u5927\u503c\u6291\u5236\uff08NMS\uff09\uff1a \u5728SSD\u7684\u8f93\u51fa\u4e2d\uff0c\u91c7\u7528\u975e\u6781\u5927\u503c\u6291\u5236\u6765\u79fb\u9664\u9ad8\u5ea6\u91cd\u53e0\u7684\u6846\uff0c\u4ee5\u63d0\u9ad8\u68c0\u6d4b\u7684\u51c6\u786e\u6027\u3002NMS\u901a\u8fc7\u4fdd\u7559\u5177\u6709\u6700\u9ad8\u7f6e\u4fe1\u5ea6\u7684\u6846\uff0c\u5e76\u6d88\u9664\u4e0e\u5176\u9ad8\u5ea6\u91cd\u53e0\u7684\u5176\u4ed6\u6846\u3002</li> <li>\u5b9e\u65f6\u6027\u80fd\uff1a SSD\u8bbe\u8ba1\u65e8\u5728\u5b9e\u73b0\u5b9e\u65f6\u76ee\u6807\u68c0\u6d4b\u3002\u901a\u8fc7\u4e00\u6b21\u524d\u5411\u4f20\u64ad\uff0cSSD\u53ef\u4ee5\u5728\u56fe\u50cf\u4e2d\u68c0\u6d4b\u591a\u4e2a\u76ee\u6807\uff0c\u5e76\u63d0\u4f9b\u76ee\u6807\u7684\u4f4d\u7f6e\u548c\u7c7b\u522b\u4fe1\u606f\u3002</li> </ol> <p>SSD\u7684\u8bbe\u8ba1\u4f7f\u5f97\u5b83\u5728\u51c6\u786e\u6027\u548c\u901f\u5ea6\u4e4b\u95f4\u53d6\u5f97\u4e86\u5e73\u8861\uff0c\u4f7f\u5176\u6210\u4e3a\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u76ee\u6807\u68c0\u6d4b\u6846\u67b6\u4e4b\u4e00\u3002\u5b83\u9002\u7528\u4e8e\u5404\u79cd\u5c3a\u5bf8\u548c\u5f62\u72b6\u7684\u76ee\u6807\uff0c\u5e76\u4e14\u5728\u590d\u6742\u7684\u573a\u666f\u4e2d\u8868\u73b0\u826f\u597d</p> <p></p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#124","title":"1.24 \u591a\u6a21\u6001\u6a21\u578b","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#gradio","title":"gradio","text":"<p>\u7279\u5316\u7684AI\u524d\u7aef\u754c\u9762\uff0c\u8bed\u6cd5\u975e\u5e38\u8f7b\u91cf\u7ea7\uff0c\u91c7\u7528\u5f88\u591ablock\u642d\u5efa\u4ea4\u4e92\u5f0f\u7684web UI</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#_4","title":"\u5f3a\u5316\u5b66\u4e60","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#huggingface","title":"huggingface","text":"<p>Zero-shot image classification is a computer vision task to classify images into one of several classes, without any prior training or knowledge of the classes. Zero shot image classification works by transferring knowledge learnt during training of one model, to classify novel classes that was not present in the training data.</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#clipopenaiclipcontrastive-language-image-pre-training","title":"CLIP\uff1aopenai\u7684clip\u6a21\u578b\uff0cContrastive Language-Image Pre-training","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#glipgrounded-language-image-pre-training","title":"GLIP\u7b80\u4ecb\uff1aGrounded Language-Image Pre-training","text":"<p>\u76ee\u524d\u7684\u89c6\u89c9\u8bc6\u522b\u4efb\u52a1\u901a\u5e38\u662f\u5728\u4e00\u4e2a\u9884\u5148\u5b9a\u4e49\u597d\u7684\u7c7b\u522b\u8303\u56f4\u5185\u8fdb\u884c\u7684\uff0c\u8fd9\u6837\u9650\u5236\u4e86\u5176\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u7684\u6269\u5c55\u3002CLIP\u7684\u51fa\u73b0\u6253\u7834\u4e86\u8fd9\u4e00\u9650\u5236\uff0cCLIP\u5229\u7528image-text\u5bf9\u8fdb\u884c\u8bad\u7ec3\uff0c\u4ece\u800c\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u6839\u636e\u6587\u5b57prompt\u8bc6\u522b\u4efb\u610f\u7c7b\u522b\u3002\u5173\u4e8eCLIP\u7684\u8be6\u7ec6\u4ecb\u7ecd\u53ef\u4ee5\u770b\u6211\u7684\u6587\u7ae0\uff1a\u6df1\u5ea6\u89e3\u8bfbCLIP\uff1a\u6253\u7834\u6587\u5b57\u4e0e\u56fe\u50cf\u4e4b\u95f4\u7684\u58c1\u5792\u3002CLIP\u9002\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u800cGLIP\u5c1d\u8bd5\u5c06\u8fd9\u4e00\u6280\u672f\u5e94\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u7b49\u66f4\u52a0\u590d\u6742\u7684\u4efb\u52a1\u4e2d\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#_5","title":"d2l\u7b14\u8bb0","text":"<p>\u5728\u591a\u6a21\u6001\u7f51\u7edc\uff08Multimodal Network\uff09\u4e2d\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u5355\u6a21\u6001\u7f51\u7edc\u7684\u7ed3\u6784\uff0c\u4f46\u5728\u8bbe\u8ba1\u4e0a\u8fdb\u884c\u4e86\u4e00\u4e9b\u8c03\u6574\u4ee5\u5904\u7406\u591a\u4e2a\u6a21\u6001\uff08\u4f8b\u5982\u56fe\u50cf\u3001\u6587\u672c\u3001\u58f0\u97f3\u7b49\uff09\u7684\u8f93\u5165\u3002\u5176\u4e2d\uff0cbackbone\u3001neck \u548c head \u662f\u7f51\u7edc\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u5404\u81ea\u6709\u4e0d\u540c\u7684\u529f\u80fd\u3002</p> <ol> <li>Backbone\uff1a</li> <li>\u5b9a\u4e49\uff1a Backbone \u662f\u7f51\u7edc\u7684\u4e3b\u5e72\u90e8\u5206\uff0c\u8d1f\u8d23\u63d0\u53d6\u8f93\u5165\u6570\u636e\u7684\u9ad8\u7ea7\u7279\u5f81\u8868\u793a\u3002\u5728\u591a\u6a21\u6001\u7f51\u7edc\u4e2d\uff0c\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u5e76\u884c\u7684 backbone\uff0c\u6bcf\u4e2a\u7528\u4e8e\u5904\u7406\u4e0d\u540c\u7684\u8f93\u5165\u6a21\u6001\u3002</li> <li>\u529f\u80fd\uff1a \u63d0\u53d6\u5171\u4eab\u7684\u4f4e\u7ea7\u548c\u4e2d\u7ea7\u7279\u5f81\uff0c\u4ee5\u6355\u6349\u4e0d\u540c\u8f93\u5165\u6a21\u6001\u7684\u5171\u6027\u4fe1\u606f\u3002</li> <li>Neck\uff1a</li> <li>\u5b9a\u4e49\uff1a Neck \u662f\u8fde\u63a5 backbone \u548c head \u7684\u4e2d\u95f4\u90e8\u5206\uff0c\u901a\u5e38\u4f4d\u4e8e\u7f51\u7edc\u7684\u4e2d\u5fc3\u3002\u5b83\u53ef\u4ee5\u5305\u542b\u4e00\u7cfb\u5217\u7684\u5c42\u6216\u6a21\u5757\uff0c\u6709\u52a9\u4e8e\u6574\u5408\u6765\u81ea\u4e0d\u540c\u6a21\u6001\u7684\u7279\u5f81\u3002</li> <li>\u529f\u80fd\uff1a \u5b9e\u73b0\u7279\u5f81\u7684\u878d\u5408\u6216\u6574\u5408\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u5904\u7406\u591a\u6a21\u6001\u4fe1\u606f\u3002\u5728 neck \u4e2d\uff0c\u53ef\u4ee5\u5e94\u7528\u4e00\u4e9b\u878d\u5408\u7b56\u7565\uff0c\u4f8b\u5982\u6ce8\u610f\u529b\u673a\u5236\u3001\u878d\u5408\u5c42\u7b49\uff0c\u4ee5\u52a0\u5f3a\u4e0d\u540c\u6a21\u6001\u4e4b\u95f4\u7684\u5173\u8054\u6027\u3002</li> <li>Head\uff1a</li> <li>\u5b9a\u4e49\uff1a Head \u662f\u7f51\u7edc\u7684\u6700\u540e\u90e8\u5206\uff0c\u8d1f\u8d23\u6267\u884c\u4efb\u52a1\u7279\u5b9a\u7684\u8f93\u51fa\u3002\u5728\u591a\u6a21\u6001\u7f51\u7edc\u4e2d\uff0c\u53ef\u80fd\u5b58\u5728\u591a\u4e2a head\uff0c\u6bcf\u4e2a\u7528\u4e8e\u5904\u7406\u4e0d\u540c\u7684\u4efb\u52a1\u6216\u8f93\u51fa\u6a21\u6001\u3002</li> <li>\u529f\u80fd\uff1a \u751f\u6210\u6700\u7ec8\u7684\u4efb\u52a1\u8f93\u51fa\uff0c\u4f8b\u5982\u5206\u7c7b\u3001\u56de\u5f52\u6216\u751f\u6210\u4efb\u52a1\u7684\u7ed3\u679c\u3002\u6bcf\u4e2a head \u53ef\u4ee5\u4e13\u6ce8\u4e8e\u5904\u7406\u4e0e\u5176\u4efb\u52a1\u76f8\u5173\u7684\u7279\u5f81\u8868\u793a\u3002</li> </ol> <p>\u603b\u4f53\u800c\u8a00\uff0cbackbone \u8d1f\u8d23\u63d0\u53d6\u5171\u4eab\u7684\u7279\u5f81\uff0cneck \u8d1f\u8d23\u6574\u5408\u591a\u6a21\u6001\u7279\u5f81\uff0c\u800c head \u5219\u4e13\u6ce8\u4e8e\u6267\u884c\u5177\u4f53\u7684\u4efb\u52a1\u3002\u591a\u6a21\u6001\u7f51\u7edc\u7684\u8bbe\u8ba1\u9700\u8981\u8003\u8651\u5982\u4f55\u5728\u8fd9\u4e09\u4e2a\u90e8\u5206\u4e2d\u5408\u7406\u5730\u5904\u7406\u4e0d\u540c\u6a21\u6001\u7684\u4fe1\u606f\uff0c\u4ee5\u5b9e\u73b0\u5bf9\u591a\u6a21\u6001\u8f93\u5165\u7684\u6709\u6548\u5efa\u6a21\u3002\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u548c\u4efb\u52a1\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u67b6\u6784\u8bbe\u8ba1\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#grounding-dino","title":"grounding DINO\uff1a\u6839\u636e\u6587\u5b57\u63d0\u793a\u68c0\u6d4b\u4efb\u610f\u76ee\u6807","text":"<ul> <li>Phasa A: \u8bbe\u8ba1\u4e86\u7ed3\u5408self-attention\u3001text-to-image cross-attention\u3001image-to-text attention\u7684\u7279\u5f81enhancer\u5e94\u7528\u5728Neck\u4e2d\uff1b</li> <li>Phasa B: \u8bbe\u8ba1\u4e86\u4e00\u4e2alanguage-guided query selection\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316Head\u7684query\uff1b</li> <li>Phasa C: \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u8de8\u6a21\u6001\u7684decoder\u7528\u4e8eHead\u90e8\u5206\uff0c\u4ece\u800c\u589e\u5f3aquery\u7684\u7279\u5f81\u8868\u8fbe\u3002</li> </ul>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#sam-track-model","title":"SAM-track model","text":"<p>\u201cSegment and Track Anything\u201d \u5229\u7528\u81ea\u52a8\u548c\u4ea4\u4e92\u5f0f\u65b9\u6cd5\u3002\u4e3b\u8981\u4f7f\u7528\u7684\u7b97\u6cd5\u5305\u62ec SAM\uff08Segment Anything Models\uff09\u7528\u4e8e\u81ea\u52a8/\u4ea4\u4e92\u5f0f\u5173\u952e\u5e27\u5206\u5272\uff0c\u4ee5\u53ca DeAOT\uff08Decoupling features in Associating Objects with Transformers\uff09\uff08NeurIPS2022\uff09\u7528\u4e8e\u9ad8\u6548\u7684\u591a\u76ee\u6807\u8ddf\u8e2a\u548c\u4f20\u64ad\u3002SAM-Track \u7ba1\u9053\u5b9e\u73b0\u4e86 SAM \u7684\u52a8\u6001\u81ea\u52a8\u68c0\u6d4b\u548c\u5206\u5272\u65b0\u7269\u4f53\uff0c\u800c DeAOT \u8d1f\u8d23\u8ddf\u8e2a\u6240\u6709\u8bc6\u522b\u5230\u7684\u7269\u4f53\u3002</p> <p></p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#aotassociating-objects-with-transformers","title":"AOT\uff08associating objects with transformers\uff09\u7f51\u7edc\u4ecb\u7ecd","text":"<p>[NIPS21][CVPR21\u7ade\u8d5b\u51a0\u519b] Associating Objects with Transformers for Video Object Segmentation - \u77e5\u4e4e (zhihu.com)</p> <p>DeAOT achieves promising results on various benchmarks. However, as a semi-supervised video segmentation model, DeAOT requires reference frame annotations for initialization, which limits its application.</p> <p>\u534a\u76d1\u7763\u89c6\u9891\u76ee\u6807\u5206\u5272</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#125","title":"1.25","text":""},{"location":"JY_HU/AI/d2l-zh-pytorch/#vilt","title":"VILT","text":"<p>vision transformer</p> <p>\u628a\u76ee\u6807\u68c0\u6d4b\u4ece\u89c6\u89c9\u7aef\u79fb\u9664\uff1f</p> <p>\u7528\u9884\u8bad\u7ec3\u7684\u76ee\u6807\u68c0\u6d4b\u5668\u53bb\u62bd\u53d6\u89c6\u89c9\u7279\u5f81\u7684\u65f6\u5019\u4f1a\u6709\u5f88\u591a\u5c40\u9650\u6027</p> <p>\u89c6\u89c9\u7279\u5f81\uff1apatch embedding\uff1f</p> <p>\u6a21\u6001\u878d\u5408\u90e8\u5206\u975e\u5e38\u5927</p> <p>\u63a8\u7406\u65f6\u95f4\u548c\u8bad\u7ec3\u65f6\u95f4\u590d\u6742\u5ea6\uff1f</p> <p>\u6a21\u578b\u63a8\u7406\u8fc7\u7a0b</p> <p>\u6a21\u578b\u7684\u63a8\u7406\u65f6\u95f4\u6307\u7684\u662f\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u673a\u5668\u5b66\u4e60\u6216\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8fdb\u884c\u5b9e\u9645\u9884\u6d4b\u6216\u63a8\u65ad\u7684\u65f6\u95f4\u3002\u5728\u6a21\u578b\u8bad\u7ec3\u4e4b\u540e\uff0c\u6a21\u578b\u901a\u5e38\u9700\u8981\u901a\u8fc7\u8f93\u5165\u6570\u636e\u8fdb\u884c\u63a8\u7406\uff0c\u5373\u6839\u636e\u5b66\u5230\u7684\u89c4\u5f8b\u6216\u6a21\u5f0f\u5bf9\u65b0\u7684\u672a\u89c1\u8fc7\u7684\u6570\u636e\u8fdb\u884c\u9884\u6d4b\u6216\u5206\u7c7b\u3002</p> <p>\u63a8\u7406\u65f6\u95f4\u662f\u8861\u91cf\u6a21\u578b\u6027\u80fd\u7684\u4e00\u4e2a\u91cd\u8981\u6307\u6807\uff0c\u5c24\u5176\u662f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5bf9\u4e8e\u9700\u8981\u5feb\u901f\u54cd\u5e94\u7684\u573a\u666f\uff0c\u63a8\u7406\u65f6\u95f4\u7684\u6548\u7387\u81f3\u5173\u91cd\u8981\u3002\u63a8\u7406\u65f6\u95f4\u7684\u5feb\u6162\u53d7\u5230\u591a\u4e2a\u56e0\u7d20\u7684\u5f71\u54cd\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ol> <li>\u6a21\u578b\u590d\u6742\u5ea6\uff1a \u590d\u6742\u7684\u6a21\u578b\u901a\u5e38\u9700\u8981\u66f4\u591a\u7684\u8ba1\u7b97\u8d44\u6e90\u6765\u6267\u884c\u63a8\u7406\uff0c\u56e0\u6b64\u63a8\u7406\u65f6\u95f4\u53ef\u80fd\u66f4\u957f\u3002</li> <li>\u786c\u4ef6\u8bbe\u5907\uff1a \u63a8\u7406\u65f6\u95f4\u4e0e\u4f7f\u7528\u7684\u786c\u4ef6\u8bbe\u5907\u5bc6\u5207\u76f8\u5173\u3002GPU\uff08\u56fe\u5f62\u5904\u7406\u5355\u5143\uff09\u901a\u5e38\u80fd\u591f\u63d0\u4f9b\u6bd4 CPU \u66f4\u5feb\u7684\u63a8\u7406\u901f\u5ea6\uff0c\u800c\u4e13\u7528\u7684\u786c\u4ef6\u52a0\u901f\u5668\uff08\u5982TPU\u3001FPGA\u7b49\uff09\u53ef\u80fd\u8fdb\u4e00\u6b65\u63d0\u9ad8\u63a8\u7406\u6027\u80fd\u3002</li> <li>\u8f93\u5165\u6570\u636e\u5927\u5c0f\uff1a \u5904\u7406\u66f4\u5927\u89c4\u6a21\u7684\u8f93\u5165\u6570\u636e\u53ef\u80fd\u4f1a\u589e\u52a0\u63a8\u7406\u65f6\u95f4\uff0c\u56e0\u4e3a\u6a21\u578b\u9700\u8981\u5728\u66f4\u591a\u7684\u6570\u636e\u4e0a\u6267\u884c\u8ba1\u7b97\u3002</li> <li>\u6a21\u578b\u4f18\u5316\uff1a \u901a\u8fc7\u6a21\u578b\u526a\u679d\u3001\u91cf\u5316\uff08Quantization\uff09\u3001\u6df1\u5ea6\u5b66\u4e60\u52a0\u901f\u5e93\u7b49\u6280\u672f\uff0c\u53ef\u4ee5\u4f18\u5316\u6a21\u578b\uff0c\u51cf\u5c11\u63a8\u7406\u65f6\u95f4\u3002</li> <li>\u5e76\u53d1\u6027\uff1a \u6a21\u578b\u662f\u5426\u80fd\u591f\u6709\u6548\u5730\u5229\u7528\u5e76\u884c\u8ba1\u7b97\u80fd\u529b\u4e5f\u4f1a\u5f71\u54cd\u63a8\u7406\u65f6\u95f4\u3002\u4e00\u4e9b\u6846\u67b6\u548c\u5e93\u63d0\u4f9b\u4e86\u591a\u7ebf\u7a0b\u6216\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u652f\u6301\uff0c\u4ee5\u63d0\u9ad8\u5e76\u53d1\u6027\u3002</li> </ol> <p>\u56e0\u6b64\uff0c\u6a21\u578b\u7684\u63a8\u7406\u65f6\u95f4\u662f\u5728\u5b9e\u9645\u90e8\u7f72\u6216\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6a21\u578b\u5904\u7406\u8f93\u5165\u6570\u636e\u6240\u9700\u7684\u65f6\u95f4\uff0c\u76f4\u63a5\u5173\u7cfb\u5230\u6a21\u578b\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u5b9e\u7528\u6027\u548c\u6027\u80fd\u3002</p> <p>CLIP\u662f\u5178\u578b\u7684\u53cc\u5854\u6a21\u578b\uff0c\u7279\u5f81</p> <p>VE TE MI</p> <p>VE:  Visual embedding</p> <p>TE: Text embedding</p> <p>MI: modality interaction</p> <p>VQA,VR,VE</p> <p>VQA\uff08Visual Question Answering\uff09\u3001VR\uff08Visual Reasoning\uff09\u548cVE\uff08Visual Explanation\uff09\u662f\u4e09\u4e2a\u6d89\u53ca\u591a\u6a21\u6001\uff08\u56fe\u50cf\u548c\u6587\u672c\uff09\u7684\u4efb\u52a1\uff0c\u5b83\u4eec\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9886\u57df\u4e2d\u6709\u7740\u4e0d\u540c\u7684\u76ee\u6807\u548c\u4fa7\u91cd\u70b9\u3002</p> <ol> <li>VQA\uff08Visual Question Answering\uff09\uff1a</li> <li>\u6982\u5ff5\uff1a VQA \u662f\u4e00\u79cd\u4efb\u52a1\uff0c\u65e8\u5728\u4f7f\u8ba1\u7b97\u673a\u80fd\u591f\u56de\u7b54\u5173\u4e8e\u56fe\u50cf\u5185\u5bb9\u7684\u81ea\u7136\u8bed\u8a00\u95ee\u9898\u3002\u901a\u5e38\uff0c\u8f93\u5165\u662f\u4e00\u5f20\u56fe\u50cf\u548c\u4e00\u4e2a\u4e0e\u56fe\u50cf\u76f8\u5173\u7684\u95ee\u9898\uff0c\u8f93\u51fa\u662f\u8be5\u95ee\u9898\u7684\u81ea\u7136\u8bed\u8a00\u7b54\u6848\u3002</li> <li>\u5e94\u7528\uff1a VQA \u5728\u56fe\u50cf\u7406\u89e3\u3001\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u548c\u89c6\u89c9\u573a\u666f\u7406\u89e3\u7b49\u9886\u57df\u5177\u6709\u5e7f\u6cdb\u5e94\u7528\u3002\u5b83\u8981\u6c42\u7cfb\u7edf\u7406\u89e3\u56fe\u50cf\u5185\u5bb9\uff0c\u7406\u89e3\u95ee\u9898\uff0c\u5e76\u751f\u6210\u76f8\u5e94\u7684\u6587\u672c\u7b54\u6848\u3002</li> <li>VR\uff08Visual Reasoning\uff09\uff1a</li> <li>\u6982\u5ff5\uff1a VR \u662f\u4e00\u79cd\u4efb\u52a1\uff0c\u65e8\u5728\u901a\u8fc7\u5bf9\u89c6\u89c9\u573a\u666f\u8fdb\u884c\u63a8\u7406\u6765\u56de\u7b54\u66f4\u4e3a\u590d\u6742\u7684\u95ee\u9898\u3002\u4e0e\u7b80\u5355\u7684\u95ee\u9898\u7b54\u6848\u4e0d\u540c\uff0cVR \u8981\u6c42\u6a21\u578b\u901a\u8fc7\u5bf9\u56fe\u50cf\u4e2d\u7684\u5173\u7cfb\u3001\u573a\u666f\u548c\u5bf9\u8c61\u8fdb\u884c\u63a8\u7406\uff0c\u66f4\u6df1\u5c42\u6b21\u5730\u7406\u89e3\u89c6\u89c9\u4fe1\u606f\u3002</li> <li>\u5e94\u7528\uff1a VR \u7684\u5e94\u7528\u8303\u56f4\u5305\u62ec\u667a\u80fd\u56fe\u50cf\u7406\u89e3\u3001\u51b3\u7b56\u652f\u6301\u7cfb\u7edf\u7b49\uff0c\u8981\u6c42\u7cfb\u7edf\u4e0d\u4ec5\u80fd\u591f\u8bc6\u522b\u56fe\u50cf\u4e2d\u7684\u5bf9\u8c61\uff0c\u8fd8\u80fd\u591f\u8fdb\u884c\u9ad8\u7ea7\u7684\u63a8\u7406\u548c\u5206\u6790\u3002</li> <li>VE\uff08Visual Explanation\uff09\uff1a</li> <li>\u6982\u5ff5\uff1a VE \u662f\u4e00\u79cd\u4efb\u52a1\uff0c\u65e8\u5728\u901a\u8fc7\u751f\u6210\u89c6\u89c9\u89e3\u91ca\u6765\u56de\u7b54\u95ee\u9898\u3002\u9664\u4e86\u63d0\u4f9b\u7b80\u5355\u7684\u7b54\u6848\u5916\uff0cVE \u8981\u6c42\u7cfb\u7edf\u751f\u6210\u56fe\u50cf\u6216\u56fe\u5f62\u5316\u7684\u89e3\u91ca\uff0c\u4ee5\u8bf4\u660e\u4e3a\u4ec0\u4e48\u7ed9\u5b9a\u7684\u7b54\u6848\u662f\u6b63\u786e\u7684\u3002</li> <li>\u5e94\u7528\uff1a VE \u5728\u6559\u80b2\u3001\u53ef\u89e3\u91ca\u6027\u4eba\u5de5\u667a\u80fd\u7b49\u9886\u57df\u5177\u6709\u5e94\u7528\u6f5c\u529b\u3002\u901a\u8fc7\u751f\u6210\u89e3\u91ca\uff0c\u7cfb\u7edf\u53ef\u4ee5\u66f4\u597d\u5730\u4e0e\u7528\u6237\u4ea4\u4e92\uff0c\u5e76\u63d0\u9ad8\u5bf9\u6a21\u578b\u51b3\u7b56\u7684\u7406\u89e3\u3002</li> </ol> <p>\u8fd9\u4e9b\u4efb\u52a1\u90fd\u6d89\u53ca\u5230\u56fe\u50cf\u548c\u6587\u672c\u4e4b\u95f4\u7684\u8de8\u6a21\u6001\u7406\u89e3\u548c\u4ea4\u4e92\uff0c\u8981\u6c42\u8ba1\u7b97\u673a\u7cfb\u7edf\u80fd\u591f\u5904\u7406\u89c6\u89c9\u4fe1\u606f\u548c\u81ea\u7136\u8bed\u8a00\u4fe1\u606f\u7684\u590d\u6742\u5173\u7cfb\u3002\u8fd9\u4e9b\u4efb\u52a1\u5728\u63a8\u52a8\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4ea4\u53c9\u7814\u7a76\u7684\u53d1\u5c55\uff0c\u4f7f\u8ba1\u7b97\u673a\u80fd\u591f\u66f4\u5168\u9762\u5730\u7406\u89e3\u548c\u5904\u7406\u591a\u6a21\u6001\u4fe1\u606f\u3002</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#albef","title":"ALBEF\u4e4b\u524d\u7684\u8bba\u6587\u603b\u7ed3\uff1a","text":"<p>\u89c6\u89c9\u7279\u5f81\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u6bd4\u6587\u672c\u7279\u5f81\u8981\u91cd\u8981</p> <p>\u6a21\u6001\u878d\u5408\u90e8\u5206\u4e5f\u975e\u5e38\u5173\u952e</p> <p>Visual Encoder &gt; Modality Interaction &gt; Text Encoder</p> <p>\u76ee\u6807\u51fd\u6570\u603b\u7ed3\uff1a</p> <p>CLIP\u4f7f\u7528\u7684 ITC  lost \uff1aimage text contrasting</p> <p>\uff08word patch alignment WPA lost\u8bad\u7ec3\u8d77\u6765\u975e\u5e38\u6162\uff09</p> <p>masked laguage modeling \uff1aMLM lost\uff0c \u5b8c\u5f62\u586b\u7a7a</p> <p>image text matching lost\uff1a ITM lost</p> <p></p> <p>\u200b                                                                       \u591a\u6a21\u6001\u5927\u6a21\u578b\u7efc\u8ff0\uff08\u63d2\u56fe\uff09</p>"},{"location":"JY_HU/AI/d2l-zh-pytorch/#albef-align-before-fuse","title":"ALBEF : ALign BEfore Fuse:\u5728\u878d\u5408\u6587\u672c\u548c\u56fe\u50cf\u7279\u5f81\u524d\u5c31\u5bf9\u9f50\u7279\u5f81","text":"<p>vision and language representation learning with momentum distillation</p> <p>\u4e0d\u9700\u8981\u4f7f\u7528bounding box annotation\uff08\u951a\u6846\u5b9a\u4f4d\u53ca\u6807\u6ce8\uff09</p> <p>momentum distilliation</p> <p>momentum encoder</p> <p>\u81ea\u8bad\u7ec3\u6a21\u578b</p> <p>\u4f55\u607a\u660e\uff1aMAE(Masked Autoencoders) - \u77e5\u4e4e (zhihu.com)</p>"},{"location":"JY_HU/AI/interview-questions/","title":"AI\u7b97\u6cd5\u5c97\u9762\u8bd5\u95ee\u9898\u6c47\u603b","text":"<p>1. \u89e3\u91caSVM\u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <p>SVM\uff0c\u5168\u79f0\u652f\u6301\u5411\u91cf\u673a\uff08Support Vector Machine\uff09\uff0c\u662f\u4e00\u79cd\u6709\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u89e3\u51b3\u6570\u636e\u6316\u6398\u6216\u6a21\u5f0f\u8bc6\u522b\u9886\u57df\u4e2d\u7684\u6570\u636e\u5206\u7c7b\u95ee\u9898\u3002</p> <p>SVM\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5efa\u7acb\u4e00\u4e2a\u6700\u4f18\u51b3\u7b56\u8d85\u5e73\u9762\uff0c\u4f7f\u5f97\u8be5\u5e73\u9762\u4e24\u4fa7\u8ddd\u5e73\u9762\u6700\u8fd1\u7684\u4e24\u7c7b\u6837\u672c\u4e4b\u95f4\u7684\u8ddd\u79bb\u6700\u5927\u5316\uff0c\u4ece\u800c\u5bf9\u5206\u7c7b\u95ee\u9898\u63d0\u4f9b\u826f\u597d\u7684\u6cdb\u5316\u529b\uff08\u63a8\u5e7f\u80fd\u529b\uff09\u3002\u8fd9\u91cc\u7684\u201c\u652f\u6301\u5411\u91cf\u201d\u662f\u6307\u8bad\u7ec3\u96c6\u4e2d\u7684\u67d0\u4e9b\u8bad\u7ec3\u70b9\uff0c\u8fd9\u4e9b\u70b9\u6700\u9760\u8fd1\u5206\u7c7b\u51b3\u7b56\u9762\uff0c\u662f\u6700\u96be\u5206\u7c7b\u7684\u6570\u636e\u70b9\u3002</p> <p>SVM\u53ef\u4ee5\u5904\u7406\u4e8c\u7c7b\u5206\u7c7b\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u6269\u5c55\u5230\u591a\u7c7b\u5206\u7c7b\u95ee\u9898\u3002\u5728\u4e8c\u7c7b\u5206\u7c7b\u95ee\u9898\u4e2d\uff0cSVM\u5bfb\u627e\u4e00\u4e2a\u6700\u4f18\u8d85\u5e73\u9762\uff0c\u5c06\u4e24\u7c7b\u6837\u672c\u5206\u9694\u5f00\u3002\u8fd9\u4e2a\u6700\u4f18\u8d85\u5e73\u9762\u9700\u8981\u6ee1\u8db3\u95f4\u9694\u6700\u5927\u5316\u7684\u6761\u4ef6\uff0c\u5373\u4e24\u4fa7\u8ddd\u5e73\u9762\u6700\u8fd1\u7684\u4e24\u7c7b\u6837\u672c\u4e4b\u95f4\u7684\u8ddd\u79bb\u6700\u5927\u5316\u3002\u5f53\u8bad\u7ec3\u6837\u672c\u7ebf\u6027\u53ef\u5206\u65f6\uff0c\u901a\u8fc7\u786c\u95f4\u9694\u6700\u5927\u5316\uff0c\u5b66\u4e60\u4e00\u4e2a\u7ebf\u6027\u5206\u7c7b\u5668\uff0c\u5373\u7ebf\u6027\u53ef\u5206\u652f\u6301\u5411\u91cf\u673a\u3002\u5f53\u8bad\u7ec3\u6570\u636e\u8fd1\u4f3c\u7ebf\u6027\u53ef\u5206\u65f6\uff0c\u5f15\u5165\u677e\u5f1b\u53d8\u91cf\uff0c\u901a\u8fc7\u8f6f\u95f4\u9694\u6700\u5927\u5316\uff0c\u5b66\u4e60\u4e00\u4e2a\u7ebf\u6027\u5206\u7c7b\u5668\uff0c\u5373\u7ebf\u6027\u652f\u6301\u5411\u91cf\u673a\u3002\u5f53\u8bad\u7ec3\u6570\u636e\u7ebf\u6027\u4e0d\u53ef\u5206\u65f6\uff0c\u901a\u8fc7\u4f7f\u7528\u6838\u6280\u5de7\u53ca\u8f6f\u95f4\u9694\u6700\u5927\u5316\uff0c\u5b66\u4e60\u975e\u7ebf\u6027\u652f\u6301\u5411\u91cf\u673a\u3002</p> <p>SVM\u4f7f\u7528\u6838\u51fd\u6570\u6765\u5904\u7406\u975e\u7ebf\u6027\u53ef\u5206\u7684\u60c5\u51b5\u3002\u6838\u51fd\u6570\u7684\u5b9a\u4e49\u662fK(x,y)=&lt;\u03d5(x),\u03d5(y)&gt;\uff0c\u5373\u5728\u7279\u5f81\u7a7a\u95f4\u7684\u5185\u79ef\u7b49\u4e8e\u5b83\u4eec\u5728\u539f\u59cb\u6837\u672c\u7a7a\u95f4\u4e2d\u901a\u8fc7\u6838\u51fd\u6570K\u8ba1\u7b97\u7684\u7ed3\u679c\u3002\u901a\u8fc7\u4f7f\u7528\u6838\u51fd\u6570\uff0cSVM\u53ef\u4ee5\u5c06\u6837\u672c\u4ece\u539f\u59cb\u7a7a\u95f4\u6620\u5c04\u5230\u4e00\u4e2a\u66f4\u9ad8\u7ef4\u7684\u7279\u5f81\u7a7a\u95f4\uff0c\u4f7f\u5f97\u6837\u672c\u5728\u8fd9\u4e2a\u7279\u5f81\u7a7a\u95f4\u5185\u7ebf\u6027\u53ef\u5206\u3002</p> <p>2. k-means\u548ck-means++\u7b97\u6cd5\u6709\u4ec0\u4e48\u533a\u522b\uff1f</p> <p>\u4e24\u8005\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\u521d\u59cb\u5316\u8d28\u5fc3\u7684\u65b9\u5f0f\u3002\u5728k-means\u7b97\u6cd5\u4e2d\uff0c\u8d28\u5fc3\u4ece\u7ed9\u5b9a\u70b9\u968f\u673a\u521d\u59cb\u5316\u3002\u8fd9\u79cd\u65b9\u6cd5\u5b58\u5728\u4e00\u4e2a\u7f3a\u70b9\uff0c\u5373\u6709\u65f6\u8fd9\u79cd\u968f\u673a\u521d\u59cb\u5316\u4f1a\u5bfc\u81f4\u975e\u4f18\u5316\u7684\u805a\u7c7b\uff0c\u8fd9\u662f\u7531\u4e8e\u4e24\u4e2a\u805a\u7c7b\u7684\u521d\u59cb\u5316\u53ef\u80fd\u5f7c\u6b64\u63a5\u8fd1\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0ck-means++\u7b97\u6cd5\u5e94\u8fd0\u800c\u751f\u3002\u5728k-means++\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u8d28\u5fc3\u4ece\u6570\u636e\u70b9\u4e2d\u968f\u673a\u9009\u62e9\u3002\u540e\u7eed\u8d28\u5fc3\u7684\u9009\u62e9\u57fa\u4e8e\u5b83\u4eec\u4e0e\u521d\u59cb\u8d28\u5fc3\u7684\u5206\u79bb\u3002\u4e00\u4e2a\u70b9\u88ab\u9009\u4e3a\u4e0b\u4e00\u4e2a\u8d28\u5fc3\u7684\u6982\u7387\u4e0e\u8be5\u70b9\u548c\u5df2\u7ecf\u88ab\u9009\u62e9\u7684\u6700\u8fd1\u8d28\u5fc3\u4e4b\u95f4\u7684\u5e73\u65b9\u8ddd\u79bb\u6210\u6bd4\u4f8b\u3002\u8fd9\u4fdd\u8bc1\u4e86\u8d28\u5fc3\u5747\u5300\u5730\u5206\u6563\u5f00\uff0c\u5e76\u964d\u4f4e\u4e86\u6536\u655b\u5230\u4e0d\u7406\u60f3\u805a\u7c7b\u7684\u53ef\u80fd\u6027\u3002\u8fd9\u6709\u52a9\u4e8e\u7b97\u6cd5\u8fbe\u5230\u5168\u5c40\u6700\u5c0f\u503c\uff0c\u800c\u4e0d\u662f\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\u3002</p> <p>3. \u89e3\u91ca\u673a\u5668\u5b66\u4e60\u4e2d\u5e38\u7528\u7684\u4e00\u4e9b\u76f8\u4f3c\u6027\u5ea6\u91cf\u3002</p> <p>\u4e00\u4e9b\u6700\u5e38\u7528\u7684\u76f8\u4f3c\u6027\u5ea6\u91cf\u5982\u4e0b\uff1a</p> <ul> <li>\u4f59\u5f26\u76f8\u4f3c\u6027-\u901a\u8fc7\u8003\u8651n\u7ef4\u7684\u4e24\u4e2a\u5411\u91cf\uff0c\u6211\u4eec\u8ba1\u7b97\u4e24\u8005\u4e4b\u95f4\u5939\u89d2\u7684\u4f59\u5f26\u3002\u8be5\u76f8\u4f3c\u6027\u5ea6\u91cf\u7684\u8303\u56f4\u4ece[-1\uff0c1]\u53d8\u5316\uff0c\u5176\u4e2d\u503c1\u8868\u793a\u4e24\u4e2a\u5411\u91cf\u9ad8\u5ea6\u76f8\u4f3c\uff0c\u800c-1\u8868\u793a\u4e24\u4e2a\u5411\u91cf\u5f7c\u6b64\u5b8c\u5168\u4e0d\u540c\u3002</li> <li>\u6b27\u51e0\u91cc\u5f97\u6216\u66fc\u54c8\u987f\u8ddd\u79bb-\u8fd9\u4e24\u4e2a\u503c\u8868\u793an\u7ef4\u5e73\u9762\u4e2d\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u4e24\u8005\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u5728\u4e8e\u4e24\u8005\u7684\u8ba1\u7b97\u65b9\u5f0f\u3002</li> <li>Jaccard\u76f8\u4f3c\u6027-\u5b83\u4e5f\u88ab\u79f0\u4e3aIoU\u6216Intersection over union\uff0c\u5b83\u5e7f\u6cdb\u7528\u4e8e\u5bf9\u8c61\u68c0\u6d4b\u9886\u57df\uff0c\u4ee5\u8bc4\u4f30\u9884\u6d4b\u8fb9\u754c\u6846\u548c\u5730\u9762\u771f\u5b9e\u8fb9\u754c\u6846\u4e4b\u95f4\u7684\u91cd\u53e0\u3002</li> </ul> <p>4. \u5f53\u6570\u636e\u5206\u5e03\u53f3\u504f\u548c\u5de6\u504f\u65f6\uff0c\u5747\u503c\u3001\u4e2d\u4f4d\u6570\u548c\u4f17\u6570\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff1f</p> <p>\u6807\u51c6\u6b63\u6001\u5206\u5e03\u7279\u5f81\uff1a\u5747\u503c=\u4e2d\u4f4d\u6570=\u4f17\u6570</p> <p>\u5de6\u504f\u6001\u7279\u5f81\uff1a\u4f17\u6570&gt;\u4e2d\u4f4d\u6570&gt;\u5747\u503c</p> <p>\u53f3\u504f\u6001\u7279\u5f81\uff1a\u5747\u503c&gt;\u4e2d\u4f4d\u6570&gt;\u4f17\u6570</p> <p>\u53f3\u504f\u5206\u5e03</p> <p></p> <p>\u5de6\u504f\u5206\u5e03\uff0c</p> <p></p> <p>5. \u5bf9\u4e8e\u79bb\u7fa4\u503c\uff0c\u51b3\u7b56\u6811\u548c\u968f\u673a\u68ee\u6797\u8c01\u7684\u9c81\u68d2\u6027\u66f4\u5f3a\u3002</p> <p>\u51b3\u7b56\u6811\u548c\u968f\u673a\u68ee\u6797\u5bf9\u79bb\u7fa4\u503c\u90fd\u76f8\u5bf9\u7a33\u5065\u3002\u968f\u673a\u68ee\u6797\u6a21\u578b\u662f\u591a\u4e2a\u51b3\u7b56\u6811\u7684\u96c6\u6210\uff0c\u56e0\u6b64\uff0c\u968f\u673a\u68ee\u6797\u6a21\u578b\u7684\u8f93\u51fa\u662f\u591a\u4e2a\u51b3\u7b56\u6811\u7684\u805a\u5408\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u5bf9\u7ed3\u679c\u8fdb\u884c\u5e73\u5747\u65f6\uff0c\u8fc7\u62df\u5408\u7684\u53ef\u80fd\u6027\u5c31\u4f1a\u964d\u4f4e\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u968f\u673a\u68ee\u6797\u6a21\u578b\u5bf9\u79bb\u7fa4\u503c\u66f4\u5177\u9c81\u68d2\u6027\u3002</p> <p>6. L1\u6b63\u5219\u5316\u548cL2\u6b63\u5219\u5316\u6709\u4ec0\u4e48\u533a\u522b\uff1f\u5b83\u4eec\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff1f</p> <p>L1\u6b63\u5219\u5316\uff1a\u5728L1\u6b63\u5219\u5316\u4e2d\uff0c\u4e5f\u88ab\u79f0\u4e3aLasso\u6b63\u5219\u5316\uff0c\u5176\u4e2d\u6211\u4eec\u5728\u635f\u5931\u51fd\u6570\u4e2d\u6dfb\u52a0\u6a21\u578b\u6743\u91cd\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u3002</p> <p>\u5728L1\u6b63\u5219\u5316\u4e2d\uff0c\u90a3\u4e9b\u6839\u672c\u4e0d\u91cd\u8981\u7684\u7279\u5f81\u7684\u6743\u91cd\u88ab\u60e9\u7f5a\u4e3a\u96f6\uff0c\u56e0\u6b64\uff0c\u53cd\u8fc7\u6765\uff0c\u6211\u4eec\u901a\u8fc7\u4f7f\u7528L1\u6b63\u5219\u5316\u6280\u672f\u6765\u83b7\u5f97\u7279\u5f81\u9009\u62e9\u3002</p> <p>L2\u6b63\u5219\u5316\uff1a\u5728L2\u6b63\u5219\u5316\u4e2d\uff0c\u4e5f\u79f0\u4e3a\u5cad\u6b63\u5219\u5316\uff0c\u6211\u4eec\u5c06\u6743\u91cd\u7684\u5e73\u65b9\u6dfb\u52a0\u5230\u635f\u5931\u51fd\u6570\u4e2d\u3002\u5728\u8fd9\u4e24\u79cd\u6b63\u5219\u5316\u65b9\u6cd5\u4e2d\uff0c\u6743\u91cd\u90fd\u662f\u4e0d\u5229\u7684\uff0c\u4f46\u5b83\u4eec\u5e2e\u52a9\u5b9e\u73b0\u7684\u76ee\u6807\u4e4b\u95f4\u5b58\u5728\u7ec6\u5fae\u7684\u5dee\u5f02\u3002</p> <p>\u5728L2\u6b63\u5219\u5316\u4e2d\uff0c\u6743\u91cd\u4e0d\u4f1a\u88ab\u60e9\u7f5a\u4e3a0\uff0c\u4f46\u5bf9\u4e8e\u4e0d\u76f8\u5173\u7684\u7279\u5f81\uff0c\u5b83\u4eec\u63a5\u8fd1\u4e8e\u96f6\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u901a\u8fc7\u5c06\u6743\u91cd\u7f29\u5c0f\u5230\u96f6\u6765\u9632\u6b62\u8fc7\u62df\u5408\uff0c\u7279\u522b\u662f\u5f53\u6709\u8bb8\u591a\u7279\u5f81\u5e76\u4e14\u6570\u636e\u6709\u566a\u58f0\u65f6\u3002</p> <p>7. \u4ec0\u4e48\u662f\u5f84\u5411\u57fa\u51fd\u6570\uff1f\u89e3\u91ca\u5b83\u7684\u7528\u9014\u3002</p> <p>RBF\uff08\u5f84\u5411\u57fa\u51fd\u6570\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u5b9e\u503c\u51fd\u6570\uff0c\u5176\u503c\u4ec5\u53d6\u51b3\u4e8e\u8f93\u5165\u548c\u79f0\u4e3a\u4e2d\u5fc3\u7684\u56fa\u5b9a\u70b9\u3002\u5f84\u5411\u57fa\u51fd\u6570\u7684\u516c\u5f0f\u5982\u4e0b\uff1a</p> <p></p> <p>\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u7ecf\u5e38\u5c06RBF\u51fd\u6570\u7528\u4e8e\u5404\u79cd\u51fd\u6570\uff0c\u5305\u62ec\uff1a</p> <ul> <li>RBF\u7f51\u7edc\u53ef\u4ee5\u7528\u6765\u903c\u8fd1\u590d\u6742\u51fd\u6570\u3002\u901a\u8fc7\u8bad\u7ec3\u7f51\u7edc\u7684\u6743\u91cd\u4ee5\u9002\u5e94\u4e00\u7ec4\u8f93\u5165\u8f93\u51fa\u5bf9\uff0c</li> <li>RBF\u7f51\u7edc\u53ef\u4ee5\u7528\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60\u6765\u5b9a\u4f4d\u6570\u636e\u7ec4\u3002\u901a\u8fc7\u5c06RBF\u4e2d\u5fc3\u89c6\u4e3a\u805a\u7c7b\u4e2d\u5fc3\uff0c</li> <li>RBF\u7f51\u7edc\u53ef\u4ee5\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u901a\u8fc7\u8bad\u7ec3\u7f51\u7edc\u7684\u6743\u91cd\uff0c\u6839\u636e\u8f93\u5165\u4e0eRBF\u8282\u70b9\u7684\u8ddd\u79bb\u5c06\u8f93\u5165\u5206\u7ec4\u3002</li> </ul> <p>\u5b83\u662fSVM\u7b97\u6cd5\u4e2d\u901a\u5e38\u4f7f\u7528\u7684\u975e\u5e38\u8457\u540d\u7684\u5185\u6838\u4e4b\u4e00\uff0c\u7528\u4e8e\u5c06\u4f4e\u7ef4\u6570\u636e\u6620\u5c04\u5230\u9ad8\u7ef4\u5e73\u9762\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u8fb9\u754c\uff0c\u8be5\u8fb9\u754c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5e73\u9762\u7684\u4e0d\u540c\u533a\u57df\u4e2d\u7684\u7c7b\u4ee5\u5c3d\u53ef\u80fd\u591a\u7684\u4f59\u91cf\u5206\u5f00\u3002</p> <p>8. \u89e3\u91ca\u7528\u4e8e\u5904\u7406\u6570\u636e\u4e0d\u5e73\u8861\u7684SMOTE\u65b9\u6cd5\u3002</p> <p>SMOTE\u662f\u7528\u6765\u5904\u7406\u6570\u636e\u96c6\u4e2d\u6570\u636e\u4e0d\u5e73\u8861\u95ee\u9898\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u57fa\u4e8e\u73b0\u6709\u7684\u5c11\u6570\u7c7b\uff0c\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u5408\u6210\u65b0\u7684\u6570\u636e\u70b9\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u6a21\u578b\u4e0d\u4f1a\u5728\u76f8\u540c\u7684\u6570\u636e\u4e0a\u8fdb\u884c\u8bad\u7ec3\u3002\u4f46\u662f\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u5b83\u5411\u6570\u636e\u96c6\u6dfb\u52a0\u4e86\u4e0d\u9700\u8981\u7684\u566a\u58f0\uff0c\u5e76\u4e14\u53ef\u80fd\u5bf9\u6a21\u578b\u7684\u6027\u80fd\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002</p> <p>9. \u51c6\u786e\u7387\u5f97\u5206\u662f\u5426\u603b\u662f\u8861\u91cf\u5206\u7c7b\u6a21\u578b\u6027\u80fd\u7684\u826f\u597d\u6307\u6807\uff1f</p> <p>\u4e0d\uff0c\u6709\u65f6\u5019\u6211\u4eec\u5728\u4e0d\u5e73\u8861\u7684\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u51c6\u786e\u5ea6\u5206\u6570\u5e76\u4e0d\u662f\u8861\u91cf\u6a21\u578b\u6027\u80fd\u7684\u597d\u6307\u6807\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\u67e5\u51c6\u7387\u548c\u67e5\u5168\u7387\u6765\u8861\u91cf\u5206\u7c7b\u6a21\u578b\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0cf1-score\u662f\u53e6\u4e00\u4e2a\u53ef\u7528\u4e8e\u8861\u91cf\u6027\u80fd\u7684\u6307\u6807\uff0c\u4f46\u6700\u7ec8\uff0cf1-score\u4e5f\u662f\u4f7f\u7528\u7cbe\u786e\u5ea6\u548c\u53ec\u56de\u7387\u8ba1\u7b97\u7684\uff0c\u56e0\u4e3af1-score\u53ea\u662f\u7cbe\u786e\u5ea6\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5e73\u5747\u503c\u3002</p> <p>10. \u4ec0\u4e48\u662f KNN \u63d2\u503c\u586b\u5145\uff1f</p> <p>\u6211\u4eec\u901a\u5e38\u901a\u8fc7\u6570\u636e\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\u6d4b\u91cf\uff08\u5982\u5e73\u5747\u503c\u3001\u4f17\u6570\u6216\u4e2d\u4f4d\u6570\uff09\u6765\u4f30\u7b97\u7a7a\u503c\uff0c\u4f46KNN \u63d2\u503c\u662f\u4e00\u79cd\u66f4\u590d\u6742\u7684\u586b\u8865\u7a7a\u503c\u7684\u65b9\u6cd5\u3002\u5728\u8be5\u65b9\u6cd5\u4e2d\u8fd8\u4f7f\u7528\u8ddd\u79bb\u53c2\u6570\uff0c\u5176\u4e5f\u88ab\u79f0\u4e3ak\u53c2\u6570\u3002\u8fd9\u9879\u5de5\u4f5c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u7c7b\u4f3c\u4e8e\u805a\u7c7b\u7b97\u6cd5\u3002\u7f3a\u5931\u503c\u662f\u53c2\u7167\u7f3a\u5931\u503c\u7684\u90bb\u57df\u70b9\u8fdb\u884c\u63d2\u8865\u7684\u3002</p> <p>11. \u89e3\u91caXGB\u6a21\u578b\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002</p> <p>XGB\u6a21\u578b\u662f\u673a\u5668\u5b66\u4e60\u96c6\u6210\u6280\u672f\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6743\u91cd\u901a\u8fc7\u5c06\u5b83\u4eec\u4f20\u9012\u5230\u51b3\u7b56\u6811\u6765\u4ee5\u987a\u5e8f\u7684\u65b9\u5f0f\u8fdb\u884c\u4f18\u5316\u3002\u5728\u6bcf\u4e00\u904d\u4e4b\u540e\uff0c\u6743\u91cd\u53d8\u5f97\u8d8a\u6765\u8d8a\u597d\uff0c\u56e0\u4e3a\u6bcf\u68f5\u6811\u90fd\u8bd5\u56fe\u4f18\u5316\u6743\u91cd\uff0c\u6700\u7ec8\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u624b\u5934\u95ee\u9898\u7684\u6700\u4f73\u6743\u91cd\u3002\u50cf\u6b63\u5219\u5316\u68af\u5ea6\u548c\u5c0f\u6279\u91cf\u68af\u5ea6\u4e0b\u964d\u8fd9\u6837\u7684\u6280\u672f\u5df2\u7ecf\u88ab\u7528\u6765\u5b9e\u73b0\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u6240\u4ee5\u5b83\u4ee5\u975e\u5e38\u5feb\u901f\u548c\u4f18\u5316\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002</p> <p>12. \u5c06\u7ed9\u5b9a\u6570\u636e\u96c6\u62c6\u5206\u4e3a\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u7684\u76ee\u7684\u662f\u4ec0\u4e48\uff1f</p> <p>\u4e3b\u8981\u76ee\u7684\u662f\u4fdd\u7559\u4e00\u4e9b\u6a21\u578b\u5c1a\u672a\u8bad\u7ec3\u7684\u5269\u4f59\u6570\u636e\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u5728\u8bad\u7ec3\u540e\u8bc4\u4f30\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u6709\u65f6\u6211\u4eec\u4f7f\u7528\u9a8c\u8bc1\u6570\u636e\u96c6\u5728\u591a\u4e2a\u5148\u8fdb\u7684\u673a\u5668\u5b66\u4e60\u6a21\u578b\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u5c31\u50cf\u6211\u4eec\u9996\u5148\u8bad\u7ec3\u4e00\u4e9b\u6a21\u578b\u4e00\u6837\uff0c\u6bd4\u5982LogisticRegression\uff0cXGBoost\u6216\u4efb\u4f55\u5176\u4ed6\u6a21\u578b\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u9a8c\u8bc1\u6570\u636e\u6d4b\u8bd5\u5b83\u4eec\u7684\u6027\u80fd\uff0c\u5e76\u9009\u62e9\u9a8c\u8bc1\u548c\u8bad\u7ec3\u7cbe\u5ea6\u4e4b\u95f4\u5dee\u5f02\u8f83\u5c0f\u7684\u6a21\u578b\u3002</p> <p>13. \u89e3\u91ca\u4e00\u4e9b\u5904\u7406\u6570\u636e\u4e2d\u7f3a\u5931\u503c\u7684\u65b9\u6cd5\u3002</p> <p>\u5904\u7406\u7f3a\u5931\u503c\u7684\u4e00\u4e9b\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <ul> <li>\u5220\u9664\u5177\u6709\u7a7a\u503c\u7684\u884c\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e22\u5931\u4e00\u4e9b\u91cd\u8981\u4fe1\u606f\u3002</li> <li>\u5982\u679c\u5217\u5305\u542b\u7684\u4fe1\u606f\u4ef7\u503c\u5f88\u4f4e\uff0c\u5219\u5220\u9664\u5305\u542b\u7a7a\u503c\u7684\u5217\u3002\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e22\u5931\u4e00\u4e9b\u91cd\u8981\u4fe1\u606f\u3002</li> <li>\u4f7f\u7528\u63cf\u8ff0\u6027\u7edf\u8ba1\u6d4b\u91cf\uff08\u5982\u5e73\u5747\u503c\u3001\u4f17\u6570\u548c\u4e2d\u4f4d\u6570\uff09\u63d2\u8865\u7a7a\u503c\u3002</li> <li>\u4f7f\u7528KNN \u63d2\u503c\u7b49\u65b9\u6cd5\u4ee5\u66f4\u590d\u6742\u7684\u65b9\u5f0f\u4f30\u7b97\u7a7a\u503c\u3002</li> </ul> <p>14. k-means\u548cKNN\u7b97\u6cd5\u6709\u4ec0\u4e48\u533a\u522b\uff1f</p> <p>k-means\u7b97\u6cd5\u662f\u7528\u4e8e\u805a\u7c7b\u76ee\u7684\u7684\u6d41\u884c\u7684\u65e0\u76d1\u7763\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e4b\u4e00\u3002\u4f46KNN\u662f\u4e00\u79cd\u901a\u5e38\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\u7684\u6a21\u578b\uff0c\u662f\u4e00\u79cd\u6709\u76d1\u7763\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u3002k-means\u7b97\u6cd5\u901a\u8fc7\u5728\u6570\u636e\u96c6\u4e2d\u5f62\u6210\u805a\u7c7b\u6765\u5e2e\u52a9\u6211\u4eec\u6807\u8bb0\u6570\u636e\u3002</p> <p>15. \u4ec0\u4e48\u662fLDA\u7ebf\u6027\u5224\u522b\u5206\u6790\uff1f</p> <p>LDA\u662f\u4e00\u79cd\u6709\u76d1\u7763\u7684\u673a\u5668\u5b66\u4e60\u964d\u7ef4\u6280\u672f\uff0c\u56e0\u4e3a\u5b83\u4e5f\u4f7f\u7528\u76ee\u6807\u53d8\u91cf\u8fdb\u884c\u964d\u7ef4\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u5206\u7c7b\u95ee\u9898\u3002LDA\u4e3b\u8981\u81f4\u529b\u4e8e\u4e24\u4e2a\u76ee\u6807\uff1a</p> <ul> <li>\u6700\u5927\u5316\u4e24\u4e2a\u7c7b\u7684\u5747\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</li> <li>\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u6bcf\u4e2a\u7c7b\u4e2d\u7684\u5dee\u5f02\u3002</li> </ul> <p>16. \u5982\u4f55\u5728\u4e8c\u7ef4\u4e2d\u53ef\u89c6\u5316\u9ad8\u7ef4\u6570\u636e\uff1f</p> <p>\u6700\u5e38\u7528\u548c\u6709\u6548\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u4f7f\u7528t-SNE\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u91c7\u7528\u4e86\u4e00\u4e9b\u975e\u7ebf\u6027\u7684\u590d\u5408\u5f62\u65b9\u6cd5\u5bf9\u7ed9\u5b9a\u7684\u6570\u636e\u8fdb\u884c\u964d\u7ef4\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528PCA\u6216LDA\u5c06n\u7ef4\u6570\u636e\u8f6c\u6362\u4e3a2\u7ef4\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u7ed8\u5236\u5b83\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u5206\u6790\u89c6\u89c9\u6548\u679c\u3002\u4f46\u662fPCA\u548ct-SNE\u4e4b\u95f4\u7684\u533a\u522b\u5728\u4e8e\u524d\u8005\u8bd5\u56fe\u4fdd\u6301\u6570\u636e\u96c6\u7684\u65b9\u5dee\uff0c\u800ct-SNE\u8bd5\u56fe\u4fdd\u6301\u6570\u636e\u96c6\u4e2d\u7684\u5c40\u90e8\u76f8\u4f3c\u6027\u3002</p> <p>17. \u7ef4\u5ea6\u707e\u96be\u80cc\u540e\u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f</p> <p>\u968f\u7740\u8f93\u5165\u6570\u636e\u7684\u7ef4\u5ea6\u589e\u52a0\uff0c\u6982\u62ec\u6216\u5b66\u4e60\u6570\u636e\u4e2d\u5b58\u5728\u7684\u6a21\u5f0f\u6240\u9700\u7684\u6570\u636e\u91cf\u4e5f\u589e\u52a0\u3002\u5bf9\u4e8e\u6a21\u578b\uff0c\u5f88\u96be\u4ece\u6709\u9650\u6570\u91cf\u7684\u6570\u636e\u96c6\u4e2d\u8bc6\u522b\u6bcf\u4e2a\u7279\u5f81\u7684\u6a21\u5f0f\uff0c\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c\u7531\u4e8e\u6570\u636e\u7684\u9ad8\u7ef4\u6027\u548c\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u9650\u6570\u91cf\u7684\u793a\u4f8b\uff0c\u6743\u91cd\u6ca1\u6709\u5f97\u5230\u9002\u5f53\u7684\u4f18\u5316\u3002\u7531\u4e8e\u8fd9\u4e00\u70b9\uff0c\u5728\u8f93\u5165\u6570\u636e\u7684\u7ef4\u6570\u8fbe\u5230\u4e00\u5b9a\u7684\u9608\u503c\u540e\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u9762\u5bf9\u7ef4\u6570\u707e\u96be\u3002</p> <p>18. \u5ea6\u91cfMAE\u6216MSE\u6216RMSE\uff0c \u54ea\u4e2a\u5bf9\u79bb\u7fa4\u503c\u6709\u66f4\u597d\u7684\u9c81\u68d2\u6027\u3002</p> <p>\u5728\u4e0a\u8ff0\u4e09\u4e2a\u6307\u6807\u4e2d\uff0c\u4e0eMSE\u6216RMSE\u76f8\u6bd4\uff0cMAE\u5bf9\u79bb\u7fa4\u503c\u5177\u6709\u9c81\u68d2\u6027\u3002\u8fd9\u80cc\u540e\u7684\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a\u5e73\u65b9\u8bef\u5dee\u503c\u3002\u5728\u79bb\u7fa4\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u8bef\u5dee\u503c\u5df2\u7ecf\u5f88\u9ad8\uff0c\u7136\u540e\u6211\u4eec\u5c06\u5176\u5e73\u65b9\uff0c\u8fd9\u5bfc\u81f4\u8bef\u5dee\u503c\u7684\u7206\u70b8\u8d85\u8fc7\u9884\u671f\uff0c\u5e76\u4e3a\u68af\u5ea6\u4ea7\u751f\u8bef\u5bfc\u6027\u7ed3\u679c\u3002</p> <p>19. \u4e3a\u4ec0\u4e48\u5220\u9664\u9ad8\u5ea6\u76f8\u5173\u7684\u7279\u5f81\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u826f\u597d\u7684\u505a\u6cd5\uff1f</p> <p>\u5f53\u4e24\u4e2a\u7279\u5f81\u9ad8\u5ea6\u76f8\u5173\u65f6\uff0c\u5b83\u4eec\u53ef\u80fd\u5411\u6a21\u578b\u63d0\u4f9b\u7c7b\u4f3c\u7684\u4fe1\u606f\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u8fc7\u62df\u5408\u3002\u5982\u679c\u6570\u636e\u96c6\u4e2d\u5b58\u5728\u9ad8\u5ea6\u76f8\u5173\u7684\u7279\u5f81\uff0c\u90a3\u4e48\u5b83\u4eec\u4e0d\u5fc5\u8981\u5730\u589e\u52a0\u4e86\u7279\u5f81\u7a7a\u95f4\u7684\u7ef4\u6570\uff0c\u6709\u65f6\u4f1a\u4ea7\u751f\u7ef4\u6570\u707e\u96be\u7684\u95ee\u9898\u3002\u5982\u679c\u7279\u5f81\u7a7a\u95f4\u7684\u7ef4\u6570\u5f88\u9ad8\uff0c\u90a3\u4e48\u6a21\u578b\u8bad\u7ec3\u53ef\u80fd\u9700\u8981\u6bd4\u9884\u671f\u66f4\u591a\u7684\u65f6\u95f4\uff0c\u8fd9\u5c06\u589e\u52a0\u6a21\u578b\u7684\u590d\u6742\u6027\u548c\u51fa\u9519\u7684\u673a\u4f1a\u3002\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u6709\u52a9\u4e8e\u6211\u4eec\u5b9e\u73b0\u6570\u636e\u538b\u7f29\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u529f\u80fd\u5df2\u7ecf\u88ab\u5220\u9664\uff0c\u800c\u6ca1\u6709\u592a\u591a\u7684\u6570\u636e\u4e22\u5931\u3002</p> <p>20. \u63a8\u8350\u7cfb\u7edf\u4e2d\u57fa\u4e8e\u5185\u5bb9\u7684\u8fc7\u6ee4\u7b97\u6cd5\u548c\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\u6709\u4ec0\u4e48\u533a\u522b\uff1f</p> <p>\u5728\u4e00\u4e2a\u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u5185\u5bb9\u548c\u670d\u52a1\u7684\u76f8\u4f3c\u6027\u8fdb\u884c\u8bc4\u4f30\uff0c\u7136\u540e\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e9b\u76f8\u4f3c\u6027\u63aa\u65bd\uff0c\u4ece\u8fc7\u53bb\u7684\u6570\u636e\uff0c\u6211\u4eec\u63a8\u8350\u4ea7\u54c1\u7ed9\u7528\u6237\u3002\u4f46\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\uff0c\u6211\u4eec\u6839\u636e\u76f8\u4f3c\u7528\u6237\u7684\u504f\u597d\u63a8\u8350\u5185\u5bb9\u548c\u670d\u52a1\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u7528\u6237\u8fc7\u53bb\u5df2\u7ecf\u4f7f\u7528\u4e86A\u548cB\u670d\u52a1\uff0c\u5e76\u4e14\u65b0\u7528\u6237\u5df2\u7ecf\u4f7f\u7528\u4e86\u670d\u52a1A\uff0c\u5219\u5c06\u57fa\u4e8e\u53e6\u4e00\u7528\u6237\u7684\u504f\u597d\u5411\u4ed6\u63a8\u8350\u670d\u52a1A\u3002</p>"},{"location":"JY_HU/AI/labs%20%26%20hw%20review/","title":"\u8bfe\u7a0bLab&hw","text":"<p>labs &amp; hw review quickly\uff01</p>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/","title":"\u8d76\u5feb\u8865\u8bfe\u6284\u7b14\u8bb0","text":""},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#notes-for-zju-ai-ml","title":"notes for ZJU-AI-ML","text":""},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#machine-learning-bullet-points","title":"machine learning bullet points","text":""},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#_1","title":"\u671f\u672b\u4e3b\u8981\u8003\u540e\u56db\u7ae0\uff1f","text":"<p>\u7b2c8\u7ae0</p> <p>\u96c6\u6210\u5b66\u4e60\u7b97\u6cd5\u4e4bBoosting - \u77e5\u4e4e (zhihu.com)</p> <p>\u4e00\u6587\u770b\u61c2\u51b3\u7b56\u6811\uff08Decision Tree\uff09 - \u77e5\u4e4e (zhihu.com)</p> <p>\u3010\u673a\u5668\u5b66\u4e60\u3011Bootstrap\u8be6\u89e3 - \u77e5\u4e4e (zhihu.com)</p> <p>KMeans\uff08K\u5747\u503c\uff09\u548cKNN\uff08K\u6700\u8fd1\u90bb\uff09\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u5b83\u4eec\u5728\u4efb\u52a1\u548c\u5b9e\u73b0\u4e0a\u6709\u5f88\u5927\u7684\u533a\u522b\u3002</p>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#kmeansk","title":"KMeans\uff08K\u5747\u503c\uff09:","text":"<ol> <li>\u4efb\u52a1:</li> <li>KMeans \u662f\u4e00\u79cd\u805a\u7c7b\u7b97\u6cd5\uff0c\u7528\u4e8e\u5c06\u6570\u636e\u5206\u6210K\u4e2a\u4e0d\u540c\u7684\u7ec4\u6216\u7c07\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u6570\u636e\u70b9\u5c5e\u4e8e\u6700\u8fd1\u7684\u7c07\u4e2d\u5fc3\u3002</li> <li>\u76ee\u6807\u662f\u6700\u5c0f\u5316\u6bcf\u4e2a\u7c07\u5185\u7684\u70b9\u4e0e\u7c07\u4e2d\u5fc3\u7684\u5e73\u65b9\u8ddd\u79bb\u4e4b\u548c\u3002</li> <li>\u5de5\u4f5c\u539f\u7406:</li> <li>\u9996\u5148\uff0c\u9009\u62e9K\u4e2a\u521d\u59cb\u7c07\u4e2d\u5fc3\u3002</li> <li>\u7136\u540e\uff0c\u5c06\u6bcf\u4e2a\u6570\u636e\u70b9\u5206\u914d\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u7c07\u4e2d\u5fc3\u3002</li> <li>\u66f4\u65b0\u7c07\u4e2d\u5fc3\u4e3a\u5206\u914d\u7ed9\u8be5\u7c07\u7684\u6240\u6709\u6570\u636e\u70b9\u7684\u5e73\u5747\u503c\u3002</li> <li>\u91cd\u590d\u4e0a\u8ff0\u4e24\u4e2a\u6b65\u9aa4\uff0c\u76f4\u5230\u7c07\u4e2d\u5fc3\u4e0d\u518d\u53d8\u5316\u6216\u53d8\u5316\u5f88\u5c0f\u3002</li> <li>\u5e94\u7528:</li> <li>KMeans \u53ef\u7528\u4e8e\u56fe\u50cf\u538b\u7f29\u3001\u6587\u6863\u805a\u7c7b\u3001\u65e0\u76d1\u7763\u7279\u5f81\u5b66\u4e60\u7b49\u3002</li> </ol>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#knnk","title":"KNN\uff08K\u6700\u8fd1\u90bb\uff09:","text":"<ol> <li>\u4efb\u52a1:</li> <li>KNN \u662f\u4e00\u79cd\u5206\u7c7b\u548c\u56de\u5f52\u7b97\u6cd5\uff0c\u7528\u4e8e\u6839\u636e\u6700\u8fd1\u90bb\u5c45\u7684\u6807\u7b7e\u5bf9\u65b0\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u6216\u9884\u6d4b\u3002</li> <li>\u5de5\u4f5c\u539f\u7406:</li> <li>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u636e\u70b9\uff0c\u627e\u5230\u4e0e\u5176\u6700\u8fd1\u7684K\u4e2a\u8bad\u7ec3\u6570\u636e\u70b9\u3002</li> <li>\u5bf9\u4e8e\u5206\u7c7b\uff0c\u91c7\u7528\u591a\u6570\u6295\u7968\u7684\u539f\u5219\u786e\u5b9a\u8be5\u70b9\u7684\u7c7b\u522b\u3002</li> <li>\u5bf9\u4e8e\u56de\u5f52\uff0c\u91c7\u7528K\u4e2a\u90bb\u5c45\u7684\u5e73\u5747\u503c\u6765\u9884\u6d4b\u8be5\u70b9\u7684\u503c\u3002</li> <li>\u5e94\u7528:</li> <li>KNN \u53ef\u7528\u4e8e\u6a21\u5f0f\u8bc6\u522b\u3001\u56fe\u50cf\u8bc6\u522b\u3001\u63a8\u8350\u7cfb\u7edf\u7b49\u3002</li> </ol>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#_2","title":"\u533a\u522b:","text":"<ol> <li>\u4efb\u52a1:</li> <li>KMeans \u7528\u4e8e\u805a\u7c7b\uff0c\u5c06\u6570\u636e\u5206\u6210K\u4e2a\u7c07\u3002</li> <li>KNN \u7528\u4e8e\u5206\u7c7b\u548c\u56de\u5f52\uff0c\u6839\u636e\u6700\u8fd1\u90bb\u5c45\u7684\u6807\u7b7e\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u6216\u9884\u6d4b\u3002</li> <li>\u76ee\u6807\u51fd\u6570:</li> <li>KMeans \u7684\u76ee\u6807\u662f\u6700\u5c0f\u5316\u7c07\u5185\u5e73\u65b9\u8ddd\u79bb\u4e4b\u548c\u3002</li> <li>KNN \u7684\u76ee\u6807\u662f\u57fa\u4e8e\u6700\u8fd1\u90bb\u5c45\u8fdb\u884c\u5206\u7c7b\u6216\u56de\u5f52\u3002</li> <li>\u76d1\u7763/\u65e0\u76d1\u7763:</li> <li>KMeans \u662f\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u4e0d\u9700\u8981\u7c7b\u522b\u6807\u7b7e\u3002</li> <li>KNN \u65e2\u53ef\u4ee5\u662f\u76d1\u7763\u5b66\u4e60\u4e5f\u53ef\u4ee5\u662f\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5b83\u662f\u7528\u4e8e\u5206\u7c7b\u8fd8\u662f\u56de\u5f52\u4efb\u52a1\u3002</li> <li>\u8f93\u51fa:</li> <li>KMeans \u8f93\u51fa\u662f\u6570\u636e\u70b9\u6240\u5c5e\u7684\u7c07\u3002</li> <li>KNN \u8f93\u51fa\u662f\u5206\u7c7b\u6807\u7b7e\uff08\u5bf9\u4e8e\u5206\u7c7b\uff09\u6216\u8fde\u7eed\u503c\uff08\u5bf9\u4e8e\u56de\u5f52\uff09\u3002</li> </ol> <p>\u603b\u4f53\u800c\u8a00\uff0cKMeans \u548c KNN \u662f\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u7b97\u6cd5\uff0c\u7528\u4e8e\u89e3\u51b3\u4e0d\u540c\u7684\u95ee\u9898\u3002 KMeans \u662f\u4e00\u79cd\u65e0\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\uff0c\u7528\u4e8e\u805a\u7c7b\uff0c\u800c KNN \u901a\u5e38\u7528\u4e8e\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u5206\u7c7b\u548c\u56de\u5f52\u4efb\u52a1</p> <p>\u76d1\u7763\u5b66\u4e60\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5b66\u4e60\u8303\u5f0f\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u8bad\u7ec3\u6570\u636e\u7684\u6807\u7b7e\u4fe1\u606f\u3002</p>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#supervised-learning","title":"\u76d1\u7763\u5b66\u4e60\uff08Supervised Learning\uff09:","text":"<ol> <li>\u5b9a\u4e49\uff1a</li> <li>\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u7b97\u6cd5\u63a5\u6536\u5e26\u6709\u6807\u7b7e\uff08\u7c7b\u522b\u6216\u8f93\u51fa\uff09\u7684\u8bad\u7ec3\u6570\u636e\u3002</li> <li>\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u90fd\u5305\u62ec\u8f93\u5165\u7279\u5f81\u548c\u76f8\u5e94\u7684\u6807\u7b7e\u3002</li> <li>\u4efb\u52a1\uff1a</li> <li>\u76d1\u7763\u5b66\u4e60\u7684\u76ee\u6807\u662f\u5b66\u4e60\u4e00\u4e2a\u4ece\u8f93\u5165\u5230\u8f93\u51fa\u7684\u6620\u5c04\uff0c\u4ee5\u4fbf\u5728\u7ed9\u5b9a\u65b0\u8f93\u5165\u65f6\u80fd\u591f\u9884\u6d4b\u76f8\u5e94\u7684\u8f93\u51fa\u6807\u7b7e\u3002</li> <li>\u5178\u578b\u4efb\u52a1\u5305\u62ec\u5206\u7c7b\u548c\u56de\u5f52\u3002</li> <li>\u793a\u4f8b\uff1a</li> <li>\u5206\u7c7b\uff1a\u9884\u6d4b\u8f93\u5165\u6570\u636e\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b\uff08\u4f8b\u5982\uff0c\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\uff09\u3002</li> <li>\u56de\u5f52\uff1a\u9884\u6d4b\u8f93\u5165\u6570\u636e\u7684\u6570\u503c\u8f93\u51fa\uff08\u4f8b\u5982\uff0c\u623f\u4ef7\u9884\u6d4b\uff09\u3002</li> <li>\u8bad\u7ec3\u6570\u636e\uff1a</li> <li>\u8bad\u7ec3\u6570\u636e\u5305\u62ec\u8f93\u5165-\u8f93\u51fa\u5bf9\uff0c\u6bcf\u4e2a\u8f93\u5165\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8f93\u51fa\u6807\u7b7e\u3002</li> </ol>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#unsupervised-learning","title":"\u65e0\u76d1\u7763\u5b66\u4e60\uff08Unsupervised Learning\uff09:","text":"<ol> <li>\u5b9a\u4e49\uff1a</li> <li>\u5728\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u7b97\u6cd5\u63a5\u6536\u6ca1\u6709\u6807\u7b7e\u4fe1\u606f\u7684\u8bad\u7ec3\u6570\u636e\u3002</li> <li>\u8bad\u7ec3\u6837\u672c\u53ea\u5305\u62ec\u8f93\u5165\u7279\u5f81\uff0c\u6ca1\u6709\u76f8\u5e94\u7684\u8f93\u51fa\u6807\u7b7e\u3002</li> <li>\u4efb\u52a1\uff1a</li> <li>\u65e0\u76d1\u7763\u5b66\u4e60\u7684\u76ee\u6807\u662f\u63a2\u7d22\u6570\u636e\u7684\u7ed3\u6784\uff0c\u53d1\u73b0\u6570\u636e\u4e2d\u7684\u6a21\u5f0f\u548c\u5173\u7cfb\u3002</li> <li>\u5178\u578b\u4efb\u52a1\u5305\u62ec\u805a\u7c7b\u3001\u964d\u7ef4\u548c\u5173\u8054\u89c4\u5219\u5b66\u4e60\u3002</li> <li>\u793a\u4f8b\uff1a</li> <li>\u805a\u7c7b\uff1a\u5c06\u76f8\u4f3c\u7684\u6570\u636e\u70b9\u5206\u7ec4\u5230\u540c\u4e00\u7c7b\u522b\u4e2d\u3002</li> <li>\u964d\u7ef4\uff1a\u51cf\u5c11\u6570\u636e\u7ef4\u5ea6\uff0c\u4fdd\u7559\u5173\u952e\u7279\u5f81\u3002</li> <li>\u5173\u8054\u89c4\u5219\u5b66\u4e60\uff1a\u53d1\u73b0\u6570\u636e\u4e2d\u7684\u5173\u8054\u6027\uff0c\u4f8b\u5982\u8d2d\u7269\u7bee\u5206\u6790\u3002</li> <li>\u8bad\u7ec3\u6570\u636e\uff1a</li> <li>\u8bad\u7ec3\u6570\u636e\u6ca1\u6709\u8f93\u51fa\u6807\u7b7e\uff0c\u7b97\u6cd5\u8bd5\u56fe\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\u9690\u85cf\u7684\u7ed3\u6784\u3002</li> </ol>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#_3","title":"\u533a\u522b\u603b\u7ed3\uff1a","text":"<ul> <li>\u6570\u636e\u6807\u7b7e\uff1a</li> <li>\u76d1\u7763\u5b66\u4e60\u9700\u8981\u5e26\u6709\u6807\u7b7e\u7684\u8bad\u7ec3\u6570\u636e\u3002</li> <li>\u65e0\u76d1\u7763\u5b66\u4e60\u4f7f\u7528\u6ca1\u6709\u6807\u7b7e\u7684\u8bad\u7ec3\u6570\u636e\u3002</li> <li>\u76ee\u6807\uff1a</li> <li>\u76d1\u7763\u5b66\u4e60\u76ee\u6807\u662f\u9884\u6d4b\u8f93\u51fa\u6807\u7b7e\u3002</li> <li>\u65e0\u76d1\u7763\u5b66\u4e60\u76ee\u6807\u662f\u53d1\u73b0\u6570\u636e\u4e2d\u7684\u6a21\u5f0f\u548c\u7ed3\u6784\u3002</li> <li>\u4efb\u52a1\uff1a</li> <li>\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\u5305\u62ec\u5206\u7c7b\u548c\u56de\u5f52\u3002</li> <li>\u65e0\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\u5305\u62ec\u805a\u7c7b\u3001\u964d\u7ef4\u548c\u5173\u8054\u89c4\u5219\u5b66\u4e60\u3002</li> <li>\u793a\u4f8b\uff1a</li> <li>\u76d1\u7763\u5b66\u4e60\u793a\u4f8b\u5305\u62ec\u56fe\u50cf\u5206\u7c7b\u3001\u8bed\u97f3\u8bc6\u522b\u3002</li> <li>\u65e0\u76d1\u7763\u5b66\u4e60\u793a\u4f8b\u5305\u62ec\u793e\u4ea4\u7f51\u7edc\u5206\u6790\u3001\u4fe1\u7528\u5361\u6b3a\u8bc8\u68c0\u6d4b\u3002</li> </ul> <p>\u65e0\u76d1\u7763\u5b66\u4e60\u901a\u5e38\u7528\u4e8e\u5728\u6570\u636e\u4e2d\u53d1\u73b0\u9690\u85cf\u7684\u7ed3\u6784\uff0c\u800c\u76d1\u7763\u5b66\u4e60\u5219\u7528\u4e8e\u6784\u5efa\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\u3002\u8fd9\u4e24\u8005\u5728\u89e3\u51b3\u4e0d\u540c\u7c7b\u578b\u7684\u95ee\u9898\u65f6\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002</p>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#lstm","title":"LSTM","text":"<p>\u4e00\u6b65\u5e72\u56db\u4ef6\u4e8b\u60c5\uff1a</p> <p>\u8f93\u5165\u65b0\u7684\u8f93\u5165\u4fe1\u606f\u548c\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684cell state\u548chidden state\uff0c\u8f93\u51fahidden state\u548ccell state</p> <p>\u6839\u636e\u5f53\u524d\u65b0\u7684\u8f93\u5165\uff0c\u9009\u62e9\u4ece\u4e0a\u4e2a\u72b6\u6001\u7684cell state\u4e2d\u8981\u5fd8\u8bb0\u7684\u5185\u5bb9\uff0c</p> <p>\u6839\u636e\u5f53\u524d\u65b0\u7684\u8f93\u5165\uff0c\u9009\u62e9\u4ece\u4e0a\u4e2a\u72b6\u6001\u7684cell state\u4e2d\u8981\u66f4\u65b0\u7684\u5185\u5bb9</p> <p>\u6839\u636e\u66f4\u65b0\u540e\u7684\u72b6\u6001\u548c\u5f53\u524d\u65b0\u7684\u8f93\u5165\uff0c\u66f4\u65b0hidden state\u7684\u5185\u5bb9</p> <p>Softmax\u3001ReLU\uff08Rectified Linear Unit\uff09\u3001\u548cSigmoid\u662f\u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u5b83\u4eec\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7528\u4e8e\u4e0d\u540c\u7684\u573a\u666f\u3002\u4ee5\u4e0b\u662f\u5b83\u4eec\u7684\u51fd\u6570\u8868\u8fbe\u5f0f\u548c\u4e3b\u8981\u5e94\u7528\u60c5\u5f62\uff1a</p> <ol> <li>Softmax\u51fd\u6570\uff1a</li> <li>\u51fd\u6570\u8868\u8fbe\u5f0f\uff1a </li> <li>\u7ed9\u5b9a\u4e00\u4e2a\u5411\u91cf$ z = [z_1, z_2, ..., z_k]$\uff0cSoftmax\u51fd\u6570\u5c06\u6bcf\u4e2a\u5143\u7d20\u8f6c\u5316\u4e3a\u975e\u8d1f\u4e14\u548c\u4e3a1\u7684\u6982\u7387\u503c\u3002      $ \\text{Softmax}(z)i = \\frac{e^{z_i}}{\\sum $}^{k} e^{z_j}</li> <li>\u5e94\u7528\u60c5\u5f62\uff1a \u4e3b\u8981\u7528\u4e8e\u591a\u7c7b\u522b\u5206\u7c7b\u95ee\u9898\u7684\u8f93\u51fa\u5c42\u3002Softmax\u5c06\u6a21\u578b\u7684\u539f\u59cb\u8f93\u51fa\u8f6c\u5316\u4e3a\u7c7b\u522b\u6982\u7387\u5206\u5e03\uff0c\u4fbf\u4e8e\u6a21\u578b\u5728\u8bad\u7ec3\u65f6\u8ba1\u7b97\u635f\u5931\u5e76\u8fdb\u884c\u68af\u5ea6\u4e0b\u964d\u3002</li> <li>ReLU\u51fd\u6570\uff1a</li> <li>\u51fd\u6570\u8868\u8fbe\u5f0f\uff1a</li> <li>ReLU\u6fc0\u6d3b\u51fd\u6570\u5c06\u6240\u6709\u8d1f\u8f93\u5165\u8bbe\u4e3a\u96f6\uff0c\u4fdd\u6301\u6b63\u8f93\u5165\u4e0d\u53d8\u3002      ${ReLU}(x) = \\max(0, x) $</li> <li>\u5e94\u7528\u60c5\u5f62\uff1a \u7528\u4e8e\u9690\u85cf\u5c42\u7684\u6fc0\u6d3b\u51fd\u6570\u3002ReLU\u7684\u975e\u7ebf\u6027\u7279\u6027\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u5b66\u4e60\u66f4\u590d\u6742\u7684\u8868\u793a\uff0c\u540c\u65f6\u907f\u514d\u4e86\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u3002</li> <li>Sigmoid\u51fd\u6570\uff1a</li> <li>\u51fd\u6570\u8868\u8fbe\u5f0f\uff1a </li> <li>Sigmoid\u51fd\u6570\u5c06\u8f93\u5165\u6620\u5c04\u5230\u4e00\u4e2a\u53d6\u503c\u8303\u56f4\u57280\u52301\u4e4b\u95f4\u7684\u6982\u7387\u503c\u3002      ${Sigmoid}(x) = \\frac{1}{1 + e^{-x}} $</li> <li>\u5e94\u7528\u60c5\u5f62\uff1a \u4e3b\u8981\u7528\u4e8e\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\u7684\u8f93\u51fa\u5c42\u3002Sigmoid\u5c06\u6a21\u578b\u7684\u539f\u59cb\u8f93\u51fa\u6620\u5c04\u4e3a0\u52301\u4e4b\u95f4\u7684\u6982\u7387\uff0c\u65b9\u4fbf\u8fdb\u884c\u4e8c\u5143\u5206\u7c7b\u7684\u9608\u503c\u5224\u5b9a\u3002</li> </ol> <p>\u8fd9\u4e9b\u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9\u901a\u5e38\u53d6\u51b3\u4e8e\u4efb\u52a1\u7684\u6027\u8d28\u548c\u7f51\u7edc\u7684\u7ed3\u6784\u3002\u4e00\u822c\u800c\u8a00\uff0cSoftmax\u9002\u7528\u4e8e\u591a\u7c7b\u522b\u5206\u7c7b\uff0cReLU\u9002\u7528\u4e8e\u9690\u85cf\u5c42\u4ee5\u589e\u52a0\u6a21\u578b\u7684\u975e\u7ebf\u6027\u8868\u8fbe\u80fd\u529b\uff0c\u800cSigmoid\u9002\u7528\u4e8e\u4e8c\u5143\u5206\u7c7b\u3002</p> <p>week 9 </p> <p>word embedding \u8bcd\u5d4c\u5165</p> <p>Convert words into numerical form (e.g., vector). \u4f8b\u5982\uff0cEmbed words into a mathematical space.</p> <p>one-hot\u7f16\u7801\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\uff1a\u7ef4\u5ea6\u592a\u9ad8\uff0c\u65e0\u6cd5\u8868\u5f81\u76f8\u4f3c\uff08\u9760\u8fd1\uff09\u7a0b\u5ea6</p> <p>distributional representation \u5206\u5e03\u5f0f\u8868\u793a\u65b9\u6cd5</p> <p>distributional hypothesis\u6307\u51fa\uff0c\u5e94\u8be5\u7528\u8fd9\u4e2a\u8bcd\u6240\u5904\u7684\u8bed\u5883\u6765\u751f\u6210\u8bcd\u5411\u91cf</p> <p>word2vec is used for distributional representation</p> <p>inference based methods\uff1a\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4e2d\uff0cskip-gram\u548cCBOW\uff08Continuous Bag of Words\uff09\u662f\u4e24\u79cd\u7528\u4e8e\u5b66\u4e60\u8bcd\u5411\u91cf\u8868\u793a\u7684\u6a21\u578b\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a\u201cinference based methods\u201d\uff08\u57fa\u4e8e\u63a8\u7406\u7684\u65b9\u6cd5\uff09\u7684\u539f\u56e0\u4e3b\u8981\u4e0e\u5b83\u4eec\u7684\u8bad\u7ec3\u76ee\u6807\u548c\u65b9\u6cd5\u6709\u5173\u3002</p> <p>\u8fd9\u4e24\u79cd\u6a21\u578b\u90fd\u662f\u57fa\u4e8e\u63a8\u65ad\uff08inference\uff09\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u6838\u5fc3\u76ee\u6807\u662f\u901a\u8fc7\u89c2\u5bdf\u8bcd\u6c47\u4e4b\u95f4\u7684\u4e0a\u4e0b\u6587\u5173\u7cfb\u6765\u63a8\u65ad\u6bcf\u4e2a\u8bcd\u7684\u8bcd\u5411\u91cf\u8868\u793a\u3002\u5177\u4f53\u800c\u8a00\uff1a</p> <ol> <li>Skip-gram\u6a21\u578b\uff1a \u5728skip-gram\u4e2d\uff0c\u6a21\u578b\u8bd5\u56fe\u4ece\u7ed9\u5b9a\u7684\u4e2d\u5fc3\u8bcd\u9884\u6d4b\u5176\u5468\u56f4\u7684\u4e0a\u4e0b\u6587\u8bcd\u3002\u8fd9\u5c31\u597d\u50cf\u6a21\u578b\u5728\u63a8\u65ad\u4e2d\u5fc3\u8bcd\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u56e0\u6b64\uff0cskip-gram\u662f\u4e00\u79cd\u57fa\u4e8e\u4e0a\u4e0b\u6587\u63a8\u65ad\u7684\u65b9\u6cd5\u3002</li> <li>CBOW\u6a21\u578b\uff1a \u4e0eskip-gram\u76f8\u53cd\uff0cCBOW\u8bd5\u56fe\u4ece\u5468\u56f4\u7684\u4e0a\u4e0b\u6587\u8bcd\u9884\u6d4b\u4e2d\u5fc3\u8bcd\u3002CBOW\u5c06\u4e0a\u4e0b\u6587\u4e2d\u7684\u8bcd\u6c47\u4fe1\u606f\u7ed3\u5408\u8d77\u6765\uff0c\u8bd5\u56fe\u63a8\u65ad\u4e2d\u5fc3\u8bcd\u3002\u56e0\u6b64\uff0cCBOW\u4e5f\u662f\u4e00\u79cd\u57fa\u4e8e\u4e0a\u4e0b\u6587\u63a8\u65ad\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u5b83\u5173\u6ce8\u7684\u662f\u4e2d\u5fc3\u8bcd\u3002</li> </ol> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u4e4b\u6240\u4ee5\u88ab\u79f0\u4e3a\u201cinference based methods\u201d\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u7684\u6838\u5fc3\u4efb\u52a1\u662f\u4ece\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u4e2d\u63a8\u65ad\u5355\u8bcd\u7684\u8868\u793a\u3002\u8fd9\u4e0e\u4e00\u4e9b\u5176\u4ed6\u65b9\u6cd5\uff0c\u5982\u8ba1\u6570\u65b9\u6cd5\uff08count-based methods\uff09\u4e0d\u540c\uff0c\u540e\u8005\u4e3b\u8981\u5173\u6ce8\u7684\u662f\u7edf\u8ba1\u8bcd\u6c47\u7684\u5171\u73b0\u4fe1\u606f\u800c\u4e0d\u662f\u76f4\u63a5\u63a8\u65ad\u8bcd\u5411\u91cf\u3002</p> <p>\u603b\u7684\u6765\u8bf4\uff0cskip-gram\u548cCBOW\u6a21\u578b\u88ab\u79f0\u4e3a\u57fa\u4e8e\u63a8\u7406\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u901a\u8fc7\u89c2\u5bdf\u4e0a\u4e0b\u6587\u5173\u7cfb\u6765\u63a8\u65ad\u8bcd\u6c47\u7684\u8bed\u4e49\u8868\u793a\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u597d\u7684\u8bcd\u5411\u91cf\u5b66\u4e60\u3002</p>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#continuous-bag-of-words-modelcbow-model","title":"Continuous bag-of-words model(CBOW model)","text":"<p>Predict one word (target word) from multiple words (context). The convergence rate is fast. The distributional representation (word vector) is relatively inferior.</p>"},{"location":"JY_HU/AI/notes%20for%20ZJU-AI-ML/#skip-gram-model","title":"Skip-gram model","text":"<p>Predict multiple words (context) from one word (target word). The convergence rate is slow. The distributional representation (word vector) is relatively superior.</p> <p>CBOW\uff08Continuous Bag of Words\uff09\u548cSkip-gram\u662f\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4e2d\u7528\u4e8e\u751f\u6210\u8bcd\u5411\u91cf\u7684\u4e24\u79cd\u6d41\u884c\u6a21\u578b\u3002\u5173\u4e8eCBOW\u7684\u8bcd\u5411\u91cf\u76f8\u5bf9\u8f83\u5dee\u7684\u8bf4\u6cd5\u53ef\u80fd\u53d7\u5230\u4e00\u4e9b\u56e0\u7d20\u7684\u5f71\u54cd\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u6a21\u578b\u7684\u6027\u80fd\u53ef\u80fd\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u4efb\u52a1\u3001\u6570\u636e\u96c6\u548c\u8bad\u7ec3\u53c2\u6570\u3002</p> <p>\u4ee5\u4e0b\u662fCBOW\u7684\u8bcd\u5411\u91cf\u5728\u67d0\u4e9b\u60c5\u5883\u4e0b\u88ab\u8ba4\u4e3a\u76f8\u5bf9\u8f83\u5dee\u7684\u4e00\u4e9b\u539f\u56e0\uff1a</p> <ol> <li>\u4e0a\u4e0b\u6587\u8fc7\u5ea6\u7b80\u5316\uff1a CBOW\u503e\u5411\u4e8e\u5bf9\u7a97\u53e3\u5185\u7684\u4e0a\u4e0b\u6587\u8bcd\u6c42\u5e73\u5747\uff0c\u4ee5\u9884\u6d4b\u76ee\u6807\u8bcd\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5728\u5904\u7406\u591a\u4e49\u8bcd\uff08\u5177\u6709\u591a\u4e2a\u542b\u4e49\u7684\u8bcd\uff09\u6216\u6355\u6349\u542b\u4e49\u5fae\u5999\u5dee\u5f02\u65f6\uff0c\u8868\u5f81\u76f8\u5bf9\u8fc7\u4e8e\u7b80\u5316\u3002</li> <li>\u4e22\u5931\u8bcd\u5e8f\u4fe1\u606f\uff1a CBOW\u5ffd\u7565\u4e86\u4e0a\u4e0b\u6587\u7a97\u53e3\u5185\u7684\u8bcd\u5e8f\uff0c\u56e0\u4e3a\u5b83\u5c06\u4e0a\u4e0b\u6587\u8bcd\u89c6\u4e3a\u65e0\u5e8f\u96c6\u5408\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u987a\u5e8f\u4fe1\u606f\u7684\u4e22\u5931\uff0c\u800c\u8fd9\u5bf9\u67d0\u4e9b\u4efb\u52a1\u53ef\u80fd\u81f3\u5173\u91cd\u8981\u3002</li> <li>\u5bf9\u9891\u7e41\u8bcd\u6c47\u7684\u4f18\u52bf\uff1a CBOW\u5728\u8bed\u6599\u5e93\u4e2d\u9891\u7e41\u51fa\u73b0\u7684\u8bcd\u6c47\u4e0a\u8868\u73b0\u8f83\u597d\uff0c\u56e0\u4e3a\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5b83\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e86\u4f18\u5148\u8003\u8651\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u7a00\u6709\u8bcd\u6c47\u6216\u7279\u5b9a\u8bcd\u6c47\u5173\u7cfb\u7684\u6355\u6349\u6548\u679c\u53ef\u80fd\u4e0d\u591f\u663e\u8457\u3002</li> <li>\u4e0a\u4e0b\u6587\u7a97\u53e3\u5927\u5c0f\uff1a \u5728CBOW\u4e2d\uff0c\u4e0a\u4e0b\u6587\u7a97\u53e3\u5927\u5c0f\u7684\u9009\u62e9\u4f1a\u5f71\u54cd\u8bcd\u5411\u91cf\u7684\u8d28\u91cf\u3002\u7a97\u53e3\u592a\u5c0f\u53ef\u80fd\u65e0\u6cd5\u6355\u6349\u8db3\u591f\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u800c\u7a97\u53e3\u592a\u5927\u53ef\u80fd\u5f15\u5165\u566a\u58f0\u3002</li> <li>\u4efb\u52a1\u7279\u5b9a\u6027\u80fd\uff1a \u5bf9\u76f8\u5bf9\u8f83\u5dee\u7684\u770b\u6cd5\u53ef\u80fd\u662f\u4e0e\u5177\u4f53\u4efb\u52a1\u6709\u5173\u7684\u3002\u5bf9\u4e8e\u67d0\u4e9bNLP\u4efb\u52a1\uff0cSkip-gram\u6216\u5176\u4ed6\u5d4c\u5165\u6a21\u578b\u53ef\u80fd\u5728\u6027\u80fd\u4e0a\u4f18\u4e8eCBOW\u3002</li> </ol> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728CBOW\u548cSkip-gram\u4e4b\u95f4\u7684\u9009\u62e9\u901a\u5e38\u53d6\u51b3\u4e8e\u6570\u636e\u96c6\u7684\u5177\u4f53\u7279\u6027\u4ee5\u53ca\u4e0b\u6e38\u4efb\u52a1\u7684\u9700\u6c42\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u548c\u4ece\u4e1a\u8005\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u8fd9\u4e24\u79cd\u6a21\u578b\uff0c\u4ee5\u786e\u5b9a\u54ea\u79cd\u6a21\u578b\u66f4\u9002\u5408\u5176\u7279\u5b9a\u7684\u7528\u4f8b\u3002\u6b64\u5916\uff0c\u8bf8\u5982\u57fa\u4e8eTransformer\u7684\u66f4\u8fd1\u671f\u7684\u8bcd\u5411\u91cf\u6a21\u578b\u7b49\u6280\u672f\u7684\u8fdb\u6b65\u5728\u5404\u79cdNLP\u5e94\u7528\u4e2d\u8d85\u8d8a\u4e86\u4f20\u7edf\u65b9\u6cd5\uff0c\u5982CBOW\u548cSkip-gram\u3002</p> <p></p> <p>\"RNN\u80fd\u591fCorrelate temporal information\" \u8868\u793a\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff08Recurrent Neural Network\uff0cRNN\uff09\u80fd\u591f\u5173\u8054\u6216\u6355\u6349\u65f6\u95f4\u4e0a\u7684\u4fe1\u606f\u3002\u5728\u8fd9\u79cd\u4e0a\u4e0b\u6587\u4e2d\uff0c\"temporal information\" \u6307\u7684\u662f\u4e0e\u65f6\u95f4\u76f8\u5173\u7684\u6570\u636e\u3001\u6a21\u5f0f\u6216\u5e8f\u5217\u3002</p> <p>RNN\u662f\u4e00\u79cd\u5177\u6709\u5faa\u73af\u7ed3\u6784\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u5728\u5904\u7406\u5e8f\u5217\u6570\u636e\u65f6\u8868\u73b0\u51fa\u8272\u3002\u8fd9\u610f\u5473\u7740\u5b83\u80fd\u591f\u8003\u8651\u5148\u524d\u7684\u65f6\u95f4\u6b65\u4fe1\u606f\uff0c\u4ece\u800c\u66f4\u597d\u5730\u7406\u89e3\u548c\u9884\u6d4b\u5e8f\u5217\u4e2d\u7684\u6a21\u5f0f\u3002RNN\u7684\u5faa\u73af\u7ed3\u6784\u5141\u8bb8\u4fe1\u606f\u5728\u7f51\u7edc\u4e2d\u4f20\u9012\uff0c\u4f7f\u5f97\u7f51\u7edc\u80fd\u591f\u6355\u6349\u548c\u5229\u7528\u65f6\u95f4\u4e0a\u7684\u4f9d\u8d56\u5173\u7cfb\u3002</p> <p>\u5177\u4f53\u800c\u8a00\uff0cRNN\u4e2d\u7684\u9690\u85cf\u72b6\u6001\u5141\u8bb8\u7f51\u7edc\u5728\u5904\u7406\u5e8f\u5217\u65f6\u4fdd\u7559\u8fc7\u53bb\u7684\u4fe1\u606f\uff0c\u5e76\u5728\u5f53\u524d\u65f6\u95f4\u6b65\u4f7f\u7528\u3002\u8fd9\u79cd\u673a\u5236\u4f7f\u5f97RNN\u80fd\u591f\u5173\u8054\u4e0d\u540c\u65f6\u95f4\u6b65\u7684\u8f93\u5165\uff0c\u4ece\u800c\u66f4\u597d\u5730\u7406\u89e3\u5e8f\u5217\u4e2d\u7684\u52a8\u6001\u6a21\u5f0f\u3002\u8fd9\u6837\uff0cRNN\u5c31\u80fd\u591f\u5728\u5904\u7406\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u65f6\u6709\u6548\u5730\"correlate temporal information\"\uff0c\u4e5f\u5c31\u662f\u5173\u8054\u6216\u6355\u6349\u65f6\u95f4\u4e0a\u7684\u4fe1\u606f\u3002</p> <p>\u7136\u800c\uff0c\u4f20\u7edf\u7684RNN\u5728\u5904\u7406\u957f\u5e8f\u5217\u65f6\u53ef\u80fd\u4f1a\u9762\u4e34\u68af\u5ea6\u6d88\u5931\u6216\u68af\u5ea6\u7206\u70b8\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff0c\u4e00\u4e9b\u6539\u8fdb\u7684\u7ed3\u6784\uff0c\u5982\u957f\u77ed\u65f6\u8bb0\u5fc6\u7f51\u7edc\uff08LSTM\uff09\u548c\u95e8\u63a7\u5faa\u73af\u5355\u5143\uff08GRU\uff09\u7b49\uff0c\u88ab\u63d0\u51fa\u6765\u4ee5\u66f4\u6709\u6548\u5730\u6355\u6349\u548c\u5229\u7528\u65f6\u95f4\u4fe1\u606f\u3002\u8fd9\u4e9b\u6539\u8fdb\u7684\u7ed3\u6784\u5728\u5904\u7406\u957f\u671f\u4f9d\u8d56\u6027\u65f6\u8868\u73b0\u66f4\u597d\u3002</p> <p>Large models, especially those based on transformer architectures like OpenAI's GPT-3, have shown significant advancements in various natural language processing (NLP) and machine learning tasks. These models are known for their ability to capture complex patterns in data, generate coherent and contextually relevant outputs, and achieve state-of-the-art performance in multiple benchmarks.</p> <p>Here are some considerations regarding the future of large models:</p> <ol> <li> <p>Increased Model Size: There is a trend of increasing model sizes to improve performance. Researchers continue to explore even larger models with more parameters to push the boundaries of what's possible in terms of understanding and generating natural language.</p> </li> <li> <p>Broader Applicability: Large models are being adapted and fine-tuned for a broader range of tasks beyond NLP, including computer vision, reinforcement learning, and more. This trend may continue as researchers aim to develop models with general intelligence.</p> </li> <li> <p>Resource Intensiveness: Training and deploying large models require substantial computational resources, which may limit accessibility. Future developments might focus on making these models more efficient and accessible, allowing a wider range of researchers and applications to benefit from them.</p> </li> <li> <p>Ethical Considerations: As large models become more powerful, there's a growing need to address ethical concerns, including issues related to biases in training data, potential misuse, and the environmental impact of training such models.</p> </li> <li> <p>Hybrid Models: Future research might explore hybrid models that combine the strengths of large pre-trained models with more task-specific architectures. This approach could enhance efficiency and performance for specific applications.</p> </li> </ol> <p>agents</p> <ol> <li>Explainability: There is a growing demand for models that not only perform well but also provide interpretable and explainable results. Future developments may involve designing large models that are more transparent and easier to interpret.</li> </ol> <p>It's important to note that the field of machine learning is dynamic, and new developments may occur beyond my last update. The future of large models will likely depend on ongoing research, technological advancements, and societal considerations.</p> <p>\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\uff1a</p> <p>\u8bad\u7ec3\u6837\u672c\u4e3a     \u7279\u5f81  \u5bf9\u5e94   \u5206\u7c7b</p> <p>\u9700\u8981\u9884\u6d4b\u7684\u662f\uff1a\u67d0\u7279\u5f81x\u4e0b\u5bf9\u5e94\u7684\u5206\u7c7by,\u6c42\u51fa\u6700\u5927\u53ef\u80fd\u6027\u7684y\uff0cargmax p(y|x)</p> <p>\u8bad\u7ec3\u65b9\u6cd5\u662f\uff1a</p>"},{"location":"JY_HU/AI/srtp-2024-plan/","title":"srtp","text":""},{"location":"JY_HU/AI/srtp-2024-plan/#srtp-2023-plan","title":"srtp 2023 plan","text":"<p>google colab</p> <p>\u4f7f\u7528\u6a21\u578b\uff0c\u60f3\u4e00\u4e2a\u5e94\u7528\u573a\u666f</p> <p>\u89c6\u9891\u526a\u8f91</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/1-%E5%A6%82%E4%BD%95%E8%AF%BB%E8%AE%BA%E6%96%87/","title":"\u5982\u4f55\u8bfb\u8bba\u6587","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/1-%E5%A6%82%E4%BD%95%E8%AF%BB%E8%AE%BA%E6%96%87/#_1","title":"\u5982\u4f55\u8bfb\u8bba\u6587","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/1-%E5%A6%82%E4%BD%95%E8%AF%BB%E8%AE%BA%E6%96%87/#_2","title":"\u7ed3\u6784","text":"<ol> <li>title</li> <li>abstract</li> <li>introduction</li> <li>method</li> <li>exp</li> <li>conclusion</li> </ol>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/1-%E5%A6%82%E4%BD%95%E8%AF%BB%E8%AE%BA%E6%96%87/#_3","title":"\u4e09\u904d\u8bfb","text":"<p>\u7b2c\u4e00\u904d\uff1a\u6807\u9898\u6458\u8981\u7ed3\u8bba\u3002\u53ef\u4ee5\u770b\u4e00\u773cexp\u4e2d\u7684\u56fe\u8868\uff0c\u7784\u4e00\u773cmethod</p> <p>\u7b2c\u4e8c\u904d\uff1a\u5bf9\u6574\u4e2a\u6587\u7ae0\u8fc7\u4e00\u904d\uff0c\u8bc1\u660e\u516c\u5f0f\u5ffd\u7565\uff0c\u56fe\u8868\u8981\u7ec6\u770b\uff0c\u548c\u5176\u4ed6\u4eba\u5de5\u4f5c\u7684\u5bf9\u6bd4\uff0c\u5708\u51fa\u5f15\u7528\u7684\u6587\u7ae0\u3002</p> <p>\u7b2c\u4e09\u904d\uff1a\u6bcf\u53e5\u8bdd\u90fd\u8981\u7406\u89e3\uff0c\u5982\u679c\u662f\u6211\u6765\u505a\u5e94\u8be5\u600e\u4e48\u505a\uff0c\u54ea\u4e9b\u5730\u65b9\u53ef\u4ee5\u5f80\u524d\u505a</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/10-%E5%A6%82%E4%BD%95%E6%89%BE%E7%A0%94%E7%A9%B6%E6%83%B3%E6%B3%95/","title":"\u5982\u4f55\u627e\u7814\u7a76\u60f3\u6cd5","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/10-%E5%A6%82%E4%BD%95%E6%89%BE%E7%A0%94%E7%A9%B6%E6%83%B3%E6%B3%95/#_1","title":"\u5982\u4f55\u627e\u7814\u7a76\u60f3\u6cd5","text":"<ul> <li> <p>\u6253\u8865\u4e01\u6cd5</p> </li> <li> <p>\u4ee5MAE\u4e3a\u4f8b\uff1a</p> <p></p> </li> <li> <p>\u7b2c\u4e00\u4e2a\u60f3\u6cd5\uff1a\u201c\u906e\u4f4f\u66f4\u591a\u7684\u56fe\u7247\u5757\u201d\u5c31\u662f\u7ed9\u56fe\u7247\u52a0\u5f88\u5f3a\u7684\u566a\u58f0\uff0c\u76f8\u5f53\u4e8e\u6570\u636e\u589e\u5f3a\uff0c\u6570\u636e\u589e\u5f3a\u662f\u4e3a\u4e86\u4f7f\u6a21\u578b\u4e0d\u8fc7\u62df\u5408\uff0c\u4f46\u662f\u574f\u5904\u5c31\u662f\u8bad\u7ec3\u5f88\u6162\uff0c\u6536\u655b\u901f\u5ea6\u6781\u6162\uff0c\u8003\u8651\u5728\u66f4\u5927\u6570\u636e\u96c6\u6216\u66f4\u5927\u67b6\u6784\u4e0a\u505aMAE\u6210\u672c\u8fc7\u5927\u3002\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5176\u4ed6\u7684\u6570\u636e\u589e\u5f3a\uff0c\u4f7f\u5f97\u6548\u679c\u4e0d\u5dee\u4e14\u8bad\u7ec3\u901f\u5ea6\u5feb</p> </li> <li> <p>\u7b2c\u4e8c\u4e2a\u60f3\u6cd5\uff1a\u5bf9\u4e8eViT\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u65b0\u7684model\uff0c\u4f8b\u5982\u81ea\u6ce8\u610f\u529b\u3001MLP\u90fd\u662f\u53ef\u4ee5\u66ff\u6362\u7684\uff1b</p> </li> <li> <p>\u7b2c\u4e09\u4e2a\u60f3\u6cd5\uff1a\u5bf9\u4e8eBERT\uff0c\u4f7f\u7528\u7684\u662f\u5b8c\u5f62\u586b\u7a7a\u548c\u53e5\u5b50\u5bf9\u5339\u914d\uff0c\u662f\u5426\u53ef\u4ee5\u589e\u52a0\u989d\u5916\u7684\u4e00\u4e2a\u635f\u5931\u51fd\u6570\uff0c\u4f8b\u5982contrast learning</p> </li> <li> <p>\u6253\u8865\u4e01\u903b\u8f91\u8981\u4e32\u8d77\u6765</p> </li> <li> <p>\u6253\u8865\u4e01\u8981\u627e\u4e00\u7bc7\u8111\u6d1e\u6bd4\u8f83\u5927\u7684</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/","title":"MoCo","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#moco","title":"MoCo","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#_1","title":"\u77e5\u8bc6\u94fa\u57ab","text":"<ul> <li>\u5bf9\u6bd4\u5b66\u4e60</li> <li>\u4e09\u5f20\u56fe\u7247\uff1a\u9ad8\u5174\u7684\u4eba\u3001\u4e0d\u9ad8\u5174\u7684\u4eba\u3001\u72d7\uff0c\u6a21\u578b\u53ef\u4ee5\u8bc6\u522b\u51fa\u524d\u4e24\u8005\u5c5e\u4e8e\u540c\u4e00\u79cd\u7c7b\u522b</li> <li>\u5c06\u4e0a\u8ff0\u56fe\u7247\u7ecf\u8fc7\u7f51\u7edc\u6295\u5f71\u5230\u7279\u5f81\u7a7a\u95f4\uff0c\u5e0c\u671b\u524d\u4e24\u8005\u5411\u91cf\u5c3d\u53ef\u80fd\u62c9\u8fd1\uff0c\u800c\u4e0e\u7b2c\u4e09\u5f20\u5411\u91cf\u8ddd\u79bb\u62c9\u8fdc\uff08\u805a\u7c7b\uff09</li> <li>\u5728CV\u4e2d\u5c5e\u4e8e\u65e0\u76d1\u7763\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e9b\u5de7\u5999\u7684\u4ee3\u7406\u4efb\u52a1pretext task\uff0c\u4ece\u800c\u4eba\u4e3a\u5b9a\u4e49\u4e00\u4e9b\u89c4\u5219\uff0c\u6765\u5b9a\u4e49\u54ea\u4e9b\u56fe\u7247\u662f\u76f8\u4f3c\u7684\u54ea\u4e9b\u662f\u4e0d\u76f8\u4f3c\u7684</li> <li>\u6700\u5e38\u7528\u7684\u4ee3\u7406\u4efb\u52a1instance discrimination\u4e2a\u4f53\u5224\u522b\uff0c\u5728\u6570\u636e\u96c6\\(N\\)\u4e2d\u6709\u5982\u4e0b\u56fe\u7247\\(X_1,X_2,\\dots,X_n\\)\u3002\u7136\u540e\u4ece\u4e2d\u968f\u673a\u9009\u4e00\u5f20\u56fe\\(X_i\\)\uff0c\u5e76\u5bf9\u8be5\u56fe\u505a\u4efb\u610f\u5904\u7406\uff0c\u4f8b\u5982\u88c1\u526a\u7b49\uff0c\u5f97\u5230\\(X_i^1,X_i^2,\\dots\\)\uff0c\u8fd9\u4e9b\u5904\u7406\u540e\u7684\u88ab\u79f0\u4e3a\u6b63\u6837\u672c\uff0c\u800c\u6570\u636e\u96c6\u91cc\u5176\u4ed6\u4efb\u52a1\u90fd\u662f\u8d1f\u6837\u672c</li> <li>\u5bf9\u6bd4\u51fd\u6570\u5e38\u7528\u7684loss\u51fd\u6570\u6709NCE Loss</li> <li>\u7075\u6d3b\u6027\u5c31\u662f\u627e\u5230\u5b9a\u4e49\u6b63\u6837\u672c\u548c\u8d1f\u6837\u672c\u7684\u65b9\u6cd5\u5373\u53ef\uff0cNLP\u9886\u57df\u4e5f\u6709\u4f8b\u5982SimCSE\uff0c\u8fd8\u6709RGB\u56fe\u6df1\u5ea6\u56fe\u5f53\u6b63\u6837\u672c\uff0c\u6b63\u9762\u56fe\u548c\u80cc\u9762\u56fe\u5f53\u6b63\u6837\u672c\uff0c\u540e\u6765\u6269\u5c55\u5230\u591a\u6a21\u6001\uff0c\u5373CLIP\u6a21\u578b</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#_2","title":"\u6807\u9898","text":"<ul> <li> <p>Momemtum Contrast for Unsupervised Visual Represententation Learning</p> </li> <li> <p>MoCo\u662fCV\u9886\u57df\u4f7f\u7528\u5bf9\u6bd4\u5b66\u4e60\u7684\u91cc\u7a0b\u7891\u5de5\u4f5c</p> </li> <li> <p>\u65e0\u76d1\u7763\uff0c\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\u903c\u8fd1\u6709\u76d1\u7763\u7684\u57fa\u7ebf\u6a21\u578b\uff0c\u800c\u4e14\u5728\u5176\u4ed6\u4efb\u52a1\u4e2d\u751a\u81f3\u8d85\u8d8a\u4e86\u6709\u76d1\u7763\u7684\u9884\u8bad\u7ec3\u6a21\u578b</p> </li> <li> <p>\u52a8\u91cf\uff1a\u6307\u6570\u79fb\u52a8\u5e73\u5747\u3002\\(y_t\\)\u662f\u5f53\u524d\u8f93\u51fa\uff0c\\(y_{t-1}\\)\u662f\u4e0a\u4e00\u6b21\u8f93\u51fa\uff0c\\(m\\)\u662f\u8d85\u53c2\u6570\u52a8\u91cf\uff0c\\(x_t\\)\u662f\u5f53\u524d\u8f93\u5165\u3002\u5f53\\(m\\)\u8d8b\u5411\u4e8e1\u7684\u65f6\u5019\u51fd\u6570\u53d8\u5316\u6162   $$   y_t=m\\cdot y_{t-1}+(1-m)\\cdot x_t,m\\in[0,1]   $$</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#_3","title":"\u6458\u8981","text":"<ul> <li>\u6211\u4eec\u5c06\u5bf9\u6bd4\u5b66\u4e60\u770b\u505a\u662f\u5b57\u5178\u67e5\u8be2\u7684\u4efb\u52a1</li> <li>\u5b57\u5178\u6709\u4e24\u90e8\u5206\u7ec4\u6210</li> <li>\u4e00\u4e2a\u961f\u5217\uff0c\u4e0d\u9700\u8981\u505a\u68af\u5ea6\u56de\u4f20\uff0c\u6240\u4ee5\u53ef\u4ee5\u653e\u5f88\u591a\u8d1f\u6837\u672c\uff0c\u5b57\u5178\u53ef\u4ee5\u5f88\u5927</li> <li>\u4e00\u4e2a\u79fb\u52a8\u5e73\u5747\u7684\u7f16\u7801\u5668\uff0c\u8ba9\u5b57\u5178\u7684\u7279\u5f81\u5c3d\u91cf\u4fdd\u6301\u4e00\u81f4</li> <li>\u5927\u7684\u4e00\u81f4\u7684\u5b57\u5178\u5bf9\u65e0\u76d1\u7763\u5b66\u4e60\u6709\u597d\u5904</li> <li>\u4e3b\u8981\u4ecb\u7ecd\u6548\u679c</li> <li>\u5728ImageNet\u5206\u7c7b\u4efb\u52a1\uff0clinear protocol\uff08freeze backbone\uff0c\u53ea\u4fee\u6539\u5168\u8fde\u63a5\u5c42\uff09\u6548\u679c\u548c\u6709\u76d1\u7763\u7c7b\u4f3c</li> <li>MoCo\u5b66\u5230\u7684\u7279\u5f81\u53ef\u4ee5\u5f88\u597d\u5730\u8fc1\u79fb\u5230\u4e0b\u6e38\u4efb\u52a1\uff0c\u8d85\u8d8a\u4e86\u5f88\u591a\u6709\u76d1\u7763\u7684\u6a21\u578b</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#_4","title":"\u5f15\u8a00","text":"<ul> <li> <p>NLP\u9886\u57df\u7684\u65e0\u76d1\u7763\u5b66\u4e60\u6548\u679c\u5f88\u597d\uff0c\u4f46\u662fCV\u9886\u57df\u4e0d\u884c\uff0c\u539f\u56e0\u53ef\u80fd\u662f\u4e24\u8005\u7684\u4fe1\u53f7\u7a7a\u95f4\u4e0d\u540c\u3002\u8bed\u8a00\u4efb\u52a1\u662f\u79bb\u6563\u7684\u4fe1\u53f7\u7a7a\u95f4\uff08\u8bcd\u3001\u8bcd\u7f00\u7b49\uff09\uff0c\u5bb9\u6613\u5efa\u7acbtokenized\u5b57\u5178\uff08\u8868\u793a\u67d0\u4e2a\u8bcd\u8868\u793a\u67d0\u4e2a\u7279\u5f81\uff09\u3002\u89c6\u89c9\u662f\u9ad8\u7ef4\u8fde\u7eed\u4fe1\u606f\uff0c\u6ca1\u6709\u5f88\u5f3a\u8bed\u4e49\u4fe1\u606f\uff0c\u6bd4\u8f83\u96be\u6d53\u7f29\uff0c\u4e0d\u7b80\u6d01\uff0c\u4e0d\u9002\u5408\u5efa\u5b57\u5178</p> </li> <li> <p>\u7ed3\u6784\u56fe\uff1a</p> </li> <li> <p>\u7ea2\u8272\u7684\u5b57\u662f\u5bf9\u6bd4\u5b66\u4e60\u8303\u5f0f\u5185\u5bb9\u3002\u6211\u4eec\u5c06\\(X_1\\)\u901a\u8fc7\u4e0d\u540c\u7684\u53d8\u6362\\(T_1,T_2\\)\u5f62\u6210\\(X_1^1,X_1^2\\)\uff0c\u524d\u8005\u662fanchor\u951a\u70b9\uff0c\u540e\u8005\u662f\u6b63\u6837\u672cpositive\uff0c\u5176\u4ed6\u6837\u672c\u662f\u8d1f\u6837\u672cnegative\u3002\u951a\u70b9\u548c\u6b63\u6837\u672c\u5206\u522b\u901a\u8fc7\u7f16\u7801\u5668\\(E_{11}\\)\u548c\\(E_{12}\\)\u5f97\u5230\u7279\u5f81\\(f_{11}\\)\u548c\\(f_{12}\\)\uff08\u8fd9\u91cc\u7684Encoder\u53ef\u4ee5\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u6807\u53f7\u4e0d\u540c\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4e00\u6837\uff0cMoCo\u4e2d\u4e0d\u4e00\u6837\uff09\uff0c\u7136\u540e\u8d1f\u6837\u672c\u901a\u8fc7\\(E_{12}\\)\u5f97\u5230\\(f_2,f_3,\\dots,f_n\\)</p> </li> <li>\u672c\u6587\u8ba4\u4e3a\\(f_{12},f_2,f_3,\\dots,f_n\\)\u7ec4\u6210\u4e86\u4e00\u4e2a\u5b57\u5178\uff0c\u91cc\u9762\u90fd\u662fkey\uff0c\u91cd\u65b0\u6807\u53f7\u4e3a\\(k_0,k_1,\\dots\\)\u3002\u800c\\(f_{11}\\)\u79f0\u4e3aquery\uff0c\u6807\u4e3a\\(q\\)\uff0c\u4e8e\u662f\u5bf9\u6bd4\u5b66\u4e60\u53d8\u6210\u5b57\u5178\u67e5\u8be2\u95ee\u9898\u3002\u5c3d\u53ef\u80fd\u8ba9\\(f_{11}\\)\u548c\u5b83\u76f8\u8fd1\u7684\u7279\u5f81\u63a5\u8fd1\u3002\u53e6\u5916\\(X_1^1\\)\u8868\u793a\u4e3a\\(X^q\\)\uff0c\u5176\u4ed6\u4e3a\\(X^k\\)</li> </ul> <p></p> <ul> <li> <p>\u5b57\u5178\u8981</p> </li> <li> <p>\u5927\uff1a\u5305\u542b\u66f4\u591a\u89c6\u89c9\u4fe1\u606f</p> </li> <li> <p>\u4e00\u81f4\uff1a\u5b57\u5178\u4e2d\u7684key\u8981\u7528\u76f8\u540c\u6216\u76f8\u4f3c\u7684\u7f16\u7801\u5668\u5f97\u5230</p> </li> <li> <p>\u6846\u67b6\uff1a</p> </li> <li> <p>\u548c\u5bf9\u6bd4\u5b66\u4e60\u6700\u5927\u7684\u4e0d\u540c\u662fqueue\u961f\u5217\u3002\u961f\u5217\u53ef\u4ee5\u5f88\u5927\uff0c\u4f46\u662f\u6bcf\u6b21\u66f4\u65b0\u53ef\u4ee5\u53ea\u66f4\u65b0\u4e00\u4e2abatch size\u3002\u6700\u65e7\u7684mini batch\u51fa\u961f\u5217\uff0c\u65b0\u7684mini batch\u8fdb\u5165\u961f\u5217</p> </li> <li> <p>\u4e3a\u4e86\u4fdd\u6301\u4e00\u76f4\u6027\uff0c\u6240\u6709\u7684key\u90fd\u901a\u8fc7\u76f8\u4f3c\u7684encoder\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u52a8\u91cf\u7f16\u7801\u5668\u3002\u5047\u8bbeencoder\u7684\u53c2\u6570\u4e3a\\(\\theta_q\\)\uff0c\u52a8\u91cf\u7f16\u7801\u5668\u7684\u53c2\u6570\u662f\\(\\theta_k=m\\cdot \\theta_{k-1}+(1-m)\\cdot\\theta_q\\)</p> </li> </ul> <p></p> <p></p> <ul> <li>MoCo\u5f88\u7075\u6d3b\uff0c\u4ee3\u7406\u4efb\u52a1\u53ef\u4ee5\u6709\u5f88\u591a\u9009\u62e9\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662finstance discriminaton\u3002</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#_5","title":"\u7ed3\u8bba","text":"<ul> <li>MoCo\u4eceImageNet-1M\u7684\u6570\u636e\u96c6\u8fc1\u79fb\u5230Instagram-1B\u7684\u6570\u636e\u96c6\u4e0a\uff0c\u6548\u679c\u6ca1\u6709\u663e\u8457\u63d0\u5347\uff0c\u8003\u8651\u4fee\u6539\u4ee3\u7406\u4efb\u52a1\uff0c\u4f8b\u5982\u7ed3\u5408MAE</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#_6","title":"\u76f8\u5173\u5de5\u4f5c","text":"<ul> <li>\u65e0\u76d1\u7763\u5b66\u4e60\u548c\u81ea\u76d1\u7763\u5b66\u4e60\u4e00\u822c\u5c31\u8003\u8651\u4ee3\u7406\u4efb\u52a1\u548closs\u51fd\u6570</li> <li>Loss\u51fd\u6570</li> <li>\u5224\u522b\u5f0f\uff1a\u4f8b\u5982eight positions\uff0c\u5c06\u4e00\u5f20\u56fe\u6253\u6210\u4e5d\u5bab\u683c\uff0c\u7136\u540e\u7ed9\u5b9a\u4e2d\u95f4\u4e00\u683c\uff0c\u7136\u540e\u9884\u6d4b\u7ed9\u5b9a\u683c\u662f\u5728\u4e2d\u95f4\u683c\u7684\u54ea\u4e2a\u65b9\u4f4d\uff0c\u76f8\u5f53\u4e8e\u516b\u9009\u4e00\uff1b\u4ee3\u7406\u4efb\u52a1\u53d8\u6210\u4e86\u5206\u7c7b\u4efb\u52a1</li> <li>\u751f\u6210\u5f0f\uff1a\u4f8b\u5982Auto Encoder\uff0c\u8861\u91cf\u539f\u56fe\u548c\u65b0\u751f\u6210\u56fe\u4e4b\u95f4\u7684\u5dee\u5f02</li> <li>\u5bf9\u6bd4\u5b66\u4e60\uff1a\u8868\u793a\u7a7a\u95f4\u91cc\u5404\u4e2a\u6837\u672c\u5bf9\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u5bf9\u6bd4\u5b66\u4e60\u4e0e\u4e0a\u9762\u6700\u5927\u7684\u4e0d\u540c\u662f\u76ee\u6807\u4e00\u76f4\u5728\u6539\u53d8\uff0c\u56e0\u4e3a\u76ee\u6807\u662fencoder\u51fa\u6765\u7684key\uff0cencoder\u7684\u53c2\u6570\u5728\u53d8\u5316\uff0c\u6240\u4ee5\u76ee\u6807\u4e5f\u5728\u53d8\u5316</li> <li>\u5bf9\u6297\u5b66\u4e60\uff1a\u4e3b\u8981\u662f\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02</li> <li>\u4ee3\u7406\u4efb\u52a1</li> <li>\u53bb\u566a\u91cd\u5efa\u6574\u5f20\u56fe\u3001\u91cd\u5efa\u67d0\u4e2apatch\u3001\u4e0a\u8272\u91cd\u5efa\u67d0\u4e2a\u901a\u9053</li> <li>\u751f\u6210\u4f2a\u6807\u7b7e\uff0c\u6570\u636e\u589e\u5e7f\u3001\u4e5d\u5bab\u683c\u3001\u805a\u7c7b\u7b49</li> <li>\u4ee3\u7406\u4efb\u52a1\u53ef\u4ee5\u548c\u5bf9\u6bd4\u5b66\u4e60Loss\u51fd\u6570\u914d\u5bf9\u4f7f\u7528</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#_7","title":"\u65b9\u6cd5","text":"<ul> <li>\u5047\u8bbe\u5b57\u5178\u91cc\u5bf9\u4e8equery \\(q\\) \u53ea\u6709\u4e00\u4e2a\u6b63\u6837\u672c\uff08\u4e4b\u540e\u4efb\u52a1\u8bc1\u660e\u4f7f\u7528\u591a\u4e2a\u6b63\u6837\u672c\u5bf9\u6709\u53ef\u80fd\u63d0\u5347\u6548\u679c\uff09\uff0c\u79f0\u4e3a\\(k_+\\)\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u76ee\u6807\u51fd\u6570\u662f InfoNCE\uff08NCE\u662fNoise Contrasive Estimation\uff09</li> </ul> <p>Softmax\uff1a   $$   \\frac{\\exp(z_+)}{\\sum\\limits_{i=0}^k\\exp(z_i)}   $$   \u4ea4\u53c9\u71b5\uff1a   $$   -\\log\\frac{\\exp(z_+)}{\\sum\\limits_{i=0}^k\\exp(z_i)}   $$   \u4ee5\u4e0a\u7684 \\(k\\) \u8868\u793a\u6570\u636e\u96c6\u7684\u7c7b\u522b\u3002\u5728\u4ee3\u7406\u4efb\u52a1 instance discrimination \u4e2d \\(k\\) \u4f1a\u8fbe\u5230\u51e0\u767e\u4e07\uff08ImageNet\uff09</p> <p>NCE\u7b80\u5316\u7c7b\u522b\u6570\u91cf\u4e3a\u4e24\u7c7b\uff0c\u4e00\u4e2a\u662fdata\u4e00\u4e2a\u662fnoise\uff0c\u540c\u65f6\u505a\u4f30\u8ba1\u8fd1\u4f3c\uff08E\u8868\u793aestimation\uff09\uff0c\u5b57\u5178\u8d8a\u5927\u80fd\u63d0\u4f9b\u8d8a\u597d\u7684\u8fd1\u4f3c\u3002InfoNCE\u89c9\u5f97\u4e8c\u5206\u7c7b\u4e0d\u591f\uff0c\u6240\u4ee5\u5c31\u4f7f\u7528\u5982\u4e0b\u516c\u5f0f\uff1a</p> <p></p> <p>\\(\\tau\\)\u662f\u6e29\u5ea6\u8d85\u53c2\u6570\uff0c\u7528\u6765\u63a7\u5236\u5206\u5e03\u5f62\u72b6\uff0c\\(\\tau\\)\u5927\u7684\u65f6\u5019\u5206\u5e03\u53d8peek\u5c31\u8d8a\u96c6\u4e2d\u3002\u6e29\u5ea6\u592a\u5927\uff0c\u6240\u6709\u8d1f\u6837\u672c\u90fd\u4e00\u89c6\u540c\u4ec1\uff0c\u5b66\u4e60\u6ca1\u6709\u8f7b\u91cd\uff1b\u53cd\u4e4b\u8fc7\u5c0f\u5c31\u4f1a\u53ea\u5173\u6ce8\u7279\u522b\u7279\u522b\u56f0\u96be\u7684\u6837\u672c\uff0c\u5bfc\u81f4\u6a21\u578b\u5f88\u96be\u6536\u655b\u5b66\u5230\u7684\u7279\u5f81\u4e0d\u597d\u6cdb\u5316\u3002\u8fd9\u91cc\u7684\\(K\\)\u662f\u8d1f\u6837\u672c\u7684\u6570\u91cf\u3002</p> <ul> <li> <p>\u961f\u5217\u5b57\u5178</p> </li> <li> <p>\u5b57\u5178\u662f\u961f\u5217\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2amini batch\u7f16\u7801\u540e\u653e\u8fdb\u6765\uff0c\u6700\u8001\u7684\u5c31\u51fa\u53bb\uff0c\u8fd9\u610f\u5473\u7740\u5b57\u5178\u91cc\u9762\u7684key\u6709\u7684\u662f\u7528\u4e0d\u540c\u7684encoder\u7f16\u7801\u7684</p> </li> <li> <p>\u52a8\u91cf\u66f4\u65b0</p> </li> <li> <p>\u5f53\u5b57\u5178\u5f88\u5927\u7684\u65f6\u5019\uff0c\u5f88\u96be\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u53bb\u66f4\u65b0key encoder\uff08\u4e0d\u7406\u89e3\uff09</p> <p>GPT\uff08\u4e0d\u4e00\u5b9a\u51c6\u786e\uff09\uff1a</p> <p>\u5f53\u5b57\u5178\u5f88\u5927\u65f6\uff0ckey encoder\u7684\u53c2\u6570\u6570\u91cf\u4f1a\u975e\u5e38\u5e9e\u5927\uff0c\u5bfc\u81f4\u53cd\u5411\u4f20\u64ad\u9700\u8981\u8ba1\u7b97\u5927\u91cf\u7684\u68af\u5ea6\uff0c\u8ba1\u7b97\u91cf\u975e\u5e38\u5927\u3002\u6b64\u5916\uff0c\u7531\u4e8ekey encoder\u662f\u4e0d\u53ef\u5fae\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u901a\u8fc7\u81ea\u52a8\u5fae\u5206\u6765\u8ba1\u7b97\u5176\u68af\u5ea6\uff0c\u800c\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5982\u8fd1\u4f3c\u68af\u5ea6\u6216\u79bb\u6563\u5316\u68af\u5ea6\u7b49\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7cbe\u5ea6\u548c\u6548\u7387\u90fd\u4e0d\u5982\u81ea\u52a8\u5fae\u5206\uff0c\u56e0\u6b64\u66f4\u65b0key encoder\u7684\u6548\u7387\u4f1a\u53d7\u5230\u5f88\u5927\u7684\u9650\u5236\u3002</p> </li> <li> <p>query encoder\u4e00\u76f4\u5728\u66f4\u65b0\uff0c\u4f46\u662fkey encoder\u4e0d\u66f4\u65b0\uff0c\u6240\u4ee5\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5c06query encoder\u590d\u5236\u5230key encoder\u4e2d\uff0c\u4f46\u7ed3\u679c\u4e0d\u597d\uff0c\u4f5c\u8005\u8ba4\u4e3a\u662f\u5feb\u901f\u6539\u53d8\u7684key encoder\u7834\u574f\u4e86\u4e00\u81f4\u6027</p> </li> <li> <p>\u6240\u4ee5\u4f7f\u7528\u52a8\u91cf\u66f4\u65b0\uff1a</p> <p></p> </li> <li> <p>\u63a2\u8ba8\u4e4b\u524d\u7684\u67b6\u6784\u5b58\u5728\u7684dictionary size\u548cconsistency\u7684\u95ee\u9898</p> </li> <li> <p>\u7aef\u5230\u7aef\uff1a\u5b57\u5178\u5927\u5c0f\u548cbatch size\u76f8\u7b49\uff0c\u53ef\u4ee5\u68af\u5ea6\u56de\u4f20\uff0c\u4f18\u70b9\u7f16\u7801\u5668\u5b9e\u65f6\u66f4\u65b0\u4e00\u81f4\u6027\u597d\uff0c\u7f3a\u70b9\u662f\u5b57\u5178\u4e0d\u80fd\u8fc7\u5927</p> <p></p> </li> <li> <p>memory bank\uff1a\u5bf9\u6574\u4e2a\u6570\u636e\u96c6\u90fd\u62bd\u7279\u5f81\uff08ImageNet\u6709128\u4e07\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u7279\u5f81128\u7ef4\uff0c\u4ec5\u9700\u8981600M\u5927\u5c0f\uff09\uff0c\u8bad\u7ec3\u65f6\u968f\u673a\u62bd\u6837\u5f53\u505a\u5b57\u5178\u3002</p> <p>\u8bad\u7ec3\u7684\u903b\u8f91\uff1a128\u4e07\u7ef4\u7684memory bank\u4e2d\u968f\u673a\u62bd\u53d6\u51e0\u4e2akey\u7136\u540e\u6c42loss\u53cd\u5411\u4f20\u64ad\u66f4\u65b0key encoder\uff0c\u7136\u540e\u518d\u91cd\u65b0\u7b97key\u66f4\u65b0memory\u4e2d\u90a3\u51e0\u4e2akey\u7684\u503c\uff0c\u5bfc\u81f4\u4e00\u81f4\u6027\u5f88\u4f4e\u3002\u540c\u65f6memory bank\u8fc7\u5927\u5bfc\u81f4\u8bad\u7ec3\u6bcf\u4e2aepoch\uff08\u904d\u5386128\u4e07\u7684\u7279\u5f81\uff09\u540e\u518d\u9009\u7684key\u662f\u975e\u5e38\u8001\u7684key\u3002</p> <p></p> </li> <li> <p>\u4f2a\u4ee3\u7801\uff1a\u6ce8\u610f\u4ea4\u53c9\u71b5\u8fd9\u91cc\u6709\u4e2a<code>labes = zeros(N)</code>\u662f\u56e0\u4e3a0\u53f7\u4f4d\u7f6e\u4e0a\u7684\u662fground truth \\(k_+\\)\u3002</p> </li> </ul> <p></p> <ul> <li>BN\u572890%\u7684\u60c5\u51b5\u4e0b\u90fd\u4e0d\u597d\uff0c\u4e14\u5f88\u96bedebug</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/11-MoCo/#_8","title":"\u5b9e\u9a8c","text":"<ul> <li>Linear Classification Protocol</li> <li>\u5728Freeze backbone\u7684\u60c5\u51b5\u4e0b\uff0c\u5b66\u4e60\u7387\u8bbe\u7f6e\u6210\u4e8630\u6700\u4f18\uff0c\u6240\u4ee5\u65e0\u76d1\u7763\u5b66\u4e60\u548c\u5bf9\u6bd4\u5b66\u4e60\u53ef\u4ee5\u8003\u8651\u8f83\u5927\u7684\u5b66\u4e60\u7387</li> <li>\u5728\u5f88\u591a\u4efb\u52a1\u4e0a\u90fd\u8d85\u8fc7\u6709\u76d1\u7763\u6a21\u578b\uff0c\u4f46\u662f\u5728\u5b9e\u4f8b\u5206\u5272\u548c\u8bed\u4e49\u5206\u5272\u4e0a\u4e0d\u5f3a\uff0c\u6000\u7591\u5bf9\u6bd4\u5b66\u4e60\u4e0d\u592a\u9002\u5408\u505adense prediction\u7684task\uff0c\u5c31\u662f\u6bcf\u4e2a\u50cf\u7d20\u70b9\u90fd\u8981\u9884\u6d4b\u7684\u4efb\u52a1\uff0c\u540e\u6765\u51fa\u73b0\u4e86dense contrast\u548cpixel contrast\u7b49\u5de5\u4f5c\u3002</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/12-ContrastLearning/","title":"\u5bf9\u6bd4\u5b66\u4e60","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/12-ContrastLearning/#_1","title":"\u5bf9\u6bd4\u5b66\u4e60","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/12-ContrastLearning/#_2","title":"\u9636\u6bb5","text":"<ul> <li>\u767e\u82b1\u9f50\u653e</li> <li>CV\u53cc\u96c4</li> <li>\u4e0d\u7528\u8d1f\u6837\u672c</li> <li>Transformer</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/12-ContrastLearning/#_3","title":"\u767e\u82b1\u9f50\u653e","text":"<ul> <li> <p>InstDisc</p> </li> <li> <p>\u6807\u9898\uff1aUnsupervised Feature Learning via Non-Parametric Instance Discrimination</p> </li> <li> <p>\u4e2a\u4f53\u5224\u522b\u4efb\u52a1+Memory Bank</p> </li> <li> <p>\u60f3\u6cd5\uff1a\u5728\u6709\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u5f88\u591a\u56fe\u7247\u5c31\u662f\u5f88\u76f8\u4f3c\uff0c\u6ca1\u6709\u8bed\u4e49\u4fbf\u7b7e\u4e5f\u53ef\u4ee5</p> </li> <li> <p>\u5b66\u4e60\u5230\u7279\u5f81\uff0c\u7136\u540e\u8ba9\u4e0d\u540c\u7c7b\u522b\u7684\u56fe\u50cf\u5728\u8bed\u4e49\u7a7a\u95f4\u4e2d\u5c3d\u53ef\u80fd\u5206\u5f00</p> <p></p> </li> <li> <p>InvaSpread</p> </li> <li> <p>\u6807\u9898\uff1aUnsupervised Embedding Learning via Invariant and Spreading Instance Feature</p> </li> <li> <p>\u88ab\u8ba4\u4e3a\u662fSimCLR\u7684\u524d\u8eab</p> </li> <li> <p>MoCo\u4e2d\u63d0\u5230\u7684\u7aef\u5230\u7aef\u7684\u5b66\u4e60\u65b9\u5f0f\uff0c\u53ea\u7528\u4e00\u4e2a\u7f16\u7801\u5668\uff0c\u5728\u4e00\u4e2aminibatch\u4e2d\u627e\u6b63\u8d1f\u6837\u672c</p> </li> <li> <p>Invariant\u76f8\u4f3c\u56fe\u7247\u7279\u5f81\u4e0d\u53d8\u5f62\uff0cSpreading\u4e0d\u540c\u56fe\u7247\u7279\u5f81\u4e0d\u540c</p> <p></p> </li> <li> <p>\u4e5f\u4f7f\u7528InstDisc\u4e2a\u4f53\u5224\u522b\u7684\u4ee3\u7406\u4efb\u52a1\uff0c\u4e3b\u8981\u662f\u770b\u6b63\u8d1f\u6837\u672c\u7684\u9009\u62e9</p> <ul> <li>\u5bf9\u4e8e\\(x_1\\)\uff0c\u6b63\u6837\u672c\u662f\\(\\hat{x}_1\\)\uff0c\u5176\u4ed6\u672a\u589e\u5f3a\u7684\u548c\u589e\u5f3a\u7684\u56fe\u7247\u90fd\u662f\u8d1f\u6837\u672c</li> </ul> <p></p> </li> <li> <p>\u6ca1\u6709SimCLR\u6548\u679c\u597d\u7684\u539f\u56e0\uff1a\u5b57\u5178\u4e0d\u591f\u5927</p> </li> <li> <p>CPC</p> </li> <li> <p>\u6807\u9898\uff1aRepresentation Learning with Contrastive Predictive Coding</p> </li> <li> <p>\u65b0\u7684\u4ee3\u7406\u4efb\u52a1\uff0c\u4e2a\u4f53\u5224\u522b\u662f\u5224\u522b\u5f0f\u4efb\u52a1\uff0c\u90a3\u4e00\u5b9a\u5b58\u5728\u751f\u6210\u5f0f\u4efb\u52a1</p> </li> <li> <p>\u97f3\u9891\u3001\u56fe\u7247\u3001\u6587\u5b57\u3001\u5f3a\u5316\u5b66\u4e60\u90fd\u53ef\u4ee5\u7528</p> </li> <li> <p>\u601d\u8def\uff1a\u5c06\u4e4b\u524d\u7684\u8f93\u5165\u901a\u8fc7encoder\u53d8\u6210\u7279\u5f81\\(z_{t-3},z_{t-2},\\dots,z_{t}\\)\uff0c\u7136\u540e\u5582\u7ed9\u81ea\u56de\u5f52\u7684\u6a21\u578b\u4f8b\u5982RNN\u6216\u8005LSTM\uff0c\u7136\u540e\u5f97\u5230\\(c_t\\)\uff08context representation\uff0c\u4ee3\u8868\u4e0a\u4e0b\u6587\u7684\u7279\u5f81\uff09\uff0c\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u7684\u7279\u5f81\u5e94\u8be5\u53ef\u4ee5\u9884\u6d4b\\(z_{t+1}\\)\u3002</p> <p>\u5bf9\u6bd4\u5b66\u4e60\uff1a\u9884\u6d4b\u662fquery\uff0c\u672a\u6765\u65f6\u523b\u7f16\u7801\u540e\u7684\\(z_{t+1}\\)\u7b49\u662f\u6b63\u6837\u672c\uff0c\u4efb\u610f\u8f93\u5165\u901a\u8fc7\u7f16\u7801\u5668\u90fd\u662f\u8d1f\u6837\u672c</p> <p></p> </li> <li> <p>CMC</p> </li> <li> <p>\u6807\u9898\uff1aContrastive Multiview Coding</p> </li> <li> <p>\u4e00\u4e2a\u7269\u4f53\u7684\u5f88\u591a\u89c6\u89d2\u90fd\u53ef\u4ee5\u5f53\u505a\u662f\u6b63\u6837\u672c</p> </li> <li> <p>\u6458\u8981\u5f88\u597d\uff1a\u4eba\u611f\u77e5\u4e16\u754c\u6709\u975e\u5e38\u591a\u65b9\u5f0f\uff0c\u89c6\u89c9\u542c\u89c9\u7b49\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u5b66\u4e60\u5176\u4e2d\u5f3a\u5927\u7684mutual information\uff08\u6240\u6709\u89c6\u89d2\u4e0b\u7684\u5173\u952e\u56e0\u7d20\uff09</p> <p></p> </li> <li> <p>\u4f8b\u5b50\uff1a\u4f7f\u7528NYU RGBD\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u62ec\u539f\u59cb\u56fe\u7247\u3001\u6df1\u5ea6\u56fe\u3001\u5206\u5272\u56fe\u7b49\uff0c\u8fd9\u4e9b\u4e92\u4e3a\u6b63\u6837\u672c</p> <p></p> </li> <li> <p>\u5f88\u65e9\u505a\u591a\u89c6\u89d2\u7684\u5bf9\u6bd4\u5b66\u4e60\uff0c\u8bc1\u660e\u591a\u89c6\u89d2\u548c\u591a\u6a21\u6001\u7684\u53ef\u884c\u6027\uff0c\u540e\u6765OpenAI\u51fa\u4e86CLIP\u6a21\u578b\uff0c\u56fe\u7247\u548c\u6587\u672c\u662f\u6b63\u6837\u672c\u5bf9\u3002CMC\u539f\u73ed\u4eba\u9a6c\u505a\u4e86\u4e00\u7bc7\u84b8\u998f\u7684\u5de5\u4f5c\uff0c\u65e0\u8bba\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u7f51\u7edc\uff0c\u540c\u4e00\u4e2a\u56fe\u7247\u90fd\u5e94\u8be5\u5f97\u5230\u7c7b\u4f3c\u7684\u7279\u5f81\uff0c\u6211\u4eec\u5e0c\u671b\u8ba9teacher\u6a21\u578b\u548cstudent\u6a21\u578b\u7684\u8f93\u51fa\u5c3d\u53ef\u80fd\u76f8\u4f3c\uff0c\u4f7fteacher\u548cstudent\u5f62\u6210\u4e00\u4e2a\u6b63\u6837\u672c\u5bf9</p> </li> <li> <p>\u4f7f\u7528\u51e0\u4e2a\u89c6\u89d2\u53ef\u80fd\u5f97\u914d\u51e0\u4e2a\u7f16\u7801\u5668\uff0c\u4f46\u662fCLIP\u4f7f\u7528\u7684\u662fBERT+ViT\uff08\u5e95\u5c42\u90fd\u662fTransformer\uff09\uff0c\u6240\u4ee5\u53ef\u80fdTransformer\u80fd\u591f\u7edf\u4e00\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/12-ContrastLearning/#cv","title":"CV\u53cc\u96c4","text":"<ul> <li> <p>MoCo</p> </li> <li> <p>\u5c06\u5bf9\u6bd4\u5b66\u4e60\u8f6c\u5316\u6210\u5b57\u5178\u67e5\u8be2\u95ee\u9898</p> </li> <li> <p>\u4f7f\u7528Res50\u7b49</p> </li> <li> <p>SimCLR</p> </li> <li> <p>\u6807\u9898\uff1aA Simple Framework for Contrastive Learning of Visual Representations</p> </li> <li> <p>\u65b9\u6cd5\uff1a\u548cInvaSpread\u975e\u5e38\u7c7b\u4f3c\uff0c\u5bf9\u4e8ebatch size \\(N\\)\uff0c\u6b63\u6837\u672c\u662f\u6570\u636e\u589e\u5f3a\u7684\uff0c\u8d1f\u6837\u672c\u662f\u6570\u636e\u589e\u5f3a\u548c\u6ca1\u6709\u6570\u636e\u589e\u5f3a\u7684\uff0c\u4e3b\u8981\u7684\u4e0d\u540c\u662f\u52a0\u4e86\u4e2a\u6295\u5f71\u5c42\\(g(\\cdot)\\)\uff0c\u5176\u5b9e\u5c31\u662fMLP\uff0c\u4f46\u662f\u8fd9\u4e00\u4e2a\u5c42\u8ba9\u6548\u679c\u63d0\u534710\u4e2a\u70b9\uff0c\u4f46\u662f\u8fd9\u4e2aprojection\u53ea\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u7528\uff0c\u5728\u4e0b\u6e38\u4efb\u52a1\u7684\u65f6\u5019\u628aprojection\u53bb\u6389\u4e86</p> <p></p> </li> <li> <p>\u548cInvaSpread\u7684\u533a\u522b</p> <ul> <li>\u6570\u636e\u589e\u5f3a\uff1a\u80fd\u7528\u7684\u65b9\u6cd5\u90fd\u7528\u4e86</li> </ul> <p></p> <ul> <li> <p>\u6295\u5f71\u5c42\uff1a</p> </li> <li> <p>MLP\u4e2d\u662fFC+ReLU\u662fNon-Linear\uff0c\u53ea\u6709FC\u662fLinear\uff0c\u90fd\u4e0d\u7528\u662fNone\uff0c\u53ef\u4ee5\u770b\u5230\u6548\u679c\u5bf9\u6bd4</p> </li> <li>\u7279\u5f81\u7ef4\u5ea6\u9ad8\u6ca1\u6709\u5fc5\u8981</li> </ul> <p></p> <ul> <li>\u66f4\u5927\u7684batch size\u548c\u66f4\u4e45\u65f6\u95f4</li> </ul> </li> <li> <p>MoCo v2</p> </li> <li> <p>\u6807\u9898\uff1aImproved Baselines with Momentum Contrastive Learning</p> </li> <li> <p>\u4f5c\u8005\u53d1\u73b0SimCLR\u4e2d\u7684\u4e1c\u897f\u662f\u5373\u63d2\u5373\u7528\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u52a0\u4e0a\uff0c\u4e3b\u8981\u662fMLP head\u548c\u6570\u636e\u589e\u5f3a</p> </li> <li> <p>\u6570\u636e\uff1a</p> <p></p> <p></p> </li> <li> <p>MoCo\u6bd4SimCLR\u7684\u4f18\u8d8a\u6027\uff0c\u5c31\u662f\u786c\u4ef6</p> <p></p> </li> <li> <p>SimCLR v2</p> </li> <li> <p>\u6807\u9898\uff1aBig Self-Supervised Models are Strong Semi-Supervised Learners</p> </li> <li> <p>\u5927\u7684\u81ea\u76d1\u7763\u6a21\u578b\u9002\u5408\u505a\u534a\u76d1\u7763\u5b66\u4e60</p> </li> <li> <p>\u67b6\u6784\u56fe</p> <ul> <li>\u5de6\u8fb9\uff08\u5c31\u662fSimCLR v2\uff09\u662f\u7528\u81ea\u76d1\u7763\u5bf9\u6bd4\u5b66\u4e60\u7684\u65b9\u6cd5\u8bad\u7ec3\u51fa\u4e00\u4e2a\u5927\u6a21\u578b\u51fa\u6765</li> <li>\u4e2d\u95f4\u662f\u7528\u4e00\u5c0f\u90e8\u5206\u5c0f\u7684\u6807\u7b7e\u505a\u6709\u76d1\u7763\u7684\u5fae\u8c03\uff0c\u5fae\u8c03\u5b8c\u83b7\u5f97\u4e00\u4e2ateacher\u6a21\u578b\uff0c\u7136\u540eteacher\u6a21\u578b\u751f\u6210\u5f88\u591a\u4f2a\u6807\u7b7e</li> <li>\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u66f4\u591a\u7684\u6570\u636e\u4e0a\u505a\u65e0\u6807\u7b7e\u7684\u81ea\u5b66\u4e60</li> <li>\u542f\u53d1\u4e8egoogle 19\u5e74\u4e00\u7bc7noisy student\u7684\u5de5\u4f5c\uff1a\u73b0\u5728ImageNet\u4e0a\u8bad\u7ec3\u4e00\u4e2ateacher\u6a21\u578b\uff0c\u7136\u540eJFT 300M\u6570\u636e\u96c6\u4e0a\u751f\u6210\u5f88\u591a\u4f2a\u6807\u7b7e\uff0c\u7136\u540e\u4e00\u8d77\u8bad\u7ec3\u4e86student\u6a21\u578b\uff0c\u8fd9\u4e2astudent\u9738\u5360ImageNet SOTA 1\u5e74\u65f6\u95f4\uff08\u88abViT\u6253\u8d25\uff09</li> </ul> <p></p> <p>Task-agnostic\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u6307\u7684\u662f\u4e00\u79cd\u7b97\u6cd5\u6216\u6a21\u578b\uff0c\u5b83\u4e0d\u9488\u5bf9\u7279\u5b9a\u7684\u4efb\u52a1\u8fdb\u884c\u4f18\u5316\uff0c\u800c\u662f\u5177\u6709\u901a\u7528\u6027\u548c\u9002\u5e94\u6027\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u591a\u79cd\u4e0d\u540c\u7684\u4efb\u52a1\u548c\u9886\u57df\u3002\u8fd9\u79cd\u7b97\u6cd5\u6216\u6a21\u578b\u901a\u5e38\u5177\u6709\u66f4\u5e7f\u6cdb\u7684\u9002\u7528\u6027\u548c\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4f1a\u8fc7\u5ea6\u62df\u5408\u4efb\u4f55\u7279\u5b9a\u4efb\u52a1\u7684\u7279\u5b9a\u6570\u636e\u96c6\u3002\u4f8b\u5982\uff0c\u4e00\u4e9b\u5e38\u89c1\u7684task-agnostic\u6a21\u578b\u5305\u62ec\u7ebf\u6027\u56de\u5f52\u3001\u51b3\u7b56\u6811\u3001\u968f\u673a\u68ee\u6797\u7b49\u3002</p> </li> <li> <p>\u548cSimCLR v1\u7684\u533a\u522b</p> <ul> <li>\u66f4\u5927\u7684\u6a21\u578b Res152</li> <li>MLP\u4ece\u4e00\u5c42\u53d8\u62102\u5c42</li> <li>\u52a8\u91cf\u7f16\u7801\u5668\uff1a\u63d0\u5347\u4e0d\u5927\uff0c\u4e00\u4e2a\u70b9\uff0c\u539f\u56e0\u662f\u672c\u6765minibatch\u5c31\u5df2\u7ecf\u5f88\u5927\u4e86\uff0c\u8d1f\u6837\u672c\u5df2\u7ecf\u76f8\u5f53\u591a\u4e86</li> </ul> </li> <li> <p>SwAV</p> </li> <li> <p>\u6807\u9898\uff1aUnsupervised Learning of Visual Features by Contrasting Cluster Assignment</p> </li> <li> <p>Sw\u662fSwap\uff0cA\u662fAssignment\uff0cV\u662fViews</p> </li> <li> <p>\u5e0c\u671b\u7528\u4e00\u4e2a\u89c6\u89d2\u7684\u7279\u5f81\u53bb\u9884\u6d4b\u53e6\u4e00\u4e2a\u89c6\u89d2\u7684\u7279\u5f81</p> </li> <li> <p>\u5bf9\u6bd4\u5b66\u4e60+\u805a\u7c7b</p> </li> <li> <p>\u67b6\u6784\u56fe</p> <p>\u4e4b\u524d\u7684\u8d1f\u6837\u672c\u53ea\u662f\u8fd1\u4f3c\uff08\u4f8b\u5982MoCo\u4ece128\u4e07\u4e2a\u7279\u5f81\u4e2d\u53d665536\u4e2a\u505a\u8d1f\u6837\u672c\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u548c\u805a\u7c7b\u4e2d\u5fc3\u6bd4\u3002</p> <p>\u805a\u7c7b\u4e2d\u5fc3\u662fPrototypes \\(c\\)\uff0c\u5927\u5c0f \\(D\\times K\\)\uff08\\(D\\)\u662f\u7279\u5f81\u7ef4\u5ea6\uff0c\\(K\\)\u662f\u805a\u7c7b\u4e2d\u5fc3\u4e2a\u6570\uff09\uff0c\\(z\\)\u5927\u5c0f\\(B\\times D\\)\uff0c\\(q\\)\u5927\u5c0f\\(B\\times K\\)\u3002</p> <p></p> </li> <li> <p>\u805a\u7c7b\u7684\u65b9\u6cd5\u4f7f\u7528\u7684\u662fdeep cluster\u3001deep cluster 2</p> </li> <li> <p>\u4f7f\u7528\u5230\u4e00\u4e2atrick\uff1amulti-crop\uff0c\u6b63\u6837\u672c\u53d6\u591a\u4e2acrop\uff0c\u73b0\u5728\u53d62\u4e2a\u957f\u5bbd160\u548c4\u4e2a\u957f\u5bbd96\u7684\u53ef\u4ee5\u6709\u63d0\u9ad8</p> </li> <li> <p>CPC v2</p> </li> <li>\u7528\u4e86\u66f4\u5927\u7684\u6a21\u578b\uff0c\u66f4\u5927\u56fe\u50cf\u5757\uff0c\u66f4\u591a\u6570\u636e\u589e\u5f3a\uff0cBN\u6362\u6210LN</li> <li>InfoMin</li> <li>\u4e0d\u80fd\u4e00\u5473\u6700\u5927\u5316mutual information</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/12-ContrastLearning/#_4","title":"\u4e0d\u7528\u8d1f\u6837\u672c","text":"<ul> <li> <p>BYOL</p> </li> <li> <p>\u6807\u9898\uff1aBootstrap Your Own Latent: A New Approach to Self-Supervised Learning</p> </li> <li> <p>Bootstrap\u6539\u9020\uff0cLatent\u7279\u5f81\u3002\u81ea\u5df1\u8ddf\u81ea\u5df1\u5b66\uff0c\u5de6\u811a\u8e29\u53f3\u811a</p> </li> <li> <p>\u4e0d\u4f7f\u7528\u8d1f\u6837\u672c\u3002\u5728\u4e00\u822c\u7684\u5bf9\u6bd4\u5b66\u4e60\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u8d1f\u6837\u672c\uff0c\u90a3Loss Function\u7684\u76ee\u7684\u5c31\u662f\u8ba9\u6240\u6709\u6b63\u6837\u672c\u90fd\u76f8\u4f3c\uff0c\u90a3\u4e48\u5c31\u5b58\u5728\u4e00\u4e2a\u6377\u5f84\u89e3\uff0c\u5373\u65e0\u8bba\u7ed9\u4efb\u4f55\u8f93\u5165\u90fd\u8fd4\u56de\u76f8\u540c\u8f93\u51fa\uff0c\u6b64\u65f6\u6240\u6709\u6b63\u6837\u672c\u4e00\u5b9a\u76f8\u4f3c\uff0c\u4e00\u65e6\u6a21\u578b\u8eba\u5e73\u5c31\u79f0\u4e3amodel collapse / learning collapse\u3002</p> </li> <li> <p>\u67b6\u6784\u56fe</p> <ul> <li>\\(f_{\\theta}\\)\u548c\\(f_{\\xi}\\)\u662f\u76f8\u540c\u7684\u6a21\u578b\uff0c\u4f46\u662f\u53c2\u6570\u4e0d\u540c\uff0c\u540e\u8005\u4f7f\u7528\u52a8\u91cf\u66f4\u65b0</li> <li>\u5339\u914d\u95ee\u9898\u6362\u6210\u9884\u6d4b\u95ee\u9898\uff1a\u5bf9\\(z_{\\theta}\\)\u4f5c\u7528\\(q_{\\theta}\\)\uff0c\u7136\u540e\u6765\u9884\u6d4b\\(z_{\\xi}'\\)\uff0c\u81ea\u5df1\u9884\u6d4b\u81ea\u5df1\u5c31\u5b66\u8d77\u6765\u4e86</li> <li>\u4e00\u4e2a\u89c6\u89d2\u7684\u7279\u5f81\u53bb\u9884\u6d4b\u53e6\u4e00\u4e2a\u89c6\u89d2\u7684\u7279\u5f81</li> <li>\u6700\u540e\u53ea\u7559\u4e0b\\(f_{\\theta}\\)\uff0c\u4ee5\u53ca\u8f93\u51fa\\(y_{\\theta}\\)</li> <li>Loss\u51fd\u6570\u662fMSE</li> </ul> <p></p> </li> <li> <p>\u535a\u5ba2\u89e3\u91ca\uff1aUnderstanding Self-Supervised and Contrastive Learning with \"Bootstrap Your Own Latent\" (BYOL) - generally intelligent</p> </li> <li> <p>SimCLR\u4f7f\u7528\u4e86BN\u4e14\u6709\u4e24\u4e2a</p> <p></p> <p>MoCo\u6ca1\u6709BN</p> <p></p> <p>BYOL\uff1a\u53ea\u6709\u4e00\u4e2aBN</p> <p></p> </li> <li> <p>\u6d88\u878d\u5b9e\u9a8c\u8bc1\u660e\u662fBN\u7684\u6548\u679c</p> <p></p> </li> <li> <p>BN\u7684\u6548\u679c\u662f\u7b97Batch\u7684\u5747\u503c\u65b9\u5dee\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5728\u7b97\u67d0\u4e2a\u6b63\u6837\u672cLoss\u7684\u65f6\u5019\u5176\u5b9e\u4e5f\u770b\u5230\u4e86\u522b\u7684\u6837\u672c\u7684\u7279\u5f81\uff0c\u9020\u6210\u4fe1\u606f\u6cc4\u6f0f\u3002\u6240\u4ee5BYOL\u4e5f\u662f\u5bf9\u6bd4\u5b66\u4e60\uff0c\u5b83\u7684\u4efb\u52a1\u662f\u6b63\u6837\u672c\u548c\u5e73\u5747\u56fe\u7247\u4e4b\u95f4\u7684\u5dee\u5f02\uff08\u76f8\u5f53\u4e8eSwAV\u4e2d\u7684\u805a\u7c7b\u4e2d\u5fc3\uff09</p> </li> <li> <p>\u4f46\u662f\u540e\u6765\u539f\u4f5c\u8005\u53c8\u53d1\u4e86\u65b0\u7684\u6587\u7ae0\uff1aBYOL works even without batch statistics</p> <p></p> <p>\u5f53<code>-/BN/-</code>\u7684\u65f6\u5019\u8bad\u7ec3\u5931\u8d25\uff1b<code>-/-</code>\u7684\u65f6\u5019SimCLR\u4e5f\u5931\u8d25\u4e86\uff0c\u5373\u7528\u4e86\u8d1f\u6837\u672c\u4e5f\u8bad\u4e0d\u51fa\u6765</p> </li> <li> <p>\u540e\u6765\u8fbe\u6210\u4e00\u81f4\uff1aBN\u589e\u52a0\u8bad\u7ec3\u7a33\u5065\u6027</p> </li> <li> <p>\u4f5c\u8005\u53d1\u73b0\u4e00\u5f00\u59cb\u521d\u59cb\u5316\u6bd4\u8f83\u597d\u4e0d\u4f7f\u7528BN\u4e5f\u53ef\u4ee5\u3002\u4f7f\u7528\u4e86Group Norm\u548cWeight Standardization\u521d\u59cb\u5316\uff0c\u5728BEiT\u4e2d\u63d0\u51fa\u7684\uff0c\u4e5f\u662fResNet v2\u521d\u59cb\u5316\u65b9\u6cd5</p> </li> <li> <p>SimSam</p> </li> <li> <p>\u6807\u9898\uff1aExploring Simple Siamese\uff08\u5b6a\u751f\u7f51\u7edc\uff09 Representation Learning</p> </li> <li> <p>\u6ca1\u6709\u8d1f\u6837\u672c\u3001\u4e0d\u9700\u8981\u5927\u7684batch size\u3001\u6ca1\u6709\u52a8\u91cf\u7f16\u7801\u5668</p> </li> <li> <p></p> </li> <li> <p>\u5b6a\u751f\u7f51\u7edc\uff1a\u7f16\u7801\u5668\u7ed3\u6784\u76f8\u540c\u4e14\u5171\u4eab\u53c2\u6570</p> </li> <li> <p>\u548cBYOL\u7684\u533a\u522b\uff0c\u6ca1\u6709\u7528\u52a8\u91cf\u7f16\u7801\u5668</p> </li> <li> <p>\u4f2a\u4ee3\u7801\uff1a\\(D\\)\u51fd\u6570\u662f\u8ba1\u7b97MSE\uff0c\u53ef\u4ee5\u7528p1\u9884\u6d4bz2\uff0c\u4e5f\u53ef\u4ee5\u7528p2\u9884\u6d4bz1</p> <p></p> </li> <li> <p>\u4e3b\u8981\u662fstop gradient\u7684\u64cd\u4f5c</p> </li> <li> <p>\u4f5c\u8005\u8ba4\u4e3a\u662fEM\u7b97\u6cd5\uff0c\u63a5\u8fd1\u805a\u7c7b</p> </li> <li> <p></p> </li> <li> <p>\u52a8\u91cf\u7f16\u7801\u5668\u5f88\u53ef\u4ee5\u63d0\u70b9\uff0c\u5206\u7c7b\u4efb\u52a1\u6700\u5f3a\u7684\u662fBYOL</p> </li> <li> <p>\u8fc1\u79fb\u5b66\u4e60\u662fMoCo v2\u548cSimSam\u6700\u597d\uff0c\u63a8\u8350\u7528MoCo v2\u505a\u57fa\u7ebf\u6a21\u578b\uff0c\u8bad\u7ec3\u5feb\u8bad\u7ec3\u7a33</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/12-ContrastLearning/#transformer","title":"Transformer","text":"<ul> <li> <p>MoCo v3</p> </li> <li> <p>\u6807\u9898\uff1aAn Empirical Study of Training Self-Supervised Vision Transformers</p> </li> <li> <p>\u4e3b\u8981\u5185\u5bb9\u662f\u5982\u4f55\u63d0\u9ad8ViT\u7684\u8bad\u7ec3\u7a33\u5b9a\u6027</p> </li> <li> <p>MoCo v3\u76f8\u5f53\u4e8ev2\u548cSimSam\u7684\u5408\u4f53</p> </li> <li> <p></p> </li> <li> <p>\u4e24\u4e2a\u7f16\u7801\u5668\uff0cquery\u548ckey\uff0c\u540e\u8005\u662f\u52a8\u91cf\u7f16\u7801\u5668\uff0closs\u7528\u7684\u662f\u5bf9\u6bd4\u5b66\u4e60\u7684loss\uff0c\u770b\u8d77\u6765\u662fMoCo v2\u3002\u800cquery\u7f16\u7801\u5668\u8fd8\u7528\u4e86projection\u548cprediction\uff0c\u76f8\u5f53\u4e8eBYOL\u548cSimSam\u3002\u540c\u65f6backbone\u9aa8\u5e72\u7f51\u7edc\u4ece\u6b8b\u5dee\u7f51\u7edc\u6362\u6210\u4e86ViT</p> </li> <li> <p>batchsize\u5927\u7684\u65f6\u5019\u4f1a\u7a81\u7136\u4e0b\u964d</p> <p></p> </li> <li> <p>\u4f5c\u8005\u68c0\u67e5\u4e86\u68af\u5ea6\uff0c\u53d1\u73b0\u662fViT\u7b2c\u4e00\u5c42patch projection\u53d1\u751f\u68af\u5ea6\u7684\u6ce2\u5cf0\u3002\u76f8\u5f53\u4e8etokenization\u9636\u6bb5\uff0c\u5982\u4f55\u5c06\u56fe\u7247\u6253\u6210patch\u7136\u540e\u7ed9\u4ed6\u4e00\u4e2a\u7279\u5f81\uff0c\u5c31\u662f\u4e00\u4e2aMLP\uff0c\u6240\u4ee5\u76f4\u63a5\u7ed9\u4e00\u4e2arandom patch projecion\u5c42\u7136\u540efreeze\uff0c\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff0c\u53d1\u73b0\u8fd9\u4e2atrick\u5bf9MoCo v3\u548cBYOL\u90fd\u53ef\u4ee5\u7528</p> </li> <li> <p>\u5982\u679c\u4e0d\u6539Transformer\uff0c\u90a3\u5c31\u53ea\u6709\u4e00\u5f00\u59cb\u7684tokenization\u548c\u6700\u540e\u7684\u76ee\u6807\u51fd\u6570\u80fd\u6539</p> </li> <li> <p>DINO</p> </li> <li> <p>\u6807\u9898\uff1aEmerging Properties in Self-Supervised Vision Transformers</p> </li> <li></li> <li>\u4f5c\u8005\u53d1\u73b0ViT\u7684\u81ea\u6ce8\u610f\u529b\u56fe\u53ef\u89c6\u5316\u80fd\u591f\u975e\u5e38\u51c6\u786e\u5730\u6293\u4f4f\u95ee\u9898\u8f6e\u5ed3</li> <li></li> <li>\u540d\u5b57\u6765\u6e90\u4e8e\u4e0a\u56fe\u4e2d\u7684 Self-distillation with no labels</li> <li>\u548cBYOL\u4e00\u6837\uff0c\u81ea\u5df1\u9884\u6d4b\u81ea\u5df1\u6240\u4ee5\u662f\u81ea\u84b8\u998f</li> <li>\u4e3a\u4e86\u907f\u514d\u574d\u584c\uff0c\u7ed9\u6240\u6709\u6837\u672c\u7b97\u4e2a\u5747\u503c centering</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/13-AI-guided-Intuition/","title":"AI-guided intuition","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/13-AI-guided-Intuition/#ai-guided-intuition","title":"AI-guided intuition","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/13-AI-guided-Intuition/#_1","title":"\u6807\u9898","text":"<ul> <li>Advancing mathematics by guiding human intuition with AI</li> <li>AI\u6307\u5bfc\u4eba\u7684\u76f4\u89c9\u4ece\u800c\u63a8\u8fdb\u6570\u5b66\u8fdb\u5c55</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/13-AI-guided-Intuition/#_2","title":"\u6458\u8981","text":"<ul> <li>\u5e94\u7528\u673a\u5668\u5b66\u4e60\u53d1\u73b0\u6570\u5b66\u89c4\u5f8b\uff0c\u7136\u540e\u8bc1\u660e</li> <li>\u672c\u6587\u53d1\u73b0\u5e76\u8bc1\u660e\u4e86\u62d3\u6251\u4e2d\u7ed3\u7684\u4ee3\u6570\u7ed3\u6784\u548c\u51e0\u4f55\u7ed3\u6784\u4e4b\u95f4\u7684\u4e00\u4e2a\u65b0\u7684\u5173\u7cfb\uff1b\u7531\u5bf9\u79f0\u7fa4\u7684\u7ec4\u5408\u4e0d\u53d8\u731c\u60f3\u9884\u6d4b\u800c\u6765\u7684\u5019\u9009\u7b97\u6cd5</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/13-AI-guided-Intuition/#_3","title":"\u6846\u67b6","text":"<ul> <li>\u9488\u5bf9\u4e00\u4e2a\u6570\u5b66\u7269\u4f53 \\(z\\)\uff0c\u5206\u522b\u6709\u4e24\u79cd\u6570\u5b66\u53d8\u6362 \\(X(z)\\) \u548c \\(Y(z)\\)\uff0c\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u53bb\u5b66\u5176\u4e2d\u7684\u5173\u7cfb \\(\\hat{f}(X(z))\\approx Y(z)\\)\uff0c\u5982\u679c\u5b58\u5728\u5373\u53ef\u5f00\u59cb\u8bc1\u660e</li> <li>\u4e24\u79cd\u65b9\u5f0f\u6765\u5e2e\u52a9\u6570\u5b66\u5b9a\u7406\u8bc1\u660e</li> <li>\u53d1\u73b0\u6a21\u5f0f</li> <li>\u5f52\u56e0\u6280\u672f\u6765\u7406\u89e3\u6a21\u5f0f\uff0c\u5176\u5b9e\u5c31\u662f\u7279\u5f81\u9009\u62e9\uff0c\u627e\u5230\u54ea\u4e9b\u7279\u5f81\u662f\u6709\u7528\u7684</li> <li> <p>\u5f52\u56e0\u6280\u672f\u662f gradient saliency\uff0c\u8ba1\u7b97\u8f93\u51fa\u5173\u4e8e\u8f93\u5165\u7684\u68af\u5ea6\uff0c\u5982\u679c\u6bd4\u8f83\u5927\u5c31\u8bf4\u660e\u8be5\u7279\u5f81\u6bd4\u8f83\u91cd\u8981</p> </li> <li> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/13-AI-guided-Intuition/#_4","title":"\u62d3\u6251\u5b66","text":"<ul> <li>\u7ed3</li> <li>unknot\u5c31\u662f\u5706\u73af\uff0c\u5982\u679c\u626f\u4e00\u626f\u80fd\u53d8\u6210\u5706\u73af\u5c31\u8bf4\u660e\u548cunknot\u7b49\u4ef7\uff0c\u5426\u5219\u4e0d\u7b49\u4ef7\u3002\u8981\u6c42\u9996\u5c3e\u76f8\u8fde\uff0c\u540c\u65f6\u4e0d\u80fd\u526a\u65ad</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/13-AI-guided-Intuition/#_5","title":"\u8868\u793a\u8bba","text":"<p>\u7565</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/13-AI-guided-Intuition/#automl","title":"AutoML","text":"<ul> <li>autogluon</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/14-SwinTransformer/","title":"SwinTransformer","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/14-SwinTransformer/#swintransformer","title":"SwinTransformer","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/14-SwinTransformer/#_1","title":"\u6807\u9898","text":"<ul> <li>Swin Transformer: Hierarchical Vision Transformer using Shifted Windows</li> <li>\u5e0c\u671bViT\u4e5f\u50cfCNN\u4e00\u6837\u63d0\u53d6\u7279\u5f81\u7684\u65f6\u5019\u6709\u5c42\u7ea7\u7684\u6982\u5ff5</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/14-SwinTransformer/#_2","title":"\u6458\u8981","text":"<ul> <li>ViT\u4e3b\u8981\u505a\u4e86\u5206\u7c7b\uff0c\u5c06\u4e0b\u6e38\u4efb\u52a1\u4ea4\u7ed9\u5176\u4ed6\u4eba\u505a\uff0c\u672c\u6587\u8bc1\u660eViT\u5728\u5176\u4ed6\u4efb\u52a1\u4e2d\u6548\u679c\u90fd\u5f88\u597d\u2014\u2014\u53ef\u4ee5\u505a\u901a\u7528\u7684\u9aa8\u5e72\u7f51\u7edc</li> <li>\u4eceNLP\u5230CV\u9886\u57df\u8fc1\u79fbTransformer\u6709\u4e24\u4e2a\u6311\u6218</li> <li>\u89c6\u89c9\u7269\u4f53\u5c3a\u5bf8\u5927\u5c0f\u7684invariance\u5f88\u5927</li> <li>\u56fe\u7247\u7684\u50cf\u7d20\u9ad8\uff1a\u8981\u4e48\u4f7f\u7528\u7279\u5f81\u56fe\uff0c\u8981\u4e48\u628a\u56fe\u7247\u6253\u6210patch\uff0c\u8981\u4e48\u628a\u56fe\u7247\u5316\u6210\u5c0f\u7684\u7a97\u53e3</li> <li>\u672c\u6587\u4f7f\u7528\u79fb\u52a8\u7a97\u53e3\u7684\u65b9\u5f0f\u5b66\u4e60\u3002\u81ea\u6ce8\u610f\u529b\u5728\u7a97\u53e3\u5185\u8ba1\u7b97\uff08\u590d\u6742\u5ea6\u7ebf\u6027\u589e\u957f\uff09\uff0c\u79fb\u52a8\u80fd\u591f\u8ba9\u76f8\u90bb\u7a97\u53e3\u6709\u4ea4\u4e92</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/14-SwinTransformer/#_3","title":"\u5f15\u8a00","text":"<ul> <li> <p>ViT\u4f7f\u752816\u500d\u7684\u4e0b\u91c7\u6837\u7387\uff0c\u867d\u7136\u4f7f\u7528\u5168\u5c40\u81ea\u6ce8\u610f\u529b\uff0c\u4f46\u662f\u5bf9\u591a\u5c3a\u5ea6\u7279\u5f81\u63d0\u53d6\u80fd\u529b\u5c31\u5dee\u4e00\u4e9b</p> </li> <li> <p>\u4e0b\u6e38\u4efb\u52a1\u5982\u68c0\u6d4b\u548c\u5206\u5272\uff08\u5bc6\u96c6\u9884\u6d4b\u4efb\u52a1\uff09\uff0c\u591a\u5c3a\u5bf8\u7279\u5f81\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u76ee\u6807\u68c0\u6d4b\u7528\u7684\u6700\u5e7f\u7684\u65b9\u6cd5\u662fFPN\uff0cfeature pyramid network\u3002\u7269\u4f53\u5206\u5272\u6700\u5e38\u7528\u7684\u662fUNet\u3002\u90fd\u4f1a\u4f7f\u7528\u4e0d\u540c\u5c3a\u5bf8\u4e0a\u7684\u7279\u5f81</p> </li> </ul> <p></p> <ul> <li> <p>CNN\u4e2d\u4f7f\u7528\u6c60\u5316\u6765\u589e\u5927\u611f\u53d7\u91ce\uff0cSwinTransformer\u4f7f\u7528PatchMerging\u5c06\u76f8\u90bb\u5c0fpatch\u5408\u6210\u5927patch</p> </li> <li> <p>\u6709\u4e86\u591a\u5c3a\u5ea6\u7279\u5f81\u5c31\u53ef\u4ee5\u8f93\u7ed9\u4e00\u4e2aFPN\u505a\u68c0\u6d4b\uff0c\u6216\u8005\u6254\u7ed9UNet\u505a\u5206\u5272</p> </li> <li> <p>\u79fb\u52a8\u7a97\u53e3\uff1a\u7070\u8272\u662f\u5c0fpatch\uff084*4\uff09\uff0c\u7ea2\u8272\u6846\u5185\u662f\u67097*7\u4e2a\u5c0fpatch\uff08\u4e0b\u56fe\u4ec5\u4e3a\u793a\u610f\u56fe\uff09\uff0c</p> </li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/14-SwinTransformer/#_4","title":"\u7ed3\u8bba","text":"<ul> <li>\u5e0c\u671b\u80fd\u7528\u5728\u591a\u6a21\u6001\u4e2d\uff0c\u5373\u5728NLP\u4e2d\u5e94\u7528Shift Window</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/14-SwinTransformer/#_5","title":"\u65b9\u6cd5","text":"<ul> <li>\u6a21\u578b\u603b\u89c8\u56fe</li> </ul> <ul> <li>\u8001\u5e08\uff1a</li> </ul> <ul> <li>\u4e00\u5f00\u59cb\u7684patch paritition\u5206\u6210\u4e864*4\uff0c\u7136\u540e\u901a\u8fc7Linear Embedding\u53d8\u6210Transformer\u80fd\u63a5\u53d7\u7684\u5927\u5c0f\u3002</li> <li>\u4e0a\u56fe\u4e2d\u7684Swin Transformer Block\u662f\u5728\u5c0f\u7a97\u53e3\u5185\u505a\u7684\uff0cTransformer\u4e0d\u6539\u53d8\u8f93\u5165\u7684\u5c3a\u5bf8</li> <li>patch merging\uff1a\u672c\u6765\u662f\\(H*W*C\\)\uff0c\u7136\u540e\u884c\u5217\u5404\u4e00\u4f4d\u53d6\u5f97\u5230 \\(\\frac{H}2*\\frac{W}2*4C\\)\uff0c\u7136\u540e\u4e3a\u4e86\u548cCNN\u4e00\u81f4\uff08\u901a\u9053\u6570\u7ffb\u500d\u800c\u4e0d\u662f\u4e584\uff09\u6240\u4ee5\u5c31\u518d\u901a\u8fc7\u4e00\u4e2a\\(1*1\\)\u7684\u5377\u79ef\u5c06\u901a\u9053\u6570\u964d\u6210\\(2C\\)</li> <li>ViT\u52a0\u4e86\u4e00\u4e2aCLS token\u8ba9\u7ef4\u5ea6\u4ece196\u53d8\u6210\u4e86197\uff0c\u4f46\u662f\u672c\u6587\u6ca1\u6709\u52a0</li> <li> <p>\u4f5c\u8005\u6700\u540e\u76f4\u63a5\u7528\u5168\u5c40\u6c60\u5316\u64cd\u4f5c global average pooling \u5c06\u6700\u540e \\(7*7\\) \u53d8\u6210\u4e86 \\(1*1\\) \u6765\u505a\u5206\u7c7b</p> </li> <li> <p>\u8ba1\u7b97\u590d\u6742\u5ea6</p> </li> </ul> <p></p> <p>\u4e0a\u5f0f\u662f\u6807\u51c6\u7684\u591a\u5934\u81ea\u6ce8\u610f\u529b\uff0c\u800c\u4e0b\u5f0f\u662f\u7a97\u53e3\u591a\u5934\u81ea\u6ce8\u610f\u529b</p> <ul> <li> <p>\u67b6\u6784\u56fe\u4e2d\u53f3\u4fa7\u662f\u4e24\u4e2ablock\u5408\u6210\u4e00\u4e2a\u8ba1\u7b97\u5355\u5143\uff0c\u5206\u522b\u4f7f\u7528\u7a97\u53e3\u81ea\u6ce8\u610f\u529b\u548c\u79fb\u52a8\u7a97\u53e3\u81ea\u6ce8\u610f\u529b</p> </li> <li> <p>\u79fb\u52a8\u7a97\u53e3\u7684\u95ee\u9898\uff1a\u79fb\u52a8\u4e4b\u540e\u53d8\u5f97\u4e0d\u89c4\u5219\u4e86\uff084\u4e2a\u7a97\u53e3\u53d8\u6210\u4e869\u4e2a\u7a97\u53e3\uff09\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u76f4\u63a5pad\u4f46\u662f\u8ba1\u7b97\u590d\u6742\u5ea6\u53d8\u5927\u4e86</p> </li> </ul> <p>\u4f5c\u8005\u63d0\u51fa\u7684\u65b9\u6cd5\uff1a\u5faa\u73af\u79fb\u4f4d\uff0c\u7a97\u53e3\u6570\u91cf\u59cb\u7ec8\u662f4\u4e2a\uff0c\u4f46\u662f\u95ee\u9898\u662fABC\u6240\u5728\u7a97\u53e3\u5185\u7684patch\u6709\u7684\u662f\u4ece\u5f88\u8fdc\u7684\u5730\u65b9\u642c\u8fc7\u6765\u7684\u5e76\u4e0d\u76f8\u5173\uff0c\u8fd9\u91cc\u4f5c\u8005\u4f7f\u7528mask\u6765\u5904\u7406\uff0c\u6700\u540e\u8fd8\u8981\u4f7f\u7528\u5faa\u73af\u79fb\u4f4d\u6765\u53d8\u56de\u53bb</p> <p></p> <p>\u63a9\u7801\u64cd\u4f5c\uff1a\u5047\u8bbe\u7a97\u53e3\u662f14*14\u7684\u5927\u5c0f\uff0c\u5bf9\u4e8e3\u548c6\u533a\u57df\uff0c\u6211\u4eec\u9996\u5148\u5c063\u533a\u57df\u5185\u7684\u6240\u6709patch\u62c9\u76f4\uff0c\u5f97\u523028*C\u4e2a\u5411\u91cf\uff0c\u7136\u540e\u518d\u63a56\u53f7\u533a\u57df21*C\u4e2a\u5411\u91cf\u62fc\u5728\u4e00\u8d77\uff0c\u7136\u540e\u8f6c\u7f6e\u76f8\u4e58\u7b97\u81ea\u6ce8\u610f\u529b\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u4e2d\u5de6\u4e0a\u548c\u53f3\u4e0b\u533a\u57df\u662f\u4e0d\u9700\u8981\u7684\uff0c\u6700\u540e\u4f1a\u52a0\u4e0a\u4e00\u4e2aMask\u77e9\u9635\uff0cMask\u77e9\u9635\u7684\u5de6\u4e0a\u548c\u53f3\u4e0b\u90fd\u662f\u5f88\u5927\u7684\u8d1f\u6570\uff0c\u7ecf\u8fc7softmax\u4e4b\u540e\u5c31\u6ca1\u4e86</p> <p></p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/15-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E7%9A%84%E7%A0%94%E7%A9%B6%E5%B7%A5%E4%BD%9C/","title":"\u4ec0\u4e48\u662f\u597d\u7684\u7814\u7a76\u5de5\u4f5c","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/15-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E7%9A%84%E7%A0%94%E7%A9%B6%E5%B7%A5%E4%BD%9C/#_1","title":"\u4ec0\u4e48\u662f\u597d\u7684\u7814\u7a76\u5de5\u4f5c","text":"<ul> <li>\u7528\u6709\u65b0\u610f\u7684\u65b9\u6cd5\u6709\u6548\u5730\u89e3\u51b3\u4e00\u4e2a\u7814\u7a76\u95ee\u9898</li> <li>\u65b0\u610f\u5ea6*\u6709\u6548\u6027*\u95ee\u9898\u5927\u5c0f=\u4ef7\u503c</li> <li>\u53ef\u4ee5\u628a\u4e0a\u8ff0\u4e09\u4e2a\u70b9\u5206\u62101/10/100\u4e09\u6863\uff0c\u7136\u540e\u8bc4\u5206</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/16-AlphaFold2/","title":"AlphaFold2","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/16-AlphaFold2/#alphafold2","title":"AlphaFold2","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/16-AlphaFold2/#_1","title":"\u6807\u9898","text":"<ul> <li>Highly accurate protein structure prediction with AlphaFold</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/16-AlphaFold2/#_2","title":"\u6458\u8981","text":"<ul> <li>\u901a\u4fd7\u8ba4\u8bc6\uff1a\u86cb\u767d\u8d28\u662f\u4e00\u4e32\u8f83\u957f\u7684\u6c28\u57fa\u9178\u5e8f\u5217\uff08\u76f8\u5f53\u4e8e\u4ee3\u7801\uff09\uff0c\u7136\u540e\u4f1a\u5f62\u6210\u72ec\u7279\u7684\u7a7a\u95f4\u7ed3\u6784\uff08\u76f8\u5f53\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\uff09\uff0c\u86cb\u767d\u8d28\u7ed3\u6784\u9884\u6d4b\u4e3b\u8981\u662f\u9884\u6d4b\u7a7a\u95f4\u7ed3\u6784</li> <li>\u77e5\u9053\u7ed3\u6784\u7684\u86cb\u767d\u8d28\u670910\u4e07\uff0c\u800c\u5df2\u77e5\u7684\u86cb\u767d\u8d28\u670910\u4ebf\uff0c\u76ee\u524d\u770b\u4e00\u4e2a\u86cb\u767d\u8d28\u7ed3\u6784\u9700\u8981\u6570\u5e74\u6216\u6570\u6708</li> <li>AlphaFold2\u9884\u6d4b\u7cbe\u5ea6\u662f\u539f\u5b50\u7ea7\u522b\uff08\u5efa\u8bae\u8bb2\u5b9e\u9a8c\u7ed3\u679c\u7684\u65f6\u5019\u548c\u7edd\u5bf9\u503c\u6bd4\u8f83\uff09</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/16-AlphaFold2/#_3","title":"\u6a21\u578b","text":"<ul> <li>\u7b97\u6cd5\u603b\u89c8</li> </ul> <ul> <li>\u7b2c\u4e00\u90e8\u5206\uff1a\u62bd\u53d6\u7279\u5f81<ul> <li>\u5728\u6570\u636e\u5e93\u4e2d\u5bfb\u627e\u7c7b\u4f3c\u7684\u6c28\u57fa\u9178\u5e8f\u5217\u5f62\u6210MSA\uff08Multi Sequence Alignment\uff09</li> <li>\u5f62\u6210\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e24\u4e2a\u6c28\u57fa\u9178\u4e4b\u95f4\u7684\u5173\u7cfb</li> <li>\u989d\u5916\u53bb\u7ed3\u6784\u6570\u636e\u5e93\u4e2d\u641c\u7d22\uff0c\u77e5\u9053\u771f\u5b9e\u6c28\u57fa\u9178\u5728\u7a7a\u95f4\u4e2d\u7684\u8ddd\u79bb</li> </ul> </li> <li>\u7b2c\u4e8c\u90e8\u5206\uff1aEncode<ul> <li>\u8f93\u5165</li> <li>MSA representation\uff1a\u4e00\u4e2a \\((s,r,c)\\) \u7684\u77e9\u9635\uff0c\\(s\\)\u8868\u793a\u86cb\u767d\u8d28\u79cd\u7c7b\uff08\u7b2c\u4e00\u4e2a\u662f\u6211\u4eec\u8981\u9884\u6d4b\u7684\uff09\uff0c\\(r\\)\u662f\u6c28\u57fa\u9178\u5e8f\u5217\uff0c\\(c\\)\u662f\u6bcf\u4e2a\u6c28\u57fa\u9178\u7684\u5411\u91cf\u8868\u793a</li> <li>Pair representation\uff1a\u4e00\u4e2a \\((r,r,c)\\) \u7684\u77e9\u9635</li> <li>\u8f93\u5165\u8fdb\u5165\u4e00\u4e2a Transformer\uff0c\u79f0\u4e3aEvoformer</li> <li>\u548c\u666e\u901aTransformer\u7684\u4e0d\u540c\u5728\u4e8e\u8fd9\u91cc\u662f\u4e8c\u7ef4\u77e9\u9635\uff0c\u884c\u4e0a\u548c\u5217\u4e0a\u90fd\u6709\u76f8\u4e92\u5173\u7cfb</li> </ul> </li> <li>\u7b2c\u4e09\u90e8\u5206\uff1aDecode</li> <li> <p>\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u56de\u6536\u673a\u5236\uff0c\u5c06\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u8f93\u51fa\u90fd\u52a0\u5165\u5230\u7f16\u7801\u5668\u7684\u8f93\u5165\uff0c\u56de\u6536\u673a\u5236\u4e0d\u53c2\u4e0e\u68af\u5ea6\u56de\u4f20\uff0c\u964d\u4f4e\u8bad\u7ec3\u538b\u529b</p> </li> <li> <p>\u7f16\u7801\u5668</p> </li> <li> <p>\u548cTransformer\u7c7b\u4f3c\uff0c\u533a\u522b\u662fPair\u4f1a\u4f20\u5230MSA\uff0c\u800cMSA\u4e5f\u4f1a\u4f20\u5230Pair\u3002\u540c\u65f6\u56e0\u4e3a\u662f\u4e8c\u7ef4\u77e9\u9635\uff0c\u6240\u4ee5\u4f1a\u5904\u7406\u6309\u884c\u4fe1\u606f\u4ee5\u53ca\u6309\u5217\u4fe1\u606f</p> </li> </ul> <p></p> <ul> <li> <p>\u8865\u5145\u6750\u6599\uff1arow-wise gated self-attention with pair bias</p> <p>\u4e0a\u56fe\u4e2d\u7b2c\u4e00\u884c\u7684\u7b2c\u4e8c\u4e2ablock\uff1a</p> <p>row-wise\u8868\u793a\u6309\u884c\uff0c\u6240\u4ee5\u7279\u5f81\u957f\u5ea6\u662f\\(c_m\\)</p> <p>gated\u8868\u793a\u9664\u4e86qkv\u4e4b\u5916\u52a0\u4e86\u4e00\u4e2alinear+Sigmoid\u4f7f\u4e4b\u57280-1\u4e4b\u95f4\u7136\u540e\u505a\u4e00\u4e2a\u6309\u5143\u7d20\u70b9\u4e58\u5b9e\u73b0\u95e8\u7684\u6548\u679c\uff08\u8f93\u51fa\u95e8\uff09</p> <p>pair\u8868\u793a\uff1a\u5047\u8bbe\u8ba1\u7b97\u7b2c\\(i\\)\u4e2a\u6c28\u57fa\u9178\u4e3aquery\uff0c\\(j\\)\u4e2a\u6c28\u57fa\u9178\u4e3akey\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728pair representation\u4e2d\u53d6\u7b2c\\(i\\)\u884c\u7b2c\\(j\\)\u5217\u901a\u8fc7\u7ebf\u6027\u6295\u5f71\u5230\u4e00\u7ef4\u7136\u540e\u52a0\u4e0a\u53bb\uff08\u8868\u793a\u6c28\u57fa\u9178\u4e4b\u95f4\u7684\u9884\u8bbe\u5173\u7cfb\uff09</p> <p></p> <ul> <li>\u4f2a\u4ee3\u7801\uff1a \\(m_{si}\\)\u8868\u793a\u7b2c\\(s\\)\u4e2a\u86cb\u767d\u8d28\u7b2c\\(i\\)\u4e2a\u6c28\u57fa\u9178\u5bf9\u5e94\u7684\u7f16\u7801\uff0c\\(z_{ij}\\)\u8868\u793a\u7b2c\\(i\\)\u4e2a\u548c\u7b2c\\(j\\)\u4e2a\u6c28\u57fa\u9178\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u957f\u5ea6\u90fd\u662f\\(c_m\\)\u3002</li> </ul> <p></p> </li> <li> <p>\u7f16\u7801\u5668\u56fe\u7b2c\u4e00\u884c\u7684\u7b2c\u4e09\u4e2ablock\uff1a\u5bf9\u5217\u7684\u7279\u5f81\u63d0\u53d6</p> <p></p> </li> <li> <p>\u7f16\u7801\u5668\u7b2c\u4e00\u884c\u7b2c\u56db\u4e2ablock\uff1aMLP</p> <p></p> </li> <li> <p>\u7f16\u7801\u5668\u7b2c\u4e00\u884c\u548c\u7b2c\u4e8c\u884c\u4e4b\u95f4\u7684\u7d2b\u8272\u6a21\u5757</p> <p></p> <p>\u5728MSA\u4e2d\u4e24\u4e2a\u6c28\u57fa\u9178\u5bf9\u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u6bcf\u4e2a\u6c28\u57fa\u9178\u662f\u4e00\u4e2a\\(s*c_m\\)\u7684\u77e9\u9635\uff1b\u5728Pair\u77e9\u9635\u4e2d\u6bcf\u4e2a\u6c28\u57fa\u9178\u5bf9\u662f\u4e00\u4e2a\\(c_m\\)\u7684\u5411\u91cf\uff0c\u6240\u4ee5\u8981\u628a\u4e24\u4e2a\u77e9\u9635\u53d8\u6210\u4e00\u4e2a\u5411\u91cf\u3002</p> <p>\u8fd9\u91ccouter product\u662f\u5c06\u4e24\u4e2a\u77e9\u9635\u5206\u522b\u6269\u6210 \\((s,c,1)\\) \u548c \\((s,1,c)\\) \u7136\u540e\u5916\u79ef\u5f97\u5230 \\((s,c,c)\\)\u3002</p> </li> <li> <p>\u7f16\u7801\u5668\u7b2c\u4e8c\u884c\u7b2c4/5\u4e2ablock</p> <p></p> <p></p> <p>\u8fd9\u91cc\u79f0\u4e3a Triangular\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u4f7f\u7528\u4e86 \\(i,j,k\\) \u4e09\u4e2a\u6c28\u57fa\u9178\u4e4b\u95f4\u7684\u5173\u7cfb</p> <p></p> <p>\u8fd9\u91cc\u77e9\u9635\u662f\u4e0d\u5bf9\u79f0\u7684</p> </li> <li> <p>\u7f16\u7801\u5668\u7b2c\u4e8c\u884c\u7b2c2/3\u4e2ablock</p> <p></p> <p>\u4e3a\u4e86\u8ba1\u7b97\\(i\\)\u548c\\(j\\)\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4f7f\u7528\u4e86\u6240\u6709\\(i,k\\)\u548c\\(k,j\\)\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u7c7b\u4f3c</p> <p></p> <p>outgoing\u548cincoming\uff0c\u76f8\u5f53\u4e8e\u6c47\u805a\u51fa\u53bb\u548c\u8fdb\u6765\u7684\u8fb9\u4e24\u79cd\u7ed3\u6784</p> </li> <li> <p>\u89e3\u7801\u5668</p> </li> <li> <p>\u6c28\u57fa\u9178\u57283D\u4e2d\u7684\u4f4d\u7f6e\u8868\u793a\u4f7f\u7528\u7684\u662f\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u5373\u6bcf\u4e2a\u6c28\u57fa\u9178\u7684\u4f4d\u7f6e\u76f8\u5bf9\u4e8e\u4e0a\u4e00\u4e2a\u7684\u76f8\u5bf9\u4f4d\u7f6e</p> </li> <li> <p>\\(Y^{3\\times 1}=R^{3\\times 3}X^{3\\times 1}+t^{3\\times1}\\)\uff0c\u56e0\u6b64\u4e3b\u8981\u9700\u8981\u9884\u6d4b \\(R\\) \u548c \\(t\\)\u3002</p> </li> <li> <p>\u9700\u8981\u7b26\u5408\u751f\u7269\u548c\u7269\u7406\u89c4\u5219</p> </li> <li> <p>\u7ed3\u6784\uff1a\u5148\u9884\u6d4bBackbone\u5373\u86cb\u767d\u8d28\u4e3b\u5e72\u7f51\u7edc\u4f4d\u7f6e\uff0c\u7136\u540e\u9884\u6d4b\u679d\u5e72\u7f51\u7edc</p> <p></p> </li> <li> <p>IPA\u62ff\u5230\u6c28\u57fa\u9178\u5bf9\u4fe1\u606f\u3001\u4e0d\u65ad\u66f4\u65b0\u7684\u5e8f\u5217\u4fe1\u606f\u3001\u4e3b\u5e72\u7f51\u65cb\u8f6c\u5e73\u79fb\u4fe1\u606f</p> </li> <li> <p>\u7c7b\u4f3cRNN</p> </li> <li> <p>IPA\u6a21\u5757\u7684\u7b97\u6cd5\uff1a\u4e0d\u52a8\u70b9\u7684\u6ce8\u610f\u529b</p> <p></p> </li> <li> <p>\u540e\u9762\u592a\u590d\u6742\u4e86\u2026\u2026\u7565\u4e86</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/","title":"CLIP","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#clip","title":"CLIP","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#_1","title":"\u6807\u9898","text":"<ul> <li> <p>Learning Transferable Visual Models From Natural Language Supervision</p> </li> <li> <p>\u5229\u7528\u81ea\u7136\u8bed\u8a00\u76d1\u7763\u7684\u4fe1\u53f7\u6765\u8bad\u7ec3\u4e00\u4e2a\u53ef\u8fc1\u79fb\u7684\u89c6\u89c9\u6a21\u578b</p> </li> <li> <p>\u8f93\u5165\u662f\u6587\u5b57\u548c\u56fe\u7247\u7684\u914d\u5bf9\uff0c\u5404\u81ea\u901a\u8fc7\u4e00\u4e2aencoder\u5f97\u5230\u7279\u5f81\uff0c\u7136\u540e\u505a\u5bf9\u6bd4\u5b66\u4e60\uff08\u53ea\u9700\u8981\u6709\u6b63\u6837\u672c\u548c\u8d1f\u6837\u672c\u7684\u5b9a\u4e49\u5373\u53ef\uff0c\u914d\u5bf9\u7684\u6837\u672c\u662f\u6b63\u6837\u672c\uff0c\u5373\u77e9\u9635\u4e2d\u5bf9\u89d2\u7ebf\u662f\u6b63\u6837\u672c\uff09</p> </li> </ul> <p></p> <ul> <li> <p>\u6b63\u5e38\u7684CLIP\u662f\u6ca1\u6709\u5206\u7c7b\u5934\u7684\uff0c\u56e0\u6b64\u8981\u989d\u5916\u8fdb\u884cprompt template\uff0c\u5373\u5c06\u7c7b\u522b\u8f6c\u6210\u4e00\u4e2a\u53e5\u5b50\uff08\u4f8b\u5982This is a dog\uff09\u7136\u540e\u62bd\u53d6\u6587\u672c\u7279\u5f81\uff0c\u56fe\u7247\u62bd\u53d6\u7279\u5f81\uff0c\u7136\u540e\u8ba1\u7b97\u76f8\u4f3c\u5ea6</p> </li> <li> <p>zero shot\uff1a\u80fd\u591f\u9884\u6d4b\u51fa\u4e0d\u5728ImageNet\u4e2d\u7684\u7c7b\u522b</p> </li> <li> <p>\u5c06\u56fe\u7247\u8bed\u4e49\u548c\u6587\u672c\u8bed\u4e49\u8054\u7cfb\u8d77\u6765\uff0c\u6240\u4ee5\u8fc1\u79fb\u6548\u679c\u975e\u5e38\u597d</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#_2","title":"\u6458\u8981","text":"<ul> <li>\u4f20\u7edf\u6570\u636e\u96c6\u5b9a\u4e49\u4e86\u7c7b\u522b\uff0c\u800c\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u7684\u76d1\u7763\u4fe1\u53f7scale\u6027\u597d</li> <li>\u9884\u8bad\u7ec3\u4efb\u52a1\uff1a\u56fe\u7247\u548c\u6587\u672c\u7684\u914d\u5bf9</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#_3","title":"\u5f15\u8a00","text":"<ul> <li>NLP\u9886\u57df\u5df2\u7ecf\u5e38\u7528\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u800cCV\u9886\u57df\u4f7f\u7528\u6709\u6807\u6ce8\u7684\u6570\u636e\u4ecd\u6709\u8bf8\u591a\u9650\u5236</li> <li>CLIP\u5168\u79f0Contrastive Language-Image Pre-training</li> <li>\u662fConVIRT\u7684\u7b80\u5316\u7248\u672c\uff0c\u4f46\u662f\u5728\u6570\u636e\u548c\u6a21\u578b\u5927\u5c0f\u4e0a\u5927\u5927\u63d0\u9ad8\u4e86</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#_4","title":"\u65b9\u6cd5","text":"<ul> <li> <p>\u6211\u4eec\u7684\u60f3\u6cd5\u4e00\u70b9\u4e5f\u4e0d\u65b0\uff0c\u4f46\u662f\u4e4b\u524d\u7684\u5de5\u4f5c\u8bf4\u6cd5\u6df7\u6dc6\u3001\u89c4\u6a21\u4e0d\u591f\u5927\u3001NLP\u6a21\u578b\u4e0d\u591f\u597d\uff0c\u5f53Transformer\u89e3\u51b3NLP\u5927\u4e00\u7edf\u95ee\u9898\u4e4b\u540e\u5bb9\u6613\u83b7\u5f97\u8bed\u4e49\u7279\u5f81\u4e86</p> </li> <li> <p>\u591a\u6a21\u6001\u7279\u5f81\u9002\u5408zero shot\u8fc1\u79fb</p> </li> <li> <p>\u6570\u636e\u96c6\uff1aWIT\uff08WebImage Text\uff09</p> </li> <li> <p>\u4e4b\u524d\u7684\u9884\u8bad\u7ec3\u5de5\u4f5c\u5728ImageNet1K\u4e0a\u5c31\u9700\u8981\u6570\u5341\u4e2aGPU/TPU\u5e74\u7684\u8bad\u7ec3\u65f6\u95f4\uff0c\u800cOpenAI\u6ce8\u91cd\u6548\u7387\uff0c\u6240\u4ee5\u9009\u62e9\u5bf9\u6bd4\u5b66\u4e60\u3002\u800c\u5176\u4ed6OpenAI\u5de5\u4f5c\u90fd\u57fa\u4e8eGPT\uff0c\u4ec5\u6709CLIP\u57fa\u4e8e\u5bf9\u6bd4\u5b66\u4e60</p> </li> <li> <p>\u4e00\u5f00\u59cb\u91c7\u7528\u7c7b\u4f3cVirTex\uff0c\u56fe\u50cfCNN\u6587\u672cTransformer\uff0c\u7ed9\u5b9a\u56fe\u7247\u9884\u6d4b\u5176\u5bf9\u5e94\u6587\u672c\u3002\u4f46\u662f\u56fe\u7247\u7684\u63cf\u8ff0\u6709\u5f88\u591a\u53ef\u80fd\uff0c\u6240\u4ee5\u9884\u8bad\u7ec3\u975e\u5e38\u6162</p> </li> <li> <p>\u5f53\u628a\u9884\u6d4b\u578b\u4efb\u52a1\u6362\u6210\u5bf9\u6bd4\u578b\u4efb\u52a1\uff0c\u5224\u65ad\u56fe\u7247\u4e0e\u6587\u672c\u662f\u5426\u662f\u914d\u5bf9\u5c31\u6bd4\u8f83\u7b80\u5355\uff08\u751f\u6210\u5f0f\u53d8\u5224\u522b\u5f0f\uff09\uff0c\u6548\u7387\u63d0\u9ad84\u500d</p> </li> <li> <p>\u4f2a\u4ee3\u7801</p> </li> </ul> <p>\u7b2c\u4e00\u6b65\u62bd\u53d6\u7279\u5f81\u3002\u7b2c\u4e8c\u6b65\u4e2d\u4f1a\u70b9\u4e58\u4e00\u4e2a\\(W\\)\uff0c\u8fd9\u4e2a\u6295\u5f71\u662f\u4e3a\u4e86\u5c06\u5355\u6a21\u6001\u4fe1\u606f\u8f6c\u6210\u591a\u6a21\u6001\u4fe1\u606f\uff0c\u7136\u540e\u5f52\u4e00\u5316\u3002\u7b2c\u4e09\u6b65\u7b97\u76f8\u4f3c\u5ea6\u3002\u7b2c\u56db\u6b65\u7b97loss\uff0c\u6b63\u6837\u672c\u662f\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u5bf9\u79f0\u5f0f\u7684loss\u51fd\u6570</p> <p>\u4f5c\u8005\u6ca1\u6709\u4f7f\u7528\u975e\u7ebf\u6027\u6295\u5f71\u5c42\uff08\u4e4b\u524d\u7684\u5bf9\u6bd4\u5b66\u4e60\u4e2d\u63d0\u5347\u4e86\u8fd110\u4e2a\u70b9\uff09\u56e0\u4e3a\u4f5c\u8005\u53d1\u73b0\u591a\u6a21\u6001\u4e2d\u63d0\u5347\u4e0d\u5927</p> <p>\u53ea\u505a\u4e86\u968f\u673a\u88c1\u526a\u7684\u6570\u636e\u589e\u5f3a</p> <p></p> <ul> <li>\u53c2\u8003\uff1aHow to Train Really Large Models on Many GPUs? | Lil'Log (lilianweng.github.io)</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#_5","title":"\u5b9e\u9a8c","text":"<ul> <li> <p>\u4e4b\u524d\u7684\u81ea\u76d1\u7763\u65e0\u76d1\u7763\u5b66\u4e60\u5230\u4e00\u4e2a\u7279\u5f81\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u5bf9\u4e0b\u6e38\u4efb\u52a1\u505a\u6709\u76d1\u7763\u7684\u5fae\u8c03</p> </li> <li> <p>\u56fe</p> </li> </ul> <p></p> <ul> <li> <p>prompt engineering and ensembling</p> </li> <li> <p>prompt\u7684\u91cd\u8981\u6027\uff1aImageNet\u4e2d\u6709\u4e24\u4e2a\u7c7bconstruction crane\uff08\u8d77\u91cd\u673a\uff09\u548ccrane\uff08\u9e64\uff09\uff0c\u6587\u672c\u591a\u4e49\u6027\u53ef\u80fd\u5bfc\u81f4\u95ee\u9898\uff1b\u53e6\u5916\u8f93\u5165\u8f93\u51fa\u8981\u5c3d\u53ef\u80fd\u4fdd\u6301\u4e00\u81f4\uff0c\u907f\u514ddistribution gap</p> </li> <li>\u4f5c\u8005\u4f7f\u7528prompt template\uff0c\u7c7b\u4f3c<code>A phot of {label}</code>\uff0c\u8fd8\u53ef\u4ee5\u52a0\u4e00\u4e9b\u4f8b\u5982<code>A photo of {label}, a type of pet</code></li> <li> <p>ensemble\uff0c\u7528\u591a\u79cd\u63d0\u793a\u6a21\u677f\uff0cCLIP\u4f7f\u7528\u4e8680\u4e2a\u6a21\u677f</p> </li> <li> <p>\u5927\u89c4\u6a21\u8fc1\u79fb\u5b66\u4e60\u7ed3\u679c\uff1a</p> </li> </ul> <p>\u8fd9\u91cc\u662fLinear Probe\u8868\u793a\u5c06\u524d\u9762\u7684\u6a21\u578bfreeze\u6389\u53ea\u4ece\u4e2d\u62bd\u7279\u5f81\uff0c\u7136\u540e\u8bad\u7ec3\u4e00\u4e2aFC\u6765\u505a\u5206\u7c7b\u4efb\u52a1\u3002\u666e\u901a\u7269\u4f53zero shot\u4efb\u52a1\u6bd4\u8f83\u597d\uff0c\u4f46\u662f\u6bd4\u8f83\u96be\u7684\u4efb\u52a1\uff08DTD\u7eb9\u7406\u5206\u7c7b\uff0cCLEVRCounts\u7269\u4f53\u8ba1\u6570\uff09\u3002</p> <p></p> <p>Few Shot\u7684\u7ed3\u679c\uff1aBiT\u4e3aBig Transfer\u672c\u8eab\u5c31\u662f\u8c37\u6b4c\u4e3a\u4e86\u8fc1\u79fb\u5b66\u4e60\u8bbe\u8ba1\u7684</p> <p></p> <p>\u6240\u6709\u6570\u636e\uff1a\u7565</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#_6","title":"\u8ba8\u8bba","text":"<ul> <li>\u548c\u4eba\u7c7b\u5bf9\u6bd4</li> <li>\u53bb\u91cd\u5b9e\u9a8c\uff0c\u8bc1\u660e\u6cdb\u5316\u6027\u5f3a</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#_7","title":"\u5c40\u9650\u6027","text":"<ul> <li>\u76ee\u524d\u548c\u57fa\u7ebf\u6a21\u578b\u6c34\u5e73\u76f8\u8fd1\uff0c\u4f46\u548cSOTA\u6c34\u5e73\u8fd8\u6709\u5dee\u8ddd\uff0c\u540c\u65f6\u6269\u5927CLIP\u89c4\u6a21\u4e5f\u5f88\u96be\u5b9e\u73b0SOTA</li> <li>\u5728\u67d0\u4e9b\u7ec6\u5206\u7c7b\u4efb\u52a1\u6216\u62bd\u8c61\u6982\u5ff5\u6548\u679c\u5f88\u5dee\uff0c\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5f02\u5e38\u4ec0\u4e48\u662f\u5b89\u5168</li> <li>\u867d\u7136zero shot\u5728\u67d0\u4e9b\u6570\u636e\u96c6\u8fd8\u53ef\u4ee5\uff0c\u4f46\u662f\u5982\u679c\u63a8\u7406\u548c\u8bad\u7ec3\u7684\u6570\u636e\u5dee\u7684\u592a\u8fdc\uff0c\u8fd8\u662f\u4e0d\u884c\u7684\uff0cout-of-distribution\uff08\u4f8b\u5982MNIST\uff0c\u539f\u56e0\u662f4\u4ebf\u6570\u636e\u96c6\u4e2d\u90fd\u662f\u81ea\u7136\u56fe\u7247\uff0c\u6ca1\u6709\u5408\u6210\u6570\u5b57\u56fe\u7247\uff09</li> <li>CLIP\u9700\u8981\u7ed9\u4e00\u4e2a\u7c7b\u522b\u6765\u5224\u65ad\uff0c\u4e0d\u80fd\u505a\u5230\u56fe\u7247\u52a0caption\u8fd9\u79cd\u751f\u6210\u3002\u4e4b\u540e\u53ef\u80fd\u4f1a\u628a\u5bf9\u6bd4\u5f0f\u548c\u751f\u6210\u5f0f\u7684\u76ee\u6807\u51fd\u6570\u5408\u5728\u4e00\u8d77</li> <li>CLIP\u5bf9\u6570\u636e\u5229\u7528\u6548\u7387\u4e0d\u9ad8</li> <li>CLIP\u5b58\u5728bias\uff0c\u6709\u7528ImageNet test\u8bad\u7ec3\uff0c27\u4e2a\u6570\u636e\u96c6\u4e5f\u7528\u5230\u4e86\uff0c\u6700\u597d\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u7528\u6765zero-shot\u7684\u6570\u636e\u96c6</li> <li>\u6570\u636e\u4ece\u7f51\u4e0a\u722c\u7684\uff0c\u6ca1\u6709\u88ab\u6e05\u6d17\u8fc7\uff0c\u5b58\u5728\u504f\u89c1\u548c\u53ef\u80fd\u7684\u4e0d\u5f53\u4f7f\u7528</li> <li>\u590d\u6742\u7684\u4efb\u52a1\u6216\u6982\u5ff5\u4e0d\u80fd\u7528\u8bed\u8a00\u63cf\u8ff0\uff0c\u6240\u4ee5\u505a\u4e0b\u6e38\u4efb\u52a1\u6cdb\u5316\u7684\u65f6\u5019\u80fd\u63d0\u4f9b\u4e00\u4e9b\u8bad\u7ec3\u6837\u672c\uff08Few-Shot\uff09\u4e5f\u662f\u6709\u5fc5\u8981\u7684\uff0c\u4f46\u662fCLIP\u7684\u63d0\u51fa\u4e0d\u662f\u4e3a\u4e86Few-Shot\uff0c\u6240\u4ee5\u4f1a\u6709\u63d0\u4f9b\u4e00\u4e9b\u8bad\u7ec3\u6837\u672c\u8fd8\u4e0d\u5982zero-shot\uff0c\u548c\u4eba\u4e0d\u592a\u4e00\u6837</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/17-CLIP/#_8","title":"\u56de\u987e","text":"<ul> <li>\u6587\u672c\u7ecf\u8fc7Encoder\u5f97\u5230\u6587\u672c\u7279\u5f81\uff0c\u56fe\u50cf\u7ecf\u8fc7Encoder\u5f97\u5230\u56fe\u50cf\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u6587\u672c\u56fe\u50cf\u5bf9\u7684\u5bf9\u6bd4\u5b66\u4e60</li> <li>\u505a\u5206\u7c7b\u4efb\u52a1\u7684\u65f6\u5019\uff1a\u5c06\u7c7b\u522b\u901a\u8fc7prompt template\u901a\u8fc7\u6587\u672c\u7f16\u7801\u5668\u5f62\u6210\u5f88\u591aquery\uff0c\u7136\u540e\u56fe\u50cf\u901a\u8fc7\u56fe\u50cf\u7f16\u7801\u5668\u5f97\u5230\u4e00\u4e2a\u56fe\u50cf\u7279\u5f81\uff0c\u7136\u540e\u76f8\u5f53\u4e8e\u4f9d\u6b21\u95eequery\uff0c\u5f97\u5230\u56fe\u50cf\u7279\u5f81\u548c\u6587\u672c\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/18-TwoStream/","title":"Two-Stream","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/18-TwoStream/#two-stream","title":"Two-Stream","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/18-TwoStream/#_1","title":"\u6807\u9898","text":"<ul> <li> <p>Two-Stream Convolutional Networks for Action Recognition in Videos</p> </li> <li> <p>\u6211\u4eec\u5bf9\u89c6\u9891\u4e2d\u7684\u52a8\u4f5c\u8bc6\u522b\u6bd4\u8f83\u611f\u5174\u8da3\u3001\u6536\u96c6\u5bb9\u6613\u3001\u843d\u5730\u573a\u666f\u591a</p> </li> <li> <p>\u7ed3\u6784\uff1a</p> </li> </ul> <p>\u4f5c\u8005\u8ba4\u4e3a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u9002\u5408\u5b66\u4e60\u5c40\u90e8\u89c4\u5f8b\uff0c\u4f46\u662f\u4e0d\u9002\u5408\u5b66\u4e60\u7269\u4f53\u79fb\u52a8\u89c4\u5f8b\uff08Motion Information\uff09</p> <p>\u7531\u4e8e\u7269\u4f53\u4e0d\u4f1a\u5b66\uff0c\u90a3\u5c31\u6559\u4f60\u5b66\uff0c\u76f4\u63a5\u5148\u628a\u8fd0\u52a8\u4fe1\u606f\u62bd\u53d6\u597d\uff08\u5149\u6d41\u62bd\u53d6\uff09\uff0c\u7136\u540e\u53bb\u5b66\u4e60\u6620\u5c04</p> <p>\u4e0a\u9762\u4e00\u53ea\u4e3a\u7a7a\u95f4\u6d41CNN\uff0c\u4e0b\u4e00\u53ea\u4e3a\u65f6\u95f4\u6d41CNN</p> <p></p> <ul> <li>\u5149\u6d41\u63cf\u8ff0\u7269\u4f53\u7684\u8fd0\u52a8</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/18-TwoStream/#_2","title":"\u6458\u8981","text":"<ul> <li>\u5e0c\u671b\u5c06\u624b\u5de5\u8bbe\u8ba1\u7684\u7279\u5f81\u5e26\u5230\u6570\u636e\u9a71\u52a8\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/18-TwoStream/#_3","title":"\u5f15\u8a00","text":"<ul> <li>\u89c6\u9891\u5929\u751f\u6709\u6570\u636e\u589e\u5f3a\u7684\u6548\u679c</li> <li>\u4e4b\u524d\u7684\u624b\u5de5\u8bbe\u8ba1\u7684\u7279\u5f81\u80fd\u591f\u6293\u4f4f\u5149\u6d41\u4fe1\u606f</li> <li>\u4e4b\u524d\u89c6\u9891\u52a8\u4f5c\u8bc6\u522b\u4f7f\u7528\u7684\u662fSTIP\uff08spatio-temporal interest point\uff09\u7279\u5f81\uff0c\u5728\u5c40\u90e8\u505a\u65f6\u7a7a\u4fe1\u606f\u8fd9\u79cd\u7279\u5f81\u7684\u5b66\u4e60\uff1b\u4f46\u662fSOTA\u4f7f\u7528\u7684\u662fdense point trajectories\uff0c\u5373\u89c6\u9891\u524d\u540e\u5e27\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\u5f97\u5230\u7684\u8f68\u8ff9\u4fe1\u606f\u3002\u65b9\u6cd5\u662f\u5149\u6d41\u5f97\u5230\u8f68\u8ff9\u7136\u540e\u5728\u8f68\u8ff9\u9644\u8fd1\u62bd\u7279\u5f81\uff0c\u540e\u6765\u51fa\u73b0idt\u7279\u5f81\uff08improved dense trajectories\uff09\u4e5f\u975e\u5e38\u5f3a\uff0c19/20\u5e74\u8bba\u6587\u8fd8\u4f1a\u548c\u5b83\u6bd4</li> <li>\u5c40\u90e8\u65f6\u7a7a\u5b66\u4e60\u6f14\u53d8\u6210\u4e863D\u7f51\u7edc</li> <li>\u57fa\u4e8e\u5149\u6d41\u548c\u8f68\u8ff9\u7684\u65b9\u6cd5\u6f14\u53d8\u6210\u4e86\u53cc\u6d41\u7f51\u7edc</li> <li>\u4e4b\u524d\u7684\u6df1\u5ea6\u7f51\u7edc\u6ca1\u6709\u5b66\u4e60\u5230\u65f6\u5e8f\u4fe1\u606f\uff0c\u5c3d\u7ba1\u6709\u5f88\u5927\u7684\u6570\u636e\u96c6 Sports-1M</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/18-TwoStream/#_4","title":"\u65b9\u6cd5","text":"<ul> <li>\u7ed3\u6784\u56fe</li> </ul> <ul> <li> <p>\u7a7a\u95f4\u6d41\u4f7f\u7528\u5355\u5f20frame\uff0c\u4ece\u9759\u6b62\u7684\u56fe\u7247\u4e2d\u505a\u52a8\u4f5c\u8bc6\u522b\uff0c\u5176\u5b9e\u5c31\u662f\u56fe\u50cf\u5206\u7c7b\uff0c\u4f46\u662f\u56fe\u50cf\u5206\u7c7b\u672c\u8eab\u5c31\u548c\u52a8\u4f5c\u8bc6\u522b\u5f3a\u76f8\u5173\uff08\u4f8b\u5982\u51fa\u73b0\u94a2\u7434\u3001\u7bee\u7403\u7b49\uff09\uff0c\u6240\u4ee5\u7a7a\u95f4\u6d41\u5df2\u7ecf\u975e\u5e38\u6709\u7ade\u4e89\u529b\u3002\u751a\u81f3\u7a7a\u95f4\u6d41\u53ef\u4ee5\u505a\u9884\u8bad\u7ec3</p> </li> <li> <p>\u65f6\u95f4\u6d41</p> <ul> <li>\u5149\u6d41\uff1a\u6c34\u5e73\u548c\u7ad6\u76f4\u4e0a\u7684\u4f4d\u79fb\u3002\u8f93\u5165a\u548cb\u90fd\u662f240*320*3\uff0c\u5149\u6d41\u56fec\u662f240*320*2\uff08\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\uff09\uff0c\u5149\u6d41\u56fe\u6bcf\u4e2a\u70b9\u90fd\u6709\u503c\uff08dense optical flow\uff09\u3002\u89c6\u9891L\u5e27\uff0c\u5149\u6d41L-1\u5e27</li> </ul> <p></p> <ul> <li>\u5149\u6d41\u56fe\u5e0c\u671b\u80fd\u53e0\u52a0\u8d77\u6765\uff0c\u53e0\u52a0\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u76f4\u63a5\u53e0\u52a0\u3001\u6839\u636e\u5149\u6d41\u8f68\u8ff9\u8fdb\u884c\u6570\u503c\u76f8\u52a0\u3002\u540e\u8005\u770b\u8d77\u6765\u66f4\u5408\u7406\u4f46\u662f\u6548\u679c\u6ca1\u6709\u524d\u8005\u597d</li> </ul> <p></p> <ul> <li> <p>\u53cc\u5411\u5149\u6d41\uff1aBidirectional\uff0c\u540c\u65f6\u8ba1\u7b97\u524d\u5411\u5149\u6d41\u548c\u540e\u5411\u5149\u6d41\uff0c\u5373\u4e0a\u9762\u7684\u5411\u91cf\u53ef\u4ee5\u53d6\u53cd\u5411\uff08\u4e00\u534a\u5e27\u8ba1\u7b97\u6b63\u5411\uff0c\u4e00\u534a\u5e27\u8ba1\u7b97\u53cd\u5411\uff09</p> </li> <li> <p>\u6700\u540e\u5149\u6d41\u56fe\u7684\u5927\u5c0f\u662f \\(W\\times H\\times 2L\\)\uff0c\u5982\u679c\u89c6\u9891\u5e27\u662f \\(L+1\\)\uff0c\u4f5c\u8005\u4e00\u822c\u4f7f\u7528\u7684\u662f11\u5e27</p> </li> </ul> </li> <li> <p>\u6700\u540e\u4e24\u4e2a\u6d41\u4f7f\u7528\u7684\u662fsoftmax\u5f97\u5230\u503c\u53d6\u5e73\u5747\u76f8\u52a0</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/18-TwoStream/#_5","title":"\u5b9e\u9a8c","text":"<ul> <li> <p>\u6d4b\u8bd5\u65b9\u6cd5</p> </li> <li> <p>\u5bf9\u4e8e\u7a7a\u95f4\u6d41\uff1a\u6bcf\u6b21\u7b49\u95f4\u8ddd\u53d6\uff0c\u4e00\u5171\u53d625\u5e27\u3002\u6570\u636e\u589e\u5f3a\uff1a\u4e00\u5e27\u4e0acrop\u53d65\u5757\uff0c\u7136\u540e\u7ffb\u8f6c\u518dcrop\u51fa5\u5757\uff0c\u6bcf\u5e27\u5f97\u523010\u5f20\u56fe\uff08250view\uff09\uff0c\u8fd9250\u4e2a\u56fe\u7ed3\u679c\u53d6\u5e73\u5747\u5f97\u5230\u7a7a\u95f4\u6d41\u7ed3\u679c</p> </li> <li> <p>\u5bf9\u4e8e\u65f6\u95f4\u6d41\uff1a\u53d625\u5e27\u6bcf\u5e27\u4f4d\u7f6e\u540e\u976211\u5e27\uff0c\u5f97\u5230250\u5f20\u5149\u6d41\u56fe</p> </li> <li> <p>\u540e\u6765\u6d4b\u8bd5\u65b9\u6cd5\u53d6view\u6570\u5c31\u5f88\u591a\u6837\u4e86\uff0c3D\u7f51\u7edc30view\uff0cTransformer\u6709\u4f7f\u75284\u62163view\u7684</p> </li> <li> <p>\u9884\u5904\u7406\u5149\u6d41</p> </li> <li> <p>\u673a\u5668\u8017\u65f6\uff0c\u6570\u636edense\u5360\u7528\u7a7a\u95f4\uff08\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u6709\u503c\uff09</p> </li> <li> <p>\u4f5c\u8005\u7684\u65b9\u6cd5\u662f\u5c06\u6570\u636erescale\u52300-255\u6574\u6570\u7136\u540e\u5b58\u6210JPEG</p> </li> <li> <p>\u6d88\u878d\u5b9e\u9a8c</p> </li> <li> <p>\u7a7a\u95f4\u6d41</p> <ul> <li>\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u7531\u4e8e\u6570\u636e\u96c6\u5c0f\u6240\u4ee5\u5bb9\u6613\u8fc7\u62df\u5408\uff0c\u6240\u4ee5Fine-tuning\u9700\u8981\u8bbe\u7f6e\u6bd4\u8f83\u5927\u7684Dropout Ratio\uff0c\u800clast layer\u5c31\u4e0d\u9700\u8981\u8bbe\u7f6e\u8f83\u5927\u7684Dropout Ratio</li> </ul> <p></p> </li> <li> <p>\u65f6\u95f4\u6d41</p> <ul> <li>\u53d1\u73b0\u7b80\u5355\u5806\u53e0\u6548\u679c\u66f4\u597d\u3002\u53e6\u5916\u53cc\u5411\u4e00\u822c\u4e0d\u4f1a\u6389\u70b9</li> </ul> <p></p> </li> <li> <p>\u603b\u5bf9\u6bd4</p> </li> <li> <p>\u65f6\u95f4\u6d41\u5f97\u5230\u7684\u6b63\u786e\u7387\u5f88\u9ad8\uff08\u4e0d\u4f7f\u7528Pretraining\uff09\uff0c\u751a\u81f3\u8d85\u8fc7\u7a7a\u95f4\u6d41</p> </li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/18-TwoStream/#_6","title":"\u7ed3\u8bba","text":"<ul> <li>\u672a\u6765\u5de5\u4f5c</li> <li>\u65f6\u95f4\u6d41\u80fd\u5426\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u6216\u8005\u4f7f\u7528\u66f4\u591a\u5149\u6d41\u6570\u636e</li> <li>\u57fa\u4e8e\u8f68\u8ff9\u7684\u65b9\u6cd5\u4e3a\u4ec0\u4e48\u8868\u73b0\u4e0d\u597d</li> <li>\u76f8\u673a\u81ea\u5e26\u79fb\u52a8\u4f1a\u5bfc\u81f4\u4e0d\u51c6\uff0c\u4f5c\u8005\u7b80\u5355\u7684\u4f7f\u7528\u51cf\u5168\u5c40\u5e73\u5747\u6765\u89e3\u51b3\u4f46\u662f\u53ef\u80fd\u4e0d\u662f\u5f88\u597d</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/19-GPT/","title":"GPT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/19-GPT/#gpt","title":"GPT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/19-GPT/#_1","title":"\u5386\u53f2","text":"<ul> <li>GPT\u662f\u628aTransformer\u7684\u89e3\u7801\u5668\u62ff\u51fa\u6765\u7136\u540e\u5728\u6ca1\u6709\u6807\u53f7\u7684\u5927\u91cf\u6587\u672c\u6570\u636e\u4e0a\u8bad\u7ec3\u4e00\u4e2a\u8bed\u8a00\u6a21\u578b</li> <li>BERT\u662f\u628aTransformer\u7684\u7f16\u7801\u5668\u6536\u96c6\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u636e\u96c6\u8bad\u7ec3\uff0c\u5b9e\u73b0BERT-Base\u548cBERT-Large\uff0c\u524d\u8005\u5c31\u6bd4GPT\u66f4\u5f3a\u4e86</li> <li>GPT2\u6536\u96c6\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u636e\u96c6\u4ee5\u53ca\u5b9e\u73b0\u4e00\u4e2a\u66f4\u5927\u7684\u6a21\u578b\uff0c\u6bd4BERT-Large\u66f4\u5927</li> <li>GPT3\u6bd4GPT2\u5728\u6570\u636e\u548c\u6a21\u578b\u4e0a\u90fd\u5927\u4e86100\u500d</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/19-GPT/#gpt1","title":"GPT1","text":"<ul> <li> <p>\u6807\u9898\uff1aImproving Language Understanding by Generative Pre-Training</p> </li> <li> <p>\u65b9\u6cd5</p> </li> <li> <p>\u65e0\u76d1\u7763\u9884\u8bad\u7ec3</p> <ul> <li>\u7528\u524d\\(k\\)\u4e2a\u8bcd\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd</li> <li>\u4f7f\u7528Transformer\u7684Decoder\uff0c\u548cEncoder\u4e0d\u540c\u7684\u662f\u5b83\u7528\u5230\u4e86\u63a9\u7801\u4f7f\u5f97\u5f53\u524d\u8bcd\u770b\u4e0d\u5230\u4e4b\u540e\u7684\u8bcd</li> <li>\\(W_e\\) \u662f token\u7f16\u7801\u77e9\u9635\uff0c\\(W_p\\) \u662f\u4f4d\u7f6e\u7f16\u7801\u77e9\u9635</li> </ul> <p></p> <ul> <li>GPT\u7684\u76ee\u6807\u51fd\u6570\u662f\u9884\u6d4b\u672a\u6765\uff0c\u6bd4BERT\u66f4\u96be\uff0c\u6240\u4ee5\u5728\u8bad\u7ec3\u548c\u6548\u679c\u6bd4BERT\u5dee\uff0c\u4f46\u662f\u80fd\u529b\u66f4\u5f3a</li> </ul> </li> <li> <p>\u5fae\u8c03</p> <ul> <li>\u8f93\u5165\u662f\u4e00\u4e32\u8bcd \\(x_1,\\dots,x_m\\) \u4ee5\u53calabel\u4e3a\\(y\\)\uff0c\u7136\u540e\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\u53bb\u9884\u6d4b\\(y\\)\uff0c\u7136\u540e\u5f97\u5230loss\u3002\u8fd9\u91cc\u9884\u6d4b\u7684\u65b9\u6cd5\u662f\u770b\u6700\u540e\u4e00\u4e2aTransformer\u5757\u5bf9\\(x_m\\)\u7684\u8f93\u51fa\uff0c\u7136\u540e\u63a5\u4e00\u4e2aLinear Layer+Softmax\u5f97\u5230\u6982\u7387</li> <li></li> <li>\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd \\(L_1(C)\\) \u548c \u9884\u6d4b\u5f53\u524dtokens\u5bf9\u5e94label \\(L_2(C)\\)\uff0c\u8fd9\u4e24\u4e2aloss\u51fd\u6570\u4e00\u8d77\u8003\u8651\u6548\u679c\u6700\u4f73</li> </ul> </li> <li> <p>\u4e0b\u6e38\u4efb\u52a1</p> <ul> <li>\u5982\u4f55\u5c06\u4e0b\u6e38\u4efb\u52a1\u8868\u793a\u6210GPT\u5f62\u5f0f</li> </ul> <p></p> <ul> <li> <p>\u5206\u7c7b\uff1a\u5224\u65ad\u4e00\u6bb5\u8bdd\u7684\u6807\u53f7\uff08\u4f8b\u5982\u8bc4\u4ef7\u662f\u6b63\u9762\u8fd8\u662f\u8d1f\u9762\u7684\uff09\uff0c\u65b9\u6cd5\u662f\u524d\u9762\u52a0\u4e2astart\u540e\u9762\u52a0\u4e2aextract\u7136\u540e\u653e\u5230Transformer\u4e2d\uff0c\u7136\u540e\u5c06extract\u7684\u8f93\u51fa\u63a5linear</p> </li> <li> <p>\u8574\u6db5\uff1a\u5224\u65adpremise\u4e2d\u662f\u5426\u8574\u6db5hypothesis\u4e2d\u5047\u8bbe\u7684\u4e1c\u897f\uff08\u4f8b\u5982premise\u662fa\u7ed9\u4e86b\u73ab\u7470\u82b1\uff0chypothesis\u662fa\u559c\u6b22b\uff0c\u90a3\u4e48\u5c31\u662f\u652f\u6301\uff09\uff0c\u5176\u5b9e\u662f\u4e09\u5206\u7c7b\u95ee\u9898\uff0c\u652f\u6301\u6216\u53cd\u5bf9\u6216\u4e2d\u7acb</p> </li> <li> <p>\u76f8\u4f3c\uff1a\u5bf9\u79f0\u5173\u7cfb</p> </li> <li> <p>\u591a\u9009\u9898</p> </li> </ul> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/19-GPT/#gpt2","title":"GPT2","text":"<ul> <li>\u6807\u9898\uff1aLanguage Models are Unsupervised Multitask Learners</li> <li>\u4e3b\u8981\u4eae\u70b9\u662fzero shot</li> <li>\u4e0b\u6e38\u4efb\u52a1\u4e0d\u9700\u8981\u52a0\u5206\u9694\u7b26</li> <li>\u6570\u636e\u6765\u6e90\u4e8eReddit\u4e2d\u6536\u5f55\u7684\u7f51\u9875\uff0c\u7528\u6237\u5df2\u7ecf\u8bfb\u8fc7\u5e76\u4e14\u89c9\u5f97\u6709\u4ef7\u503c</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/19-GPT/#gpt3","title":"GPT3","text":"<ul> <li> <p>\u6807\u9898\uff1aLanguage Models are Few-Shot Learners</p> </li> <li> <p>\u5bfc\u8a00</p> </li> <li> <p>NLP\u9884\u8bad\u7ec3\u7684\u95ee\u9898\uff1a\u9700\u8981\u4e00\u4e2a\u4e0b\u6e38\u6570\u636e\u96c6\u505a\u5fae\u8c03</p> </li> <li> <p>\u65b9\u6cd5</p> </li> <li> <p>\u4e0d\u505a\u6a21\u578b\u66f4\u65b0\uff1a\u6240\u8c13zero-shot / one-shot / few-shot\u90fd\u662fin-context learning\uff0c\u76f4\u63a5\u5728prompt\u91cc\u7ed9</p> <p></p> </li> <li> <p>\u5927\u6a21\u578b\u4e0d\u5bb9\u6613\u8fc7\u62df\u5408</p> </li> <li> <p>\u6570\u636e\u96c6\u6536\u96c6</p> </li> <li> <p>\u5c06Reddit\u4e0a\u7684\u7f51\u9875\uff08\u7cbe\u9009\uff09\u5b9a\u4e49\u4e3a\u6b63\u7c7b\uff0cCommon Crawl\uff08\u591a\u4f46\u810f\uff09\u4e0a\u7684\u7f51\u9875\u5b9a\u4e49\u4e3a\u8d1f\u7c7b\uff0c\u7136\u540e\u505a\u4e8c\u5206\u7c7b\uff0c\u83b7\u5f97\u66f4\u591a\u7684\u6b63\u7c7b\u7f51\u9875</p> </li> <li>\u53bb\u91cd\u8fc7\u7a0b\uff0c\u4f7f\u7528LSH\u7b97\u6cd5</li> <li>\u52a0\u4e86\u4e00\u4e9b\u9ad8\u8d28\u91cf\u6570\u636e\u96c6</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/2-AlexNet/","title":"AlexNet","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/2-AlexNet/#alexnet","title":"AlexNet","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/2-AlexNet/#_1","title":"\u7b2c\u4e00\u904d","text":"<p>\u6807\u9898\uff1aImageNet Classification with Deep Convolutional Neural Networks\uff0cImageNet\u662f\u5f53\u65f6\u6700\u5927\u7684\u56fe\u7247\u6570\u636e\u96c6</p> <p>\u4f5c\u8005\uff1aHinton\u5f53\u65f6\u673a\u5668\u5b66\u4e60\u7684\u5927\u725b</p> <p></p> <p>Abstract\uff1a\u91cd\u70b9\u4ecb\u7ecd\u4e86AlexNet\u7684\u6548\u679c\uff0c\u6709\u70b9\u50cf\u6280\u672f\u62a5\u544a</p> <p></p> <p>\u7ed3\u5c3e\u4e0d\u662fConclusion\u800c\u662fDiscussion\uff1a\u63d0\u51fa\u6df1\u5ea6\u548c\u7f51\u7edc\u6548\u679c\u6b63\u76f8\u5173\uff0c\u56e0\u4e3a\u4e94\u5c42\u53bb\u6389\u4e00\u5c42\u6548\u679c\u964d\u4f4e2%\uff08\u5b9e\u9645\u4e0a\u662f\u8c03\u53c2\u6ca1\u8c03\u597d\uff0c\u53bb\u6389\u4e00\u5c42\u5f71\u54cd\u4e0d\u5927\uff0c\u4f46\u662f\u524d\u9762\u63d0\u5230\u7684\u6df1\u5ea6\u548c\u7f51\u7edc\u6548\u679c\u6b63\u76f8\u5173\u662f\u6b63\u786e\u7684\uff0c\u53e6\u5916\u5bbd\u5ea6\u4e5f\u5f88\u91cd\u8981\uff09\u3002\u4f7f\u7528Supervised Training\uff08\u4f46\u662f\u5f53\u65f6Hinton\u548cLeCun\u90fd\u8ba4\u4e3a\u65e0\u76d1\u7763\u5b66\u4e60\u624d\u662f\u6700\u91cd\u8981\u7684\uff0c\u6700\u8fd1BERT\u548cGAN\u8ba9\u4eba\u5bf9\u65e0\u76d1\u7763\u53c8\u5f00\u59cb\u611f\u5174\u8da3\u8d77\u6765\u4e86\uff09\u3002\u672a\u6765\u5e0c\u671b\u80fd\u591f\u5728video\u6570\u636e\u4e0a\u8bad\u7ec3\uff08\u5728video\u4e0a\u4e00\u76f4\u90fd\u6bd4\u8f83\u6162\uff09\u3002</p> <p></p> <p>\u56fe\uff1a</p> <p></p> <p>\u53f3\u8fb9\u7684\u56fe\u7247\u662f\u6700\u540e\u4e00\u5c42\u8f93\u51fa\u7684\u5411\u91cf\uff0c\u5728\u6570\u636e\u96c6\u4e2d\u627e\u6700\u76f8\u90bb\u7684\u56fe\u7247\uff0c\u53ef\u4ee5\u770b\u5230\u57fa\u672c\u76f8\u4f3c\u3002\u8fd9\u662f\u6700\u91cd\u8981\u7684\u4e00\u70b9\uff0c\u76f8\u4f3c\u7684\u56fe\u7ecf\u8fc7\u795e\u7ecf\u7f51\u7edc\u5728\u8bed\u4e49\u7a7a\u95f4\u91cc\u662f\u76f8\u8fd1\u7684</p> <p></p> <p>\u7531\u4e8e\u8be5\u5de5\u4f5c\u7684\u6b63\u786e\u7387\u975e\u5e38\u9ad8\uff0c\u56e0\u6b64\u51b3\u5b9a\u7ee7\u7eed\u5f80\u4e0b\u8bfb\u3002</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/2-AlexNet/#_2","title":"\u7b2c\u4e8c\u904d","text":"<p>introduction\uff1a</p> <ul> <li>\u5f53\u65f6\u8ba4\u4e3a\u6b63\u5219\u5f88\u91cd\u8981</li> </ul> <p>\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u6b63\u5219\u5316\uff08regularization\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u51cf\u5c11\u6a21\u578b\u8fc7\u62df\u5408\u7684\u6280\u672f\u3002\u6b63\u5219\u5316\u901a\u8fc7\u5728\u635f\u5931\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u60e9\u7f5a\u9879\uff0c\u6765\u9650\u5236\u6a21\u578b\u53c2\u6570\u7684\u503c\u57df\uff0c\u4f7f\u5176\u4e0d\u80fd\u8fc7\u5927\uff0c\u4ece\u800c\u964d\u4f4e\u8fc7\u62df\u5408\u7684\u98ce\u9669\u3002</p> <p>\u6b63\u5219\u5316\u901a\u5e38\u88ab\u5e94\u7528\u4e8e\u4f18\u5316\u7b97\u6cd5\u7684\u635f\u5931\u51fd\u6570\u4e2d\u3002\u5b83\u7684\u76ee\u7684\u662f\u5728\u4fdd\u6301\u826f\u597d\u7684\u62df\u5408\u80fd\u529b\u7684\u540c\u65f6\uff0c\u964d\u4f4e\u6a21\u578b\u7684\u590d\u6742\u5ea6\u3002\u5e38\u89c1\u7684\u6b63\u5219\u5316\u65b9\u6cd5\u5305\u62ec\uff1a</p> <ol> <li>L1\u6b63\u5219\u5316\uff1a\u5728\u635f\u5931\u51fd\u6570\u4e2d\u6dfb\u52a0L1\u8303\u6570\u60e9\u7f5a\u9879\uff0c\u4f7f\u5f97\u6a21\u578b\u7684\u53c2\u6570\u7a00\u758f\u5316\uff0c\u5373\u5c06\u4e00\u4e9b\u53c2\u6570\u7f29\u51cf\u4e3a0\uff0c\u4ece\u800c\u964d\u4f4e\u6a21\u578b\u7684\u590d\u6742\u5ea6\u3002</li> <li>L2\u6b63\u5219\u5316\uff1a\u5728\u635f\u5931\u51fd\u6570\u4e2d\u6dfb\u52a0L2\u8303\u6570\u60e9\u7f5a\u9879\uff0c\u4f7f\u5f97\u6a21\u578b\u7684\u53c2\u6570\u6743\u91cd\u88ab\u9650\u5236\u5728\u4e00\u4e2a\u8f83\u5c0f\u7684\u8303\u56f4\u5185\uff0c\u4ece\u800c\u964d\u4f4e\u6a21\u578b\u7684\u8fc7\u62df\u5408\u98ce\u9669\u3002</li> <li>Dropout\u6b63\u5219\u5316\uff1a\u5728\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4ee5\u4e00\u5b9a\u7684\u6982\u7387\u968f\u673a\u5ffd\u7565\u6389\u4e00\u4e9b\u795e\u7ecf\u5143\uff0c\u4ece\u800c\u4f7f\u5f97\u6a21\u578b\u4e0d\u4f9d\u8d56\u4e8e\u67d0\u4e9b\u7279\u5b9a\u7684\u795e\u7ecf\u5143\uff0c\u63d0\u9ad8\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u3002</li> </ol> <p>\u6b63\u5219\u5316\u65b9\u6cd5\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u95ee\u9898\u548c\u6570\u636e\u96c6\u3002</p> <p>L1\u8303\u6570\u548cL2\u8303\u6570\u662f\u5411\u91cf\u7a7a\u95f4\u4e2d\u5e38\u89c1\u7684\u4e24\u79cd\u8303\u6570\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u7528\u6765\u8861\u91cf\u5411\u91cf\u7684\u5927\u5c0f\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0cL1\u8303\u6570\u548cL2\u8303\u6570\u901a\u5e38\u88ab\u7528\u6765\u4f5c\u4e3a\u6b63\u5219\u5316\u65b9\u6cd5\u7684\u60e9\u7f5a\u9879\u3002</p> <p>L1\u8303\u6570\u662f\u6307\u5411\u91cf\u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2an\u7ef4\u5411\u91cfx\uff0c\u5b83\u7684L1\u8303\u6570\u4e3a\uff1a</p> <p>||x||\u2081 = \u2211|x\u1d62|</p> <p>\u5176\u4e2d\uff0c|x\u1d62|\u8868\u793a\u5411\u91cfx\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u7edd\u5bf9\u503c\u3002</p> <p>L2\u8303\u6570\u662f\u6307\u5411\u91cf\u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u7684\u5f00\u65b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2an\u7ef4\u5411\u91cfx\uff0c\u5b83\u7684L2\u8303\u6570\u4e3a\uff1a</p> <p>||x||\u2082 = \u221a(\u2211x\u1d62\u00b2)</p> <p>\u5176\u4e2d\uff0cx\u1d62\u00b2\u8868\u793a\u5411\u91cfx\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u3002</p> <p>\u53ef\u4ee5\u770b\u51fa\uff0cL1\u8303\u6570\u548cL2\u8303\u6570\u90fd\u53ef\u4ee5\u8861\u91cf\u5411\u91cf\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u6570\u503c\u5927\u5c0f\u548c\u6027\u8d28\u4e0d\u540c\u3002L1\u8303\u6570\u503e\u5411\u4e8e\u4f7f\u5f97\u5411\u91cf\u4e2d\u67d0\u4e9b\u5143\u7d20\u53d8\u4e3a0\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u7a00\u758f\u7684\u5411\u91cf\uff0c\u9002\u7528\u4e8e\u7279\u5f81\u9009\u62e9\u7b49\u9700\u8981\u7a00\u758f\u6027\u7684\u573a\u666f\u3002\u800cL2\u8303\u6570\u503e\u5411\u4e8e\u4f7f\u5f97\u5411\u91cf\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u53d8\u5c0f\uff0c\u4f46\u4e0d\u4f1a\u51cf\u4e3a0\uff0c\u9002\u7528\u4e8e\u9700\u8981\u5e73\u6ed1\u6027\u7684\u573a\u666f\u3002</p> <p>\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0cL2\u8303\u6570\u901a\u5e38\u88ab\u7528\u4f5c\u6743\u91cd\u8870\u51cf\uff08weight decay\uff09\u7684\u60e9\u7f5a\u9879\uff0c\u4ee5\u907f\u514d\u8fc7\u62df\u5408\u95ee\u9898\u3002L1\u8303\u6570\u4e5f\u53ef\u4ee5\u7528\u4f5c\u6b63\u5219\u5316\u65b9\u6cd5\uff0c\u4f46\u7531\u4e8e\u5b83\u7684\u5bfc\u6570\u57280\u70b9\u5904\u4e0d\u8fde\u7eed\uff0c\u4e0d\u5229\u4e8e\u4f18\u5316\u7b97\u6cd5\u7684\u6c42\u89e3\uff0c\u56e0\u6b64\u901a\u5e38\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u7b97\u6cd5\u8fdb\u884c\u4f18\u5316\u3002</p> <ul> <li>\u8bf4\u5f53\u65f6\u5927\u5bb6\u90fd\u5728\u7528CNN\uff0cFake\uff01\u9700\u8981\u63d0\u4e00\u4e0b\u5176\u4ed6\u6d41\u884c\u7684\u7b97\u6cd5</li> </ul> <p>Dataset\uff1a</p> <ul> <li>ImageNet\u7684\u5206\u8fa8\u7387\u4e0d\u540c\uff0c\u6211\u5148\u90fd\u8f6c\u6210256*256\u3002\u591a\u51fa\u6765\u7684\u4ee5\u4e2d\u5fc3\u4e3a\u754c\u88c1\u526a\u3002\u76f4\u63a5\u5728Raw RGB\u4e0a\u8bad\u7ec3\uff0c\u800c\u4e0d\u662fSIFT\u4e4b\u7c7b\u7684</li> <li>End-to-End\uff1a\u8be5\u8bba\u6587\u6ca1\u6709\u6307\u51fa\u7aef\u5230\u7aef\u7684\u4ef7\u503c\uff0c\u867d\u7136\u5b83\u662f\u7aef\u5230\u7aef</li> </ul> <p>Architecture\uff1a</p> <ul> <li> <p>\u6211\u4eec\u4f7f\u7528\u4e86ReLU\uff0c\u4e00\u822c\u7528\u7684\u662fSigmod\u548ctanh\u3002\u5728\u5f53\u65f6\u66f4\u5feb\u4e00\u4e9b\uff0c\u4f46\u662f\u76ee\u524d\u6362\u6210\u5176\u4ed6\u7684\u4e5f\u65e0\u6240\u8c13</p> </li> <li> <p>\u591a\u5361\u8bad\u7ec3\uff1a\u5de5\u7a0b\u7ec6\u8282\u53ef\u4ee5\u5ffd\u7565</p> </li> <li> <p>Local Response Normalization\uff1a\u907f\u514d\u9971\u548c\uff08\u9971\u548c\u6b64\u65f6\u4e0d\u7406\u89e3\uff09\uff0c\u5b9e\u9645\u4e0a\u76ee\u524d\u6709\u66f4\u597d\u7684Normalizatio\u7684\u65b9\u6cd5</p> </li> <li> <p>Overlapping Pooling\uff1aPooling\u662f\u4ec0\u4e48\uff1f\u5bf9\u4f20\u7edfPooling\u505a\u4e86\u4e00\u4e9b\u4fee\u6539</p> </li> <li> <p>Overall Architecture\uff1a</p> </li> </ul> <p>CNN\u7684\u957f\u5bbd\u51cf\u5c0f\u4ee3\u8868\u538b\u7f29\u4fe1\u606f\uff0c\u4e00\u4e2a\u50cf\u7d20\u4ee3\u8868\u4e4b\u524d\u591a\u4e2a\u50cf\u7d20\u3002\u901a\u9053\u6570\u589e\u52a0\uff0c\u4ee3\u8868\u89c2\u5bdf\u7684\u6a21\u5f0f\u7c7b\u578b\u589e\u52a0</p> <p></p> <p>\u6709\u4e24\u5757GPU\uff0c\u5c06\u4e00\u5f20\u56fe\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u5377\u79ef\uff0c\u5728\u7b2c2\u5c42\u548c\u7b2c3\u5c42\u4e4b\u95f4\u505a\u4e00\u6b21GPU\u901a\u4fe1\u3002\u6a21\u578b\u5e76\u884c\u5728AlexNet\u4e4b\u540e\u7684\u4e03\u516b\u5e74\u6ca1\u6709\u53d7\u5230\u5173\u6ce8\uff0c\u4f46\u662f\u6700\u8fd1\u4e5f\u6709\u6536\u5230\u5173\u6ce8\uff08\u56e0\u4e3a\u592a\u5927\uff09</p> <p>Reducing Overfitting\uff1a</p> <ul> <li>\u6570\u636e\u589e\u5f3a\uff1a\u5c06\u56fe\u7247\u4eba\u5de5\u53d8\u5927\uff0c\u5728256*256\u6263\u51fa224*224</li> <li>PCA\uff0c\u5c06\u56fe\u7247\u7565\u4f5c\u4fee\u6539</li> <li>Dropout\uff1a\u968f\u673a\u5c06\u9690\u85cf\u5c42\u7684\u6570\u636e\u4ee550%\u7684\u6982\u7387\u8bbe\u62100\uff0c\u7b49\u4ef7\u4e8eL2\u6b63\u5219\u3002\u76ee\u524dCNN\u4e0d\u4f1a\u7528\u90a3\u4e48\u591a\u5168\u8fde\u63a5\uff0cdropout\u5728RNN\u8fd8\u662f\u5f88\u6709\u7528\u7684</li> </ul> <p>Details of learning\uff1a</p> <ul> <li>SGD\uff1a\u5f53\u65f6\u89c9\u5f97\u5f88\u96be\u8c03\uff0c\u4f46\u662f\u73b0\u5728\u53d1\u73b0\u5176\u4e2d\u7684\u566a\u97f3\u5bf9\u6a21\u578b\u7684\u6cdb\u5316\u6027\u6709\u5f88\u5927\u5e2e\u52a9\uff0c\u6700\u4e3b\u6d41\u7684\u7b97\u6cd5\u3002weight decay\u5f88\u91cd\u8981\uff0c\u5176\u5b9e\u662fL2\u6b63\u5219\u3002momentum\u633a\u597d\u3002\u521d\u59cb\u5316\u6743\u91cd\u662f\u7528\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee0.01\u7684\u9ad8\u65af\u968f\u673a\u53d8\u91cf\u6765\u521d\u59cb\u5316\uff08BERT\u4e5f\u53ea\u7528\u4e860.02\uff09\uff0c</li> <li>\u5b66\u4e60\u7387\u7684\u8c03\u6574\uff1aResNet\u5c31\u662f\u6bcf30\u8f6e\u4e0b\u964d\u5e38\u6570\uff0cAlexNet\u662f\u89c4\u5219\u6027\u5730\u4e0b\u964d10\u500d\uff08\u76ee\u524d\u5f88\u5c11\u7528\uff09\uff0c\u76ee\u524d\u559c\u6b22\u7528\u5e73\u6ed1\u7684\u66f2\u7ebf\u5f80\u4e0b\u964d\uff0c\u4f8b\u5982cos\u51fd\u6570\uff08\u5148\u4ece\u5f88\u5c0f\u7684\u503c\u5f00\u59cb\uff0c\u7ebf\u6027\u589e\u52a0\uff0c\u7136\u540e\u7528cos\u51cf\u5c0f\uff09</li> </ul> <p>Result\uff1a</p> <ul> <li>\u53ea\u6709\u662f\u5927\u725b\u6216\u8005\u5ba1\u8bba\u6587\u6216\u8005\u590d\u73b0\u7684\u65f6\u5019\u624d\u53bb\u770b\u4ed6\u7684exp</li> <li>ImageNet\u6709120\u4e07\u56fe\u7247\uff0c\u5b9e\u9645\u4e0a\u5b83\u7684\u5b8c\u6574\u6570\u636e\u96c6\u662f890\u4e07\u5f20\uff0c\u7528\u540e\u8005\u53ef\u80fd\u6548\u679c\u66f4\u597d</li> <li> <p>\u7ecf\u5e38\u6df7\u7528val\u548ctest\uff0c\u4e00\u822c\u6765\u8bf4val\u662f\u80fd\u4e00\u76f4\u8c03\u53c2\u7684\uff0c\u800ctest\u53ea\u80fd\u63d0\u4ea4\u51e0\u6b21</p> </li> <li> <p>\u4f5c\u8005\u8bf4GPU0\u4e0a\u548ccolor\u6709\u5173\uff0c\u800cGPU1\u4e0a\u548ccolor\u65e0\u5173\uff0c\u5b9e\u9645\u4e0a\u8fd9\u53ef\u80fd\u662f\u968f\u673a\u53d1\u751f\u7684</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/20-Codex/","title":"Codex","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/20-Codex/#codex","title":"Codex","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/20-Codex/#_1","title":"\u6807\u9898","text":"<ul> <li>Evaluating Large Language Models Trained on Code</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/20-Codex/#_2","title":"\u6458\u8981","text":"<ul> <li> <p>\u57fa\u4e8eGPT\uff0c\u4f7f\u7528GitHub\u5fae\u8c03</p> </li> <li> <p>\u5c06Python\u7684docstrings\uff08\u6ce8\u91ca\uff09\u7ffb\u8bd1\u6210code\uff0c\u4f5c\u8005\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6570\u636e\u96c6HumanEval\u7528\u6765\u5224\u65adCode\u7684\u6b63\u786e\u6027</p> </li> <li>\u4f7f\u7528sampling\uff1a\u5373\u751f\u6210\u5927\u91cf\u7684samples\u7136\u540e\u770b\u54ea\u4e2a\u80fd\u8fc7\uff0c\u7c7b\u4f3c\u56fe\u7247\u5206\u7c7b\u4e2d\u7684top five</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/20-Codex/#_3","title":"\u65b9\u6cd5","text":"<ul> <li>\u6838\u91c7\u6837\uff0c\u5c06\u9884\u6d4b\u7684\u5f53\u524d\u8bcd\u6309\u6982\u5ff5\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u7559\u4e0b\u6765\uff0c\u76f4\u5230\u6240\u6709\u7684\u8bcd\u7684\u6982\u7387\u8fbe\u523095%</li> <li> <p>\u8bad\u7ec3\u96c6\u4e5f\u8fdb\u884c\u4e86\u989d\u5916\u7684\u6536\u96c6\uff0c\u4e3a\u4e86\u548c\u6d4b\u8bd5\u96c6\u7684\u8f93\u5165\u7c7b\u4f3c\uff0c\u76f8\u5f53\u4e8e\u589e\u52a0\u4e00\u4e2a\u5e26\u6807\u51c6\u7b54\u6848\u7684\u6570\u636e\u96c6</p> </li> <li> <p>\u8003\u8651\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1\uff1a\u4ece\u4ee3\u7801\u751f\u6210\u6587\u6863\u6216\u51fd\u6570\u540d\u7b49\uff0cBERT\u53ef\u4ee5\u4f46\u662fGPT\u662f\u524d\u5411\u7684\uff0c\u6240\u4ee5\u4ed6\u4eec\u91cd\u65b0\u505a\u4e86\u4e00\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6\uff0c\u8fd9\u4e2a\u6570\u636e\u96c6\u91cc\u6ce8\u91ca\u5728\u6700\u540e</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/20-Codex/#_4","title":"\u5c40\u9650\u6027","text":"<ul> <li>Codex\u8bad\u7ec3\u4e0defficient</li> <li>prompt\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5f53docstring\u5f88\u957f\u7684\u65f6\u5019\u4ee3\u7801\u6c34\u5e73\u4f1a\u6253\u6298</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/20-Codex/#_5","title":"\u4e3b\u8981\u5185\u5bb9","text":"<ul> <li>\u57fa\u4e8eGPT\uff0c\u4f7f\u7528GitHub\u6570\u636e\u5fae\u8c03\uff0c\u7136\u540e\u8bbe\u8ba1\u4e86164\u4e2a\u95ee\u9898\u6765test\uff0c\u53e6\u5916\u81ea\u5df1\u505a\u4e86\u4e00\u4e9b\u6807\u51c6\u7b54\u6848\u6765\u63d0\u9ad8\u51c6\u786e\u7387</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/21-AlphaCode/","title":"AlphaCode","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/21-AlphaCode/#alphacode","title":"AlphaCode","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/21-AlphaCode/#_1","title":"\u6458\u8981","text":"<ul> <li>\u6807\u9898\uff1aCompetition-Level Code Generation with AlphaCode</li> <li>\u5728OpenAI\u7684\u57fa\u7840\u4e0a\u652f\u6301\u4e86\u66f4\u957f\u7684\u6587\u6863\u548c\u751f\u6210\u66f4\u957f\u7684\u4ee3\u7801</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/21-AlphaCode/#_2","title":"\u5bfc\u8a00","text":"<ul> <li>\u6570\u636e\u96c6\u6d89\u53ca\u591a\u8bed\u8a00\uff0c\u6bd4Codex\u5927\u4e865\u500d\uff0c\u540c\u65f6\u5fae\u8c03\u6570\u636e\u96c6\u4e5f\u66f4\u5927</li> <li>\u57fa\u4e8e\u6807\u51c6\u7684Encoder-decoder transformer</li> <li>\u7f16\u7801\u5668\u662f\u89e3\u7801\u5668\u76844\u500d\uff0c\u56e0\u4e3a\u8f93\u51fa\u4e00\u822c\u6bd4\u8f83\u957f</li> <li>Attention\u4e2dKV\u662f\u5171\u4eab\u77e9\u9635\u53c2\u6570\u540c\u65f6\u5c0f\u4e8eQuery\u7684\u77e9\u9635\u5927\u5c0f</li> <li>\u975e\u5bf9\u79f0\uff0c\u7f16\u7801\u5668\u7684\u8f93\u5165\u5e8f\u5217\u957f\u5ea62\u500d\u4e8e\u89e3\u7801\u5668</li> <li>\u5fae\u8c03</li> <li>\u6e29\u5ea6\uff1a\u9ad8\u5219\u5206\u5e03\u9760\u8fd1\uff0c\u4f4e\u5219\u5206\u5e03\u8fdc\u79bb\uff0c\u8fd9\u91cc\u4f7f\u75280.2\u8ba9\u5206\u5e03\u66f4\u52a0sharper</li> <li>\u4fdd\u7559\u4e0d\u6b63\u786e\u7684\u89e3\u4e5f\u662f\u597d\u7684\uff0c\u589e\u52a0\u4e24\u4e2a\u5224\u522b\u65b9\u6cd5\uff1aconditioning\u548cprediction<ul> <li>conditioning\uff1a\u5728\u8f93\u5165\u95ee\u9898\u524d\u52a0\u4e0acorrect solution\u6216\u8005false solution</li> <li>\u9884\u6d4b</li> </ul> </li> <li>GOLD</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/22-StanfordAIReport/","title":"2022 Stanford AI Index Report","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/22-StanfordAIReport/#2022-stanford-ai-index-report","title":"2022 Stanford AI Index Report","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/22-StanfordAIReport/#takeaways","title":"Takeaways","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/22-StanfordAIReport/#technical-performance","title":"Technical Performance","text":"<ul> <li> <p>CV</p> </li> <li> <p>Image</p> <ul> <li>\u56fe\u7247\u5206\u7c7b</li> </ul> <p>ImageNet\uff1a\u4f7f\u7528\u989d\u5916\u8bad\u7ec3\u6570\u636e\u6709\u66f4\u597d\u7684\u7ed3\u679c</p> <ul> <li>\u56fe\u7247\u751f\u6210</li> </ul> <p>STL-10\u6570\u636e\u96c6\uff1a\u4f7f\u7528FID\u5206\u6570\u8bc4\u4ef7\u751f\u6210\u56fe\u7247\u548c\u771f\u5b9e\u56fe\u7247\u4e4b\u95f4\u7684\u533a\u522b</p> <ul> <li> <p>Deepfake Detection</p> </li> <li> <p>\u59ff\u52bf\u8bc6\u522b</p> </li> <li> <p>\u8bed\u4e49\u5206\u5272</p> </li> <li> <p>...</p> </li> </ul> </li> <li> <p>Video</p> <ul> <li>\u884c\u4e3a\u8bc6\u522b</li> </ul> <p>Kinetics\u6570\u636e\u96c6\u3001ActivityNet\u6570\u636e\u96c6\uff08\u6807\u51fa\u51e0\u79d2\u5230\u51e0\u79d2\u662f\u4ec0\u4e48\u52a8\u4f5c\uff09</p> <ul> <li>\u7269\u4f53\u68c0\u6d4b</li> </ul> <p>COCO\u6570\u636e\u96c6</p> <ul> <li>\u6570\u636e\u5e38\u8bc6\u63a8\u7406</li> </ul> </li> <li> <p>NLP</p> </li> <li> <p>\u6587\u672c\u7406\u89e3</p> </li> <li>\u6587\u672c\u6458\u8981</li> <li>\u81ea\u7136\u8bed\u8a00\u63a8\u7406\uff0c\u5224\u65ad\u4e24\u53e5\u8bdd\u7684\u5173\u7cfb</li> <li>\u62d3\u5c55\u63a8\u7406</li> <li>\u60c5\u7eea\u8bc6\u522b</li> <li> <p>\u673a\u5668\u7ffb\u8bd1</p> </li> <li> <p>\u8bed\u8a00</p> </li> <li> <p>\u8bed\u8a00\u8bc6\u522b</p> </li> <li> <p>\u63a8\u8350\u7cfb\u7edf</p> </li> <li> <p>\u5f3a\u5316\u5b66\u4e60</p> </li> <li> <p>\u786c\u4ef6\u7cfb\u7edf</p> </li> <li> <p>\u673a\u5668\u4eba</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/23-I3D/","title":"I3D","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/23-I3D/#i3d","title":"I3D","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/23-I3D/#_1","title":"\u6807\u9898","text":"<ul> <li>Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset</li> <li>I3D\uff1aInflated 3D Network\uff0c\u5c062D\u6a21\u578b\u6269\u5f20\u52303D</li> <li>\u5356\u70b9\u5c31\u662f\u4e00\u4e2a\u65b0\u6a21\u578b\u548c\u4e00\u4e2a\u65b0\u6570\u636e\u96c6\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u5176\u5b9e\u4e5f\u5e76\u6ca1\u6709\u8ba9\u6a21\u578b\u5f88\u597d\u5730\u5b66\u4e60\u5230\u65f6\u5e8f\u4fe1\u606f\uff0c\u62bd\u53d6\u6574\u4e2a\u89c6\u9891\u7684\u4e2d\u95f4\u5e27\u5176\u5b9e\u4e5f\u5c31\u53ef\u4ee5\u6bd4\u8f83\u51c6\u786e\u5730\u9884\u6d4b\u7ed3\u679c</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/23-I3D/#_2","title":"\u6458\u8981","text":"<ul> <li>\u5e0c\u671b\u76f4\u63a5\u4ece\u4e8c\u7ef4\u7684\u6a21\u578b\u76f4\u63a5inflated\u5230\u4e09\u7ef4\u6a21\u578b\uff0c\u4f8b\u5982\u5c06kernel\u6838\u4ece3*3\u53d8\u62103*3*3\uff0c\u6700\u597d\u80fd\u76f4\u63a5\u4f7f\u7528\u4e8c\u7ef4\u7684\u53c2\u6570\uff0c\u4e0d\u9700\u8981\u505a\u592a\u591a\u7684\u6d88\u878d\u5b9e\u9a8c</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/23-I3D/#_3","title":"\u5f15\u8a00","text":"<ul> <li>CV\u9886\u57df\u5e38\u7528\u5927\u89c4\u6a21\u6570\u636e\u96c6\u505a\u9884\u8bad\u7ec3\u7136\u540e\u8fc1\u79fb\u5230\u5176\u4ed6\u4efb\u52a1\uff0c\u4f46\u662f\u89c6\u9891\u9886\u57df\u8fd8\u6ca1\u6709\u4e00\u4e2a\u5927\u7684\u6570\u636e\u96c6</li> <li>\u6784\u5efa\u4e86Kinetics-400\uff0c\u6bcf\u4e2aclass\u6709400\u4e2a\u4f8b\u5b50</li> <li>\u6d4b\u8bd5\u4e4b\u524d\u7684\u7f51\u7edc</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/23-I3D/#_4","title":"\u65b9\u6cd5","text":"<ul> <li> <p>\u5404\u79cd\u65b9\u6cd5\u5bf9\u6bd4</p> </li> <li> <p>a\uff1a\u5c06\u6bcf\u4e2a\u5e27\u901a\u8fc7CNN\u62bd\u53d6\u7279\u5f81\uff0c\u7136\u540e\u5c06\u7279\u5f81\u653e\u5165LSTM\u52a0\u4e0a\u65f6\u5e8f\u4fe1\u606f\uff0c\u6548\u679c\u4e0d\u597d</p> </li> <li>b\uff1a\u5c06\u89c6\u9891\u5e27\u53e0\u5728\u4e00\u8d77\u76f4\u63a5\u653e\u51653D CNN\u4e2d</li> <li>c\uff1a\u53cc\u6d41\u7f51\u7edc\uff0c\u6700\u540e\u662flatent fusion\uff08\u5df2\u7ecf\u51fa\u7ed3\u679c\u4e86\u518d\u878d\u5408\u5728\u4e00\u8d77\uff09\uff0c\u5c06\u4e24\u4e2a\u7279\u5f81\u76f4\u63a5\u53d6\u5e73\u5747\u76f8\u52a0</li> <li>d\uff1a\u4f7f\u7528early fusion\uff08\u8fd8\u6ca1\u51fa\u7ed3\u679c\u76f4\u63a5\u878d\u5408\u5728\u4e00\u8d77\uff09\uff0c\u6700\u540e\u4f7f\u75283D CNN</li> <li>e\uff1a\u672c\u6587</li> </ul> <p></p> <ul> <li> <p>inflate</p> </li> <li> <p>\u5c062D\u76f4\u63a5\u53d8\u62103D\u7f51\u7edc\uff0c\u4e0d\u9700\u8981\u8bbe\u8ba1\u7f51\u54af</p> </li> <li> <p>bootstrap \u5f15\u5bfc</p> </li> <li> <p>\u7528\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u53c2\u6570\u6765\u505a\u521d\u59cb\u5316\uff0c\u4e00\u822c\u662f\u4e24\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u7f51\u7edc\u7ed3\u6784</p> </li> <li>\u672c\u6587\u9700\u8981\u75282D\u9884\u8bad\u7ec3\u6a21\u578b\u53bb\u521d\u59cb\u53163D\u7f51\u7edc</li> <li> <p>\u4f5c\u8005\u7684\u65b9\u6cd5\u662f\uff1a\u5982\u679c\u4e24\u4e2a\u6a21\u578b\u7684\u8f93\u5165\u76f8\u540c\u4e14\u8f93\u51fa\u4e5f\u76f8\u540c\u8bf4\u660e\u4e24\u4e2a\u6a21\u578b\u521d\u59cb\u5316\u4e00\u81f4\uff0c\u56e0\u6b64\u4f5c\u8005\u5c06\u56fe\u7247\u590d\u5236\u5f88\u591a\u5e27\u5f62\u6210\u89c6\u9891\uff0c\u7136\u540e\u5c06\u56fe\u7247\u5582\u7ed92D\u7f51\u7edc\uff0c\u7ed9\u89c6\u9891\u5582\u7ed93D\u7f51\u7edc</p> </li> <li> <p>\u5177\u4f53\u7ed3\u6784\uff1a\u6700\u521d\u4f7f\u7528Inception\u6a21\u578b\uff0c\u56e0\u4e3a\u5f53\u65f6\u6bd4ResNet\u597d\u4e00\u70b9\uff0c\u4f46\u662f\u540e\u6765\u4e5f\u6362\u56deResNet\u4e86\u3002Pooling\u5c42\u505a\u4e86\u4fee\u6539\uff0c\u65f6\u95f4\u7ef4\u5ea6\u4e0a\u4e0d\u8981\u505a\u4e0b\u91c7\u6837\uff0c\u5373\u8f93\u516564\u5e27\u8f93\u51fa64\u5e27</p> </li> </ul> <p></p> <ul> <li>5\u79cd\u7f51\u7edc\u67b6\u6784\u7684\u5177\u4f53\u6bd4\u8f83\uff1a\uff081\u79d225\u5e27\uff09</li> </ul> <p>\u6d4b\u8bd5\u7684\u65f6\u501910s\u89c6\u9891\u6700\u597d\u90fd\u56ca\u62ec\u5728\u5185</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/23-I3D/#_5","title":"\u5b9e\u9a8c","text":"<ul> <li> <p>\u5149\u6d41\u59cb\u7ec8\u80fd\u63d0\u70b9</p> </li> <li> <p>\u6574\u4f53\u5fae\u8c03\u6548\u679c\u4f1a\u66f4\u597d</p> </li> <li> <p>\u6548\u679c\uff1a</p> </li> <li> <p>\u53ef\u4ee5\u4e0d\u4f7f\u7528IDT\u7b49\u4f20\u7edf\u7279\u5f81</p> </li> <li>\u53ef\u4ee5\u76f4\u63a5\u5728Kinetics\u4e0a\u8bad\u7ec3\u800c\u4e0d\u9700\u8981ImageNet\u9884\u8bad\u7ec3\uff0c\u89c6\u9891\u6a21\u578b\u5728\u89c6\u9891\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3</li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/24-VideoRecognition/","title":"Video Action Recognition","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/24-VideoRecognition/#video-action-recognition","title":"Video Action Recognition","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/24-VideoRecognition/#_1","title":"\u7efc\u8ff0","text":"<ul> <li>\u6807\u9898\uff1aA Comprehensive Study of Deep Video Action Recognition</li> <li>\u56db\u4e2a\u9636\u6bb5</li> <li>Hand-crafted -&gt; CNN</li> <li>\u53cc\u6d41</li> <li>3D CNN</li> <li>Video Transformer</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/24-VideoRecognition/#cnn","title":"CNN","text":"<ul> <li> <p>Large-scale Video Classification with Convolutional Neural Networks</p> </li> <li> <p>\u63d0\u51faSports-1M\u6570\u636e\u96c6</p> </li> <li> <p>\u4e0d\u540c\u65b9\u6cd5</p> <p></p> <p>Single Frame\u5c31\u662f\u56fe\u7247\u5206\u7c7b\uff0c\u540e\u9762\u4e09\u79cd\u4f7f\u7528\u5230\u4e86\u65f6\u5e8f\u4fe1\u606f\u3002Late Fusion\u662f\u4e24\u5e27\u5206\u522b\u901a\u8fc7CNN\u7136\u540e\u5c06\u7279\u5f81\u7ed3\u5408\u8d77\u6765\u901a\u8fc7FC\uff0cEarly Fusion\u662f\u591a\u5e27\u4e00\u5f00\u59cb\u5c31\u76f4\u63a5\u53e0\u52a0\u7136\u540e\u901a\u8fc7CNN\uff0cSlow Fusion\u662f\u4e00\u5f00\u59cb\u56db\u5e27\u53e0\u52a0\u8fdb\u5165CNN\u4e4b\u540e\u6162\u6162\u5408\u5e76</p> <p>\u5b9e\u9645\u4e0a\u4e0d\u540c\u65b9\u6cd5\u6548\u679c\u5dee\u4e0d\u591a\uff0c\u540c\u65f6\u5728\u5c0f\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u4e4b\u540e\u6bd4\u4e0d\u8fc7\u624b\u5de5\u7279\u5f81</p> </li> <li> <p>\u591a\u5206\u8fa8\u7387CNN</p> <p></p> <p>fovea\u6d41\u7684\u8f93\u5165\u662f\u56fe\u7247\u4e2d\u95f4\u7684\u4fe1\u606f\uff0ccontext\u6d41\u662f\u5168\u5c40\u4fe1\u606f\uff0c\u6548\u679c\u7814\u7a76\u4e0d\u591f\u597d\uff0c\u8fc1\u79fb\u5b66\u4e60\u6548\u679c\u8fdc\u4e0d\u5982\u624b\u5de5\u7279\u5f81</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/24-VideoRecognition/#_2","title":"\u53cc\u6d41","text":"<ul> <li> <p>\u4e4b\u524d\u7684\u53cc\u6d41\u5149\u6d41\u7f51\u7edc</p> </li> <li> <p>Late Fusion\uff0c\u662f\u5426\u80fd\u591f\u5c1d\u8bd5\u522b\u7684Fusion\u65b9\u6cd5</p> </li> <li>\u4e2d\u95f4\u7684CNN\u662fAlexNet\u7684\u53d8\u4f53\uff0c\u80fd\u5426\u4f7f\u7528\u522b\u7684\u7f51\u7edc</li> <li>\u62bd\u53d6\u51fa\u7684\u7279\u5f81\u76f4\u63a5\u53bb\u505a\u5206\u7c7b\uff0c\u662f\u5426\u80fd\u591f\u901a\u8fc7RNN\u548cLSTM\u6765\u66f4\u597d\u5730\u62bd\u53d6\u7279\u5f81</li> <li> <p>\u5355\u5e27\u548c\u5149\u6d41\u56fe\u7247\u8fd8\u662f\u6bd4\u8f83\u77ed\uff0c\u9700\u8981\u9488\u5bf9\u957f\u65f6\u95f4\u89c6\u9891</p> </li> <li> <p>Beyond Short Snippets: Deep Networks for Video Classification</p> </li> <li> <p>\u67b6\u6784\u56fe</p> <p></p> </li> <li> <p>\u62bd\u53d6\u7279\u5f81\u4e4b\u540e\u4f7f\u7528\u54ea\u79cdPooling\uff0c\u672c\u6587\u8fdb\u884c\u4e86\u6df1\u5165\u7684\u63a2\u7d22\uff0c\u53d1\u73b0Conv Pooling\u6548\u679c\u6700\u597d</p> </li> <li> <p>\u4f7f\u7528LSTM\u53d1\u73b0\u6548\u679c\u63d0\u5347\u6709\u9650</p> </li> <li> <p>LSTM\uff1a\u6700\u5e95\u5c42\u662fCNN\u62bd\u53d6\u51fa\u7684\u7279\u5f81\uff0c\u7136\u540e\u63a55\u5c42LSTM\uff0c\u6700\u540eSoftmax\u8f93\u51fa</p> <p></p> </li> <li> <p>LSTM\u7684\u8f93\u5165\u5fc5\u987b\u6709\u4e00\u5b9a\u53d8\u5316\u624d\u80fd\u5b66\u5230\u65f6\u95f4\u4e0a\u7684\u6539\u53d8\uff0c\u5982\u679c\u89c6\u9891\u6bd4\u8f83\u77ed\uff0c\u90a3\u5c31\u6ca1\u6709\u6548\u679c\u4e86</p> </li> <li> <p>Convolutional Two-Stream Network Fusion for Video Action Recognition</p> </li> <li> <p>\u672c\u6587\u8be6\u7ec6\u63a2\u7d22\u4e86\u4e0d\u540cFusion\u7684\u6548\u679c</p> </li> <li> <p>Spatial Fusion</p> <p>\u4fdd\u8bc1\u65f6\u95f4\u6d41\u548c\u7a7a\u95f4\u6d41\u7279\u5f81\u56fe\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u4ea7\u751f\u7684\u901a\u9053Response\u662f\u80fd\u8054\u7cfb\u8d77\u6765\u7684\uff0c\u8fd9\u6837\u624d\u7b97Early Fusion</p> <p>\u5305\u62ec Max Fusion / Concatenation Fusion / Conv Fusion / Bilinear Fusion / Sum Fusion\uff0c\u8868\u73b0\u6700\u597d\u7684\u662fConv Fusion</p> </li> <li> <p>Fusion\u7684\u9636\u6bb5</p> <p></p> <p>\u4f5c\u8005\u603b\u7ed3\u4e86\u4e24\u79cd\u6bd4\u8f83\u597d\u7684Fusion\u65f6\u673a</p> </li> <li> <p>Temporal Fusion</p> <p>\u4f5c\u8005\u5c1d\u8bd5\u4e863D Pooling\u548c3D Conv+3D Pooling</p> </li> <li> <p>\u7ed3\u8bba</p> <p></p> <p>\u4f5c\u8005\u7684\u7f51\u7edc\u6709\u4e24\u4e2a\u5206\u652f\uff0c\u4e00\u4e2a\u5305\u62ec\u65f6\u7a7a\u4fe1\u606f\uff0c\u800c\u53e6\u4e00\u79cd\u53ea\u5305\u542b\u65f6\u95f4\u4fe1\u606f</p> <p>\u63a8\u7406\u7684\u65f6\u5019\u7528\u4e24\u4e2aloss late fusion</p> </li> <li> <p>\u8bc1\u660e\u4e86early fusion\u548c3D Conv\u7684\u6548\u679c</p> </li> <li> <p>TSN</p> </li> <li> <p>\u6807\u9898\uff1aTemporal Segment Networks: Towards Good Practices for Deep Action Recognition</p> </li> <li> <p>\u80fd\u5904\u7406\u66f4\u957f\u65f6\u95f4\u7684\u89c6\u9891\uff0c\u540c\u65f6\u786e\u5b9a\u4e86\u5f88\u591a\u5f88\u597d\u7528\u7684\u6280\u5de7\u5373Towards Good Practices</p> </li> <li> <p>\u957f\u65f6\u95f4\u89c6\u9891\u5c31\u5148\u5206\u6bb5\uff0c\u7136\u540e\u5728\u6bcf\u6bb5\u91cc\u968f\u673a\u62bd\u53d6\u4e00\u5e27\uff0c\u7136\u540e\u5728\u4e4b\u540e\u51e0\u5e27\u4e2d\u8ba1\u7b97\u5149\u6d41\uff0c\u7136\u540e\u518d\u901a\u8fc7\u5171\u4eab\u53c2\u6570\u7684\u53cc\u6d41\u7f51\u7edc\u3002\u4f5c\u8005\u8ba4\u4e3a\u867d\u7136\u56fe\u7247\u4e0d\u540c\u4f46\u662f\u6700\u9ad8\u5c42\u8bed\u4e49\u4fe1\u606f\u76f8\u540c\uff0c\u6240\u4ee5\u5c06\u7a7a\u95f4\u6d41\u8fdb\u884c\u4e00\u4e2aSegmental Consensus\uff0c\u53ef\u4ee5\u505a\u52a0\u6cd5\u3001\u4e58\u6cd5\u3001LSTM\u7b49\uff0c\u7136\u540e\u4e24\u4e2aConsensus\u505a\u4e00\u4e2a\u52a0\u6743\u5e73\u5747</p> <p></p> </li> <li> <p>\u6280\u5de7</p> <ul> <li>Cross Modality Pre-training\uff1aImageNet\u9884\u8bad\u7ec3\u6a21\u578b\u5982\u4f55\u8fc1\u79fb\u5230\u5149\u6d41\u56fe\u4e0a\uff0c\u56e0\u4e3a\u5149\u6d41\u56fe\u670910\u5f20\u517120\u4e2a\u901a\u9053\uff0c\u4f46\u662fImageNet\u9884\u8bad\u7ec3\u6a21\u578b\u53ea\u63a5\u53d73\u4e2a\u901a\u9053\u3002\u4f5c\u8005\u5c06\u7b2c\u4e00\u4e2a\u5c42\u7684\u7ed3\u6784\u6539\u53d8\u4e86\uff0c\u8fd9\u91cc\u5c31\u5148\u5c06\u4e09\u4e2a\u901a\u9053\u7684\u53c2\u6570\u503c\u53d6\u5e73\u5747\u53d8\u6210\u4e00\u4e2a\u901a\u9053\uff0c\u7136\u540e\u590d\u523620\u4efd\u5f62\u621020\u4e2a\u901a\u9053\uff0c\u6548\u679c\u975e\u5e38\u597d</li> <li>\u6a21\u578b\u6b63\u5219\u5316\uff1aBN\u5bfc\u81f4\u4e25\u91cd\u7684\u8fc7\u62df\u5408\uff0c\u8fd9\u91cc\u4f7f\u7528partial BN\uff0c\u5373\u6253\u5f00\u7b2c\u4e00\u5c42BN\uff0cfreeze\u4e4b\u540e\u7684\u6240\u6709BN</li> <li>\u6570\u636e\u589e\u5f3a</li> <li>Corner Crop\uff1a\u6b63\u5e38\u7684Random Crop\u4e00\u822c\u90fd\u4f1a\u5728\u4e2d\u95f4Crop\uff0c\u6240\u4ee5\u4f5c\u8005\u5f3a\u5236\u5728\u8fb9\u7f18Crop</li> <li>Scale-jittering\uff1a\u6539\u53d8\u56fe\u7247\u7684\u957f\u5bbd\u6bd4</li> </ul> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/24-VideoRecognition/#3d-cnn","title":"3D CNN","text":"<ul> <li> <p>\u7531\u4e8e\u63d0\u524d\u62bd\u53d6\u5149\u6d41\u975e\u5e38\u8017\u65f6\uff0c\u4e0d\u80fd\u652f\u6301\u5b9e\u65f6\u5149\u6d41\u62bd\u53d6</p> </li> <li> <p>C3D</p> </li> <li> <p>\u6807\u9898\uff1aLearning Spatiotemporal Features with 3D Convolutional Networks</p> </li> <li> <p>\u6700\u4e3b\u8981\u7279\u70b9\u662f\u4f7f\u7528\u5927\u578b\u6570\u636e\u96c6Sports-1M\uff0c\u7f51\u7edc\u66f4\u52a0\u6df1</p> </li> <li> <p>\u5c31\u662f3D\u7248\u672c\u7684VGG</p> </li> <li> <p>\u7ed3\u6784\uff1a\u4f5c\u8005\u53d1\u73b0FineTune\u6548\u679c\u5e76\u4e0d\u597d\uff0c\u4e0d\u5982\u76f4\u63a5\u4eceFC6\u62bd\u53d6\u7279\u5f81\u7136\u540e\u8bad\u7ec3SVM\uff0cC3D\u7279\u5f81\u6307\u7684\u5c31\u662fFC6\u62bd\u53d6\u51fa\u7684\u7279\u5f81</p> <p></p> </li> <li> <p>\u540e\u6765\u5f88\u591a\u4efb\u52a1\u90fd\u76f4\u63a5\u4f7f\u7528FC6\u7279\u5f81\u7136\u540e\u505a\u4e0b\u6e38\u4efb\u52a1</p> </li> <li> <p>I3D</p> </li> <li> <p>\u964d\u4f4e\u4e86\u7f51\u7edc\u8bad\u7ec3\u96be\u5ea6</p> </li> <li>\u4f5c\u8005\u770b\u5230C3D\u6548\u679c\u5e76\u4e0d\u592a\u597d\uff0c\u6240\u4ee5\u8ba4\u4e3a\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u6240\u4ee5\u5c31\u60f3\u628a2D\u7f51\u7edc\u6269\u5c55\u62103D\u7f51\u7edc</li> <li> <p>I3D\u8fd8\u662f\u7528\u5230\u4e86\u5149\u6d41\uff0c\u4e14\u5e26\u6765\u4e86\u63d0\u5347\uff0c\u6240\u4ee5\u5149\u6d41\u6709\u7528</p> </li> <li> <p>Non-local Neural Networks</p> </li> <li> <p>\u6458\u8981\uff1a\u5377\u79ef\u548c\u9012\u5f52\u90fd\u662f\u5728\u5c40\u90e8\u533a\u57df\u4e2d\u7684feature\uff0c\u800c\u975e\u5c40\u90e8\u7684\u4fe1\u606f\u53ef\u80fd\u5bf9\u6cdb\u5316\u6709\u5f88\u591a\u597d\u5904\uff0c\u6240\u4ee5\u8fd9\u91cc\u5b9e\u73b0\u4e00\u4e2aNon-local\u7684\u7b97\u5b50\uff0c\u8fd9\u662f\u4e00\u4e2a\u5373\u63d2\u5373\u7528\u7684block\uff0c\u4f5c\u7528\u5c31\u662f\u5efa\u6a21\u957f\u8ddd\u79bb\u4fe1\u606f\uff0c\u5728\u5404\u79cd\u4efb\u52a1\u4e2d\u90fd\u5f88\u6709\u6548</p> </li> <li> <p>\u7ed3\u6784\uff1a</p> <p>\u65f6\u7a7a\u7b97\u5b50\uff0c\u5176\u5b9e\u662f\u6807\u51c6\u7684attention\u4ee5\u53ca\u6b8b\u5dee\u8fde\u63a5\uff0c\u4e3a\u4e86\u9002\u914d3D\u6240\u4ee5\u8fd9\u91cc2D\u64cd\u4f5c\u90fd\u53d8\u6210\u4e863D</p> <p></p> </li> <li> <p>\u6d88\u878d\u5b9e\u9a8c\u6bd4\u8f83\u91cd\u8981</p> <ul> <li>\u4e00\u5f00\u59cb\u786e\u5b9aattention\u7684\u64cd\u4f5c\uff1adot-product</li> <li>\u68c0\u6d4b\u54ea\u4e2aResNet Block\u4e4b\u540e\u63d2\u5165\u8fd9\u4e2a\u7b97\u5b50\u6548\u679c\u6700\u597d\uff1a\u53d1\u73b0\u5728\u975e\u6700\u540e\u4e00\u4e2a\u90fd\u8fd8\u597d\uff0c\u4f5c\u8005\u8ba4\u4e3a\u5230\u540e\u9762\u6ca1\u6709\u5f88\u591a\u7a7a\u95f4\u4fe1\u606f\u4e86\uff0c\u4e5f\u6ca1\u6709\u8fdc\u8ddd\u79bb\u4fe1\u606f\u53ef\u5b66\uff1b\u800c\u592a\u65e9\u505a\u6210\u672c\u6bd4\u8f83\u5927</li> <li>\u5c1d\u8bd5\u52a0\u591a\u5c11\uff1a\u53d1\u73b0\u66f4\u591a\u7b97\u5b50\u66f4\u6709\u7528</li> <li>\u65f6\u95f4\u662f\u5426\u6709\u5fc5\u8981\uff1a\u53d1\u73b0\u5728\u65f6\u7a7a\u4e0a\u505aattention\u6548\u679c\u6700\u597d</li> <li>\u66f4\u957f\u7684\u89c6\u9891\uff1a\u80fd\u6709\u63d0\u5347</li> </ul> </li> <li> <p>\u4e4b\u540e\u5927\u5bb6\u66f4\u4e0d\u7528LSTM\u4e86\uff0cNon-Local\u6210\u4e3a\u91cd\u8981\u7b97\u5b50</p> </li> <li> <p>R(2+1)D</p> </li> <li> <p>\u6807\u9898\uff1aA Closer Look at Spatiotemporal Convolutions for Action Recognition</p> </li> <li> <p>\u6d4b\u8bd52D\u548c3D\u5404\u79cd\u7f51\u7edc\uff0c\u6700\u540e\u53d1\u73b0\u5c063D\u5377\u79ef\u62c6\u5206\u6210\u7a7a\u95f4\u4e0a\u76842D\u548c\u65f6\u95f4\u4e0a\u76841D\u6548\u679c\u6700\u597d</p> </li> <li> <p>\u67b6\u6784\u6bd4\u8f83</p> <p></p> </li> <li> <p>R(2+1)D</p> <p></p> </li> <li> <p>\u6bd4\u4e4b\u524d\u597d\u7684\u539f\u56e0</p> <ul> <li>\u589e\u52a0\u975e\u7ebf\u6027\uff0c\u539f\u6765\u53ea\u6709\u4e00\u4e2aReLU\uff0c\u73b0\u5728\u6709\u4e24\u4e2aReLU</li> <li>\u76f8\u5bf9\u5bb9\u6613\u4f18\u5316</li> </ul> </li> <li> <p>\u4f46\u662f\u6700\u7ec8\u7ed3\u679c\u5728UCF101\u548cHMDB51\u6bd4I3D\u5dee\uff0c\u5728K400\u4e0a\u5355\u72ec\u7684RGB / Flow\u6548\u679c\u6bd4\u8f83\u597d\uff0c\u4f46\u662f\u5408\u8d77\u6765\u5c31\u6bd4I3D\u5dee</p> </li> <li> <p>\u8f93\u5165\u662f112*112\u800cI3D\u7684\u8f93\u5165\u662f224*224\uff0c\u4e14\u524d\u8005\u4e0d\u9700\u8981\u4f7f\u7528ImageNet\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u540c\u65f6R(2+1)D\u8bad\u7ec3\u66f4\u5bb9\u6613</p> </li> <li> <p>SlowFast</p> </li> <li> <p>\u6807\u9898\uff1aSlowFast Networks for Video Recognition</p> </li> <li> <p>\u501f\u9274\u53cc\u6d41\u6a21\u578b\uff0c\u4f46\u662f\u4e0d\u4f7f\u7528\u5149\u6d41\u4f5c\u4e3a\u8f93\u5165</p> </li> <li> <p>\u4f5c\u8005\u8bf4\u6765\u6e90\u4e8e\u4eba\u6709p\u7ec6\u80de\u548cm\u7ec6\u80de\uff0c\u524d\u8005\u6355\u6349\u9759\u6001\u4fe1\u606f\u540e\u8005\u6355\u6349\u9ad8\u9891\u8fd0\u52a8\u4fe1\u606f\uff0c\u524d\u8005\u536080%\u540e\u8005\u536020%\uff0c\u6240\u4ee5\u4f5c\u8005\u8bbe\u8ba1\u4e86\u4e24\u53ea\u7f51\u7edc\uff0c\u4e00\u4e2a\u662fSlow\u7f51\u7edc\uff08I3D\uff09\u8f93\u5165\u5c11\u4f46\u662f\u53c2\u6570\u91cf\u5927\uff0c\u53e6\u4e00\u4e2a\u662fFast\u7f51\u7edc\u8f93\u5165\u591a\u4f46\u662f\u53c2\u6570\u91cf\u5c0f</p> </li> <li> <p></p> </li> <li> <p>\u5177\u4f53\u7f51\u7edc\u7ed3\u6784</p> <p></p> <p>\u5feb\u5206\u652f\u6bcf16\u5e27\u53d61\u5e27\uff0c\u6162\u5206\u652f2\u5e27\u53d6\u4e00\u5e27\uff0c\u6240\u4ee5\u5feb\u5206\u652f\u7684\u901a\u9053\u6570\u5c11\u5f88\u591a\uff0c\u53e6\u5916\u65f6\u95f4\u7ef4\u5ea6\u4e0a\u4e0d\u4e0b\u91c7\u6837</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/24-VideoRecognition/#video-transformer","title":"Video Transformer","text":"<ul> <li> <p>Timesformer</p> </li> <li> <p>\u6807\u9898\uff1aIs space-time attention all you need for video understanding?</p> </li> <li> <p>\u5b9e\u9a8c\u6027\u8bba\u6587\uff0c\u63a2\u7d22\u5982\u4f55\u5c06Transformer\u8fc1\u5230\u89c6\u9891\u9886\u57df</p> </li> <li> <p>\u67b6\u6784\u5bf9\u6bd4</p> <ul> <li>S\uff1abaseline</li> <li>ST\uff1a\u6700\u66b4\u529b\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5c06\u4e09\u4e2a\u7ef4\u5ea6\u8fc7attention\u5c42\u2014\u2014GPU\u5185\u5b58\u585e\u4e0d\u4e0b</li> <li>T+S\uff1a\u65f6\u7a7a\u5206\u522b\u505a\u81ea\u6ce8\u610f\u529b</li> <li>L+G\uff1a\u5c40\u90e8\u7b97\u7136\u540e\u5168\u5c40\u7b97</li> <li>T+W+H\uff1a\u5206\u522b\u6839\u636e\u65f6\u95f4+\u5bbd\u5ea6+\u957f\u5ea6\u7ef4\u5ea6\u505a\u81ea\u6ce8\u610f\u529b</li> </ul> <p></p> </li> <li> <p>\u66f4\u8be6\u7ec6\u7684attention\u8bbe\u8ba1\u65b9\u6848</p> <ul> <li>\u84dd\u8272patch\u662f\u57fa\u51c6\u70b9\uff0c\u7ea2\u8272\u7684patch\u662f\u4f1a\u548c\u5b83\u505aattention\u7684patch</li> </ul> <p></p> </li> <li> <p>\u6700\u540e\u6700\u597d\u7684\u65b9\u6848\u662fDivided Space-Time Attention</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/25-ParameterServer/","title":"ParameterServer","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/25-ParameterServer/#parameterserver","title":"ParameterServer","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/25-ParameterServer/#_1","title":"\u6807\u9898","text":"<ul> <li>Scaling Distributed Machine Learning with the Parameter Server</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/25-ParameterServer/#_2","title":"\u6458\u8981","text":"<ul> <li>\u63d0\u51fa\u4e00\u4e2a\u53c2\u6570\u670d\u52a1\u5668\u7684\u6846\u67b6\uff1a\u6570\u636e\u548c\u4efb\u52a1\u5728\u5de5\u4f5c\u8282\u70b9\u4e0a\uff0c\u670d\u52a1\u5668\u8282\u70b9\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u5171\u4eab\u7684\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u8868\u793a\u4e3a\u5bc6\u96c6\u6216\u8005\u7a00\u758f\u7684\u5411\u91cf\u6216\u8005\u77e9\u9635</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/25-ParameterServer/#_3","title":"\u5f15\u8a00","text":"<ul> <li>\u75db\u70b9</li> <li>\u8bbf\u95ee\u5171\u4eab\u53c2\u6570\u9700\u8981\u975e\u5e38\u5927\u7684\u7f51\u7edc\u5e26\u5bbd</li> <li>\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u662f\u7ebf\u6027\u7684\uff0c\u540c\u6b65\u5f00\u9500\u975e\u5e38\u5927</li> <li>\u5bb9\u707e\u8981\u6c42\u5f88\u9ad8</li> <li>\u8d21\u732e</li> <li>\u6700\u521d\u662f\u674e\u6c90\u8001\u677f\u5728Yahoo\u5b9e\u73b0\u4e86\u7b2c\u4e00\u4ee3\u53c2\u6570\u670d\u52a1\u5668\u6846\u67b6\uff0cJeff Dean\u5b9e\u73b0\u7b2c\u4e8c\u4ee3\uff0c\u672c\u6587\u5b9e\u73b0\u7b2c\u4e09\u4ee3\u53c2\u6570\u670d\u52a1\u5668</li> <li>\u66f4\u597d\u7684\u62bd\u8c61\uff0c\u65b9\u4fbf\u5b9e\u73b0\u5404\u79cdAI\u7b97\u6cd5\uff0c\u4e14\u8d34\u5408\u771f\u5b9e\u5de5\u4e1a\u754c</li> <li>Features\uff1a<ul> <li>\u9ad8\u6548\u901a\u4fe1\uff1a\u5f02\u6b65\u901a\u4fe1\uff0c\u901a\u4fe1\u91cf\u538b\u7f29</li> <li>\u7075\u6d3b\u7684\u4e00\u81f4\u6027\u6a21\u578b\uff1a\u4e24\u4e2a\u673a\u5668\u5728\u540c\u4e00\u65f6\u523b\u5bf9\u67d0\u4e2a\u503c\u5177\u6709\u4e00\u81f4\u6027\uff0c\u672c\u6587\u5b9e\u73b0\u4e86\u5f31\u4e00\u81f4\u6027\u6a21\u578b\uff0c\u4f46\u662f\u4e4b\u540e\u6df1\u5ea6\u5b66\u4e60\u5e0c\u671b\u6709\u5f3a\u4e00\u81f4\u6027</li> <li>\u5f39\u6027\u5730\u53ef\u6269\u5c55\u6027\uff1a\u65b0\u7684\u8282\u70b9\u53ef\u4ee5\u52a0\u8fdb\u6765\u800c\u4e0d\u8ba9\u6574\u4e2a\u4efb\u52a1\u505c\u6b62</li> <li>\u5bb9\u707e\uff1a\u5411\u91cf\u949f\u6280\u672f\uff0c\u4f7f\u5f97\u6574\u4e2a\u7cfb\u7edf\u53d1\u751f\u975e\u81f4\u547d\u6027\u9519\u8bef1\u79d2\u5185\u80fd\u591f\u6062\u590d</li> <li>\u6613\u7528\uff1a\u63d0\u4f9b\u4e86C++\u7684\u5411\u91cf\u548c\u77e9\u9635</li> </ul> </li> <li>\u65b0\u9896\u5ea6\uff1a\u4f7f\u7528\u6b63\u786e\u7684\u7cfb\u7edf\u6280\u672f\uff0c\u5c06\u4ed6\u4eec\u9002\u914d\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u5e76\u4e14\u4fee\u6539\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4f7f\u5176\u66f4\u52a0\u7cfb\u7edf\u53cb\u597d</li> <li>\u5de5\u7a0b\u6311\u6218</li> <li>server node\u4f1a\u7ef4\u62a4\u5168\u5c40\u5171\u4eab\u7684\u53c2\u6570\uff0c\u53ef\u80fd\u53c2\u6570\u5f88\u5927\uff0c\u9700\u8981\u591a\u53f0server node\u6765\u5b58\u50a8</li> <li>worker node\u8ba1\u7b97\u8282\u70b9\u4f1a\u53d6\u53c2\u6570\u4e2d\u4e00\u5757\u6765\u505a\u8ba1\u7b97</li> <li>\u6311\u6218\uff1a<ul> <li>\u901a\u4fe1\uff1a\u4e4b\u524d\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4f7f\u7528key-value\u5bf9\u6765\u66f4\u65b0datastore\u91cc\u7684\u53c2\u6570\uff08\u5f80\u5f80\u662f\u9010\u4e00\u66f4\u65b0\uff09\uff0c\u4f46\u662f\u673a\u5668\u5b66\u4e60\u91cc\u5f80\u5f80\u662f\u5411\u91cf\u3001\u77e9\u9635\u3001\u5f20\u91cf\u7b49\u7ed3\u6784\u7684\u66f4\u65b0\uff0c\u540c\u65f6\u8fd8\u53ef\u80fd\u51fa\u73b0\u7a00\u758f\u77e9\u9635\u7684\u60c5\u51b5</li> <li>\u5bb9\u707e\uff1a\u4f1a\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7684\u53c2\u6570\u6709\u5b9e\u65f6\u7684\u590d\u5236</li> </ul> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/25-ParameterServer/#_4","title":"\u673a\u5668\u5b66\u4e60","text":"<ul> <li> <p>\u5206\u5e03\u5f0f\u7b97\u6cd5</p> </li> <li> <p>Task Scheduler\u8d1f\u8d23\u901a\u77e5Worker\u505a\u8ba1\u7b97</p> </li> <li>Worker\u8bfb\u53d6\u81ea\u5df1\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u7136\u540e\u62c9\u53bb\u670d\u52a1\u5668\u7aef\u7684\u53c2\u6570\uff08\u4e0d\u662f\u5168\u90e8\u53c2\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u6807\u4e3aworking set\uff09\uff0c\u7136\u540e\u505a\u68af\u5ea6\u8ba1\u7b97\u5e76\u8fed\u4ee3</li> <li>Server\u6c47\u603b\u68af\u5ea6\u8ba1\u7b97\u7136\u540e\u66f4\u65b0\u6240\u6709\u53c2\u6570 \\(w\\)</li> </ul> <p></p> <ul> <li>\u6d41\u7a0b</li> </ul> <p>\u6ce8\u610f\u56fe\u4e2d\u7684\u8bad\u7ec3\u6570\u636e\u53ef\u80fd\u662f\u7a00\u758f\u7684\uff0c\u6240\u4ee5\u5b83\u6709\u4e9b \\(w\\) \u53c2\u6570\u662f\u4e0d\u9700\u8981pull\u5230\u7684</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/25-ParameterServer/#_5","title":"\u67b6\u6784","text":"<ul> <li> <p>\u67b6\u6784\u56fe</p> </li> <li> <p>\u591a\u4e2aworker group\u7684\u76ee\u7684\u662f\u53ef\u4ee5\u8bad\u7ec3\u591a\u4e2a\u6709\u4ea4\u96c6\u7684\u4efb\u52a1\u3001\u6216\u8005\u63d0\u4f9b\u591a\u4e2a\u7ebf\u4e0a\u670d\u52a1\u4f8b\u5982inference\u63a5\u53e3</p> </li> </ul> <p></p> <ul> <li> <p>\u53c2\u6570\u670d\u52a1\u5668\u5bf9\u53c2\u6570\u7684\u62bd\u8c61\u662f (Key, Value)</p> </li> <li> <p>key\u7b80\u5355\u8ba4\u4e3a\u662f\u53c2\u6570\\(w\\)\u7684\u4e0b\u6807\uff0c\u4f46\u662f\u4e0b\u6807\u4e0d\u4e00\u5b9a\u8fde\u7eed\uff0c\u5f80\u5f80\u662fhash\u503c</p> </li> <li>value\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\u6216\u8005\u5411\u91cf</li> <li>key\u4e00\u822c\u662fint64\u6216\u8005int128\uff08hash\u503c\uff09\uff0cvalue\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u6216\u8005\u4e00\u4e32\u6d6e\u70b9\u6570</li> <li> <p>\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528BLAS\u5e93\u7b49\u5199\u77e9\u9635\u4e58\u6cd5</p> </li> <li> <p>Range Push and Pull</p> </li> <li> <p>\u76f8\u5f53\u4e8e\u53c2\u6570\u53ef\u4ee5\u5c06\u67d0\u4e2arange\u5185\u7684key\u53d1\u9001\u51fa\u53bb\uff08\u6216\u63a5\u53d7\uff09</p> </li> <li> <p>server\u7aef\u7528\u6237\u8bbe\u8ba1\u51fd\u6570</p> </li> <li> <p>\u670d\u52a1\u5668\u4ee3\u7801\u975e\u5e38\u91cd\u8981\uff0c\u6302\u4e86\u5c31\u5f88\u5371\u9669</p> </li> <li> <p>\u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u53e3\uff0c\u5728\u5b89\u5168\u6027\u57fa\u7840\u4e0a\uff0c\u7528\u6237\u53ef\u4ee5\u8bbe\u7f6e\\(w\\)\u600e\u4e48\u66f4\u65b0</p> </li> <li> <p>\u5f02\u6b65\u4efb\u52a1</p> </li> <li> <p>\u4e00\u4e2a\u4efb\u52a1\u901a\u8fc7\u4e00\u4e2aRPC\u89e6\u53d1\uff0c\u8fd9\u91cc\u4f1a\u5f02\u6b65\u5730\u89e6\u53d1\u4efb\u52a1\uff0c\u5373\u8ba9Worker0\u6267\u884cWorkerIterate\uff0c\u4e0d\u7b49\u5b83\u6267\u884c\u5b8c\u76f4\u63a5\u8ba9Worker1\u6267\u884cWorkIterate</p> </li> <li>\u4f46\u662f\u6709\u4e9b\u4efb\u52a1\u662f\u6709\u4f9d\u8d56\u7684\uff0c\u5c31\u662f\u6709\u987a\u5e8f\u6267\u884c\u7684\u8981\u6c42</li> <li>\u4e0b\u56fe iter11 \u7528\u7684\u4e0d\u662f\u6700\u65b0\u7684 \\(w\\)\uff0c\u4f46\u662f\u901f\u5ea6\u6bd4\u8f83\u5feb</li> </ul> <p></p> <ul> <li> <p>\u987a\u5e8f\u56fe DAG \u6709\u5411\u65e0\u73af\u56fe</p> <p></p> </li> <li> <p>\u7528\u6237\u5b9a\u4e49\u8fc7\u6ee4\u5668</p> </li> <li> <p>\u6211\u4eec\u9700\u8981\u53d1\u9001\u5927\u91cf\u6570\u636e\uff0c\u4f46\u662f\u67d0\u4e9b\u6570\u636e\u53d1\u9001\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u6211\u4eec\u4f1a\u901a\u8fc7\u4e00\u4e9b\u8fc7\u6ee4\u5668\u8ba9\u5b83\u5c11\u53d1\u4e00\u4e9b\u4e1c\u897f</p> </li> <li>\u4f8b\u5982significant modifier filter\uff0c\u5982\u679c\u5728\u4e0a\u4e00\u8f6e\u6ca1\u6709\u6539\u53d8\u5f88\u591a\u7684\u60c5\u51b5\u4e0b\u5c31\u4e0d\u53d1\u4e86</li> <li>\u4f8b\u5982precision filter\uff0c\u538b\u7f29\u6570\u636e\u7684\u7cbe\u5ea6\uff0c\u4ece32\u4f4d\u523016\u4f4d\u7b49</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/25-ParameterServer/#_6","title":"\u5b9e\u73b0","text":"<ul> <li> <p>\u5411\u91cf\u949f</p> </li> <li> <p>server\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u8bbf\u95ee\u53c2\u6570 \\(w\\) \u7684\u65f6\u95f4</p> </li> <li> <p>\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u5c42\u7684\u65f6\u95f4\uff08\u5229\u7528\u4e0a\u9762\u63d0\u5230\u7684Range Push and Pull\uff09</p> </li> <li> <p>\u901a\u4fe1</p> </li> <li> <p>\u5185\u5bb9\uff1a\u5982\u679c\u6570\u636e\u5728\u4e0a\u4e00\u8f6e\u6ca1\u6709\u6539\u53d8\u5c31\u4e0d\u7528\u53d1\uff0c\u5c31\u662f\u770bhash\u4e4b\u540e\u7684key\u662f\u5426\u6709\u6539\u53d8</p> <p></p> </li> <li> <p>\u4e00\u81f4\u6027hash ring</p> </li> <li> <p>Key Ring\uff1a\u6240\u6709\u53c2\u6570\u6309\u7167hash\u503c\u6392\u5217\u6210\u73af\uff0c\u6bcf\u4e2aserver\u5360\u7528\u4e00\u90e8\u5206\u540c\u65f6\u4fdd\u5b58\u4e0b\u4e24\u6bb5\u7684replica\u3002\u56e0\u6b64\u5141\u8bb8\u4e24\u4e2aserver\u6302\u6389\uff1b\u5982\u679c\u8981\u52a0\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u5728\u67d0\u6bb5\u4e0a\u52a0\u4e00\u4e2a\u8282\u70b9\u7136\u540e\u5c06\u539f\u6bb5\u5206\u6210\u4e24\u4e2a</p> <p></p> </li> <li> <p>\u6d41\u7a0b\uff1a</p> <p>\u5de6\u8fb9\u56fe\u8868\u793a\uff1a\u5f53worker\u83b7\u5f97ack\u7684\u65f6\u5019\uff0c\u5b83\u7684server\u548c\u5907\u4efd\u8282\u70b9\u90fd\u63a5\u6536\u5230\u4e86</p> <p>\u53f3\u8fb9\u56fe\u8868\u793a\uff1a\u4e3a\u4e86\u63d0\u9ad8\u5e26\u5bbd\u53ef\u4ee5\u505a\u6c47\u805a\uff0c\u5c06\u591a\u4e2a\u68af\u5ea6\u7d2f\u52a0\u7136\u540e\u4e0d\u7740\u6025\u5907\u4efd\uff0c\u4f46\u662f\u5ef6\u8fdf\u4f1a\u589e\u52a0</p> <p>\u673a\u5668\u5b66\u4e60\u5173\u6ce8\u5e26\u5bbd\u4e0d\u5173\u6ce8\u5ef6\u8fdf</p> <p></p> </li> <li> <p>worker management</p> </li> <li> <p>\u5bb9\u707e\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u679c\u6302\u4e86\uff0cserver\u5c31ping\u4e00\u4e0b\uff0cping\u4e0d\u5230\u5c31\u76f4\u63a5\u53d1\u4efb\u52a1\u7ed9\u522b\u7684worker</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/26-Pathways/","title":"Pathways","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/26-Pathways/#pathways","title":"Pathways","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/26-Pathways/#_1","title":"\u6807\u9898","text":"<ul> <li>Pathways: Asynchronous Distributed Dataflow for ML</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/26-Pathways/#_2","title":"\u6458\u8981","text":"<ul> <li>\u6211\u4eec\u63d0\u51fa\u4e00\u4e2a\u65b0\u7684\u5927\u89c4\u6a21\u7684\u7f16\u6392\u5c42\u7684\u8bbe\u8ba1\u3002\u7f16\u6392\u5c42\u662f\u4e91\u8bbe\u8ba1\u4e2d\uff0c\u8ba1\u7b97\u4efb\u52a1\u5982\u4f55\u6620\u5c04\u5230\u5e95\u5c42\u8ba1\u7b97\u8d44\u6e90</li> </ul> <p>\u7f16\u6392\u5c42\u662f\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\u7684\u4e00\u79cd\u62bd\u8c61\u5c42\u7ea7\uff0c\u4e3b\u8981\u8d1f\u8d23\u5bf9\u7f51\u7edc\u6570\u636e\u8fdb\u884c\u7f16\u6392\u548c\u6392\u5e8f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u7684\u6b63\u786e\u6027\u548c\u5b8c\u6574\u6027\u3002\u7f16\u6392\u5c42\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u6570\u636e\u5206\u6bb5\uff1a\u5c06\u5927\u5757\u6570\u636e\u5206\u6210\u8f83\u5c0f\u7684\u6570\u636e\u5757\uff0c\u4ee5\u4fbf\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u66f4\u597d\u5730\u7ba1\u7406\u548c\u63a7\u5236\u3002</li> <li>\u6570\u636e\u6392\u5e8f\uff1a\u5bf9\u5206\u6bb5\u540e\u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u7684\u6b63\u786e\u6027\u548c\u5b8c\u6574\u6027\u3002</li> <li>\u6d41\u91cf\u63a7\u5236\uff1a\u901a\u8fc7\u63a7\u5236\u6570\u636e\u53d1\u9001\u901f\u7387\u548c\u63a5\u6536\u901f\u7387\uff0c\u907f\u514d\u7f51\u7edc\u62e5\u585e\u548c\u6570\u636e\u4e22\u5931\u3002</li> <li>\u9519\u8bef\u68c0\u6d4b\u548c\u7ea0\u6b63\uff1a\u5bf9\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u9519\u8bef\u8fdb\u884c\u68c0\u6d4b\u548c\u7ea0\u6b63\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u6b63\u786e\u6027\u3002</li> <li>\u91cd\u4f20\u673a\u5236\uff1a\u5728\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u53d1\u751f\u6570\u636e\u4e22\u5931\u6216\u9519\u8bef\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u4f20\u673a\u5236\u91cd\u65b0\u53d1\u9001\u6570\u636e\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u6b63\u786e\u6027\u3002</li> </ol> <p>\u7f16\u6392\u5c42\u901a\u5e38\u662f\u7f51\u7edc\u534f\u8bae\u6808\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5e38\u89c1\u7684\u7f16\u6392\u534f\u8bae\u5305\u62ecTCP\u3001UDP\u3001SCTP\u7b49\u3002</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/26-Pathways/#_3","title":"\u5f15\u8a00","text":"<ul> <li> <p>\u672c\u7cfb\u7edfPathways\u5c06\u88ab\u672a\u6765\u7684ML\u6240\u9700\u8981</p> </li> <li> <p>\u5f53\u524d\u7684\u7cfb\u7edf\u90fd\u662fSPMD\uff08Single Program Multiple Data\uff09\uff0c\u6bcf\u53f0\u673a\u5668\u7528\u4e00\u6837\u7684\u4ee3\u7801\uff0c\u7b97\u5b8c\u81ea\u5df1\u7684\u68af\u5ea6\u7136\u540e\u8c03\u7528AllReduce\u51fd\u6570\uff08MPI\u51fd\u6570\uff09\uff0c\u7b49\u5f85\u6240\u6709\u673a\u5668\u90fd\u6267\u884c\u5b8c\u8fd9\u4e00\u6b65\uff0c\u7136\u540e\u5c06\u6240\u6709\u7684\u68af\u5ea6\u76f8\u52a0\uff0cBSP\u6a21\u578b</p> </li> </ul> <p></p> <ul> <li> <p>BSP\u6a21\u578b\u4f1a\u5728\u65b0\u7684\u8bed\u8a00\u4efb\u52a1\u4e0a\u51fa\u73b0\u95ee\u9898\uff0c\u6570\u636e\u5728\u4e00\u4e2a\u52a0\u901f\u5668\u4e0a\u653e\u4e0d\u4e0b\uff0c\u9700\u8981\u7528Pipeline\uff1b\u53e6\u5916\u6a21\u578b\u6709\u7a00\u758f\u6027</p> </li> <li> <p>\u5355\u53f0\u673a\u5668\u4e0a\u7684TPU/GPU\u6bd4\u8f83\u5feb\uff0c\u4f46\u662f\u4e0d\u540c\u673a\u5668\u4e4b\u95f4\u6570\u636e\u4f20\u8f93\u6bd4\u8f83\u6162\uff0c\u540c\u65f6\u6709\u5f02\u6784\u5b58\u5728\uff0c\u7136\u540e\u5927\u5bb6\u8ffd\u6c42MPMD\uff08\u4e0d\u540c\u673a\u5668\u7684\u4ee3\u7801\u4e0d\u540c\uff0c\u8c03\u5ea6\u4f18\u5316\u4e0d\u540c\uff09</p> </li> <li> <p>Foundation\u6a21\u578b\u5f88\u5927\uff0c\u4e14\u63a8\u7406\u548c\u8bad\u7ec3\u53ef\u80fd\u540c\u65f6\u4f7f\u7528</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/26-Pathways/#_4","title":"\u8bbe\u8ba1","text":"<ul> <li>\u52a8\u673a\uff1a</li> </ul> <p>\u56fe(a)\u4e2dHost\u8868\u793aCPU\uff0cDev\u8868\u793aGPU</p> <p>\u56fe(b)\u4e2dctrl\u4f1a\u6d3e\u9001\u4efb\u52a1\u5230\u4e0d\u540c\u673a\u5668\uff0c\u62a5\u9519\u4fe1\u606f\u6bd4\u8f83\u96be\u770b</p> <p>\u56fe(c)\u5373\u672c\u6587\u67b6\u6784\uff0c\u7528ctrl\u5411\u4e0d\u540c\u8282\u70b9\u6d3e\u9001\u4e0d\u540c\u4efb\u52a1\uff0c\u7cfb\u7edf\u4e0a\u79f0\u4f5cdataflow\u3002\u5728dataflow\u4e2d\u8ba1\u7b97\u8868\u793a\u6210\u56fe\uff0c\u6bcf\u4e2a\u8ba1\u7b97\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u7bad\u5934\u8868\u793a\u4f9d\u8d56\u3002</p> <p>Transformer\u4e2d\u77e9\u9635\u4e58\u6cd5\u6570\u91cf\u8fdc\u8d85CNN\uff0c\u4f46\u662f\u5355\u4e2a\u8ba1\u7b97\u590d\u6742\u5ea6\u53c8\u4e0d\u9ad8\uff0c\u5bfc\u81f4\u6574\u4e2a\u8ba1\u7b97\u56fe\u591a\u4e86\u5f88\u591a\u8fb9\uff0c\u901a\u4fe1\u6210\u672c\u589e\u52a0\u975e\u5e38\u591a\uff0c\u672c\u6587\u5e0c\u671b\u5728(c)\u67b6\u6784\u4e0a\u63d0\u5347\u6027\u80fd</p> <p></p> <ul> <li>\u4f8b\u5b50\uff1a</li> </ul> <p>pathways\u63d0\u4f9b\u989d\u5916\u7684\u51fd\u6570\uff0c\u80fd\u591f\u5206\u914d\u865a\u62dfTPU\uff0c\u7136\u540e\u8ba1\u7b97\u903b\u8f91\u5148\u7f16\u8bd1\u6210\u8ba1\u7b97\u56fe\uff0c\u7136\u540e\u53d1\u7ed9TPU\u8fd0\u884c</p> <p><code>@pw.program</code>\u5c06\u591a\u4e2a\u8ba1\u7b97\u5408\u5e76\u6210\u4e00\u4e2aprogram\uff0c\u53ef\u4ee5\u76f4\u63a5\u7f16\u8bd1\u6210\u5927\u7684\u6a21\u5757</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/26-Pathways/#_5","title":"\u67b6\u6784","text":"<ul> <li> <p>\u8d44\u6e90\u7ba1\u7406\u5668</p> </li> <li> <p>\u84dd\u8272\u5c0f\u5757\u5c31\u662f\u4e00\u4e2aTPU\u6838\uff0c\u5b83\u548c\u90bb\u5c45\u4e4b\u95f4\uff08\u4e0a\u4e0b\u5de6\u53f3\u524d\u540e\uff09\u9ad8\u901f\u8fde\u63a5\uff0c\u7136\u540e\u4e00\u5806\u84dd\u8272\u5c0f\u5757\u8fde\u5728\u4e00\u8d77\u5c31\u662f\u4e00\u4e2aPod\uff08\u4e00\u4e2aPod\u6700\u591a2048\u6838\uff09\uff1bPod\u4e4b\u95f4\u7684\u7f51\u7edc\u5e26\u5bbd\u4f4e\u5f88\u591a\uff1bjax\u548cTensorFlow\u4e00\u822c\u4f1a\u5728Pod\u5185\u5212\u51fa\u4e00\u5757\u77e9\u5f62\u6765\u8fd0\u7b97\uff0c\u8fd9\u6837\u901a\u4fe1\u901f\u5ea6\u6bd4\u8f83\u5feb</p> <p></p> </li> <li> <p>Pathways\u5e0c\u671b\u8ba9\u591a\u4e2apod\u4e4b\u95f4\u7684\u901a\u4fe1\u52a0\u901f\u3002\u6211\u4eec\u79f0A/B/C\u4e3a\u4e00\u4e2a\u5c9b\uff0c\u6211\u4eec\u76ee\u6807\u662f\u5728\u4e09\u4e2a\u5c9b\u4e0a\u6709\u6548\u6267\u884c\u3002</p> </li> <li> <p>\u8d44\u6e90\u7ba1\u7406\u5668\u5c31\u662f\u6839\u636e\u7528\u6237\u4ee3\u7801\u4e2d\u7684\u865a\u62dfTPU\u8981\u6c42\u53bb\u8bf7\u6c42\u7269\u7406TPU\uff0c\u7136\u540e\u5c06\u865a\u62dfTPU\u6620\u5c04\u5230\u7269\u7406TPU\u4e0a\uff0cPathways\u5c31\u5148\u7b80\u5355\u5730\u76f4\u63a5\u5206\u914d\u7136\u540e\u4e00\u5bf9\u4e00\u6620\u5c04\uff0c\u672a\u6765\u53ef\u4ee5\u652f\u6301\u52a8\u6001\u52a0\u51cf</p> </li> <li> <p>\u5c06\u4ee3\u7801\u7f16\u8bd1\u5230\u67d0\u4e2aIR\u7136\u540e\u518d\u4f18\u5316\uff1f</p> </li> </ul> <p></p> <ul> <li>TPU\u53ef\u80fd\u4f1a\u53d1\u9001\u6b7b\u9501\uff1a\u4f7f\u7528GangSchedule\uff0c\u6bcf\u4e2a\u5c9b\u6709\u4e2a\u8c03\u5ea6\u5668\u6765\u6392\u5e8f</li> </ul> <p></p> <ul> <li>\u5f02\u6b65</li> </ul> <p>\u56fe(a)\u7684\u6d41\u7a0b\uff1aTPU0\u83b7\u5f97\u7a0b\u5e8f\u5f00\u59cb\u7f16\u8bd1\u5e76\u6267\u884c\uff0c\u7136\u540e\u53d1\u9001\u7ed9TPU1\u8981\u6c42\u5b83\u521b\u5efa\u4e00\u5757\u5185\u5b58\u6765\u7b49\u5f85\u63a5\u53d7TPU0\u7684\u8f93\u51fa\uff0c\u540c\u65f6TPU1\u4e5f\u8ba9TPU2\u5f00\u5185\u5b58\u3002\u5f53TPU0\u8ba1\u7b97\u5b8c\u7684\u65f6\u5019\u4f1asend\u7ed9TPU2\uff0c\u4e2d\u95f4\u4f1a\u6709\u4e00\u4e2astall\u3002</p> <p>\u56fe(b)\u7684\u6d41\u7a0b\uff1a\u5ba2\u6237\u7aef\u4f1a\u6709\u63d0\u524d\u7684\u8c03\u5ea6\u540c\u65f6\u53d1\u9001\u7ed9\u5176\u4ed6TPU\u5f00\u5185\u5b58</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/26-Pathways/#_6","title":"\u8bc4\u4ef7","text":"<ul> <li>\u7a0d\u6709\u5931\u671b\uff0c\u53ea\u662f\u8ba9TPU pod\u4e0d\u518d\u5c40\u9650\u4e8e2048\u6838\uff0c\u6ca1\u6709\u5b9e\u73b0\u6700\u521d\u613f\u666f</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/27-GPip/","title":"GPipe","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/27-GPip/#gpipe","title":"GPipe","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/27-GPip/#_1","title":"\u6807\u9898","text":"<ul> <li>GPipe: Efficient Training of Giant Neural Networks using Pipeline Parallelism</li> <li>\u53c2\u6570\u670d\u52a1\u5668\u662f\u6570\u636e\u5e76\u884c\uff0cPathways\u7528\u5230\u4e86\u6d41\u6c34\u7ebf\u5e76\u884c\u4f46\u662f\u4e0a\u6b21\u5728\u5b9e\u9a8c\u90e8\u5206\u8df3\u8fc7\u53bb\u4e86</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/27-GPip/#_2","title":"\u6458\u8981","text":"<ul> <li>\u6a21\u578b\u589e\u5927\u4e4b\u540e\uff0c\u5185\u5b58\u9700\u6c42\u53ef\u80fd\u8d85\u8fc7\u5355\u4e2a\u52a0\u901f\u5668\u7684\u5185\u5b58</li> <li>\u6211\u4eec\u63d0\u51fa\u4e00\u4e2a\u6d41\u6c34\u7ebf\u5e76\u884c\u7684\u5e93 GPipe\uff0c\u53ea\u8981\u4f60\u7684\u7f51\u7edc\u662f\u4e00\u5c42\u5c42\u4e32\u8054\u800c\u6210\uff0c\u5c31\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5e93</li> <li>\u52a0\u901f\u5668\u5185\u5b58\u9650\u5236\u4ee5\u53ca\u901a\u4fe1\u5e26\u5bbd\u8981\u6c42\u6211\u4eec\u5bf9\u6a21\u578b\u8fdb\u884cpartition</li> <li>GPipe\u4f7f\u7528 re-materialization \uff08\u5c06\u67d0\u4e9b\u4e2d\u95f4\u7ed3\u679c\u4e22\u6389\u7136\u540e\u4e0b\u6b21\u91cd\u65b0\u8ba1\u7b97\uff09\u548c micro-batch\uff08\u5fae\u6279\uff0c\u5c06batch\u505a\u5230\u66f4\u5c0f\u7684size\uff09</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/27-GPip/#the-gpipe-library","title":"The GPipe Library","text":"<ul> <li> <p>GPipe\u57fa\u4e8eLingvo\uff0c\u540e\u8005\u662fTensorFlow\u4e0a\u7684\u4e00\u4e2a\u5e93\uff08\u6ce8\u91cd\u53ef\u91cd\u590d\u6027\u3001\u53ef\u590d\u73b0\u6027\uff0c\u5b83\u4f1a\u4fdd\u5b58\u6240\u6709\u914d\u7f6e\u9879\uff09</p> </li> <li> <p>\u5047\u8bbe\u795e\u7ecf\u7f51\u7edc\u662f \\(L\\)\u5c42\uff0cGPipe\u5141\u8bb8\u7528\u6237\u8bbe\u7f6e\u5207\u7684\u5757\u6570 \\(K\\)\uff0c\u7136\u540e\u5f00\u59cb\u505a\u8ba1\u7b97</p> </li> <li> <p>\u7b2c \\(K\\) \u5757\u653e\u5728\u7b2c \\(K\\) \u4e2a\u52a0\u901f\u5668\u4e0a\u2014\u2014\u6700\u7b80\u5355\u7684\u6a21\u578b\u5e76\u884c</p> </li> <li> <p>\u6a21\u578b\u5e76\u884c\u548c\u6570\u636e\u5e76\u884c</p> </li> </ul> <p>\u6a21\u578b\u5e76\u884c\u5c31\u662f\u5c06\u4e0d\u540c\u5c42\u5206\u7ed9\u4e0d\u540cGPU\uff0c\u7136\u540e\u6570\u636e\u548c\u68af\u5ea6\u76f8\u4e92\u4f20\u9012</p> <p>\u6570\u636e\u5e76\u884c\u5c31\u662f\u5c06\u8f93\u5165\u7684\u6570\u636e\u5206\u6210\u5757\u7136\u540e\u5728\u6bcf\u4e2aGPU\u4e0a\u901a\u8fc7\u6240\u6709\u7684\u5c42\uff0c\u6700\u540e\u52a0\u8d77\u6765</p> <p></p> <ul> <li>\u6a21\u578b\u5e76\u884c\u7684\u95ee\u9898</li> </ul> <p>\u56fe(b)\u6a21\u578b\u5e76\u884c\u548c\u5355GPU\u8fd0\u7b97\u662f\u76f8\u540c\u7684\uff0c\u56e0\u4e3a\u5176\u4ed6\u65f6\u95f4\u90fd\u5728\u7b49\u5f85\uff0c\u5176\u5b9e\u5c31\u662f\u5185\u5b58\u7ffb4\u500d\u4f46\u662f\u8ba1\u7b97\u6ca1\u6709\u7ffb4\u500d</p> <p>\u56fe(c)\u5c31\u662f\u6d41\u6c34\u7ebf\uff0c\u5177\u4f53\u5c31\u662f\u6570\u636e\u5207\u5f00\u6210\u5fae\u6279\u91cf\uff0c\u76f8\u5f53\u4e8e\u6570\u636e\u5e76\u884c\u548c\u6a21\u578b\u5e76\u884c\u540c\u65f6\u505a\uff0c\u5f53\u5207\u7684\u5fae\u6279\u91cf\u8d8a\u591a\u7684\u65f6\u5019\u5c31\u80fd\u8ba9\u6548\u7387\u63d0\u7684\u66f4\u9ad8\u3002\u6ce8\u610f\u4f7f\u7528\u6279\u91cf\u5f52\u4e00\u5316\u7684\u65f6\u5019\u9700\u8981\u5bf9\u6574\u4e2a\u6279\u91cf\u505a\u4e00\u4e2a\u5747\u503c\u548c\u65b9\u5dee\uff0c\u800c\u73b0\u5728\u662f\u505a\u5fae\u6279\u91cf\uff0c\u800cTransformer\u662f\u5c42\u5f52\u4e00\u5316\u5c31\u65e0\u6240\u8c13\u4e86</p> <p></p> <p>BubbleTime\u4e3a \\(O(\\frac{K-1}{M+K-1})\\)\uff0c\u5176\u4e2d \\(K\\) \u662f\u6d41\u6c34\u7ebf\u7ea7\u6570\uff0c\\(M\\) \u662f\u6307\u4ee4\u6570\u3002\u4f5c\u8005\u53d1\u73b0 \\(M\\ge 4\\times K\\)\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u4e86</p> <ul> <li>\u6027\u80fd\u4f18\u5316</li> </ul> <p>\u524d\u5411\u8fc7\u7a0b\u4e2d\u4e2d\u95f4\u503c\u4e0d\u80fd\u88ab\u4e22\u6389\uff0c\u56e0\u4e3a\u540e\u9762\u56de\u4f20\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u7528\u5230\uff0c\u5bfc\u81f4activation memory\u6bd4\u8f83\u5927\u3002GPipe\u4f7f\u7528 re-materialization \u6216\u8005 active checkpoint</p> <p>\u5728\u6ca1\u6709\u505are-materialization\u7684\u65f6\u5019\uff0c\u9700\u8981\u4fdd\u5b58\u7684\u6570\u636e\u91cf\u662f \\(O(\\frac{L}{K}\\cdot N)\\)\uff08N\u662f\u6279\u91cf\u5927\u5c0f\uff09\uff0c\u505a\u4e86re-materializaion\u4e4b\u540e\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u5f00\u59cb\u7684\u8f93\u5165 \\(N\\)\uff0c\u800c\u6bcf\u5c42\u53ea\u9700\u8981\u4fdd\u7559\u5fae\u6279\u91cf\u5927\u5c0f \\(\\frac{L}{K}\\cdot \\frac{N}{M}\\)\uff0c\u6240\u4ee5\u6700\u540e\u662f \\(O(N+\\frac{L}{M}\\cdot \\frac{N}{M})\\)</p> <p>\u4ee3\u4ef7\u662f\u6162\u4e00\u4e9b\uff0c\u4f46\u662f\u5185\u5b58\u964d\u4f4e</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/28-MegatronLM/","title":"MegatronLM","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/28-MegatronLM/#megatronlm","title":"MegatronLM","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/28-MegatronLM/#_1","title":"\u6807\u9898","text":"<ul> <li> <p>Megatron-LM: Training Multi-Billion Parameter Language Model Using Model Parallelism</p> </li> <li> <p>\u9488\u5bf9\u7279\u522b\u5927\u7684\u8bed\u8a00\u6a21\u578b\uff0c\u9898\u76ee\u662f\u6a21\u578b\u5e76\u884c\uff0c\u4f46\u662f\u672c\u6587\u5176\u5b9e\u662f\u5f20\u91cf\u5e76\u884c</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/28-MegatronLM/#_2","title":"\u6458\u8981","text":"<ul> <li> <p>\u5185\u5b58\u4e0d\u591f\uff0c\u672c\u6587\u63d0\u51fa\u5c42\u5185\u6a21\u578b\u5e76\u884c\uff0c\u4e0d\u9700\u8981\u65b0\u7684\u5305\u6216\u8005\u65b0\u7684\u7f16\u8bd1\u5668\uff0c\u548c\u4e4b\u524d\u7684Pipeline\u662f\u4e92\u8865\u6b63\u4ea4\u5173\u7cfb</p> </li> <li> <p>\u4e4b\u524d\u7684\u5de5\u4f5c\u9700\u8981\u4e00\u4e2a\u7f16\u8bd1\u5668\u6216\u8005\u4e00\u4e2aframework\uff0c\u4f46\u662f\u672c\u6587\u5b9e\u73b0\u66f4\u52a0\u7b80\u5355\uff1b\u4f46\u662f\u727a\u7272\u7684\u662f\u901a\u7528\u6027\uff0c\u672c\u6587\u53ea\u9002\u5408Transformer</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/28-MegatronLM/#_3","title":"\u65b9\u6cd5","text":"<ul> <li>Transformer\u7684MLP\uff1a</li> </ul> <p>X\u662f\u8f93\u5165\uff0cA\u548cB\u5206\u522b\u662f\u4e24\u4e2a\u9690\u85cf\u5c42\uff0c\u672c\u6587\u63a2\u8ba8\u7684\u95ee\u9898\u662fA\u548cB\u5f88\u5927\u9700\u8981\u62c6\u5206\uff0c\u6240\u4ee5\u5c31\u5c06A\u7ad6\u7740\u62c6\u5206\u6210\u4e24\u4e2a\u6a21\u5757\uff0c\u5206\u522b\u5728GPU0\u548cGPU1\u4e0a\uff0c\u8f93\u5165X\u5728\u4e24\u5757GPU\u4e0a\uff1b\u7136\u540e\u5404\u81ea\u5f97\u5230\u4e00\u534a\u7684\\(XA\\)\uff0c\u7136\u540e\u5c06\\(B\\)\u6a2a\u7740\u62c6\u5206\u6210\u4e24\u5757\u5728GPU0\u548cGPU1\u4e0a\uff0c\u7136\u540e\u5404\u81ea\u8ba1\u7b97\uff0c\u5f97\u5230\u5404\u81ea\u7684\\(Y\\)\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662f\u4e24\u4e2a\\(Y\\)\u76f8\u52a0\u5373\u53ef\u3002\u5982\u679c\u4e0d\u8003\u8651\u521d\u59cb\u7684\\(X\\)\u83b7\u53d6\uff0c\u4e24\u4e2aGPU\u7684\u901a\u4fe1\u4e4b\u540e\u6700\u540e\u7684\\(Y\\)\u76f8\u52a0</p> <p></p> <ul> <li>Transformer\u7684Attention\uff1a</li> </ul> <p>\u591a\u5934\u5c31\u5728\u4e0d\u540c\u7684GPU\u4e0a\u505a\u8fd0\u7b97\uff0c\u7136\u540e\u5230MLP\u7684\u65f6\u5019\u5c31\u548c\u4e0a\u9762\u4e00\u6837</p> <p></p> <ul> <li>\u8f93\u5165\u8f93\u51fa\uff1a\\(b\\)\u662fbatch\u6570\u91cf\uff0c\\(l\\)\u662f\u53e5\u5b50\u957f\u5ea6\uff0c\\(k\\)\u662f\u6bcf\u4e2a\u8bcd\u7684\u5411\u91cf\u8868\u793a\u957f\u5ea6\uff0c\\(v\\)\u662f\u8bcd\u5178\u4e2d\u8bcd\u7684\u4e2a\u6570</li> </ul> <p>\u8f93\u5165\u662f\\(b\\times l\\)\uff0c\u7136\u540e\u53bb\\(v\\times k\\)\u7684\u8bcd\u5178\u91cc\u67e5\u8be2\uff0c\u6bcf\u4e2a\u8bcd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\\(k\\)\u7684\u5411\u91cf\uff0c\u6240\u4ee5\u5f97\u5230\\(b\\times l\\times k\\)\uff0c\u6574\u4e2a\u8bcd\u5178\u53ef\u4ee5\u653e\u5728\u4e0d\u540c\u7684GPU\u4e0a\uff0c\u7136\u540e\u5404\u81ea\u67e5\u8be2\u5982\u679c\u67e5\u8be2\u5230\u5c31\u662f\\(k\\)\u5426\u5219\u5c31\u662f\\(0\\)\uff0c\u7136\u540eall reduce\u52a0\u8d77\u6765\u5c31\u80fd\u5f97\u5230\u8bcd\u5411\u91cf\u8868\u793a\u3002</p> <p>\u8f93\u51fa\u7684\u65f6\u5019\u662f\\(b\\times l\\times k\\)\uff0c\u7136\u540e\u4e5f\u53bb\u67e5\u5b57\u5178\uff0c\u5f97\u5230 \\(b\\times l\\times v\\)\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8bcd\u4f1a\u5f97\u5230\\(v\\)\u957f\u5ea6\u7684logits\uff08\u8868\u793a\u548c\u6bcf\u4e2aword\u7684\u76f8\u4f3c\u7a0b\u5ea6\uff09\uff0c\u7136\u540e\u8981\u505a softmax\uff0c\u53ef\u4ee5\u5728\u4e24\u4e2aGPU\u4e0a\u5206\u522b\u505a exp\u4ee5\u53ca\u6c42\u548c\uff0c\u7136\u540e\u5f97\u5230\u7684\u7ad6\u7740\u7684\u5411\u91cf\u518dall reduce\u76f8\u52a0\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684 softmax</p> <p></p> <p>\u6bcf\u4e00\u5c42\u505a\u4e00\u6b21all reduce\uff0c\u901a\u8baf\u91cf\u4e3a \\(O(b\\times l\\times k\\times n)\\)</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/29-DETR/","title":"DETR","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/29-DETR/#detr","title":"DETR","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/29-DETR/#_1","title":"\u6807\u9898","text":"<ul> <li>End-to-End Object Detection with Transformers</li> <li>\u76ee\u6807\u68c0\u6d4b\u5f88\u5c11\u6709\u7aef\u5230\u7aef\u7684\u65b9\u6cd5\uff0c\u4e00\u822c\u90fd\u4f1a\u5728\u6700\u540e\u63a5\u4e00\u4e2aNMS\uff08Non-maximum Suppression\u975e\u6781\u5927\u503c\u6291\u5236\uff09</li> <li>\u4e4b\u524d\u9700\u8981\u5f88\u591a\u4eba\u5de5\u5e72\u9884\u751a\u81f3\u4f7f\u7528\u4e00\u4e9b\u666e\u901a\u786c\u4ef6\u4e0d\u652f\u6301\u7684\u7b97\u5b50</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/29-DETR/#_2","title":"\u6458\u8981","text":"<ul> <li>\u672c\u6587\u5c06\u7269\u4f53\u68c0\u6d4b\u8f6c\u53d8\u6210\u96c6\u5408\u9884\u6d4b\u95ee\u9898</li> <li>\u672c\u6765\u7684\u76ee\u6807\u68c0\u6d4b\u95ee\u9898\uff1a\u7ed9\u5b9a\u56fe\u7247\u9884\u6d4b\u4e00\u5806\u6846\uff0c\u7136\u540e\u6bcf\u4e2a\u6846\u8981\u77e5\u9053\u5750\u6807\u4ee5\u53ca\u6846\u5185\u7269\u4f53\u7c7b\u522b</li> <li>\u672c\u6587\u63d0\u51fa\u4e00\u79cd\u65b0\u7684\u76ee\u6807\u51fd\u6570\uff0c\u4f7f\u7528\u4e8c\u5206\u56fe\u5339\u914d\u5f3a\u5236\u6a21\u578b\u8f93\u51fa\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u9884\u6d4b\uff0c\u6ca1\u6709\u5197\u4f59\u7684\u6846\uff1b\u53e6\u5916\u672c\u6587\u4f7f\u7528Transformer\u7684Encoder\u548cDecoder\uff0cDecoder\u8fd8\u6709\u4e00\u4e2a\u8f93\u5165learned object query\uff0c\u672c\u6587Transformer\u7684\u8f93\u51fa\u662fin parrallel\u5373\u76f4\u63a5\u8f93\u51fa\u5168\u90e8</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/29-DETR/#_3","title":"\u5f15\u8a00","text":"<ul> <li> <p>\u4e4b\u524d\u4f7f\u7528proposals / anchor / window center \u7b49\u5c06\u95ee\u9898\u53d8\u6210\u56de\u5f52\u548c\u5206\u7c7b\u95ee\u9898\uff0c\u5bfc\u81f4\u4f1a\u51fa\u73b0\u5197\u4f59\u7684\u6846\uff08\u91cd\u590d\u9884\u6d4b\uff09\uff0c\u7136\u540e\u5c31\u5f97\u7528NMS\u6765\u6291\u5236\u6389\u8fd9\u4e9b\u6846</p> </li> <li> <p>\u67b6\u6784</p> </li> </ul> <p>\u8bad\u7ec3\uff1a</p> <ul> <li>CNN\u62bd\u7279\u5f81</li> <li>Transformer Encoder\u5b66\u5168\u5c40\u7279\u5f81</li> <li>Transformer Decoder\u751f\u6210\u5f88\u591a\u9884\u6d4b\u6846\uff08\u9ed8\u8ba4100\u4e2a\uff09</li> <li>\u9884\u6d4b\u6846\u548cground truth\u505a\u5339\u914d\uff0c\u53ea\u7559\u4e0b\u5339\u914d\u4e0a\u7684\u6846\uff0c\u7136\u540e\u5728\u5339\u914d\u7684\u6846\u4e0a\u7b97loss</li> </ul> <p>\u63a8\u7406\uff1a\u53bb\u6389\u4e0a\u9762\u7b2c\u56db\u6b65\uff0c\u53d6\u7f6e\u4fe1\u5ea6\u5927\u4e8e0.7\u7684\u7269\u4f53</p> <p></p> <ul> <li>\u68c0\u67e5\u5927\u7269\u4f53\u6548\u679c\u597d\uff0c\u539f\u56e0\u53ef\u80fd\u662fTransformer\u5b66\u4e60\u5230\u4e86\u5168\u5c40\u7279\u5f81\uff0c\u800canchor\u4f1a\u53d7\u9650\u4e8eanchor\u5927\u5c0f\uff1b\u4f46\u662f\u68c0\u6d4b\u5c0f\u7269\u4f53\u6548\u679c\u4e0d\u592a\u597d\u3002\u540e\u6765\u51fa\u73b0Deformable DETR\u51fa\u73b0\u5229\u7528\u591a\u5c3a\u5ea6\u4fe1\u606f\u89e3\u51b3\u4e86\u8be5\u95ee\u9898\uff0c\u540c\u65f6\u89e3\u51b3\u4e86DETR\u8bad\u7ec3\u6162\u7684\u95ee\u9898</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/29-DETR/#_4","title":"\u65b9\u6cd5","text":"<ul> <li> <p>\u96c6\u5408\u76ee\u6807\u51fd\u6570</p> </li> <li> <p>\u6a21\u578b\u751f\u6210100\u4e2a\u6846\uff0c\u800cgound truth\u53ea\u6709\u51e0\u4e2a\u6846\uff0c\u89e3\u51b3\u5339\u914d\u95ee\u9898\u2014\u2014\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898</p> </li> <li> <p>\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\uff1a</p> <p>\u4f8b\u5b50\uff0c\u5047\u5982\u67093\u4e2a\u5458\u5de5\u548c3\u4e2a\u5de5\u4f5c\uff0c\u6bcf\u4e2a\u5458\u5de5\u5bf9\u4e8e\u4e0d\u540c\u5de5\u4f5c\u6709\u4e0d\u540c\u7684cost\uff08cost matrix\uff09\uff0c\u76ee\u6807\u662f\u8fdb\u884c\u5206\u914d\u4e4b\u540e\u603bcost\u6700\u4f4e</p> <p>\u53ef\u4ee5\u4f7f\u7528<code>scipy.linear_sum_assignment</code>\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\uff0c\u6240\u4ee5\u9700\u8981\u786e\u5b9acost matrix\u4e2d\u7684cost\u600e\u4e48\u586b\uff0c\u4f7f\u7528\u5982\u4e0b\u7684\u516c\u5f0f\uff1a</p> <p></p> <p>\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\u662f\u6307\u5728\u4e00\u4e2a\u4e8c\u5206\u56fe\u4e2d\uff0c\u627e\u5230\u4e00\u79cd\u6700\u5927\u5339\u914d\u65b9\u6848\uff0c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u591a\u7684\u8282\u70b9\u80fd\u591f\u5339\u914d\u6210\u529f\u3002\u4e8c\u5206\u56fe\u662f\u6307\u4e00\u4e2a\u56fe\u4e2d\u7684\u8282\u70b9\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4f7f\u5f97\u540c\u4e00\u90e8\u5206\u5185\u7684\u8282\u70b9\u4e4b\u95f4\u6ca1\u6709\u8fb9\u76f8\u8fde\uff0c\u4e0d\u540c\u90e8\u5206\u7684\u8282\u70b9\u4e4b\u95f4\u6709\u8fb9\u76f8\u8fde\u3002\u5339\u914d\u662f\u6307\u5c06\u56fe\u4e2d\u7684\u8fb9\u548c\u8282\u70b9\u914d\u5bf9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u548c\u4e00\u4e2a\u8fb9\u5339\u914d\uff0c\u6bcf\u4e2a\u8fb9\u4e5f\u53ea\u80fd\u548c\u4e00\u4e2a\u8282\u70b9\u5339\u914d\u3002\u6700\u5927\u5339\u914d\u662f\u6307\u5728\u6240\u6709\u5339\u914d\u65b9\u6848\u4e2d\uff0c\u80fd\u591f\u5339\u914d\u6210\u529f\u7684\u8282\u70b9\u6700\u591a\u7684\u65b9\u6848\u3002</p> <p>\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u5308\u7259\u5229\u7b97\u6cd5\u89e3\u51b3\u3002\u5308\u7259\u5229\u7b97\u6cd5\u662f\u4e00\u79cd\u589e\u5e7f\u8def\u7b97\u6cd5\uff0c\u901a\u8fc7\u5bfb\u627e\u589e\u5e7f\u8def\u6765\u589e\u52a0\u5339\u914d\u7684\u6570\u91cf\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u521d\u59cb\u65f6\uff0c\u6240\u6709\u8282\u70b9\u90fd\u8fd8\u6ca1\u6709\u5339\u914d\u3002</li> <li>\u4ece\u672a\u5339\u914d\u7684\u8282\u70b9\u5f00\u59cb\uff0c\u6309\u7167\u67d0\u79cd\u987a\u5e8f\u904d\u5386\u6240\u6709\u672a\u5339\u914d\u7684\u8282\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u672a\u5339\u914d\u7684\u8282\u70b9\uff0c\u5c1d\u8bd5\u4e0e\u5176\u76f8\u90bb\u7684\u672a\u5339\u914d\u7684\u8282\u70b9\u8fdb\u884c\u5339\u914d\u3002</li> <li>\u5982\u679c\u76f8\u90bb\u8282\u70b9\u8fd8\u6ca1\u6709\u5339\u914d\uff0c\u76f4\u63a5\u5c06\u5b83\u4eec\u5339\u914d\u8d77\u6765\u3002</li> <li>\u5982\u679c\u76f8\u90bb\u8282\u70b9\u5df2\u7ecf\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u5c1d\u8bd5\u5c06\u76f8\u90bb\u8282\u70b9\u7684\u5339\u914d\u5bf9\u8c61\u6362\u6210\u5f53\u524d\u8282\u70b9\u3002\u5982\u679c\u80fd\u591f\u6210\u529f\uff0c\u5c31\u5c06\u539f\u6765\u7684\u5339\u914d\u5173\u7cfb\u65ad\u5f00\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u548c\u76f8\u90bb\u8282\u70b9\u5339\u914d\u8d77\u6765\u3002</li> <li>\u5982\u679c\u4e0d\u80fd\u6210\u529f\uff0c\u5c31\u7ee7\u7eed\u5c1d\u8bd5\u4e0e\u4e0b\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u5339\u914d\u3002</li> <li>\u5982\u679c\u6240\u6709\u76f8\u90bb\u8282\u70b9\u90fd\u5c1d\u8bd5\u8fc7\u4e86\uff0c\u8fd8\u662f\u6ca1\u6709\u5339\u914d\u6210\u529f\uff0c\u5c31\u5c06\u5f53\u524d\u8282\u70b9\u6807\u8bb0\u4e3a\u5df2\u7ecf\u5339\u914d\u8fc7\u4e86\uff0c\u5e76\u8fd4\u56de\u4e0a\u4e00\u5c42\u7ee7\u7eed\u5bfb\u627e\u672a\u5339\u914d\u7684\u8282\u70b9\u3002</li> <li>\u6700\u7ec8\uff0c\u6240\u6709\u8282\u70b9\u90fd\u5c06\u88ab\u5339\u914d\u6216\u8005\u6807\u8bb0\u4e3a\u65e0\u6cd5\u5339\u914d\u3002</li> </ol> <p>\u901a\u8fc7\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6c42\u5f97\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u65b9\u6848\u3002</p> </li> <li> <p>\u6700\u540e\u7684loss\u51fd\u6570</p> <p></p> </li> <li> <p>\u6700\u4f18\u5339\u914d\u4e4b\u540e\u518d\u7b97loss</p> </li> <li> <p>DETR\u7ed3\u6784</p> </li> </ul> <p></p> <p>object query\u4e5f\u662f\u4e00\u4e2a\u53ef\u5b66\u4e60\u7684\u53c2\u6570</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/29-DETR/#_5","title":"\u5b9e\u9a8c","text":"<ul> <li>Encoder\u5b66\u4e60\u5168\u5c40\u7279\u5f81\uff0c\u5c06\u7269\u4f53\u5206\u5f00</li> <li>Decoder\u53bb\u5b66\u4e60\u8fb9\u7f18\u548c\u906e\u6321</li> <li>\u53ef\u89c6\u5316object query\u4e4b\u540e\u53d1\u73b0\uff1a\u6bcf\u4e2aquery\u76f8\u5f53\u4e8e\u4e00\u4e2a\u95ee\u95ee\u9898\u7684\u4eba\uff0c\u4e0d\u65ad\u5730\u95ee\u67d0\u4e2a\u4f4d\u7f6e\u662f\u5426\u6709\u5927/\u5c0f\u7269\u4f53\u3002\u4f5c\u8005\u53d1\u73b0\u6bcf\u4e2aquery\u90fd\u4f1a\u95ee\u4e2d\u95f4\u662f\u5426\u6709\u4e2a\u5927\u7269\u4f53\uff0c\u4f5c\u8005\u6000\u7591\u662fCOCO\u6570\u636e\u96c6\u7269\u4f53\u90fd\u5728\u4e2d\u95f4\u5bfc\u81f4\u7684</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/3-ResNet/","title":"ResNet","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/3-ResNet/#resnet","title":"ResNet","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/3-ResNet/#_1","title":"\u7b2c\u4e00\u904d","text":"<p>Abstrat\uff1a\u6df1\u7684\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u5f88\u56f0\u96be\uff0c\u6211\u4eec\u4f7f\u7528\u6b8b\u5dee\u7f51\u7edc\u6765ease\u6df1\u5ea6\u5b66\u4e60\u3002\u6df1\u5ea6152\u5c42\uff0c8\u500d\u4e8eVGG\uff0c\u4f46\u662f\u8ba1\u7b97\u590d\u6742\u5ea6\u964d\u4f4e\u4e86\u3002\u8d62\u5f97\u4e86ImageNet\u548cCOCO\u7b2c\u4e00\uff0cCOCO\u662f\u7269\u4f53\u68c0\u6d4b\u4e2d\u6700\u5927\u7684\u6570\u636e\u96c6</p> <p>\u6ca1\u6709conclusion\uff1a\u56e0\u4e3aCVPR\u9650\u5236\u8bba\u6587\u57288\u9875\u4e4b\u5185</p> <p>\u56fe\uff08\u4e00\u822c\u7b2c\u4e00\u9875\u4f1a\u653e\u4e0a\u597d\u770b\u7684\u56fe\uff0cCG\u751a\u81f3\u4f1a\u5728\u6807\u9898\u4e0a\u9762\u653e\u56fe\uff09\uff1a</p> <p></p> <p>\u63d0\u51fa\u5f53\u6df1\u5ea6\u589e\u52a0\u7684\u65f6\u5019\uff0cerror\u53cd\u800c\u5f88\u9ad8</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/3-ResNet/#_2","title":"\u7b2c\u4e8c\u904d","text":"<p>Introduction\uff1a</p> <ul> <li>\u7f51\u7edc\u6df1\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u68af\u5ea6\u7206\u70b8\u6d88\u5931\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u6743\u91cd\u521d\u59cb\u5316\uff0cbatch normalization</li> </ul> <p>Batch Normalization\uff08\u6279\u5f52\u4e00\u5316\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u4e2d\u52a0\u901f\u8bad\u7ec3\u548c\u51cf\u8f7b\u8fc7\u62df\u5408\u7684\u6280\u672f\u3002\u5b83\u901a\u8fc7\u5bf9\u6bcf\u4e2abatch\u7684\u6570\u636e\u8fdb\u884c\u5f52\u4e00\u5316\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6a21\u578b\u7684\u8bad\u7ec3\u66f4\u52a0\u7a33\u5b9a\u548c\u5feb\u901f\u3002</p> <p>Batch Normalization\u7684\u57fa\u672c\u601d\u60f3\u662f\u5bf9\u6bcf\u4e2abatch\u7684\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1\uff0c\u4ece\u800c\u4f7f\u5f97\u8f93\u5165\u6570\u636e\u5206\u5e03\u66f4\u52a0\u7a33\u5b9a\u3002\u5177\u4f53\u6765\u8bf4\uff0cBatch Normalization\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u5bf9\u6bcf\u4e2abatch\u7684\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u4f7f\u5f97\u5176\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1\u3002</li> <li>\u5bf9\u5f52\u4e00\u5316\u540e\u7684\u6570\u636e\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\uff0c\u5305\u62ec\u7f29\u653e\u548c\u504f\u79fb\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u5b66\u4e60\u5230\u4e0d\u540c\u7684\u7279\u5f81\u7ec4\u5408\u3002</li> <li>\u5c06\u7ebf\u6027\u53d8\u6362\u540e\u7684\u6570\u636e\u8f93\u5165\u5230\u6fc0\u6d3b\u51fd\u6570\u4e2d\u8fdb\u884c\u975e\u7ebf\u6027\u53d8\u6362\uff0c\u4ece\u800c\u5f97\u5230\u7f51\u7edc\u7684\u8f93\u51fa\u3002</li> </ol> <p>Batch Normalization\u53ef\u4ee5\u5e94\u7528\u4e8e\u7f51\u7edc\u7684\u4efb\u610f\u5c42\uff0c\u5305\u62ec\u5377\u79ef\u5c42\u3001\u5168\u8fde\u63a5\u5c42\u7b49\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u52a0\u901f\u8bad\u7ec3\uff0c\u51cf\u8f7b\u8fc7\u62df\u5408\uff0c\u540c\u65f6\u53ef\u4ee5\u4f7f\u5f97\u5b66\u4e60\u7387\u66f4\u5927\uff0c\u4ece\u800c\u66f4\u5feb\u5730\u6536\u655b\u3002</p> <p>Batch Normalization\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\u662f\u53ef\u4ee5\u51cf\u5c11\u5bf9\u8d85\u53c2\u6570\u7684\u654f\u611f\u6027\uff0c\u4f8b\u5982\u5b66\u4e60\u7387\u548c\u6743\u91cd\u521d\u59cb\u5316\u7b49\u3002\u6b64\u5916\uff0cBatch Normalization\u8fd8\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u6b63\u5219\u5316\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u5bf9\u6bcf\u4e2abatch\u7684\u6570\u636e\u8fdb\u884c\u4e86\u9650\u5236\uff0c\u4ece\u800c\u4f7f\u5f97\u6a21\u578b\u66f4\u52a0\u5065\u58ee\u3002</p> <ul> <li> <p>\u5f53\u7f51\u7edc\u6df1\u7684\u65f6\u5019\u89c2\u5bdf\u5230train\u548ctest\u7684error\u90fd\u63d0\u9ad8\u4e86\uff0c\u8bf4\u660e\u5e76\u4e0d\u662foverfitting</p> </li> <li> <p>\u7167\u7406\u6765\u8bf4\u6df1\u7684\u7f51\u7edc\u4e00\u5b9a\u5305\u542b\u4e86\u6d45\u7684\u7f51\u7edc\uff0c\u76f4\u63a5\u505aidentical mapping\uff0c\u6240\u4ee5\u663e\u793a\u6784\u9020identical mapping</p> </li> <li> <p>shortcut connection</p> </li> </ul> <p></p> <p>Related Work:</p> <ul> <li>gradient boosting</li> </ul> <p>Deep Residual Learning\uff1a</p> <ul> <li>implementation\uff1a\u56fe\u7247resize\u7136\u540e\u968f\u673acrop\u3002\u4f7f\u7528BN\u3002\u6ce8\u610f\u8fd9\u91cc\u7684iteration\u6b21\u6570\u662f\u548cbatch size\u76f8\u5173\u7684\uff0c\u6240\u4ee5\u4e00\u822c\u4e0d\u63a8\u8350\u5199iteration\uff0c\u4e00\u822c\u5199\u7684\u662f\u904d\u5386\u6240\u6709\u6570\u636e\u7684epoch\u3002\u6ca1\u6709\u5168\u8fde\u63a5\u5c42\uff0c\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528dropout</li> </ul> <p></p> <p>\u5728\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff08Stochastic Gradient Descent\uff0cSGD\uff09\u7b97\u6cd5\u4e2d\uff0cbatch\u6307\u7684\u662f\u4e00\u6279\u6b21\uff08subset\uff09\u7684\u8bad\u7ec3\u6570\u636e\u3002\u5177\u4f53\u6765\u8bf4\uff0cSGD\u5c06\u6240\u6709\u7684\u8bad\u7ec3\u6837\u672c\u5206\u6210\u82e5\u5e72\u4e2abatch\uff0c\u6bcf\u4e2abatch\u5305\u542b\u4e86\u4e00\u5b9a\u6570\u91cf\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u901a\u5e38\u662f2\u7684\u5e42\u6b21\u65b9\uff0c\u598232\u300164\u3001128\u7b49\u3002</p> <p>\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0cSGD\u4f1a\u4ece\u8bad\u7ec3\u96c6\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2abatch\u7684\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\uff0c\u8ba1\u7b97\u5176\u68af\u5ea6\u5e76\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u53ef\u4ee5\u51cf\u5c11\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u5185\u5b58\u5360\u7528\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u63d0\u9ad8\u8bad\u7ec3\u901f\u5ea6\uff0c\u56e0\u4e3a\u6bcf\u4e2abatch\u7684\u6570\u636e\u91cf\u76f8\u5bf9\u8f83\u5c0f\uff0c\u8ba1\u7b97\u68af\u5ea6\u7684\u65f6\u95f4\u66f4\u77ed\uff0c\u6a21\u578b\u53c2\u6570\u4e5f\u66f4\u5bb9\u6613\u66f4\u65b0\u3002</p> <p>batch size\u7684\u5927\u5c0f\u901a\u5e38\u662f\u6839\u636e\u786c\u4ef6\u8bbe\u5907\u7684\u5185\u5b58\u5927\u5c0f\u548c\u8bad\u7ec3\u96c6\u7684\u5927\u5c0f\u6765\u786e\u5b9a\u7684\u3002\u5982\u679cbatch size\u592a\u5c0f\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u566a\u58f0\u4f1a\u66f4\u5927\uff0c\u4f46\u662f\u53ef\u4ee5\u66f4\u9891\u7e41\u5730\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff1b\u5982\u679cbatch size\u592a\u5927\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u566a\u58f0\u4f1a\u66f4\u5c0f\uff0c\u4f46\u662f\u6bcf\u6b21\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u7684\u65f6\u95f4\u4f1a\u66f4\u957f\uff0c\u8bad\u7ec3\u901f\u5ea6\u4e5f\u4f1a\u51cf\u6162\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cSGD\u5728\u6bcf\u4e2abatch\u4e0a\u8ba1\u7b97\u7684\u68af\u5ea6\u53ea\u662f\u6574\u4e2a\u8bad\u7ec3\u96c6\u4e0a\u68af\u5ea6\u7684\u4e00\u4e2a\u65e0\u504f\u4f30\u8ba1\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7684\u4e0d\u7a33\u5b9a\u6027\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u4f18\u5316\u7684\u7b97\u6cd5\uff0c\u5982Momentum\u3001Adagrad\u3001RMSProp\u548cAdam\u7b49\u3002</p> <p>Experiments</p> <ul> <li>\u6c60\u5316\u5c42\u4e0d\u5e26\u6743\u91cd\u53c2\u6570\u3002\u53ef\u4ee5\u5bf9\u7167\u4e0b\u9762\u4e24\u56fe\u4e2d\u768434layer\u7684\u56fe</li> </ul> <p></p> <p></p> <ul> <li>\u7ed3\u679c\uff1a\u6ce8\u610f\u4e00\u5f00\u59cbtrain error\u6bd4test error\u8981\u5927\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86\u6570\u636e\u589e\u5f3a\u3002\u7a81\u53d8\u662f\u56e0\u4e3a\u5b66\u4e60\u7387\u4e58\u4ee50.1\uff0c\u4e0d\u63a8\u8350\uff0c\u4e00\u822c\u524d\u671f\u5c3d\u91cf\u627e\u5230\u4e00\u4e2a\u6b63\u786e\u4f4d\u7f6e\u518d\u8df3\u3002\u6b8b\u5dee\u7f51\u7edc\u7684\u6536\u655b\u901f\u5ea6\u5feb\u5f88\u591a\u3002</li> </ul> <p></p> <ul> <li>\u5f53\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u4e0d\u4e00\u6837\u7684\u65f6\u5019\u600e\u4e48\u505a\u6b8b\u5dee\u8fde\u63a5\uff0c\u5373\u4e0a\u4e0a\u56fe\u4e2d\u7684\u865a\u7ebf\u90e8\u5206\uff0c\u8fd9\u91cc\u7528\u4e09\u79cd\u505a\u6cd5\uff08\u586b\u96f6\uff0c\u865a\u7ebfprojection\uff0c\u6240\u6709\u7ebf\u90fdprojection\uff09\u3002\u5176\u4e2dprojection\u5c31\u8868\u793a\u75281*1\u7684\u5377\u79ef\u6838\u6765\u8c03\u6574\u901a\u9053\u3002\u6700\u540e\u63a8\u8350\u4f7f\u7528B\uff0cC\u7684\u6295\u5f71\u5f00\u9500\u6bd4\u8f83\u5927\u3002</li> </ul> <p>\u6ce8\u610f\uff1aResNet\u4e2d\u7684\u901a\u9053\u6570\u662f\u4e00\u76f4\u5728\u589e\u52a0\u7684</p> <p></p> <p></p> <p></p> <ul> <li>\u5982\u4f55\u6784\u5efa\u66f4\u6df1\u7684resnet\uff1a\u4f7f\u7528bottleneck\uff0c\u56e0\u4e3a\u8f93\u5165\u5f88\u5927\uff0c\u4e3a\u4e86\u964d\u4f4e\u590d\u6742\u5ea6\u5c31\u5148\u964d\u7ef4\uff0c\u7136\u540e\u518d\u5347\u7ef4</li> </ul> <p></p> <ul> <li> <p>ResNet\u8ba1\u7b97\u5feb\u7684\u539f\u56e0\uff1a\u52a0\u6cd5\u540e\u9762\u7684\u68af\u5ea6\u76f8\u5bf9\u6bd4\u8f83\u5927   $$   \\frac{\\partial (f(g(x))+g(x))}{\\partial x}=\\frac{\\partial (f(g(x))}{\\partial x}+\\frac{\\partial g(x)}{\\partial x}=\\frac{\\partial (f(g(x))}{\\partial g(x)}\\cdot\\frac{\\partial g(x)}{\\partial x}+\\frac{\\partial g(x)}{\\partial x}   $$</p> </li> <li> <p>Failure is another way of convergence\u3002SGD\u4e00\u822c\u90fd\u80fd\u6536\u655b\u4f46\u662f\u8981\u6536\u655b\u5230\u4e00\u4e2a\u5c0f\u7684\u503c\uff0c\u5c31\u662f\u8981\u4e00\u76f4\u6709\u68af\u5ea6\uff0c\u80fd\u8dd1\u5f97\u52a8\u3002\u6240\u4ee5\u4e00\u822c\u68af\u5ea6\u591f\u5927\u5c31\u6709\u6bd4\u8f83\u597d\u7684\u7ed3\u679c</p> </li> <li> <p>\u4e3a\u4ec0\u4e48ResNet\u5728CIFAR10\u5c0f\u7684\u6570\u636e\u96c6\u4e0a\u6ca1\u6709\u8fc7\u62df\u5408\u8fd8\u662f\u4e00\u4e2aopen question\uff0c\u53ef\u80fd\u662f\u52a0\u4e86resnet\u964d\u4f4e\u4e86\u6a21\u578b\u7684\u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u5c31\u4f1a\u627e\u5230\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u6a21\u578b\u53bb\u5b66\u800c\u4e0d\u8fc7\u62df\u5408</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/","title":"Zero","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/#zero","title":"Zero","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/#_1","title":"\u6807\u9898","text":"<ul> <li>ZeRO: Memory Optimizations Toward Training Trillion Parameter Models</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/#_2","title":"\u6458\u8981","text":"<ul> <li>ZeRO\uff1aZero Redundancy Optimizer\uff0c0\u5197\u4f59\u4f18\u5316\u5668\uff0c\u4f18\u5316\u5185\u5b58\uff0c\u6570\u636e\u548c\u6a21\u578b\u5e76\u884c</li> <li>\u8d85\u7ebf\u6027\uff1f</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/#_3","title":"\u5f15\u8a00","text":"<ul> <li>Megatron-LM\u5728\u66f4\u591a\u5361\u4e0a\u901a\u4fe1\u91cf\u5de8\u5927\uff0c\u6548\u7387\u5f88\u4f4e</li> <li>\u9996\u5148\u770b\u5185\u5b58\u7528\u5728\u54ea\u4e9b\u5730\u65b9\uff1a</li> <li>\u4f18\u5316\u5668\u72b6\u6001\u3001\u68af\u5ea6\u3001\u53c2\u6570</li> <li>\u4e2d\u95f4\u503c\uff0c\u4e34\u65f6buffer\uff0c\u4ee5\u53ca\u788e\u7247\u5316\u5185\u5b58</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/#_4","title":"\u5185\u5b58","text":"<ul> <li>\u6df7\u7cbe\u5ea6\u8bad\u7ec3\uff1aN\u5361\u5728fp16\u4e0a\u6709\u5f88\u591a\u4f18\u5316\uff0c\u4f46\u662f\u5728\u68af\u5ea6\u76f8\u52a0\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u6240\u4ee5\u68af\u5ea6\u66f4\u65b0\u7684\u65f6\u5019\u7528fp32\uff0c\u7b97\u5b8c\u4e4b\u540e\u518d\u53d8\u6210fp16</li> </ul> <p>\u53c2\u6570\u548c\u68af\u5ea6\u7528fp16\u4fdd\u5b58\uff0c\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\\(4\\Psi\\)\u5b57\u8282\uff0c\u53e6\u5916Adam\u91cc\u9700\u8981\u7528fp32\u4fdd\u5b58\uff0c\u9700\u8981\\(12\\Psi\\)</p> <p></p> <p></p> <ul> <li>pytorch\u4f1a\u5728\u8ba1\u7b97\u4e2d\u6790\u6784\u4e00\u4e9b\u4e0d\u4f7f\u7528\u7684\u5185\u5b58\u5bfc\u81f4\u788e\u7247\u5316</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/#zero-insights-and-overview","title":"ZeRO: Insights and Overview","text":"<ul> <li>\u60f3\u6cd5</li> <li>\u6570\u636e\u5e76\u884c\uff08DP\uff09\u6bd4\u6a21\u578b\u5e76\u884c\uff08MP\uff09 scaling efficiency \u9ad8</li> <li>\u6570\u636e\u5e76\u884c\u9700\u8981\u66f4\u591a\u5185\u5b58\uff0c\u56e0\u4e3a\u6a21\u578b\u9700\u8981\u90fd\u5b58\u4e00\u4efd</li> <li>DP\u548cMP\u90fd\u9700\u8981\u5b58\u5f88\u591a\u4e2d\u95f4\u72b6\u6001\uff0c\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570\u670d\u52a1\u5668\u53ea\u5b58\u4e00\u4efd\u5728GPU\u4e0a\uff0c\u5176\u4ed6\u9700\u8981\u7528\u7684\u65f6\u5019\u53bb\u53d6</li> <li>ZeRO-R</li> <li>\u4e0d\u91cd\u7b97\uff0c\u76f4\u63a5\u4ece\u53c2\u6570\u670d\u52a1\u5668\u83b7\u53d6\uff0c\u5f53\u4f20\u8f93\u901f\u5ea6\u9ad8\u4e8e\u91cd\u7b97\u901f\u5ea6\u5c31\u5212\u5f97\u6765</li> <li>buffer\u4f7f\u7528\u56fa\u5b9a\u5927\u5c0f\uff0c\u63d0\u9ad8\u6548\u7387</li> <li>\u5185\u5b58\u788e\u7247\u4e0d\u65ad\u8fdb\u884c\u5185\u5b58\u6574\u7406</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/#zero-dp","title":"ZeRO: DP","text":"<ul> <li> <p>\u4e09\u79cd\u5206\u5272\u65b9\u6cd5\uff1a\\(P_{os},P_{g},P_{p}\\)\uff0c\u4e00\u822c\u79f0\u4e3a \\(Zero_1,Zero_2,Zero_3\\)</p> </li> <li> <p>\\(Zero_1,Zero_2\\)</p> </li> </ul> <p>\u5047\u8bbe\u4e24\u5f20\u5361\uff08\u5361\u6570\u8bb0\u4e3a\\(N_d=2\\)\uff09\uff0c\u4e00\u5c42\u7f51\u7edc\u3002\u72b6\u6001\u7528fp32\u5b58\uff08\\(12\\Psi\\)\uff09\uff0cfp16\u7684\u68af\u5ea6\uff08\\(2\\Psi\\)\uff09\uff0cfp16\u7684\u68af\u5ea6\uff08\\(2\\Psi\\)\uff09\u3002</p> <p>\u5c06\u6574\u4e2a\u72b6\u6001\u5207\u6210\u4e24\u534a\uff0c\u4e00\u534a\u7559\u5728GPU0\uff08\u659c\u7ebf\u90e8\u5206\uff09\uff0c\u4e00\u534a\u7559\u5728GPU1\uff0c\u53e6\u4e00\u534a\u662f\u4e0d\u9700\u8981\u7684\uff0c\u8fd9\u79f0\u4e3a\\(Zero_1\\)\uff0c\u6240\u4ee5\u5185\u5b58\u5f00\u9500\u4e3a \\(12\\Psi/N_d\\)</p> <p>fp16\u7684\u68af\u5ea6\u5207\u6210\u4e24\u534a\uff0c\u79f0\u4e3a\\(Zero_2\\)\uff0c\u5f00\u9500\u4e3a \\(2\\Psi/N_d\\)</p> <p>\u5047\u8bbe \\(w\\) \u662f\u90fd\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u90a3\u4e48\u6b64\u65f6\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4e00\u822c\u72b6\u6001\u5bf9\u5e94\u7684\u68af\u5ea6\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u68af\u5ea6\u7684\u4e00\u534a\u53d1\u7ed9\u53e6\u4e00\u4e2aGPU\u7684\u68af\u5ea6\u52a0\u8d77\u6765\u505aall reduce\u3002\u72b6\u6001\u66f4\u65b0\u4e5f\u662f\u66f4\u65b0\u4e00\u534a\u7136\u540e\u53d1\u7ed9\u5bf9\u65b9\u7684\u53c2\u6570</p> <p></p> <ul> <li>\\(Zero_3\\)\uff1a\u5c06\u53c2\u6570\u4e5f\u5206\u5f00\uff0c\u8fd9\u91cc\u4f1a\u4ea7\u751f\u4e00\u4e9b\u989d\u5916\u901a\u4fe1\uff0c\u56e0\u4e3a\u6bcf\u6b21\u9700\u8981\u7684\u65f6\u5019\u9700\u8981\u4ece\u522b\u7684GPU\u4e0a\u83b7\u53d6\uff0c\u53ef\u4ee5\u505a\u4e00\u5b9a\u7684\u5f02\u6b65</li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/30-Zero/#zero-r","title":"ZeRO-R","text":"<ul> <li>\u4f7f\u7528Buffer</li> <li>\u5185\u5b58\u53bb\u788e\u7247\u5316</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/31-%E7%A0%94%E7%A9%B6%E7%9A%84%E8%89%BA%E6%9C%AF/","title":"\u7814\u7a76\u7684\u827a\u672f","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/31-%E7%A0%94%E7%A9%B6%E7%9A%84%E8%89%BA%E6%9C%AF/#_1","title":"\u7814\u7a76\u7684\u827a\u672f","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/31-%E7%A0%94%E7%A9%B6%E7%9A%84%E8%89%BA%E6%9C%AF/#_2","title":"\u8ddf\u8bfb\u8005\u5efa\u7acb\u8054\u7cfb","text":"<ul> <li>\u5199\u4f5c\u662f\u548c\u8bfb\u8005\u4ea4\u6d41\uff0c\u65f6\u523b\u8003\u8651\u73b0\u5728\u8bfb\u8005\u77e5\u9053\u4ec0\u4e48\u4e86\uff0c\u63a5\u4e0b\u6765\u4ed6\u4eec\u60f3\u8981\u77e5\u9053\u4ec0\u4e48</li> <li>\u7814\u7a76\uff1aGather Information to answer a question that solves a problem</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/32-DALLE2/","title":"DALLE2","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/32-DALLE2/#dalle2","title":"DALLE2","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/32-DALLE2/#_1","title":"\u6807\u9898","text":"<ul> <li>Hierarchical Text-Conditional Image Generation with CLIP Latents</li> <li>Hierarchical \u5148\u751f\u621064*64\uff0c\u7136\u540e\u4e0a\u91c7\u6837\u5230256*256\uff0c\u518d\u4e0a\u91c7\u6837\u52301024*1024</li> <li>\u5148\u7528CLIP\u627e\u5230\u56fe\u7247\u548c\u6587\u672c\u5bf9\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u7136\u540e\u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c\u901a\u8fc7CLIP\u6587\u672c\u7f16\u7801\u5668\u53d8\u6210\u6587\u672c\u7279\u5f81\uff0c\u7136\u540eDALLE2\u8bad\u7ec3\u4e00\u4e2aPrior\u6a21\u578b\uff08\u8f93\u5165\u662f\u6587\u672c\u7279\u5f81\uff0c\u8f93\u51fa\u662f\u56fe\u50cf\u7279\u5f81\uff09\uff0c\u7136\u540e\u56fe\u50cf\u7279\u5f81\u7ed9\u89e3\u7801\u5668\uff08Diffusion\uff09\u5f97\u5230\u56fe\u50cf</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/32-DALLE2/#_2","title":"\u5f15\u8a00","text":"<ul> <li> <p>CLIP\u5b66\u5230\u7684\u7279\u5f81\u5f88\u7a33\u5065\uff0c\u6269\u6563\u6a21\u578b\u591a\u6837\u6027\u6bd4\u8f83\u597d\u4e14\u4fdd\u771f\u5ea6\u4e00\u76f4\u5728\u63d0\u9ad8</p> </li> <li> <p>\u7ed3\u6784</p> </li> </ul> <p>\u865a\u7ebf\u4e0a\u65b9\u662fCLIP\u6a21\u578b\uff0c\u5de6\u8fb9\u56fe\u7247\u662f\u6587\u672c\u901a\u8fc7Encoder\u5230\u6587\u672c\u7279\u5f81\uff0c\u53f3\u8fb9\u56fe\u7247\u901a\u8fc7Encoder\u5f97\u5230\u56fe\u50cf\u7279\u5f81\uff0c\u4e24\u8005\u6784\u6210\u6b63\u6837\u672c\uff1bCLIP\u6a21\u578b\u662f\u9501\u4f4f\u7684</p> <p>\u7528CLIP\u4e2d\u7684\u56fe\u50cf\u7279\u5f81\u505aGround Truth\uff0c\u505a\u9884\u6d4b\u4efb\u52a1</p> <p>\u672c\u6587\u79f0\u81ea\u5df1\u4e3aunCLIP\uff0c\u76f8\u5f53\u4e8eCLIP\u7684\u53cd\u8fc7\u7a0b</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/32-DALLE2/#_3","title":"\u8865\u5145\u6750\u6599","text":"<ul> <li> <p>GAN</p> </li> <li> <p>\u95ee\u9898\u662f\u8bad\u7ec3\u4e0d\u7a33\u5b9a\uff0c\u751f\u6210\u591a\u6837\u6027\u4e0d\u9ad8</p> </li> <li> <p>AutoEncoder</p> </li> <li> <p>\u539f\u7406\uff1a\u81ea\u5df1\u9884\u6d4b\u81ea\u5df1</p> <p></p> </li> <li> <p>DAE\u5148\u7ed9\u8f93\u5165\u4e00\u4e2a\u6253\u4e71\u7136\u540e\u518d\u7ed9Encoder\uff0c\u8ba9\u7ed3\u679c\u53bb\u91cd\u5efa\u539f\u59cb\u7684\\(x\\)\uff0c\u800c\u4e0d\u662f\u6270\u52a8\u540e\u7684\\(x_c\\)\uff0c\u6548\u679c\u5f88\u597d\u6bd4\u8f83\u7a33\u5065\u3002\u56fe\u7247\u4fe1\u606f\u6bd4\u8f83\u7a33\u5065\uff0c\u52a0\u4e00\u4e9bnoise\u4e0d\u4f1a\u6709\u592a\u591a\u95ee\u9898\uff0c\u548cMAE\u539f\u7406\u7c7b\u4f3c</p> </li> <li> <p>VAE\u67b6\u6784\uff1a\u548c\u4e4b\u524d\u7684\u67b6\u6784\u4e0d\u540c\u4e4b\u5904\uff0c\u5728\u4e8e\u4e4b\u524d\u7684\u5de5\u4f5c\u662f\u5b66\u4e60Bottleneck\u4e2d\u7684\u7279\u5f81\uff0c\u800c\u672c\u6587\u662f\u5b66\u4e60\u5206\u5e03\u3002\u4f5c\u8005\u5047\u8bbe\u662f\u9ad8\u65af\u5206\u5e03\uff0c\u5c06Encoder\u8f93\u51fa\u7684\u7279\u5f81\u901a\u8fc7\u51e0\u4e2aFC\u5c42\u6765\u9884\u6d4b\u9ad8\u65af\u5206\u5e03\uff0c\u5373\u5747\u503c\u548c\u65b9\u5dee\uff0c\u7136\u540e\u91c7\u6837\u51fa\u4e00\u4e2a\\(z\\)\u7136\u540e\u505a\u751f\u6210</p> <ul> <li>\u7ed9\u5b9a\\(x\\)\u5f97\u5230\\(z\\)\u662f \u540e\u9a8c\u6982\u7387 \\(q(z|x)\\)\uff0c\u5b66\u51fa\u6765\u7684distribution\u662f\u5148\u9a8c\u5206\u5e03\uff0c\u7ed9\u5b9a \\(z\\) \u9884\u6d4b\u4e00\u5f20\u56fe\u7247 \\(x\\) \u662flikelihood\uff0c\u6240\u4ee5\u5c31\u662fmaximize likelihood</li> </ul> <p></p> </li> <li> <p>VQ-VAE</p> <p>VQ\u7684\u542b\u4e49\u662fvector quantised\uff0c\u5373\u7ed9VAE\u505a\u91cf\u5316\u3002VAE\u6a21\u578b\u5c3a\u5bf8\u4e0d\u597d\u505a\u5927\uff0c\u5206\u5e03\u4e0d\u597d\u5b66\uff0c\u6240\u4ee5\u4e0d\u53bb\u505aDistribution\u7684\u9884\u6d4b\uff0c\u800c\u662f\u7528Codebook\u4ee3\u66ff\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\\(K\\)\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u3002\u7136\u540e\u5c06Encoder\u51fa\u6765\u7684\u7279\u5f81\u56fe\u548cCodebook\u4e2d\u7684\u805a\u7c7b\u4e2d\u5fc3\u770b\u8ddd\u79bb\u7684\u63a5\u8fd1\u7a0b\u5ea6\uff0c\u9009\u62e9\u63a5\u8fd1\u7684\u805a\u7c7b\u4e2d\u5fc3\u653e\u5230\\(Z\\)\u4e2d\uff0c\u7136\u540e\u7528\u8fd9\u4e9b\u805a\u7c7b\u4e2d\u5fc3\u5f62\u6210\u65b0\u7684\u7279\u5f81\u56fe\\(f_a\\)</p> <p>\u8fd9\u91cc\u7279\u5f81\u662f\u4eceCodebook\u4e2d\u62ff\u5230\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u505a\u968f\u673a\u91c7\u6837\uff0c\u56e0\u6b64\u4e0d\u80fd\u751f\u6210\uff0c\u5fc5\u987b\u52a0\u4e00\u4e2aPrior\u7f51\u7edc\u6765\u505a\u751f\u6210\u3002\u8fd9\u4e9b\u7279\u5f81\u672c\u6765\u662f\u505ahigh level\u4efb\u52a1\u7684\uff0c\u4f8b\u5982\u5206\u7c7b\u68c0\u6d4b\u7b49</p> <p></p> </li> <li> <p>VQ-VAE2\uff1a\u6a21\u578b\u53d8\u6210\u5c42\u7ea7\u5f0f\uff0c\u9664\u4e86\u5c40\u90e8\u5efa\u6a21\u8fd8\u505a\u5168\u5c40\u5efa\u6a21\uff0c\u52a0\u4e0a\u4e86attention\u3002\u7136\u540e\u6839\u636eCodebook\u5b66\u4e86\u4e00\u4e2aPrior\u7f51\u7edc\uff08pixelCNN\uff0c\u8fd9\u662f\u4e00\u4e2a\u81ea\u56de\u5f52\u6a21\u578b\uff09\uff0c\u751f\u6210\u6548\u679c\u5f88\u597d</p> <p>\u81ea\u56de\u5f52\u6a21\u578b\uff08Autoregressive Model\uff09\u662f\u4e00\u79cd\u65f6\u95f4\u5e8f\u5217\u9884\u6d4b\u6a21\u578b\uff0c\u5b83\u5047\u8bbe\u5f53\u524d\u65f6\u523b\u7684\u503c\u4e0e\u524d\u9762\u82e5\u5e72\u4e2a\u65f6\u523b\u7684\u503c\u6709\u5173\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u81ea\u56de\u5f52\u6a21\u578b\u5c06\u5f53\u524d\u65f6\u523b\u7684\u503c\u770b\u505a\u662f\u524d\u9762p\u4e2a\u65f6\u523b\u7684\u503c\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u5176\u4e2dp\u79f0\u4e3a\u6a21\u578b\u7684\u9636\u6570\u3002\u81ea\u56de\u5f52\u6a21\u578b\u5e38\u7528\u7684\u8868\u793a\u5f62\u5f0f\u662fAR(p)\uff0c\u5176\u4e2dp\u8868\u793a\u6a21\u578b\u7684\u9636\u6570\u3002\u81ea\u56de\u5f52\u6a21\u578b\u53ef\u4ee5\u7528\u4e8e\u9884\u6d4b\u65f6\u95f4\u5e8f\u5217\u7684\u672a\u6765\u503c\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u7684\u5206\u6790\u548c\u5efa\u6a21\u3002</p> </li> <li> <p>DALLE</p> <p></p> <p>OpenAI\u5c06\u4e0a\u9762\u7684\u81ea\u56de\u5f52\u6a21\u578bpixelCNN\u6362\u6210GPT</p> </li> <li> <p>\u6269\u6563\u6a21\u578b</p> </li> <li> <p>\u67b6\u6784\uff1a\u524d\u5411\u8fc7\u7a0b\uff0c\u6bcf\u6b21\u52a0\u4e00\u70b9\u566a\u58f0\uff0c\u5982\u679c\\(T\\)\u65e0\u7a77\u5927\uff0c\u90a3\u4e48\u5c31\u4f1a\u5f97\u5230\u5404\u5411\u540c\u6027\u7684\u6b63\u592a\u5206\u5e03\u3002</p> <p></p> </li> <li> <p>reverse diffusion\u4f7f\u7528\u7684\u7f51\u7edc\u6a21\u578b\u662fUNet</p> <p></p> </li> <li> <p>DDPM</p> <p>\u4e4b\u524d\u662f\u4ece\\(x_t\\)\u9884\u6d4b\\(x_{t-1}\\)\uff0c\u4f5c\u8005\u8ba4\u4e3a\u53ef\u4ee5\u53ea\u9884\u6d4b\u566a\u58f0\\(\\epsilon\\)\u3002UNet\u4e2d\u8981\u52a0\u4e0atime embedding\uff08\u6b63\u5f26\u7684\u4f4d\u7f6e\u7f16\u7801\u6216\u8005\u5085\u91cc\u53f6\u7279\u5f81\uff09\uff0c\u6211\u4eec\u5e0c\u671b\u53cd\u5411\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5148\u5b66\u4e60\u4f4e\u9891\u4fe1\u606f\u751f\u6210\u7269\u4f53\u8f6e\u5ed3coarse\uff0c\u7136\u540e\u6700\u540e\u5b66\u4e60\u5230\u9ad8\u9891\u4fe1\u606f\uff0c\u800c\u6240\u6709\u6a21\u578b\u662f\u5171\u4eab\u53c2\u6570\u7684\uff0c\u6240\u4ee5\u9700\u8981\u7528time Embedding\u6765\u63d0\u9192\u6a21\u578b\u505a\u5230\u54ea\u4e00\u6b65\u4e86</p> <p></p> <p>\u9884\u6d4b\u6b63\u592a\u5206\u5e03\u5176\u5b9e\u90fd\u4e0d\u9700\u8981\u5b66\u4e60\u65b9\u5dee\uff0c\u53ea\u5b66\u4e60\u5747\u503c\u5c31\u5df2\u7ecf\u5f88\u597d\u4e86\uff0c\u8fdb\u4e00\u6b65\u964d\u4f4e\u4e86\u8bad\u7ec3\u96be\u5ea6</p> </li> <li> <p>Improved DDPM\uff1a\u7ee7\u7eed\u5b66\u4e60\u65b9\u5dee\u53d1\u73b0\u6548\u679c\u4e0d\u9519\uff1b\u6dfb\u52a0\u566a\u58f0\u7684schedule\u4ece\u7ebf\u6027\u7684schedule\u6539\u6210\u4e86\u4f59\u5f26\u7684schedule\uff1bDiffusion scale\u5f88\u597d</p> </li> <li> <p>Diffusion beats GAN\uff1a\u66f4\u5927\u7f51\u7edc\uff1b\u65b0\u7684\u5f52\u4e00\u5316\u65b9\u5f0f\uff0cadaptive group normalization\uff0c\u6839\u636e\u6b65\u6570\u505a\u81ea\u9002\u5e94\u7684\u5f52\u4e00\u5316\uff1b\u4f7f\u7528classifier guidance\u7684\u65b9\u6cd5\u6765\u5f15\u5bfc\u6a21\u578b\u91c7\u6837\u548c\u751f\u6210\uff0c\u52a0\u901f\u53cd\u5411\u751f\u6210\u8fc7\u7a0b</p> <p></p> <p>\u5728\u8bad\u7ec3\u6a21\u578b\u7684\u65f6\u5019\u52a0\u4e86\u4e00\u4e2a\u5206\u7c7b\u5668\uff08\u7b80\u5355\u7684\u56fe\u50cf\u5206\u7c7b\u5668\uff0c\u53ef\u4ee5\u5728ImageNet\u4e0a\u9884\u8bad\u7ec3\uff0c\u4f46\u52a0\u4e86\u5f88\u591a\u566a\u58f0\uff09\uff0c\u6bcf\u6b21\\(x_t\\)\u90fd\u7ecf\u8fc7\u5206\u7c7b\u5668\u7b97\u4e00\u4e2a\u4ea4\u53c9\u71b5\u7136\u540e\u7b97\u68af\u5ea6\u518d\u7ed9\\(x_{t-1}\\)\uff0c\u76ee\u7684\u662f\u4f7f\u5176\u66f4\u63a5\u8fd1\u67d0\u79cd\u7269\u4f53\uff0c\u589e\u52a0\u903c\u771f\u5ea6\u3002</p> <p>\u5176\u4ed6guidance\uff1a\u9664\u4e86\u4f7f\u7528\u7b80\u5355\u7684\u5206\u7c7b\u5668\u505aguidance\uff0c\u53ef\u4ee5\u6362\u6210\u4f7f\u7528CLIP\u6a21\u578b\uff0c\u53e6\u5916\u53ef\u4ee5\u5728\u56fe\u50cf\u4e0a\u505a\u7279\u5f81\u7ea7\u522b\u7684\u5f15\u5bfc\u3001\u98ce\u683c\u5c42\u9762\u7684\u5f15\u5bfc\uff0c\u6587\u672c\u53ef\u4ee5\u7528LLM\u3002\u8fd9\u4e9b\u5f15\u5bfc\u90fd\u662f\u4e0b\u5f0f\u4e2d\u7684 \\(y\\)</p> <p></p> <p>\u7f3a\u9677\u662f\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u6a21\u578b\uff0c\u8981\u4e48\u81ea\u5df1\u8bad\u8981\u4e48\u7528\u9884\u8bad\u7ec3\u6a21\u578b</p> <p>\u540e\u7eed\u5de5\u4f5cclassifier free guidance\uff08GLIDE\uff0cDALLE2\uff09\uff1a\u5047\u8bbe\u6211\u7528text\u505aguidance\uff08\u4e0b\u5f0f\u4e2d\\(y\\)\uff09\uff0c\u4f46\u662f\u6211\u968f\u673a\u53bb\u6389\u8fd9\u4e2aguidance\uff08\u4e0b\u5f0f\u4e2d\u4e3a\\(\\empty\\)\uff09\uff0c\u7136\u540e\u4f1a\u6709\u4e24\u4e2a\u5206\u5e03\uff0c\u6211\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b9\u5411\uff0c\u7136\u540e\u6700\u540e\u53cd\u5411\u6269\u6563\u7684\u65f6\u5019\u5982\u679c\u6ca1\u6709guidance\u4e5f\u53ef\u4ee5\u751f\u6210\u3002\u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u8d35\u3002</p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/32-DALLE2/#_4","title":"\u65b9\u6cd5","text":"<ul> <li> <p>Decoder\uff08\u56fe\u50cf\u7279\u5f81\u5230\u56fe\u50cf\uff09\uff1a\u57fa\u4e8eGLIDE\uff0cclassifier guidance\u548cclassifier-free guidance\u90fd\u7528\u5230\u4e86</p> </li> <li> <p>Prior\uff08\u6587\u672c\u7279\u5f81\u5230\u56fe\u50cf\u7279\u5f81\uff09\uff1a\u4f5c\u8005\u5c1d\u8bd5\u4e86\u4e24\u79cd\u65b9\u6cd5\uff0c\u81ea\u56de\u5f52\u548c\u6269\u6563\uff08\u4e24\u8005\u90fd\u7528\u5230\u4e86classifier-free guidance\uff0c\u6548\u679c\u5f88\u597d\uff09\u3002</p> </li> </ul> <p>\u524d\u8005\u8bad\u7ec3\u6548\u7387\u5f88\u4f4e\uff08\u8f93\u5165\u662f\u6587\u672c\u7279\u5f81\uff0c\u6709CLIP\u7684\u56fe\u50cf\u7279\u5f81\u505aGT\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u628a\u56fe\u7247\u906e\u4f4f\u505a\u81ea\u56de\u5f52\u7684\u9884\u6d4b\uff09\uff1b</p> <p>\u540e\u8005\u5728\u53cd\u5411\u6269\u6563\u7684\u65f6\u5019\u4f7f\u7528\u4e86Transformer\u7684Decoder\uff08\u56e0\u4e3a\u8f93\u5165\u8f93\u51fa\u90fd\u662fEmbedding\u6240\u4ee5\u76f4\u63a5Transformer\uff0c\u7528UNet\u4e0d\u592a\u5408\u9002\uff09\u3002\u6a21\u578b\u8f93\u5165\uff1a\u6587\u672c\u3001CLIP\u6587\u672c\u7279\u5f81\u3001\u6b65\u6570Embedding\u3001\u52a0\u8fc7\u566a\u58f0\u7684\u56fe\u50cf\u7279\u5f81\u3001Transformer\u81ea\u8eab\u7684Embedding\uff08\u4f8b\u5982CLS Token\uff09\uff0c\u800c\u8fd9\u4e2aCLS Token\u5c31\u62ff\u53bb\u9884\u6d4b\u6ca1\u6709\u52a0\u8fc7\u566a\u58f0\u7684CLIP\u56fe\u50cf\u7279\u5f81\u3002\u4eceDDPM\u5f00\u59cb\u5927\u5bb6\u90fd\u662f\u9884\u6d4b\u566a\u58f0\uff0c\u4f46\u662f\u672c\u6587\u53d1\u73b0\u9884\u6d4b\u56fe\u50cf\u7279\u5f81\u5728\u8fd9\u4e2a\u4efb\u52a1\u91cc\u6548\u679c\u66f4\u597d</p> <ul> <li> <p>DALLE2\u4f7f\u7528\u4e0a\u8ff0\u4e24\u9636\u6bb5\u751f\u6210\uff0c\u4f46\u662fImageGen\u91cc\u7528\u4e00\u4e2a\u9636\u6bb5\u4e14\u53ea\u7528UNet\u6548\u679c\u4e5f\u5f88\u597d</p> </li> <li> <p>Scale Matters</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/32-DALLE2/#_5","title":"\u5c40\u9650\u6027","text":"<ul> <li> <p>\u4e0d\u80fd\u5f88\u597d\u5730\u5c06\u7269\u4f53\u548c\u5c5e\u6027\u7ed3\u5408\u8d77\u6765\uff0c\u4f8b\u5982\u65b9\u5411\u4f4d\u7f6e\u7b49\u3002\u53ef\u80fd\u662fCLIP\u6a21\u578b\u7684\u95ee\u9898\uff0cCLIP\u6a21\u578b\u53ea\u770b\u7269\u4f53\u76f8\u4f3c\u6027\uff0c\u4e0d\u4e86\u89e3\u65b9\u5411\u7b49\u62bd\u8c61\u6982\u5ff5</p> </li> <li> <p>\u751f\u6210\u6587\u5b57\u4e0d\u5bf9\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4f7f\u7528BPE\u7f16\u7801\u5bfc\u81f4\uff0c\u56e0\u4e3a\u8fd9\u662f\u5bf9\u8bcd\u6839\u8bcd\u7f00\u7f16\u7801\u7684</p> </li> <li>\u4e0d\u80fd\u751f\u6210\u590d\u6742\u573a\u666f\uff0c\u7ec6\u8282\u7f3a\u5931\u6bd4\u8f83\u4e25\u91cd</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/","title":"ViLT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/#vilt","title":"ViLT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/#_1","title":"\u6807\u9898","text":"<ul> <li> <p>ViLT\uff1aVision-and-Language Transformer Without Convolution or Region Supervision</p> </li> <li> <p>\u5c06\u76ee\u6807\u68c0\u6d4b\u4ece\u591a\u6a21\u6001\u5b66\u4e60\u6846\u67b6\u4e2d\u53bb\u9664</p> </li> <li> <p>\u67b6\u6784</p> </li> </ul> <p>\u4e4b\u524d\u7684\u6a21\u578b\u4e00\u822c\u90fd\u662f\u6587\u672c\u5904\u7406\u6bd4\u8f83\u7b80\u5355\u76f4\u63a5\u5c06\u6587\u672c\u53d8\u6210Embedding\uff0c\u7136\u540e\u76f4\u63a5\u548c\u56fe\u7247\u7279\u5f81\u653e\u5230Transformer\u91cc\u505a\u6a21\u6001\u878d\u5408</p> <p>\u4e4b\u524d\u7684\u5de5\u4f5cRegion Feature\u5c31\u50cf\u76ee\u6807\u68c0\u6d4b\u4e00\u6837\u662f\u62bd\u53d6\u5c40\u90e8\u7279\u5f81\uff0c\u5148\u7528CNN Backbone\uff0c\u7136\u540e\u518d\u7ecf\u8fc7Region Operations\u83b7\u5f97\u5f88\u591a\u6846\uff08\u4f7f\u7528\u76ee\u6807\u68c0\u6d4b\u7684\u4efb\u52a1\uff09</p> <p></p> <p>\u4e4b\u524d\u7684Region Feature\u5728\u89c6\u89c9\u8fd9\u8fb9\u5360\u7528\u65f6\u95f4\u6781\u957f</p> <p></p> <p>ViLT\u7684\u8bad\u7ec3\u6210\u672c\u5f88\u8d35\u4e14\u6548\u679c\u4e00\u822c\uff0c\u4f46\u662f\u8fd0\u884c\u65f6\u95f4\u975e\u5e38\u5feb</p> <ul> <li>\u6807\u9898\u4e2d\u6240\u4ee5\u8bf4without convolution and region supervision</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/#_2","title":"\u6458\u8981","text":"<ul> <li>\u4e4b\u524d\u7684Vision-and-Language Pre-training\uff08VLP\uff09\uff0c\u6bd4\u8f83\u8d35\uff0c\u6548\u7387\u4f4e\u3002\u751a\u81f3\u5355\u6a21\u6001\u7684\u62bd\u53d6\u65f6\u95f4\u6bd4\u591a\u6a21\u6001\u7684\u878d\u5408\u65f6\u95f4\u8fd8\u957f</li> <li>\u76ee\u524d\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u5e76\u4e0d\u5927</li> <li>\u63d0\u51fa\u4e00\u4e2a\u6781\u7b80\u7684Framework\uff0c\u76f4\u63a5\u8ba9\u56fe\u7247\u548c\u6587\u672c\u4e00\u6837\u76f4\u63a5\u90fd\u901a\u8fc7Linear Embedding</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/#_3","title":"\u5f15\u8a00","text":"<ul> <li>\u9884\u8bad\u7ec3\u975e\u5e38\u91cd\u8981\uff0c\u51fa\u73b0\u4e86\u5f88\u591aVLP\u6a21\u578b\uff0c\u4e00\u822c\u8f93\u5165\u90fd\u662f\u56fe\u50cf\u6587\u672c\u5bf9\uff0closs\u7528\u7684\u662f\u56fe\u50cf\u6587\u672cmatch loss\uff0c\u5e76\u4e14\u4f7f\u7528BERT\u4e00\u6837\u7684\u63a9\u7801\u5b66\u4e60</li> <li>\u8bed\u8a00\u53ea\u80fd\u7528Transformer\uff0c\u4f46\u662f\u56fe\u7247\u4e0d\u80fd\u76f4\u63a5\u4e22\u5230Transformer\u91cc\u56e0\u4e3a\u592a\u957f\u4e86\uff0c\u9700\u8981\u63d0\u53d6\u66f4\u9ad8\u7684\u79bb\u6563\u6027\u7684\u8bed\u4e49\u7279\u5f81\uff0cViT\u662f\u5206\u6210patch\uff0c\u5f53\u65f6\u7528\u7684\u662f\u9884\u8bad\u7ec3\u7684\u76ee\u6807\u68c0\u6d4b\u5668\uff08\u56fe\u50cf\u53d8\u6210bounding box\uff0c\u6bcf\u4e2a\u90fd\u662f\u4e00\u4e2a\u7269\u4f53\uff0c\u6709\u660e\u786e\u7684\u8bed\u4e49\u4fe1\u606f\uff0c\u4e14\u79bb\u6563\uff0c\u6bcf\u4e2a\u533a\u57df\u90fd\u76f8\u5f53\u4e8eNLP\u4e2d\u7684\u4e00\u4e2aword\uff1b\u53e6\u5916\u5f53\u65f6\u7684\u4e0b\u6e38\u4efb\u52a1\u5f88\u591a\u90fd\u548c\u7269\u4f53\u6709\u5f88\u5f3a\u7684\u8054\u7cfb\uff0c\u4f8b\u5982VQA\uff09\uff0c\u4e00\u822c\u662f\u5728Visual Genome\u4e0a\u8bad\u7ec3\uff0c\u8fd9\u4e2a\u6570\u636e\u96c6\u67091600\u4e2a\u7c7b400\u4e2a\u5c5e\u6027\uff0c\u56e0\u4e3a\u591a\u6a21\u6001\u5e0c\u671b\u56fe\u50cf\u80fd\u8986\u76d6\u66f4\u591a\u7279\u5f81\uff0c\u80fd\u548c\u6587\u672c\u5339\u914d\u8d77\u6765\u3002\u76ee\u6807\u68c0\u6d4b\u975e\u5e38\u8d35</li> <li>pixel-BERT\u80fd\u591f\u4e0d\u7528\u76ee\u6807\u68c0\u6d4b\u62bd\u7279\u5f81\uff0c\u76f4\u63a5\u7528resnet\u7684\u7279\u5f81</li> <li>\u4f5c\u8005\u8ba4\u4e3a\u4e0a\u9762\u7684\u4efb\u52a1\u57fa\u672c\u5173\u6ce8\u56fe\u50cf\u7f16\u7801\u5668\u7684\u6027\u80fd\uff0c\u800c\u6ca1\u6709\u5173\u6ce8\u6548\u7387\uff0c\u63a8\u7406\u5f00\u9500\u5f88\u5927</li> <li>\u672c\u6587\u53d7\u542f\u53d1\u4e8eViT\uff0c\u628a\u56fe\u50cf\u6253\u6210patch\uff0c\u7136\u540e\u5c06patch\u53d8\u6210linear embedding</li> <li>\u6a21\u6001\u878d\u5408\u7684\u65b9\u6cd5</li> <li>single-stream\uff1a\u4e24\u79cd\u8f93\u5165\u76f4\u63a5\u8fde\u63a5\u7136\u540e\u7ed9\u6a21\u578b</li> <li>dual-stream\uff1a\u4e24\u79cd\u8f93\u5165\u5206\u522b\u7ed9\u4e00\u4e2a\u6a21\u578b\u7136\u540e\u5728\u67d0\u4e2a\u65f6\u5019\u878d\u5408\u8d77\u6765</li> <li>\u672c\u6587\u4e09\u70b9\u8d21\u732e</li> <li>\u7b80\u5355\uff0c\u63a8\u7406\u901f\u5ea6\u5feb</li> <li>\u6027\u80fd\u6bd4\u8f83\u597d</li> <li>\u4f7f\u7528\u6570\u636e\u589e\u5f3a\uff0c\u4e4b\u524d\u591a\u6a21\u6001\u5b66\u4e60\u7528\u6570\u636e\u589e\u5f3a\u6bd4\u8f83\u5c11\uff0c\u56e0\u4e3a\u589e\u5f3a\u4e4b\u540e\u53ef\u80fd\u8bed\u4e49\u4fe1\u606f\u53d1\u751fmismatch\uff0c\u4f5c\u8005\u53d1\u73b0\u6570\u636e\u589e\u5f3a\u8fd8\u662f\u6bd4\u8f83\u597d\u7684</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/#_4","title":"\u76f8\u5173\u5de5\u4f5c","text":"<ul> <li> <p>VLP\u6a21\u578b\u5206\u7c7b</p> </li> <li> <p></p> <p>\u4e0a\u56feVE\u8868\u793a\u89c6\u89c9Embedding\uff0cTE\u662f\u6587\u672cEmbedding\uff0cMI\u662f\u6a21\u6001\u878d\u5408</p> </li> <li> <p>CLIP\u9002\u5408\u62bd\u7279\u5f81\uff0c\u4f46\u662f\u878d\u5408\u6bd4\u8f83\u8f7b\u91cf\u5c31\u4e0d\u592a\u9002\u5408\u505a\u4e0b\u6e38\u4efb\u52a1\uff0c\u56e0\u4e3a\u5b83\u7684\u878d\u5408\u662f\u4e0d\u53ef\u5b66\u4e60\u7684\u7b80\u5355\u7684\u70b9\u4e58</p> </li> <li> <p>\u524d\u4e24\u5e74\u4e3b\u8981\u7814\u7a76\u7684\u662f\u65b9\u6cd5c\uff0c\u6a21\u6001\u878d\u5408\u4e5f\u4f7f\u7528Transformer</p> </li> <li> <p>\u4f5c\u8005\u8ba4\u4e3a\u62bd\u7279\u5f81\u5f71\u54cd\u4e0d\u5927\uff0c\u6a21\u6001\u878d\u5408\u6bd4\u8f83\u91cd\u8981</p> </li> <li> <p>\u6a21\u6001\u878d\u5408</p> </li> <li> <p>single-stream\uff1a\u4e24\u4e2a\u5e8f\u5217\u76f4\u63a5compact\u7136\u540e\u653e\u5230\u6a21\u578b\u91cc</p> </li> <li>dual-stream\uff1a\u5148\u5404\u81ea\u901a\u8fc7\u6a21\u578b\u7136\u540e\u5728\u8fc7\u7a0b\u4e2d\u878d\u5408</li> <li> <p>\u4f5c\u8005\u8ba4\u4e3a\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u6bd4\u8f83\u8d35</p> </li> <li> <p>\u8bed\u8a00\u7279\u5f81\u62bd\u53d6\uff1a\u4e00\u822c\u90fd\u4f7f\u7528\u9884\u8bad\u7ec3\u7684BERT</p> </li> <li> <p>\u89c6\u89c9\u7279\u5f81\u62bd\u53d6</p> </li> <li> <p>\u533a\u57df\u5b66\u4e60 Region Feature\uff1aBackbone\u62bd\u7279\u5f81\uff08ResNet\uff09+ RPN\u7f51\u7edc\u62bdROI\uff0c\u7136\u540e\u7528NMS\u5c06ROI\u964d\u4f4e\u5230\u56fa\u5b9a\u6570\u91cf + RoI Head\u5c06bounding box\u53d8\u6210\u4e00\u7ef4\u5411\u91cf</p> <p>RPN\u7f51\u7edc\u662f\u4e00\u79cd\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u5168\u79f0\u4e3aRegion Proposal Network\u3002\u5b83\u662f\u5728Faster R-CNN\u6a21\u578b\u4e2d\u63d0\u51fa\u7684\u4e00\u79cd\u65b0\u578b\u7f51\u7edc\u7ed3\u6784\uff0c\u7528\u4e8e\u751f\u6210\u5019\u9009\u533a\u57df\u5e76\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\uff0c\u4ee5\u63d0\u9ad8\u76ee\u6807\u68c0\u6d4b\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\u3002RPN\u7f51\u7edc\u53ef\u4ee5\u5728\u4e00\u5f20\u56fe\u50cf\u4e2d\u751f\u6210\u591a\u4e2a\u5019\u9009\u533a\u57df\uff0c\u6bcf\u4e2a\u533a\u57df\u90fd\u6709\u53ef\u80fd\u5305\u542b\u76ee\u6807\u7269\u4f53\uff0c\u7136\u540e\u518d\u901a\u8fc7\u540e\u7eed\u7684\u7f51\u7edc\u7ed3\u6784\u5bf9\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u8fdb\u884c\u5206\u7c7b\u548c\u5b9a\u4f4d\u3002RPN\u7f51\u7edc\u901a\u5e38\u4f7f\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u6765\u63d0\u53d6\u7279\u5f81\uff0c\u5177\u6709\u8f83\u9ad8\u7684\u8ba1\u7b97\u6548\u7387\u548c\u51c6\u786e\u6027\u3002</p> <p>ROI\uff08Region of Interest\uff09\u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\u662f\u6307\u611f\u5174\u8da3\u533a\u57df\uff0c\u5373\u56fe\u50cf\u4e2d\u53ef\u80fd\u5305\u542b\u76ee\u6807\u7684\u533a\u57df\u3002\u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\uff0c\u5148\u901a\u8fc7\u4e00\u4e9b\u9884\u5904\u7406\u65b9\u6cd5\uff08\u5982\u8fb9\u7f18\u68c0\u6d4b\u3001\u56fe\u50cf\u5206\u5272\u7b49\uff09\u627e\u5230\u56fe\u50cf\u4e2d\u7684ROI\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9bROI\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3001\u5206\u7c7b\u7b49\u64cd\u4f5c\uff0c\u4ee5\u5224\u65ad\u5176\u4e2d\u662f\u5426\u5305\u542b\u76ee\u6807\u7269\u4f53\u3002ROI\u7684\u51c6\u786e\u6027\u548c\u6709\u6548\u6027\u5bf9\u76ee\u6807\u68c0\u6d4b\u7684\u7ed3\u679c\u5f71\u54cd\u5f88\u5927\u3002</p> </li> <li> <p>Grid Feature\uff1a\u6bd4\u8f83\u8d35\u4e14\u6027\u80fd\u4e0b\u964d\u6781\u5927</p> </li> <li> <p>Patch Projection\uff1a\u501f\u9274ViT\uff0c\u53ea\u4f7f\u7528patch</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/#_5","title":"\u65b9\u6cd5","text":"<ul> <li> <p>\u6a21\u578b\u7ed3\u6784\uff1aTransformer Encoder</p> </li> <li> <p>\u5c06\u56fe\u7247\u548c\u6587\u672c\u53d8\u6210Embedding\u4e4b\u540e\u9700\u8981\u5728\u524d\u9762\u52a0\u4e00\u4e9b\u6307\u793aFlag\uff0c\u56e0\u4e3asingle-stream\u4e0d\u80fd\u533a\u5206\u56fe\u50cf\u6587\u672c\uff0c\u6240\u4ee5\u9700\u8981\u5728\u524d\u9762\u52a00/1\u8868\u793a\u6587\u672c\u6216\u56fe\u50cf\uff1b\u6587\u672c\u548c\u56fe\u50cf\u6700\u524d\u9762\u9700\u8981\u52a0CLS Token\uff1b\u53e6\u5916\u9700\u8981\u52a0position embedding\uff1b\u6ce8\u610f\u8fd9\u91cc\u4e09\u4e2aEmbedding\u662f\u76f8\u52a0\u7684\u800c\u4e0d\u662f\u62fc\u63a5</p> </li> </ul> <p></p> <ul> <li> <p>loss\uff1aImage Text Matching + Masked Language Modeling + Word Patch Alignment\uff0c\u6700\u540e\u4e00\u79cd\u7528\u7684\u4eba\u6bd4\u8f83\u5c11\uff0c\u4e5f\u662f\u60f3\u7b97\u6587\u672c\u548c\u56fe\u50cf\u7279\u5f81\u76f8\u4f3c\u5ea6\uff0c\u5229\u7528Optimal Transport\u6700\u4f18\u8fd0\u8f93\u7406\u8bba\uff0c\u7b80\u5355\u7406\u89e3\u662f\u8f93\u51fa\u7684\u6587\u672c\u7279\u5f81\u548c\u56fe\u50cf\u7279\u5f81\u5404\u6709\u4e00\u4e2a\u6982\u7387\u5206\u5e03\uff0c\u4f5c\u8005\u8ba1\u7b97\u4e86\u4e24\u4e2a\u5206\u5e03\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u7b2c\u4e8c\u79cdloss\u5c31\u662fBERT\u7684\u5b8c\u578b\u586b\u7a7a</p> </li> <li> <p>Whole Word Masking</p> </li> <li> <p>\u4e4b\u524d\u7528\u7684\u662fWordPiece Token\uff0c\u5c31\u662f\u5c06\u4e00\u4e2aword\u5207\u6210\u51e0\u4efd\uff0c\u5982\u679c\u4e2d\u95f4mask\u6389\u4e00\u4e2a\u7684\u8bdd\uff0c\u6a21\u578b\u53ef\u4ee5\u6839\u636e\u9996\u5c3e\u51e0\u4e2a\u5b57\u6bcd\u76f4\u63a5\u731c\u51fa\u6765\uff0c\u800c\u4e0d\u7528\u53bb\u4ece\u56fe\u50cf\u4e2d\u5b66\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2aShortcut\u3002\u6240\u4ee5\u76f4\u63a5\u5c06\u6574\u4e2aword\u53bb\u6389</p> </li> <li> <p>\u8fd9\u4e2atrick\u5f88\u6709\u6548</p> </li> <li> <p>\u6570\u636e\u589e\u5f3a</p> </li> <li> <p>RandAugment\uff0c\u4f46\u662f\u4e0d\u4f7f\u7528Color inversion\u548ccutout</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/#_6","title":"\u5b9e\u9a8c","text":"<ul> <li>\u9884\u8bad\u7ec3</li> <li>\u6570\u636e\u96c6\uff1a<ul> <li>MSCOCO\uff1a\u4e00\u4e2a\u56fe\u7247\u67095\u4e2aCaption\uff0c\u6807\u9898\u6bd4\u8f83\u957f</li> <li>VG\uff1a\u6807\u9898\u975e\u5e38\u591a\uff0c\u4f46\u6bd4\u8f83\u77ed</li> <li>GCC\uff1a\u4e00\u4e2a\u56fe\u7247\u4e00\u4e2a\u6807\u9898\uff0c\u6807\u9898\u6bd4\u8f83\u957f</li> <li>SBU\uff1a\u540c\u4e0a</li> </ul> </li> <li>\u8fd9\u56db\u4e2a\u6570\u636e\u96c6\u4e00\u822c\u79f0\u4f5c 4Million\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u56fe\u7247\u76f8\u52a0\u6570\u91cf\u5927\u6982\u662f4M</li> <li>\u524d\u4e24\u4e2a\u56fe\u7247\u5728\u6570\u636e\u96c6\u91cc\uff0c\u540e\u4e24\u4e2a\u653e\u7684\u662fURL\u5bfc\u81f4\u5f88\u591a\u56fe\u7247\u5931\u6548\u4e86</li> <li>\u7ed3\u8bba\uff1a\u53d6\u820d\u6bd4\u8f83\u597d</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/33-ViLT/#_7","title":"\u7ed3\u8bba\u548c\u672a\u6765\u5de5\u4f5c","text":"<ul> <li>\u672a\u6765\u5de5\u4f5c</li> <li>scalability</li> <li>\u56fe\u50cf\u5b8c\u578b\u586b\u7a7a\uff0cMAE\u975e\u5e38\u6709\u524d\u9014</li> <li>\u6570\u636e\u589e\u5f3a\u5f88\u6709\u7528</li> <li>\u5f53\u4f60\u4e0d\u77e5\u9053\u505a\u4ec0\u4e48\u53ef\u4ee5\u8bfb\u6700\u8fd1\u7684Future Work\uff0c\u4e3b\u8981\u62c5\u5fc3\u624b\u901f</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/","title":"CLIP\u4e32\u8bb2","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#clip","title":"CLIP\u4e32\u8bb2","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#_1","title":"\u603b\u89c8","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#_2","title":"\u56de\u987e","text":"<ul> <li>\u6587\u672c\u7ecf\u8fc7Encoder\u5f97\u5230\u6587\u672c\u7279\u5f81\uff0c\u56fe\u50cf\u7ecf\u8fc7Encoder\u5f97\u5230\u56fe\u50cf\u7279\u5f81\uff0c\u7136\u540e\u8fdb\u884c\u6587\u672c\u56fe\u50cf\u5bf9\u7684\u5bf9\u6bd4\u5b66\u4e60</li> <li>\u505a\u5206\u7c7b\u4efb\u52a1\u7684\u65f6\u5019\uff1a\u5c06\u7c7b\u522b\u901a\u8fc7prompt template\u901a\u8fc7\u6587\u672c\u7f16\u7801\u5668\u5f62\u6210\u5f88\u591aquery\uff0c\u7136\u540e\u56fe\u50cf\u901a\u8fc7\u56fe\u50cf\u7f16\u7801\u5668\u5f97\u5230\u4e00\u4e2a\u56fe\u50cf\u7279\u5f81\uff0c\u7136\u540e\u76f8\u5f53\u4e8e\u4f9d\u6b21\u95eequery\uff0c\u5f97\u5230\u56fe\u50cf\u7279\u5f81\u548c\u6587\u672c\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#_3","title":"\u5206\u5272","text":"<ul> <li> <p>\u5206\u5272\u548c\u5206\u7c7b\u5f88\u50cf\uff0c\u76f8\u5f53\u4e8e\u50cf\u7d20\u7ea7\u522b\u4e0a\u7684\u5206\u7c7b\u3002Paperwithcode\u4e0a\u5206\u5272\u8bba\u6587\u6700\u591a\uff0c\u56e0\u4e3a\u5206\u7c7b\u4efb\u52a1\u90fd\u80fd\u76f4\u63a5\u5728\u5206\u5272\u4e0a\u7528</p> </li> <li> <p>Language-Driven Semantic Segmentation</p> </li> <li> <p>\u67b6\u6784\uff1a\u548cCLIP\u975e\u5e38\u50cf\u3002\u56fe\u50cf\u7279\u5f81\u53d8\u6210\u4e86dense feature\u5bc6\u96c6\u7279\u5f81\uff0c\u7136\u540e\u505a\u70b9\u79ef\u505a\u878d\u5408</p> <p>\u56fe\u50cfEncoder\u4f7f\u7528\u7684\u662fDPT\uff0c\u76f8\u5f53\u4e8eViT+Decoder\uff0c\u5c06\u539f\u56fe\u964d\u7ef4\u4e00\u4e9b\u3002\u4e0d\u770b\u4e0a\u9762\u7684\u6587\u672c\u4fe1\u606f\u5176\u5b9e\u548c\u5206\u5272\u6a21\u578b\u662f\u4e00\u6837\u7684\u3002</p> <p>\u8bf4\u662fzero-shot\u4f46\u662f\u662f\u6709\u76d1\u7763\u7684\u5b66\u4e60\uff0c\u4e0d\u662f\u5bf9\u6bd4\u5b66\u4e60\uff08\u65e0\u76d1\u7763\u5b66\u4e60\uff09\u7684loss</p> <p></p> </li> <li> <p>\u8bad\u7ec3\uff1a\u6587\u672c\u7f16\u7801\u5668\u5c31\u662f\u7528\u7684CLIP\uff0c\u5e76\u4e14\u7531\u4e8e\u5206\u5272\u6570\u636e\u96c6\u5c0f\uff0c\u6240\u4ee5freeze\u4e86\u6574\u4e2a\u6587\u672c\u7f16\u7801\u5668\u3002\u56fe\u50cf\u7f16\u7801\u5668\u4f7f\u7528CLIP\u53cd\u800c\u4e0d\u884c\uff0c\u7528ViT\u66f4\u597d\uff0c\u5f88\u96be\u89e3\u91ca</p> </li> <li> <p>Zero-Shot\u7684\u6548\u679c\u6bd4\u4e4b\u524d\u7528ResNet\u7684OneShot\u7684\u6548\u679c\u5dee\u5f88\u591a\uff0c\u63d0\u5347\u7a7a\u95f4\u5f88\u5927</p> </li> <li> <p>CLIP\u5176\u5b9e\u5173\u6ce8\u7b97\u56fe\u50cf\u548c\u6587\u672c\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u6240\u4ee5\u5982\u679c\u628a\u4e0a\u9762\u7684\u6807\u7b7eother\u6362\u6210\u4e00\u4e9b\u62bd\u8c61\u7684\u865a\u8bcd\u4e5f\u53ef\u4ee5\u66ff\u4ee3\u539f\u6765\u7684other\u7684\u6548\u679c\uff0c\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u5206\u7c7b</p> </li> <li> <p>Group ViT: Semantic Segmantation Emerges from Text Supervision</p> </li> <li> <p>\u4e0a\u9762\u7684\u5de5\u4f5c\u8fd8\u4f9d\u8d56\u4e8e\u624b\u5de5\u6807\u6ce8\uff0c\u5982\u4f55\u505a\u5230\u65e0\u76d1\u7763\u8bad\u7ec3\u662f\u66f4\u88ab\u5173\u6ce8\u7684</p> </li> <li> <p>\u67b6\u6784</p> <p>\u4e4b\u524d\u505a\u65e0\u76d1\u7763\u5206\u5272\u7684\u65f6\u5019\u7ecf\u5e38\u7528\u4e00\u79cd\u65b9\u6cd5\u53ebGrouping\uff0c\u5982\u679c\u6709\u4e00\u4e9b\u805a\u7c7b\u4e2d\u5fc3\u70b9\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u53d1\u6563\uff0c\u7136\u540e\u9010\u6b65\u6269\u5145\u6210\u4e00\u4e2aGroup\uff0c\u81ea\u4e0b\u800c\u4e0a\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e2aGroup\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2asegmentation mask</p> <p>\u4f5c\u8005\u5728ViT\u7684\u6846\u67b6\u4e2d\u52a0\u4e0aGrouping Block\u4ee5\u53ca\u53ef\u5b66\u4e60\u7684Group Tokens\uff0c\u5728\u6d45\u5c42\u7684\u5206\u5272\u6548\u679c\u4e00\u822c\uff0c\u4f46\u5230\u4e0a\u5c42\u6548\u679c\u5c31\u5f88\u597d\u4e86</p> <p>\u4e00\u5f00\u59cbGroup Tokens\u7ef4\u5ea6\u662f64\u8868\u793a\u4e00\u5f00\u59cb\u670964\u4e2a\u805a\u7c7b\u4e2d\u5fc3\uff08\u66ff\u4ee3\u4e86\u4e4b\u524d\u4e00\u4e2aCLS\uff0c\u56e0\u4e3a\u4e4b\u524d\u60f3\u7528\u4e00\u4e2aToken\u6765\u4ee3\u8868\u6574\u4e2a\u56fe\u7247\uff09\uff0c384\u662fViT\u6a21\u578b\u7279\u5f81\u957f\u5ea6</p> <p>\u7ecf\u8fc76\u4e2aTransformer Layers\u4e4b\u540e\u7136\u540e\u8fdb\u5165Group Block\uff0cGroup Block\u7684\u4f5c\u7528\u662f\u5c06\u56fe\u50cf\u7279\u5f81\u8fdb\u884c\u4e00\u6b21Assign\uff0c\u76f8\u5f53\u4e8e\u5c06\u56fe\u50cf\u7279\u5f81cluster\u5230\u4e00\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u53bb\uff0c\u6240\u4ee5\u5f97\u523064\u4e2aSegmentation Token</p> <p></p> <p>\u5177\u4f53\u7684Group Block\u5982\u4e0b\uff1a\u7c7b\u4f3c\u81ea\u6ce8\u610f\u529b\u3002\u805a\u7c7b\u4e2d\u5fc3\u7684\u5206\u914d\u662f\u4e0d\u53ef\u5bfc\u7684\uff08\uff1f\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u4e00\u4e2agumbel softmax\u5c06\u6b64\u8fc7\u7a0b\u8f6c\u53d8\u4e3a\u53ef\u5bfc\u7684</p> <p></p> <p>\u4e4b\u540e\u518d\u52a0\u65b0\u7684Group Tokens\uff0c\u6765\u8fdb\u4e00\u6b65\u51cf\u5c11\u805a\u7c7b\u4e2d\u5fc3\uff0c\u6700\u540e\u5f97\u52308\u4e2a\u805a\u7c7b\u4e2d\u5fc3</p> <p>loss\u4f7f\u7528CLIP\u7684\u5bf9\u6bd4\u5b66\u4e60\uff0c\u6587\u672c\u76f4\u63a5\u5f97\u5230\u6587\u672c\u7279\u5f81\uff0c\u56fe\u50cf\u6700\u540e8\u4e2a\u7279\u5f81\u7ecf\u8fc7\u5e73\u5747\u6c60\u5316\u52a0MLP\u5f97\u5230\u56fe\u50cf\u7279\u5f81</p> </li> <li> <p>zero-shot\u63a8\u7406\uff1a\u5c31\u662f\u56fe\u50cf\u67098\u4e2a\u7279\u5f81\uff0c\u7136\u540e\u6587\u672c\u4e00\u4e2a\u7279\u5f81\u7b97\u76f8\u4f3c\u6027\uff0c\u6700\u5927\u7684\u5c40\u9650\u662f\u6700\u591a\u53ea\u67098\u7c7b</p> <p></p> </li> <li> <p>\u80cc\u666f\u7c7b\uff1a\u8bbe\u7f6e\u524d\u666f\u7684\u9608\u503c\uff0c\u5982\u679c\u6240\u6709\u7684Embedding\u90fd\u5c0f\u4e8e\u9608\u503c\u5219\u5c06\u5176\u5206\u7ed9\u80cc\u666f\u7c7b\u3002\u5bfc\u81f4\u7684\u95ee\u9898\u5c31\u662f\u5982\u679c\u56fe\u50cf\u5185\u7c7b\u522b\u5f88\u591a\u7f6e\u4fe1\u5ea6\u5c31\u4e0d\u591f\u9ad8\u3002\u4f5c\u8005\u53d1\u73b0Group ViT\u5206\u5272\u505a\u7684\u5f88\u597d\uff0c\u4f46\u662f\u8bed\u4e49\u5206\u5272\u4e0d\u592a\u597d\uff0c\u53ef\u80fd\u662f\u56e0\u4e3aCLIP\u53ea\u80fd\u5b66\u5230\u7269\u4f53\u8bed\u4e49\u4fe1\u606f\u975e\u5e38\u660e\u786e\u7684\u7269\u4f53</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#_4","title":"\u76ee\u6807\u68c0\u6d4b","text":"<ul> <li> <p>Open-Vocabulary Object Detection Via Vision and Language Knowledge Distillation</p> </li> <li> <p>CLIP\u5f53\u8001\u5e08\u84b8\u998f\u7f51\u7edc\uff0copen-vocabulary\u5c31\u662f\u4efb\u610f\u7c7b\u522b</p> </li> <li> <p></p> </li> <li> <p>\u65b9\u6cd5</p> <ul> <li>\u67b6\u6784\u5bf9\u6bd4\uff1a</li> </ul> <p></p> <ul> <li>Baseline\uff1a\u76f8\u5f53\u4e8eMaskRCNN\uff0c\u4e24\u9636\u6bb5\u7684\u5206\u7c7b\u5668\uff0c\u7b2c\u4e00\u4e2a\u9636\u6bb5\u4f1a\u5f97\u5230Region Proposal\uff08\u7b2c\u4e00\u9636\u6bb5\u7565\u4e86\uff0c\u6700\u5e95\u4e0b\u5c31\u662fProposal\uff09\uff0c\u7136\u540e\u901a\u8fc7Detection Head\u5f97\u5230\u5206\u7c7b\u5934\uff0c\u7136\u540e\u901a\u8fc7Classifier\u5f97\u5230Bounding Box\u662f\u4ec0\u4e48\u7c7b\u3002\u4e00\u822c\u5206\u6210\u4e24\u7c7b\uff0c\u600e\u4e48\u5b9a\u4f4d\uff08Bounding Box\u753b\u7684\u51c6\u4e0d\u51c6\uff09\u4ee5\u53ca\u600e\u4e48\u5206\u7c7b\uff08Bounding Box\u5185\u7269\u4f53\u5224\u65ad\u51c6\u4e0d\u51c6\uff09\u3002\u5728\u57fa\u7840\u7c7b\u4e0a\u505a\u6709\u76d1\u7763\u7684\u8bad\u7ec3</li> </ul> <p></p> <p>\u76ee\u6807\u68c0\u6d4b\u4e2d\u7684proposal\u662f\u6307\u5bf9\u8f93\u5165\u56fe\u50cf\u4e2d\u53ef\u80fd\u5305\u542b\u76ee\u6807\u7684\u533a\u57df\u8fdb\u884c\u9884\u6d4b\u548c\u7b5b\u9009\uff0c\u751f\u6210\u4e00\u7ec4\u5019\u9009\u6846\uff0c\u5373\u5019\u9009\u533a\u57df\u3002\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u901a\u5e38\u662f\u5728\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u5404\u4e2a\u4f4d\u7f6e\u548c\u5c3a\u5ea6\u4e0a\u751f\u6210\u7684\uff0c\u53ef\u4ee5\u5305\u542b\u76ee\u6807\u6216\u4e0d\u5305\u542b\u76ee\u6807\u3002\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4f1a\u5728\u8fd9\u4e9b\u5019\u9009\u6846\u4e2d\u5bfb\u627e\u76ee\u6807\uff0c\u5e76\u8fdb\u884c\u5206\u7c7b\u548c\u5b9a\u4f4d\u3002\u751f\u6210proposal\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u5e38\u89c1\u7684\u5305\u62ec\u6ed1\u52a8\u7a97\u53e3\u3001\u9009\u62e9\u6027\u641c\u7d22\u3001\u5feb\u901fRCNN\u4e2d\u7684\u5019\u9009\u6846\u7f51\u7edc\u7b49\u3002</p> <ul> <li>ViLD-text\uff1a\u548cCLIP\u4e00\u6837\uff0c\u63d0\u53d6\u56fe\u50cf\u7279\u5f81\u548c\u6587\u672c\u7279\u5f81\uff0c\u7136\u540e\u70b9\u4e58\u7b97\u76f8\u4f3c\u5ea6\u3002\u5728\u57fa\u7840\u7c7b\u4e0a\u6709\u76d1\u7763\u7684\u8bad\u7ec3\uff0c\u6587\u672c\u6765\u81ea\u7269\u4f53\u7684\u7c7b\u522b\uff0c\u6240\u4ee5\u53ea\u662f\u5c06\u4e24\u79cd\u7279\u5f81\u8fdb\u884c\u5173\u8054\uff0czero-shot\u80fd\u529b\u8f83\u5f31\u3002\u7531\u4e8e\u662f\u53ea\u7528\u57fa\u7840\u7c7b\uff0c\u4e0d\u5728\u57fa\u7840\u7c7b\u7684\u7269\u4f53\u76f4\u63a5\u8bbe\u4e3aback ground</li> </ul> <p></p> <ul> <li>ViLD-image\uff1a\u77e5\u8bc6\u84b8\u998f\uff0c\u5c06\u8f93\u5165\u7684Proposals\u901a\u8fc7CLIP\u5f97\u5230\u56fe\u50cf\u7279\u5f81\uff0c\u7136\u540e\u53e6\u4e00\u53ea\u5b66\u4e60Region Embedding\u5c3d\u53ef\u80fd\u548cCLIP\u5f97\u5230\u7684\u6587\u672c\u7279\u5f81\u76f8\u8fd1\u3002\u5927\u5927\u52a0\u5f3a\u4e86open-vacabulary\u80fd\u529b\uff0c\u4f46\u662f\u6ce8\u610f\u8f93\u5165\u662fM\u4e2apre-computed proposals\u800c\u4e0d\u662fn\uff0c\u4f46\u662fCLIP\u4f7f\u7528\u7684ViT-Large\u505a\u524d\u5411\u8fc7\u7a0b\u975e\u5e38\u8d35\uff0c\u6240\u4ee5\u5c31\u9884\u62bd\u53d6\u7279\u5f81</li> </ul> <p></p> <ul> <li>ViLD\uff1a\u6d4b\u8bd5\u7684\u65f6\u5019\u662f\u4e0d\u4f1a\u7528\u5230\u53f3\u8fb9\u4e00\u652f\u7684</li> </ul> <p></p> </li> <li> <p>\u6a21\u578b\u603b\u89c8\u56fe</p> <p></p> </li> <li> <p>GLIP</p> </li> <li> <p>\u6807\u9898\uff1aGrounded Language-Image Pre-training</p> </li> <li> <p>\u4f5c\u8005\u627e\u5230\u4e00\u7c7b\u4efb\u52a1\u662fVision Grounding\uff0c\u5c06\u4e00\u53e5\u8bdd\u4e2d\u7684\u7269\u4f53\u5728\u56fe\u7247\u4e2d\u627e\u5230\uff0c\u548c\u76ee\u6807\u68c0\u6d4b\u7c7b\u4f3c\uff0c\u4f46\u662f\u591a\u4e00\u4e2a\u6587\u672c\u4fe1\u606f\uff0c\u4f5c\u8005\u53d1\u73b0\u53ef\u4ee5\u628aDetection\u548cPhrase Grounding\u4efb\u52a1\u878d\u5408\u8d77\u6765\u4ece\u800c\u83b7\u5f97\u4e86\u66f4\u5927\u7684\u6570\u636e\u96c6\uff0c\u53e6\u5916\u53ef\u4ee5\u4f7f\u7528\u4f2a\u6807\u7b7e\u7b49\u6280\u672f\u53ef\u4ee5\u5728\u6ca1\u6709\u6807\u6ce8\u8fc7\u7684\u56fe\u50cf\u6587\u672c\u5bf9\u4e0a\u751f\u6210Bounding Box\u6807\u7b7e\u4ece\u800c\u6269\u5927\u6570\u636e\u96c6\u6570\u91cf</p> </li> <li> <p>\u80cc\u666f\uff1aVision Grouding\u4efb\u52a1\u548c\u76ee\u6807\u68c0\u6d4b\u7684\u4efb\u52a1\u7684\u8054\u7cfb\uff0c\u76ee\u6807\u68c0\u6d4b\u7684loss\u662f\u5206\u7c7bloss+\u5b9a\u4f4dloss\uff0cVision Grounding\u7684\u5b9a\u4f4dloss\u662f\u4e00\u6837\uff0c\u4f46\u662f\u5206\u7c7bloss\u4e0d\u4e00\u6837\u3002\u76ee\u6807\u68c0\u6d4b\u7684\u6807\u7b7e\u662f\u4e00\u4e2a\u6216\u4e24\u4e2a\u8bcd\uff0c\u662fone-hot\u6807\u7b7e\uff0c\u800cVision Grounding\u662f\u53e5\u5b50</p> <p>\u76ee\u6807\u68c0\u6d4b\u7684\u5206\u7c7bLoss\uff1a\\(O\\)\u662f\u56fe\u7247\u6bcf\u4e2aBounding Box\u7684\u7279\u5f81 \\(N\\times d\\)\uff0c\\(W\\)\u662f\u5206\u7c7b\u5668\u77e9\u9635\uff0c\u5f97\u5230\\(S\\)\u662flogits\uff0c\u6700\u540e\u7b97\u4e00\u4e2aLoss</p> <p></p> <p>Vision Grounding\u7684\u5206\u7c7bLoss\uff1a\u8ba1\u7b97\u56fe\u7247\u533a\u57df\u548c\u53e5\u5b50\u4e2d\u7684word\u5339\u914d\u5206\u6570\\(S_{ground}\\)</p> <p></p> <p>Img\u901a\u8fc7Encoder\u5f97\u5230Region Embedding\uff0cPrompt\u901a\u8fc7Encoder\u5f97\u5230\u6587\u672cEmbedding\uff0c\u7136\u540e\u7b97\u76f8\u4f3c\u5ea6\u3002\u8fd9\u5757\u548cViLD-text\u4e00\u6837</p> <p>\u63a5\u4e0b\u6765\u7684\u4efb\u52a1\u5c31\u662f\u5982\u4f55\u5c06\u8fd9\u4e24\u4e2a\u4efb\u52a1\u7edf\u4e00\u8d77\u6765\uff0c\u53ea\u8981\u505a\u4e00\u4e2a\u5c0f\u5c0f\u6539\u52a8\u5373\u4e0a\u9762\u65f6\u5019\u7b97\u662fpositive match\uff0c\u4ec0\u4e48\u65f6\u5019\u662fnegative match</p> <p>\u4f5c\u8005\u53d1\u73b0GLIP\u53ef\u4ee5\u8fc1\u79fb\u5230\u4efb\u4f55\u4e00\u4e2a\u76ee\u6807\u68c0\u6d4b\u7684\u6570\u636e\u96c6\u4e0a\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u770b\u5982\u4f55\u6269\u5927\u6570\u636e\u96c6</p> </li> <li> <p>\u4f5c\u8005\u65e2\u4f7f\u7528Detection\u6570\u636e\u96c6\u53c8\u4f7f\u7528Grounding\u6570\u636e\u96c6\u505a\u9884\u8bad\u7ec3\u3002Detection\u7528\u7684\u662fObject365\uff0c\u5728Object365\u4e0a\u505a\u9884\u8bad\u7ec3\u7136\u540e\u5728COCO\u4e0a\u505a\u5fae\u8c03\u4e00\u822c\u90fd\u4f1a\u975e\u5e38\u597d\uff1bGrounding\u7528\u7684\u662fGoldG\uff0c\u6709Bounding Box Annotation\u3002\u4f5c\u8005\u8fd8\u60f3\u8981\u66f4\u5927\u7684\u6570\u636e\u96c6\uff0c\u4e8e\u662f\u5f15\u5165unlabeled\u7684Cap24M\uff08\u56fe\u50cf\u6587\u672c\u5bf9\uff09\uff0c\u4f46\u662f\u9700\u8981\u77e5\u9053Bounding Box\u548cBox\u5185\u7269\u4f53\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u4f5c\u8005\u4f7f\u7528\u4f2a\u6807\u7b7e\uff0c\u76f4\u63a5\u4f7f\u7528\u5c0f\u6a21\u578b\uff08GLIP-T(C)\uff09\u7ed9\u8fd9\u4e9b\u56fe\u50cf\u6587\u672c\u5bf9\u505a\u63a8\u7406\u6253\u6807\u7b7e\uff08Self-Training\uff09\u3002\u4f2a\u6807\u7b7e\u4e00\u822c\u6548\u679c\u4f1a\u66f4\u597d</p> <p>Bounding Box Annotation\u662f\u6307\u5728\u56fe\u50cf\u6216\u89c6\u9891\u4e2d\u5bf9\u76ee\u6807\u7269\u4f53\u8fdb\u884c\u6846\u9009\u6807\u8bb0\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u3001\u7269\u4f53\u8bc6\u522b\u3001\u8ddf\u8e2a\u7b49\u8ba1\u7b97\u673a\u89c6\u89c9\u4efb\u52a1\u4e2d\u3002\u8fd9\u79cd\u6807\u8bb0\u901a\u5e38\u7528\u77e9\u5f62\u6846\u6216\u6b63\u65b9\u5f62\u6846\u6765\u8868\u793a\u76ee\u6807\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0cBounding Box Annotation\u662f\u8bad\u7ec3\u7269\u4f53\u68c0\u6d4b\u548c\u8bc6\u522b\u6a21\u578b\u7684\u91cd\u8981\u6b65\u9aa4\u4e4b\u4e00\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u76ee\u6807\uff0c\u9700\u8981\u6807\u6ce8\u51fa\u5176\u5728\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6e\u3001\u5927\u5c0f\u548c\u7c7b\u522b\u7b49\u4fe1\u606f\uff0c\u4ee5\u4fbf\u6a21\u578b\u80fd\u591f\u4ece\u56fe\u50cf\u4e2d\u6b63\u786e\u5730\u8bc6\u522b\u548c\u5b9a\u4f4d\u76ee\u6807\u3002</p> </li> <li> <p>\u603b\u4f53\u6846\u67b6</p> <p>\u4e0b\u56feMatrix\u91cc\u662f\u76d1\u7763\u5b66\u4e60\uff0c\u6211\u77e5\u9053\u6bcf\u4e2aBounding Box\u5bf9\u5e94\u7684\u6587\u672c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7b97\u76f8\u4f3c\u5ea6\u7684Alignment Loss\uff0c\u53e6\u5916\u6709Ground Truth\u53ef\u4ee5\u505aLocalization Loss\u3002</p> <p>Deep Fusion\u9636\u6bb5\u672c\u6765\u662f\u83b7\u5f97\u4e86\u4e24\u79cdEmbedding\u5c31\u76f4\u63a5\u7b97\u76f8\u4f3c\u5ea6\u77e9\u9635\uff0c\u4f46\u662f\u8fd9\u91cc\u591a\u52a0\u4e00\u4e9b\u5c42\u6570\u6765\u4f7f\u5176\u8fdb\u884c\u878d\u5408\uff0c\u672c\u6587\u4f7f\u7528Cross Attention\u3002\u8fd9\u79cdDeep Fusion\u53ef\u4ee5\u7528\u5230\u5206\u5272\u4e2d\uff0c\u6bd4\u5982GroupViT\u6709\u4e24\u4e2a\u5206\u652f\u53ef\u4ee5\u505aEarlyFusion</p> <p>\u68c0\u6d4b\u548c\u5206\u5272\u90fd\u5c5e\u4e8e\u7a20\u5bc6\u9884\u6d4b\uff0c\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u4e92\u76f8\u501f\u9274</p> <p></p> </li> <li> <p>GLIP v2: Unifying Localization and VL Understanding</p> </li> <li> <p>\u878d\u5408\u66f4\u591a\u7684\u4efb\u52a1\u548c\u66f4\u591a\u7684\u6570\u636e\u96c6\uff0c\u5c06\u6240\u6709\u5e26\u5b9a\u4f4d\uff08\u5206\u5272\u68c0\u6d4b\uff09\u548cVision-Language\u7684\u4efb\u52a1\u90fd\u878d\u5408\u8d77\u6765\uff08VQA\u3001Vision Grounding\u3001Vision Caption\uff09</p> </li> <li> <p>\u67b6\u6784\uff1a\u7edf\u4e00\u6846\u67b6\uff0c\u878d\u5408\u66f4\u591a\u6587\u672c\u4efb\u52a1\u3001\u6570\u636e\u96c6\u3001\u6a21\u6001</p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#_5","title":"\u56fe\u50cf\u901f\u5199","text":"<ul> <li> <p>CLIPasson: Semantically-Aware Object Sketching\uff08SIGGRAPH\uff09</p> </li> <li> <p>CLIP+\u6bd5\u52a0\u7d22\uff0c\u4fdd\u6301\u8bed\u4e49\u4fe1\u606f\u7684\u7269\u4f53\u901f\u5199</p> </li> <li> <p>\u4e4b\u524d\u7684\u5de5\u4f5c\u5c31\u662fdata-driven\uff0c\u62bd\u8c61\u7a0b\u5ea6\u7531\u6570\u636e\u96c6\u63a7\u5236\uff0c\u6570\u636e\u96c6\u6709\u5982\u4e0b\uff1a</p> <p></p> <p>\u4f46\u91cc\u9762\u6700\u5927\u7684\u6570\u636e\u96c6\u4e5f\u5c31\u662fQuickDraw\uff0c\u53ea\u6709300\u591a\u7c7b</p> </li> <li> <p>CLIP\u5bf9\u7269\u4f53\u7684\u8bed\u4e49\u4fe1\u606f\u6293\u53d6\u7684\u7279\u522b\u597d\uff0c\u540c\u65f6zero-shot\u80fd\u529b\u5f88\u5f3a\uff0c\u6587\u732e\u4e2d\u63d0\u5230CLIP\u62bd\u53d6\u7684\u7279\u5f81\u7279\u522b\u7a33\u5065\uff0c\u4e0d\u5149\u5728\u81ea\u7136\u56fe\u50cf\u4e0a\uff0c\u4e8e\u662f\u4f5c\u8005\u8ba4\u4e3a\u53ef\u4ee5\u8fd0\u7528\u5230\u7b80\u7b14\u753b\u4e0a</p> <p>CLIP is exceptional at encoding the semantic meaning of visual depictions, regardless of their style</p> <p>https://distill.pub/2021/multimodal-neurons</p> </li> <li> <p>\u672c\u6587\u53ef\u4ee5\u6839\u636e\u7b14\u753b\u7684\u591a\u5c11\u6765\u51b3\u5b9a\u62bd\u8c61\u7684\u7a0b\u5ea6</p> </li> <li> <p>\u67b6\u6784</p> <p>\u6bcf\u5f20\u56fe\u662f\u7531Sketch\u7ec4\u6210\u7684\uff08\\(S_i\\)\u8868\u793aSketch\uff09\uff0c\u6bcf\u4e2aSketch\u662f\u4e00\u6761\u8d1d\u585e\u5c14\u66f2\u7ebf\uff0c\u6bcf\u6761\u66f2\u7ebf\u75314\u4e2a\u70b9\u51b3\u5b9a</p> <p>\u672c\u6587\u4e3b\u8981\u7684\u8d21\u732e\u662f\u6700\u521d\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u6700\u540e\u7684\u8bad\u7ec3\uff0c\u4e2d\u95f4\u7684\u5149\u6805\u5316\u5668\u662f\u4e4b\u524d\u7684\u5de5\u4f5c\u3002\u4e3b\u8981\u601d\u60f3\u4e5f\u662f\u5229\u7528CLIP\u7279\u5f81\u7684\u7a33\u5065\u6027\u6765\u8fdb\u884c\u77e5\u8bc6\u84b8\u998f\uff0c\u4f5c\u8005\u8ba4\u4e3a\u98ce\u683c\u6539\u53d8\u4e0d\u4f1a\u5f71\u54cd\u524d\u540e\u4e24\u5f20\u56fe\u7684\u8bed\u4e49\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u9700\u8981\u5c06\u8fd9\u4e24\u4e2a\u7279\u5f81\u5c3d\u53ef\u80fd\u63a5\u8fd1\uff0c\u6240\u4ee5\u8bbe\u8ba1\u4e86\u7b2c\u4e00\u4e2aloss\u51fd\u6570 \\(L_s\\) \u5373 \u57fa\u4e8e\u8bed\u4e49\u7684\u7279\u5f81\uff1b\u53e6\u5916\u8fd8\u9700\u8981\u51e0\u4f55\u4e0a\u7684\u4e00\u4e9b\u9650\u5236\u5373 \\(L_g\\)\uff0c\u7528ResNet50\u524d\u51e0\u5c42\u7684\u56fe\u50cf\u505a\u51e0\u4f55\u4e0a\u7684Loss\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u7279\u5f81\u56fe\u8fd8\u6709\u957f\u5bbd\u6982\u5ff5\uff0c\u6240\u4ee5\u53ef\u4ee5\u6765\u505a\u51e0\u4f55\u4e0a\u7684\u9650\u5236\uff0c\u800c\u540e\u9762\u7684\u7279\u5f81\u5df2\u7ecf\u53ea\u5269\u4e0b\u8bed\u4e49\u7279\u5f81\u4e86\u3002</p> <p></p> </li> <li> <p>\u4f5c\u8005\u53d1\u73b0\u521d\u59cb\u5316\u975e\u5e38\u91cd\u8981\uff0c\u6240\u4ee5\u4f5c\u8005\u63d0\u51fa\u57fa\u4e8esaliency\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4f7f\u7528ViT\u6700\u540e\u4e00\u5c42\u591a\u5934\u81ea\u6ce8\u610f\u529b\u53d6\u4e00\u4e2a\u52a0\u6743\u5e73\u5747\u5f97\u5230saliency map\u7136\u540e\u770b\u54ea\u4e9b\u533a\u57df\u66f4\u663e\u8457\uff0c\u5728\u8fd9\u4e9b\u663e\u8457\u7684\u533a\u57df\u884c\u91c7\u70b9\u3002\u5176\u5b9e\u5c31\u662f\u5df2\u7ecf\u77e5\u9053\u7269\u4f53\u7684\u8fb9\u754c\uff0c\u5728\u6cbf\u7740\u8fb9\u754c\u753b\u70b9\u4e86</p> </li> <li> <p>\u4f5c\u8005\u8fd8\u52a0\u4e86\u4e00\u4e2a\u540e\u5904\u7406\uff0c\u6bcf\u6b21\u751f\u62103\u5f20\u7b80\u7b14\u753b\uff0c\u7136\u540e\u6839\u636e\\(L_g / L_s\\)\u7136\u540e\u8fd4\u56de\u6700\u597d\u7684\u753b</p> </li> <li> <p>\u5c40\u9650\u6027</p> <ul> <li>\u56fe\u50cf\u6709\u80cc\u666f\u5c31\u6bd4\u8f83\u96be\u505a\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u81ea\u6ce8\u610f\u529b\u56fe\u4e0a\u53d6\u70b9\u6bd4\u8f83\u96be\uff0c\u4f5c\u8005\u7684\u65b9\u6cd5\u662f\u4f7f\u7528U2Net\u5148\u62a0\u56fe</li> <li>\u751f\u6210\u662f\u4e00\u4e0b\u5b50\u751f\u6210\u7684\uff0c\u4f46\u662f\u4eba\u753b\u56fe\u662f\u5e8f\u5217\u753b\u51fa\u7684\uff0c\u53ef\u4ee5\u505a\u6210\u81ea\u56de\u5f52</li> <li>\u63a7\u5236\u7b14\u753b\u6570\u9700\u8981\u63d0\u524d\u6307\u5b9a\uff0c\u4f46\u662f\u4e0d\u540c\u56fe\u7247\u9700\u8981\u7684\u62bd\u8c61\u7a0b\u5ea6\u662f\u4e0d\u4e00\u6837\u7684</li> </ul> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#_6","title":"\u89c6\u9891","text":"<ul> <li> <p>CLIP4Clip: An Empirical Study of CLIP for End to End Video Clip Retrieval</p> </li> <li> <p>\u4efb\u52a1\u662fVideo Text Retrieval\uff0cCLIP\u5929\u751f\u9002\u5408Retrieve / Ranking / Matching \u76f8\u5173\u4efb\u52a1\uff0c\u56e0\u4e3aCLIP\u5c31\u662f\u7b97Video\u548cText\u7684\u76f8\u4f3c\u6027</p> </li> <li> <p>\u53cc\u5854\u7ed3\u6784</p> <p>\u56fe\u50cf\u548c\u6587\u672c\u7f16\u7801\u5668\u5206\u5f00\uff0c\u5f97\u5230\u7279\u5f81\u4e4b\u540e\u505a\u70b9\u4e58\u5f97\u5230\u76f8\u4f3c\u5ea6\uff0c\u6269\u5c55\u6027\u6bd4\u8f83\u597d\uff0c\u53ef\u4ee5\u63d0\u524d\u5c06\u5927\u7684\u6570\u636e\u96c6\u7684\u7279\u5f81\u5148\u62bd\u53d6\u597d</p> <p></p> <p>\u6587\u672c\u76f4\u63a5\u653e\u5230Transformer\u5f97\u5230\u4e00\u4e2aCLS Token\uff0c\u56fe\u50cf\u591a\u5e27\u4f9d\u6b21\u653e\u5165\u5f97\u5230\u591a\u4e2aCLS Token\u3002\u539f\u6765\u662f\u4e00\u4e2a\u6587\u672c\u7279\u5f81\u5bf9\u5e94\u4e00\u4e2a\u56fe\u50cf\u7279\u5f81\u76f4\u63a5\u505a\u70b9\u4e58\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0c\u73b0\u5728\u662f\u4e00\u6587\u672c\u7279\u5f81\u5bf9\u5e94\u5341\u4e2a\u56fe\u50cf\u7279\u5f81\uff0c\u672c\u6587\u662fempirical study\uff0c\u6240\u4ee5\u5c31\u5c1d\u8bd5\u4e86\u5404\u79cd\u65b9\u6cd5\u6765\u770b\u54ea\u4e2a\u6548\u679c\u6700\u597d</p> <p></p> <ul> <li> <p>\u5e73\u5747\u6c60\u5316\uff08\u4f5c\u8005\u79f0\u4e3aParameter Free\uff09\uff1a\u7b80\u5355\uff0c\u4f46\u662f\u6ca1\u6709\u8003\u8651\u65f6\u5e8f\u4fe1\u606f\uff0c\u4f8b\u5982\u505a\u4e0b\u548c\u7ad9\u8d77\u53d6\u5e73\u5747\u662f\u4e00\u6837\u7684\uff0c\u63a5\u53d7\u5ea6\u6700\u9ad8</p> </li> <li> <p>LSTM \u6216 Transformer+Positional Embedding</p> </li> <li> <p>Early Fusion\uff08\u4f5c\u8005\u79f0\u4e3aTight Type\uff09\uff0c\u4e4b\u524d\u7684\u65b9\u6cd5\u662fLate Fusion\u5373\u62bd\u5b8c\u7279\u5f81\u8003\u8651\u5982\u4f55\u878d\u5408\uff0c\u8fd9\u91cc\u662f\u4e00\u5f00\u59cb\u5c31\u878d\u5408\uff0c\u76f4\u63a5\u7528\u540c\u4e00\u4e2aTransformer</p> </li> </ul> <p>\u673a\u5668\u5b66\u4e60\u4e2d\u7684Video Text Retrieval\uff08\u89c6\u9891\u6587\u672c\u68c0\u7d22\uff09\u4efb\u52a1\u662f\u6307\u5728\u89c6\u9891\u4e2d\u68c0\u7d22\u4e0e\u6587\u672c\u67e5\u8be2\u76f8\u5173\u7684\u89c6\u9891\u7247\u6bb5\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u67e5\u8be2\u6587\u672c\uff0c\u8be5\u4efb\u52a1\u7684\u76ee\u6807\u662f\u627e\u5230\u4e0e\u8be5\u6587\u672c\u76f8\u5173\u7684\u89c6\u9891\u7247\u6bb5\u3002\u8fd9\u4e9b\u89c6\u9891\u7247\u6bb5\u53ef\u4ee5\u662f\u5305\u542b\u67e5\u8be2\u6587\u672c\u4e2d\u7684\u5173\u952e\u8bcd\u7684\u89c6\u9891\uff0c\u6216\u8005\u4e0e\u67e5\u8be2\u6587\u672c\u8bed\u4e49\u76f8\u4f3c\u7684\u89c6\u9891\u3002\u8be5\u4efb\u52a1\u5728\u89c6\u9891\u5185\u5bb9\u5206\u6790\u3001\u89c6\u9891\u641c\u7d22\u548c\u89c6\u9891\u63a8\u8350\u7b49\u9886\u57df\u5177\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002</p> <p>\u5728\u673a\u5668\u5b66\u4e60\u548c\u4fe1\u606f\u68c0\u7d22\u4e2d\uff0cRecall\uff08\u53ec\u56de\u7387\uff09\u662f\u6307\u5728\u6240\u6709\u76f8\u5173\u6587\u6863\u4e2d\uff0c\u88ab\u6b63\u786e\u68c0\u7d22\u51fa\u6765\u7684\u6587\u6863\u6570\u4e0e\u6240\u6709\u76f8\u5173\u6587\u6863\u603b\u6570\u4e4b\u6bd4\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u53ec\u56de\u7387\u8868\u793a\u4e86\u68c0\u7d22\u7cfb\u7edf\u80fd\u591f\u627e\u5230\u591a\u5c11\u4e0e\u67e5\u8be2\u76f8\u5173\u7684\u6587\u6863\u3002</p> <p>\u516c\u5f0f\u8868\u793a\u4e3a\uff1a</p> <p>Recall = TP / (TP + FN)</p> <p>\u5176\u4e2d\uff0cTP\u8868\u793a\u771f\u6b63\u4f8b\uff08\u88ab\u6b63\u786e\u68c0\u7d22\u51fa\u6765\u7684\u76f8\u5173\u6587\u6863\u6570\uff09\uff0cFN\u8868\u793a\u5047\u53cd\u4f8b\uff08\u672a\u88ab\u68c0\u7d22\u51fa\u6765\u7684\u76f8\u5173\u6587\u6863\u6570\uff09\u3002</p> <p>\u53ec\u56de\u7387\u8d8a\u9ad8\uff0c\u8bf4\u660e\u68c0\u7d22\u7cfb\u7edf\u80fd\u591f\u627e\u5230\u66f4\u591a\u7684\u76f8\u5173\u6587\u6863\uff0c\u4f46\u540c\u65f6\u53ef\u80fd\u4f1a\u5c06\u4e00\u4e9b\u4e0d\u76f8\u5173\u7684\u6587\u6863\u4e5f\u68c0\u7d22\u51fa\u6765\u3002\u56e0\u6b64\uff0c\u53ec\u56de\u7387\u4e0e\u51c6\u786e\u7387\uff08Precision\uff09\u4e00\u8d77\u88ab\u7528\u6765\u8bc4\u4f30\u68c0\u7d22\u7cfb\u7edf\u7684\u6027\u80fd\u3002</p> </li> <li> <p>\u5b9e\u9a8c</p> <ul> <li>CLIP\u63d0\u70b9\u975e\u5e38\u591a\uff0c\u8fc1\u79fb\u80fd\u529b\u5f88\u5f3a</li> <li>\u5c11\u91cf\u6570\u636e\u96c6\u53d6\u5e73\u5747\u662f\u6700\u597d\u7684\uff0c\u6570\u636e\u91cf\u5927\u7684\u65f6\u5019\u7528\u540e\u9762\u7684\u65b9\u6cd5\u6bd4\u8f83\u597d\u4e00\u4e9b\uff0c\u6570\u636e\u91cf\u4e0d\u5927\u7684\u65f6\u5019\u4e0d\u5efa\u8bae\u5fae\u8c03\u3002\u5e73\u5747\u5176\u5b9e\u5de5\u4f5c\u633a\u597d\u7684</li> <li>Tight Type\u6700\u5dee\uff0c\u53ef\u80fd\u662f\u4e0b\u6e38\u6570\u636e\u96c6\u4e0d\u591f\u591a</li> </ul> </li> <li> <p>Insight</p> <ul> <li>CLIP\u9884\u8bad\u7ec3\u4e4b\u540e\u518d\u5728\u6570\u636e\u6570\u636e\u96c6\u4e0apost-pretrain\u4e00\u4e0b\u53ef\u80fd\u8fc1\u79fb\u6548\u679c\u66f4\u597d\uff0c\u4f46\u662f\u8ba1\u7b97\u4ee3\u4ef7\u6bd4\u8f83\u9ad8</li> <li>3D Linear Projection\u6548\u679c\u7a0d\u5fae\u597d\u4e00\u4e9b\uff0c\u878d\u5408\u4e86\u65f6\u5e8f\u4fe1\u606f</li> <li>\u65e0\u76d1\u7763\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570\u505a\u4e0b\u6e38FineTune\u7684\u65f6\u5019\u4f1a\u5bf9\u5b66\u4e60\u7387\u975e\u5e38\u654f\u611f\uff08\u5c31\u50cfMoCo\u4e00\u6837\uff09\uff0c\u5404\u4e2a\u6a21\u578b\u80fd\u5426\u6210\u529f\u5f88\u770b\u5b66\u4e60\u7387\u7684\u8bbe\u7f6e</li> </ul> </li> <li> <p>ActionCLIP: A New Paradigm for Video Action Recognition</p> </li> <li> <p>\u89c6\u9891\u9886\u57df\u66f4\u706b\u7684\u4efb\u52a1\uff1a\u52a8\u4f5c\u8bc6\u522b\uff0c\u5176\u5b9e\u5c31\u662f\u5206\u7c7b\u4efb\u52a1\u4f46\u662f\u52a0\u4e0a\u989d\u5916\u7684\u65f6\u5e8f\u4fe1\u606f</p> </li> <li> <p>\u4e4b\u524d\u7684\u65b9\u6cd5\uff1a</p> <p>\u89c6\u9891\u901a\u8fc7Video Encoder\u5f97\u5230\u8f93\u51fa\uff0c\u7136\u540e\u548cGround Truth\u505a\u5bf9\u6bd4\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7b97\u8d77loss\uff0c\u4f46\u662f\u95ee\u9898\u662f\u89c6\u9891\u7406\u89e3\u7684\u6807\u7b7e\u4e0d\u597d\u6807\uff0cone-hot label\u6bd4\u8f83\u96be\u4ee3\u8868\u5176\u5168\u90e8\u8bed\u4e49\uff0c\u52a8\u4f5c\u8bc6\u522b\u7684label\u662f\u4e00\u4e2a\u77ed\u8bed\uff0clabel space\u5f88\u5927\uff0c\u5bfc\u81f4\u9047\u5230\u65b0\u7c7b\u6548\u679c\u4e0d\u597d\u3002\u6240\u4ee5\u6700\u7406\u60f3\u662f\u5148\u5b66\u4e00\u4e2a\u5f88\u597d\u7684\u7279\u5f81\uff0c\u7136\u540ezero-shot\u6216\u8005few-shot\u53bb\u505a\u4e0b\u6e38\u4efb\u52a1\u662f\u6700\u7406\u60f3\u7684</p> <p>\u4f5c\u8005\u63d0\u51fa\u7684\u65b9\u6cd5\u548cCLIP\u5f88\u50cf\uff0cVideoEncoder\u548cCLIP4Clip\u5f88\u50cf\uff1b\u5728batch\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u540c\u4e00\u884c\u540c\u4e00\u5217\u91cc\u53ef\u80fd\u6709\u591a\u4e2a\u6b63\u6837\u672c\u5bf9</p> <p></p> </li> <li> <p>\u6a21\u578b</p> <ul> <li>\u6587\u672cPrompt\u89c1(b)\uff0c\u5c31\u662f\u524d\u7f00\u3001\u5b8c\u578b\u586b\u7a7a\u548c\u540e\u7f00\uff0c\u548c\u4e4b\u524d\u7684prompt engineering\u4e00\u6837</li> <li>\u89c6\u89c9Prompt</li> <li>(c) Pre-network Prompt\uff1a\u8f93\u5165\u7684\u65f6\u5019\u52a0\u4e0a\u65f6\u5e8f\u4fe1\u606f</li> <li>(d) In-network Prompt\uff1a\u5229\u7528Shift\u6982\u5ff5\uff0c\u5728\u7279\u5f81\u56fe\u4e0a\u505a\u5404\u79cd\u79fb\u52a8\uff0c\u548cSwin\u7684Shift Window\u7c7b\u4f3c\uff0c\u589e\u52a0TSM\uff08temporal shift module\uff09\uff0cTSM\u4e3b\u6253zero cost</li> <li>(e/f/g) Post-network Prompt\uff1a\u548cCLIP4Clip\u4e00\u6837\uff0c\u5982\u4f55\u5c06\u89c6\u9891\u591a\u4e2a\u7279\u5f81\u878d\u5408\u6210\u4e00\u4e2a\u7279\u5f81</li> </ul> <p></p> </li> <li> <p>\u5b9e\u9a8c</p> <ul> <li>pre-train\uff1a\u53d1\u73b0\u6587\u672c\u968f\u673a\u521d\u59cb\u5316\u548cCLIP\u521d\u59cb\u5316\u6548\u679c\u76f8\u8fd1\uff0c\u6240\u4ee5\u5927\u5bb6\u90fd\u66f4\u5173\u6ce8\u56fe\u50cf\uff08\u4e00\u822c\u7528ViT\u521d\u59cb\u5316\uff0c\u7528BERT\u521d\u59cb\u5316\u6548\u679c\u5c31\u4e0d\u592a\u597d\uff09</li> <li>prompt</li> <li>\u6587\u672c\uff1a\u6548\u679c\u4e0d\u663e\u8457</li> <li>\u56fe\u50cf\uff1a\u6709\u7528\u7684\u5c31\u662fPost-network\uff0c\u548cCLIP4Clip\u4e0d\u540c\uff0cmean pooling\u6548\u679c\u4e00\u822c\uff0c\u539f\u56e0\u53ef\u80fd\u662f\u89c6\u9891\u6570\u636e\u96c6\u975e\u5e38\u5927\uff0c\u7528Transformer\u6765\u505aFineTune\u6548\u679c\u4f1a\u66f4\u597d</li> </ul> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#vision-and-language","title":"Vision-and-Language","text":"<ul> <li>How Much Can CLIP Benefit Vision-and-Language Tasks?</li> <li>CLIP\u672c\u8eab\u662f\u591a\u6a21\u6001\uff0c\u4e00\u822c\u5927\u5bb6\u90fd\u662f\u653e\u5230\u522b\u7684\u9886\u57df\u53bb\u5c1d\u8bd5\uff0c\u4f46\u662f\u672c\u6587\u662f\u7528CLIP\u505a\u591a\u6a21\u6001\u521d\u59cb\u5316\u770b\u6548\u679c</li> <li>\u8fd9\u4e5f\u662fEmpirical Study\uff0c\u7528CLIP\u4f5c\u4e3a\u89c6\u89c9\u7f16\u7801\u5668\u7684\u521d\u59cb\u5316\u505a\u5404\u79cdFine-Tune\u770b\u6548\u679c</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#audio","title":"Audio","text":"<ul> <li> <p>AudioCLIP: Extending CLIP to Image, Text and Audio</p> </li> <li> <p>\u67b6\u6784\uff1a\u4eff\u7167CLIP\u505a\u5bf9\u6bd4\u5b66\u4e60\uff0c\u52a0\u5165Audio\u6a21\u6001</p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#3d","title":"3D","text":"<ul> <li> <p>PointCLIP: Point Cloud Understanding by CLIP</p> </li> <li> <p>CLIP\u5b66\u4e60\u5230\u4e86\u5f88\u597d\u76842D\u7279\u5f81\uff0c\u4f5c\u8005\u60f3\u8fc1\u79fb\u52303D</p> </li> <li> <p>\u67b6\u6784\uff1a\u5c063D\u70b9\u4e91\u6295\u5f71\u52302D\u6df1\u5ea6\u56fe\uff0c\u7531\u4e8eCLIP\u652f\u6301\u5404\u79cd\u98ce\u683c\uff0c\u6240\u4ee5\u8fd9\u79cd\u6df1\u5ea6\u56fe\u4e5f\u80fd\u652f\u6301\u3002\u6587\u672cprompt\u6539\u6210\u4e86point clound depth map of</p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#_7","title":"\u5176\u4ed6","text":"<ul> <li> <p>Can Language Understand Depth?</p> </li> <li> <p>\u6df1\u5ea6\u4f30\u8ba1\u4efb\u52a1</p> </li> <li> <p>CLIP\u5bf9\u6982\u5ff5\u7406\u89e3\u4e0d\u592a\u597d\uff0c\u56e0\u4e3a\u5bf9\u6bd4\u5b66\u4e60\u4e0d\u9002\u5408\u5b66\u6982\u5ff5\uff0c\u800c\u6df1\u5ea6\u4fe1\u606f\u5c31\u662f\u6982\u5ff5\u3002\u6240\u4ee5\u4e4b\u524d\u505aoptical flow\u548cdepth estimation\u548c\u4e3b\u6d41CV\u4e0d\u592a\u4e00\u6837\uff0c\u5f80\u5f80\u4e0d\u505a\u521d\u59cb\u5316</p> </li> <li> <p>\u6d41\u7a0b\u56fe</p> <p>\u4f5c\u8005\u5c06\u6df1\u5ea6\u4f30\u8ba1\u4efb\u52a1\u4ece\u56de\u5f52\u95ee\u9898\u770b\u6210\u5206\u7c7b\u95ee\u9898\uff0c\u5f3a\u5236\u5c06\u6df1\u5ea6\u5206\u6210\u4e86\u51e0\u7c7b\uff0c\u548cLSeg\u5f88\u50cf</p> <p></p> <p>\u56de\u5f52\u95ee\u9898\u548c\u5206\u7c7b\u95ee\u9898\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u4e24\u79cd\u4e0d\u540c\u7684\u95ee\u9898\u7c7b\u578b\u3002</p> <p>\u56de\u5f52\u95ee\u9898\u662f\u6307\u9884\u6d4b\u8fde\u7eed\u503c\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u623f\u4ef7\u9884\u6d4b\u3001\u80a1\u7968\u4ef7\u683c\u9884\u6d4b\u7b49\u3002\u56de\u5f52\u95ee\u9898\u7684\u76ee\u6807\u662f\u9884\u6d4b\u4e00\u4e2a\u6570\u503c\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u5b9e\u6570\u503c\u3002</p> <p>\u5206\u7c7b\u95ee\u9898\u662f\u6307\u5c06\u6570\u636e\u5206\u4e3a\u4e0d\u540c\u7684\u7c7b\u522b\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u3001\u56fe\u50cf\u5206\u7c7b\u7b49\u3002\u5206\u7c7b\u95ee\u9898\u7684\u76ee\u6807\u662f\u5c06\u6bcf\u4e2a\u6570\u636e\u70b9\u5206\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u5df2\u77e5\u7684\u7c7b\u522b\u4e2d\u7684\u4e00\u4e2a\u3002</p> <p>\u56de\u5f52\u95ee\u9898\u548c\u5206\u7c7b\u95ee\u9898\u7684\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u7684\u8f93\u51fa\u7c7b\u578b\u4e0d\u540c\u3002\u56de\u5f52\u95ee\u9898\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u8fde\u7eed\u503c\uff0c\u800c\u5206\u7c7b\u95ee\u9898\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u79bb\u6563\u7684\u7c7b\u522b\u3002\u6b64\u5916\uff0c\u56de\u5f52\u95ee\u9898\u901a\u5e38\u6d89\u53ca\u5230\u8fde\u7eed\u7684\u8f93\u5165\u53d8\u91cf\uff0c\u800c\u5206\u7c7b\u95ee\u9898\u901a\u5e38\u6d89\u53ca\u5230\u79bb\u6563\u7684\u8f93\u5165\u53d8\u91cf\u3002</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/34-CLIP%E4%B8%B2%E8%AE%B2/#_8","title":"\u603b\u7ed3","text":"<p>CLIP\u7684\u4f7f\u7528\u573a\u666f\uff1a</p> <ul> <li>\u6539\u52a8\u6700\u5c0f\uff0c\u53ea\u9002\u7528CLIP\u62bd\u53d6\u7684\u7279\u5f81\uff0c\u52a0\u5f3a\u4e4b\u524d\u7684\u8bad\u7ec3</li> <li>CLIP\u505ateacher\u6765\u84b8\u998f</li> <li>\u4e0d\u4f7f\u7528CLIP\u53c2\u6570\uff0c\u501f\u9274\u5b83\u591a\u6a21\u6001\u5bf9\u6bd4\u5b66\u4e60\u7684\u601d\u60f3\uff0c\u7136\u540e\u6211\u5b9a\u4e49\u6b63\u8d1f\u6837\u672c</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/35-ChainOfThought/","title":"ChainOfThought","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/35-ChainOfThought/#chainofthought","title":"ChainOfThought","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/35-ChainOfThought/#_1","title":"\u6807\u9898","text":"<ul> <li>Chain of Thought Prompting Elicits Reasoning in Large Language Models</li> <li>\u79d1\u7814\u6897\uff1aLet's think step by step\uff0c\u5728Prompt\u4e2d\u52a0\u4e0a\u8fd9\u4e00\u70b9\u5c31\u80fd\u6da8\u70b9</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/35-ChainOfThought/#_2","title":"\u80cc\u666f\u77e5\u8bc6","text":"<ul> <li> <p>Prompt\u7c7b\u578b</p> </li> <li> <p>Zero-Shot</p> <p></p> </li> <li> <p>Zero-Shot-CoT</p> <p></p> </li> <li> <p>Manual-CoT\uff1a\u624b\u52a8\u6784\u9020\u6837\u4f8b</p> <p></p> </li> <li> <p>Auto-CoT\uff1aSelf-Training\uff0c\u5148\u7528Let's think step by step\u5f97\u5230\u6837\u4f8b\u8f93\u5165\u7136\u540e\u62fc\u63a5\u5728\u4e00\u8d77\u4f5c\u4e3a\u6837\u4f8b\uff0c\u7136\u540e\u63a5\u8f93\u5165</p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/35-ChainOfThought/#_3","title":"\u5f15\u8a00","text":"<ul> <li>System-1\u4efb\u52a1\uff1aLLM\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\u6548\u679c\u5f88\u597d\uff0c\u8fd9\u7c7b\u5f88\u5feb\u5b8c\u6210\u5e76\u88ab\u4eba\u7c7b\u7406\u89e3\u7684\u4efb\u52a1\u662fSystem-1\u4efb\u52a1</li> <li>System-2\u4efb\u52a1\uff1a\u6d89\u53ca\u903b\u8f91\u6570\u5b66\u548c\u5e38\u8bc6\u7684\u63a8\u7406\u4efb\u52a1\uff0cLLM\u5f88\u96be\u5b8c\u6210\u3002flat scaling curves\uff1aSystem-2\u4efb\u52a1\u4e0d\u968f\u53c2\u6570\u91cf\u7684\u589e\u52a0\u800c\u6027\u80fd\u589e\u5f3a</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/36-Whisper/","title":"Whisper","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/36-Whisper/#whisper","title":"Whisper","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/36-Whisper/#_1","title":"\u6807\u9898","text":"<ul> <li>Robust Speech Recognition via Large-Scale Weak Supervision</li> <li>\u5f31\u76d1\u7763\uff1a\u6709\u6807\u53f7\u4f46\u662f\u8d28\u91cf\u4e00\u822c</li> <li>\u7701\u6d41\uff1aOpenAI\u4f7f\u7528\u5927\u91cf\u6570\u636e\u5927\u91cf\u4efb\u52a1\u8bad\u7ec3\u51fa\u6765\u7684\u5927\u6a21\u578b\uff0czero-shot</li> <li>\u8bad\u7ec3\u6750\u659968\u4e07\u5c0f\u65f6</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/36-Whisper/#_2","title":"\u5f15\u8a00","text":"<ul> <li>Wave2Vec\u4f7f\u7528\u5bf9\u6bd4\u5b66\u4e60\uff0c\u91c7\u6837\u5927\u91cf\u6ca1\u6709\u6807\u53f7\u7684wave\u4e4b\u540e\u4f7f\u7528\u4f8b\u5982\u6316\u7a7a\u7b49\u65b9\u6cd5\u505a\u9884\u8bad\u7ec3Encoder\uff0c\u7136\u540e\u62bd\u53d6\u7279\u5f81\u5728\u4e0b\u6e38\u4efb\u52a1\u4e0a\u505a\u5fae\u8c03</li> <li>\u4f5c\u8005\u8ba4\u4e3a\u4e4b\u524d\u7684\u5de5\u4f5c\u4f7f\u7528\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u6ca1\u6709\u597d\u7684\u89e3\u7801\u5668\uff0c\u9700\u8981\u505a\u5fae\u8c03\uff0c\u4f46\u662f\u5fae\u8c03\u5f88\u82b1\u65f6\u95f4\u540c\u65f6\u5bb9\u6613\u8fc7\u62df\u5408\u6cdb\u5316\u6027\u4e0d\u597d\u3002\u6240\u4ee5\u4f5c\u8005\u8ba4\u4e3a\u7f16\u7801\u5668\u5df2\u7ecf\u591f\u597d\uff0c\u4f46\u662f\u89e3\u7801\u5668\u4e0d\u591f\u597d\uff08\u4ecewave\u683c\u5f0f\u8f6c\u6587\u5b57\u7b49\uff09</li> <li>\u76ee\u524d\u7684\u6709\u76d1\u7763\u8bad\u7ec3\u96c6\u52a0\u8d77\u6765\u5927\u69825000\u5c0f\u65f6\uff0c\u4f46\u662f\u65e0\u76d1\u7763\u8bad\u7ec3\u96c6\u63a5\u8fd1100\u4e07\u5c0f\u65f6</li> <li>\u4f5c\u8005\u63d0\u51fa\u4e00\u4e2a\u8bad\u7ec3\u96c668\u4e07\u5c0f\u65f6\uff0c\u591a\u8bed\u8a00\u4e14\u6709\u5f88\u591a\u7ffb\u8bd1</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/36-Whisper/#_3","title":"\u65b9\u6cd5","text":"<ul> <li> <p>\u6570\u636e\u5904\u7406</p> </li> <li> <p>\u4f7f\u7528\u8fc7\u6ee4\u5668\u53bb\u9664\u673a\u5668\u751f\u6210\u7684label\uff1b</p> </li> <li>\u4f7f\u7528\u5176\u4ed6\u8bed\u97f3\u8bc6\u522b\u8f6f\u4ef6\u6765\u5224\u65ad\u8bed\u97f3\u548c\u6587\u672c\u7684\u8bed\u8a00\u662f\u5426\u4e00\u81f4\uff08\u5982\u679c\u6587\u672c\u662f\u82f1\u8bed\u5c31\u4e0d\u5224\u65ad\u97f3\u9891\u7684\u8bed\u8a00\uff0c\u56e0\u4e3a\u6709\u7ffb\u8bd1\u4efb\u52a1\uff09\uff1b</li> <li>\u6587\u672c\u53bb\u91cd</li> <li> <p>\u5148\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\u7136\u540e\u53bb\u63a8\u7406\uff0c\u68c0\u67e5\u6b63\u786e\u7387\u4f4e\u7684\u6837\u672c\u53d1\u73b0\u5f88\u591a\u8bed\u97f3\u548c\u6587\u672c\u662f\u5bf9\u4e0d\u4e0a\u7684\uff0c\u5c31\u628a\u8fd9\u4e9b\u53bb\u6389</p> </li> <li> <p>\u67b6\u6784\uff1a\u5c31\u662fTransformer\uff0c\u4e00\u5f00\u59cb\u4f7f\u7528\u5377\u79ef\u6765\u62bd\u53d6\u5c40\u90e8\u7279\u5f81</p> </li> </ul> <p></p> <ul> <li>\u8fd9\u4e2a\u5927\u6a21\u578b\u8986\u76d6\u4e86\u591a\u4efb\u52a1\uff0c\u4f46\u662f\u4f1a\u6709\u7f3a\u9677\uff0c\u4f8b\u5982\u6709\u4e9b\u4efb\u52a1\u4e0d\u5e0c\u671b\u63a8\u7406\u6210\u672c\u8fc7\u5927\u3001\u67d0\u4e2a\u4efb\u52a1\u6027\u80fd\u4e0d\u597d\u901a\u8fc7\u8bad\u7ec3\u52a0\u5f3a\u662f\u5426\u4f1a\u5f71\u54cd\u5176\u4ed6\u4efb\u52a1\u6027\u80fd\u3002\u5177\u4f53\u591a\u4efb\u52a1\u5305\u62ec\uff1a</li> </ul> <p></p> <p>\u4e0d\u540c\u4efb\u52a1\u7528\u7684\u662f\u4e0d\u540ctoken\u6765\u533a\u522b\uff0c\u5171\u7528\u8f93\u51fa\u5c42\uff1a</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/36-Whisper/#_4","title":"\u5b9e\u9a8c","text":"<ul> <li> <p>zero-shot\uff0c\u4e3a\u4e86\u7b26\u5408\u67d0\u4e9b\u6570\u636e\u96c6test\u7684\u8981\u6c42\uff0c\u624b\u52a8\u505a\u4e86\u4e00\u4e9bnormalize</p> </li> <li> <p>\u6bd4\u8f83\uff1a\u867d\u7136\u662fLibriSpeech\u4e0a\u7684WER\u522b\u7684\u6a21\u578b\u5df2\u7ecf\u5237\u5230\u975e\u5e38\u4f4e\u4e86\uff0c\u4f46\u662f\u8fc1\u79fb\u5230\u522b\u7684\u6570\u636e\u96c6\u9519\u8bef\u7387\u975e\u5e38\u9ad8\uff0c\u800cWhisper\u7684\u8fc1\u79fb\u80fd\u529b\u5f88\u5f3a</p> </li> </ul> <p></p> <ul> <li>\u53d1\u73b0\u5bf9\u4e8e\u4e2d\u6587\u3001\u97e9\u8bed\u3001\u963f\u62c9\u4f2f\u8bed\uff0c\u867d\u7136\u6570\u636e\u6bd4\u8f83\u591a\uff0c\u4f46\u662f\u6548\u679c\u6ca1\u6709\u90a3\u4e48\u597d</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/37-%E5%A4%9A%E6%A8%A1%E6%80%81%E4%B8%B2%E8%AE%B2/","title":"\u591a\u6a21\u6001\u5b66\u4e60","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/37-%E5%A4%9A%E6%A8%A1%E6%80%81%E4%B8%B2%E8%AE%B2/#_1","title":"\u591a\u6a21\u6001\u5b66\u4e60","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/37-%E5%A4%9A%E6%A8%A1%E6%80%81%E4%B8%B2%E8%AE%B2/#_2","title":"\u80cc\u666f","text":"<ul> <li>\u591a\u6a21\u6001\u7684\u7ed3\u6784\u5e94\u8be5\u504f\u5411c\uff0c\u4f46\u662fVisual Encoder\u5e94\u8be5\u4f7f\u7528ViT\u53bb\u6389\u4e4b\u524d\u7684\u76ee\u6807\u68c0\u6d4b\uff0c\u53e6\u5916ViT\u4e4b\u524d\u4f7f\u7528WPA\uff08Word Patch Alignment\uff0c\u542f\u53d1\u4e8e\u76ee\u6807\u68c0\u6d4b\uff09 Loss\u8bad\u7ec3\u6bd4\u8f83\u56f0\u96be\uff0c\u53ef\u4ee5\u6362\u7528MLM Loss\uff08Masked Language Modeling\uff09\u4ee5\u53caITM Loss\uff08Image Text Match\uff09\uff0cCLIP\u4f7f\u7528\u7684\u662fITC\uff08Image Text Contrastive\u5bf9\u6bd4\u5b66\u4e60\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u90fd\u7528\u4e0a\u8fd9\u4e09\u79cdLoss</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/37-%E5%A4%9A%E6%A8%A1%E6%80%81%E4%B8%B2%E8%AE%B2/#encoder","title":"Encoder\u67b6\u6784","text":"<ul> <li> <p>ALBEF</p> </li> <li> <p>\u6807\u9898\uff1aAlign before Fuse: Vision and Language Representation Learning with Momentum Distillation</p> </li> <li> <p>\u67b6\u6784\uff1a</p> <p>\u56fe\u50cf\u4f7f\u752812\u5c42Transformer\u7f16\u7801\u5668\uff0c\u6587\u672c\u628a12\u5c42\u7684BERT\u5207\u6210\u4e24\u4e2a\u90e8\u5206\u51486\u5c42Encoder\u7136\u540e6\u5c42\u591a\u6a21\u6001\u878d\u5408\uff0c\u7b26\u5408\uff1a\u56fe\u50cfEncoder\u5927\u4e8e\u6587\u672cEncoder\uff1b\u6a21\u6001\u878d\u5408\u6a21\u578b\u8981\u5927</p> <p>Loss\u7528\u7684\u4e5f\u662f\u4e0a\u9762\u63d0\u5230\u7684 MLM / ITM / ITC</p> <p></p> </li> <li> <p>\u6458\u8981\uff1a</p> <ul> <li>\u4f5c\u8005\u5bf9\u76ee\u6807\u68c0\u6d4b\u7684\u6001\u5ea6\u548cViLT\u4e0d\u592a\u4e00\u6837\uff0c\u540e\u8005\u89c9\u5f97\u662f\u63a8\u7406\u6210\u672c\u5927\uff0c\u800c\u672c\u6587\u8ba4\u4e3a\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u76ee\u6807\u68c0\u6d4b\u5668\u76f4\u63a5\u62bd\u7279\u5f81\uff0c\u4f1a\u548c\u6587\u672c\u7279\u5f81\u4e0d\u591falign\uff0c\u6ca1\u6709\u8fdb\u884cend-to-end\u7684\u8bad\u7ec3\u5bfc\u81f4\u591a\u6a21\u6001\u7f16\u7801\u5668\u4e0d\u597d\u5b66\u3002\u6240\u4ee5\u4f5c\u8005\u63d0\u51fa\u5728Fusion\uff08\u591a\u6a21\u6001\u7f16\u7801\u5668\uff09\u4e4b\u524d\u5c31\u5148\u7528ITC\u5bf9\u6bd4\u5b66\u4e60\u8fdb\u884cAlign\uff08\u5176\u5b9e\u5c31\u662fCLIP\uff09</li> <li>\u6570\u636e\u4ecenoisy\u7f51\u7edc\u4e0a\u4e0b\u8f7d\u7684\uff08\u6587\u672c\u662fAltText\uff0c\u641c\u7d22\u5f15\u64ce\u4e0a\u7684\u6587\u672c\u5bf9\u56fe\u50cf\u7684\u63cf\u8ff0\u80fd\u529b\u4e0d\u9ad8\uff0c\u8fd9\u5c31\u662fnoisy web data\u95ee\u9898\uff09\uff0c\u4e3a\u4e86\u63d0\u9ad8\u5b66\u4e60\uff0c\u4f5c\u8005\u63d0\u51fa\u4e86momentum distillation\uff0c\u81ea\u8bad\u7ec3\uff0c\u5c31\u662f\u7528\u4f2a\u6807\u7b7e\uff0c\u4f5c\u8005\u4f7f\u7528Momentum Model\uff08\u56de\u987eMoCo\uff09\u751f\u6210\u4f2a\u6807\u7b7e</li> <li>ALBEF\u6bd4\u8f83\u4eb2\u6c11\uff0c\u9002\u5408\u505a\u591a\u6a21\u6001</li> </ul> </li> <li> <p>\u65b9\u6cd5\uff1a</p> <ul> <li> <p>\u56fe\u7247\u7528\u7684\u662f\u5c31\u662fViT\uff0c\u800c\u6587\u672c\u8fd9\u8fb9\u672c\u6765\u53ef\u4ee5\u76f4\u63a5\u7528BERT\u7136\u540e\u518d\u5728\u540e\u9762\u52a0\u4e2a\u5927\u7684\u591a\u6a21\u6001Encoder\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u6301\u6700\u4f18\u914d\u6bd4\uff0c\u5373\u56fe\u50cf\u90e8\u5206\u6a21\u578b\u548c\u591a\u6a21\u6001\u6a21\u578b\u8981\u5927\uff0c\u6240\u4ee5\u8fd9\u8fb9\u5c31\u628aBERT\u5288\u6210\u4e24\u534a\uff0c\u521d\u59cb\u5316\u7528\u7684\u5c31\u662fBERT</p> </li> <li> <p>\u53e6\u5916\u6709\u4e00\u4e2aMomentum Model\uff0c\u5b83\u7684\u53c2\u6570\u662f\u65e7\u7684ALBEF\u53c2\u6570\uff0c\u52a8\u91cf\u66f4\u65b0\uff0cmoving average\u8bbe\u7684\u5f88\u9ad80.995\u4f7f\u4e4b\u4e0d\u4f1a\u5f88\u5feb\u66f4\u65b0\uff0c\u4ece\u800c\u4f7f\u5f97\u4ea7\u751f\u7684\u7279\u5f81\u66f4\u52a0\u7a33\u5b9a</p> </li> <li> <p>Align\u9636\u6bb5\uff1a\u62bd\u5b8c\u7279\u5f81\u4e4b\u540e\u548cMoCo\u4e00\u6a21\u4e00\u6837\uff0c\u5148downsample\u548cnormalization\uff0c\u7136\u540e\u5c06\u6b63\u8d1f\u6837\u672c\u5bf9\u6bd4\u8fdb\u884c\u7b2c\u4e00\u9636\u6bb5\u7684\u5b66\u4e60</p> </li> </ul> <p></p> <ul> <li> <p>\u6700\u540eITM\u5176\u5b9e\u5c31\u662f\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u5728ALBEF\u540e\u9762\u52a0\u4e2aFC\u6765\u68c0\u67e5\u8f93\u5165\u6587\u672c\\(T\\)\u548c\u8f93\u5165\u56fe\u50cf\\(I\\)\u662f\u5426\u662f\u4e00\u5bf9\uff0c\u4f46\u662f\u8fd9\u4e2a\u4efb\u52a1\u96be\u5ea6\u5f88\u4f4e\uff0c\u8d1f\u6837\u672c\u548c\u6b63\u6837\u672c\u7684\u533a\u522b\u5f88\u5927\uff08\u53ef\u80fd\u7ecf\u8fc7ITC\uff09\uff0c\u5f88\u5feb\u5c31\u80fd\u8ba9\u51c6\u786e\u5ea6\u63d0\u5f88\u9ad8\uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u8d1f\u6837\u672c\u52a0constraint\uff0c\u5176\u5b9e\u5c31\u662f\u9009\u62e9\u6700\u63a5\u8fd1\u6b63\u6837\u672c\u7684\u8d1f\u6837\u672c\uff0c\u9009\u62e9\u7684\u65b9\u6cd5\u662f\u9009\u62e9\u540c\u4e00\u4e2abatch\u91cc\u5728ITC\u4e2d\u76f8\u4f3c\u5ea6\u6700\u9ad8\u7684negative\uff08\u79f0\u4e4bhard negative\uff0c\u5373\u5df2\u7ecf\u975e\u5e38\u76f8\u4f3c\u6211\u4ecd\u7136\u8ba4\u4e3a\u5176\u662fnegative\uff09</p> </li> <li> <p>MLM\uff1a\u5b8c\u578b\u586b\u7a7a\uff0c\u5c06\u6587\u672cmasked\u4e4b\u540e\u53d8\u6210\\(T'\\)\uff0c\u6240\u4ee5\u4f1a\u53d1\u73b0\u8be5\u6a21\u578b\u8981\u505a\u4e24\u6b21\u524d\u5411\u8fc7\u7a0b\u3002\u591a\u6a21\u6001\u5b66\u4e60\u5f80\u5f80\u8981\u505a\u591a\u79cdLoss\u6240\u4ee5\u53ef\u80fd\u8981\u505a\u591a\u6b21\u524d\u5411\u8fc7\u7a0b\u6765\u5f97\u5230\u4e0d\u540c\u7684Loss</p> </li> </ul> <p></p> <ul> <li>\u52a8\u91cf\u84b8\u998f\uff1a\u539f\u56e0\u662fnoisy data\uff0c\u6587\u672c\u4e2d\u63cf\u8ff0\u7684\u4e0d\u5728\u56fe\u50cf\u91cc\uff0c\u56fe\u50cf\u7684\u7269\u4f53\u6ca1\u6709\u5728\u6587\u672c\u4e2d\uff0c\u5bfc\u81f4ITC\u4e2dnegative\u53ef\u80fd\u4e5f\u63cf\u8ff0\u4e86\u6587\u672c\u5185\u5bb9\uff08\u751a\u81f3\u63cf\u8ff0\u7684\u6bd4Ground Truth\u90fd\u597d\uff0c\u4f46\u662f\u6211\u4eec\u4f9d\u65e7\u8ba4\u4e3a\u5b83\u662fnegative\uff09\uff0c\u53e6\u5916MLM\u5b8c\u578b\u586b\u7a7a\u7684\u65f6\u5019\u5176\u5b9e\u53ef\u4ee5\u586b\u5f88\u591a\u5355\u8bcd\u3002\u6240\u4ee5\u4f5c\u8005\u8ba4\u4e3aone-hot label\uff08\u5373\u4e00\u5f20\u56fe\u4e00\u4e2alabel\uff09\u5bf9ITC\u548cMLM\u4e0d\u597d\uff0c\u4f5c\u8005\u53e6\u5916\u4f7f\u7528\u4e00\u4e2aMomentum Model\u6765\u5f97\u5230\u4e00\u4e9b\u4f2a\u6807\u7b7e\uff08\u975eone-hot label\uff0c\u5c31\u662fSoftmax\u51fa\u6765\u7684softmax score\uff09\u3002\u8fd9\u4e2aMomentum Model\u662f\u5bf9\u76ee\u524d\u7684\u6a21\u578b\u505aEMA</li> </ul> <p>\u7531\u4e8e\u4f2a\u6807\u7b7e\u662fSoftmax Score\uff0c\u6240\u4ee5\u7b97\u7684\u662fKL\u6563\u5ea6\uff0c\u4f8b\u5982 ITC \u7684\u66f4\u65b0\uff1a</p> <p></p> <p>ITM \u6ca1\u6709\u4f7f\u7528\u52a8\u91cf\u66f4\u65b0\uff0c\u662f\u56e0\u4e3a ITM \u662f\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u5c31\u662f\u9700\u8981\u77e5\u9053Ground Truth</p> </li> <li> <p>\u5b9e\u9a8c\uff1a\u6d4b\u8bd5\u4e86\u4e94\u4e2a\u4e0b\u6e38\u4efb\u52a1\uff0c\u68c0\u7d22\uff08\u56fe\u641c\u6587\u3001\u6587\u641c\u56fe\u3001\u56fe\u641c\u56fe\u3001\u6587\u641c\u6587\u3001\u770bRecall\uff0c\u6709R1 R5 R10\uff09\u3001\u89c6\u89c9\u8574\u6db5Visual Entailment\uff08\u524d\u540e\u4e24\u53e5\u8bdd\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u8574\u6db5\u77db\u76fe\u4e2d\u7acb\uff0c\u4e09\u5206\u7c7b\u95ee\u9898\uff09\u3001\u89c6\u89c9\u95ee\u7b54Visual Question Answering\uff08\u6709\u4e24\u79cd\uff0c\u95ed\u96c6VQA\u5373\u9009\u7b54\u6848\uff0c\u5f00\u96c6VQA\u5373\u751f\u6210\u7b54\u6848\uff0c\u7528\u7684\u662f\u95ed\u96c6VQA\uff09\u3001Visual Reasoning\uff08\u4e00\u4e2a\u6587\u672c\u80fd\u5426\u540c\u65f6\u63cf\u8ff0\u4e00\u5bf9\u56fe\u7247\uff0c\u4e8c\u5206\u7c7b\u4efb\u52a1\uff09\u3001Visual Grounding</p> <ul> <li>\u6d88\u878d\u5b9e\u9a8c\uff1aITC\u63d0\u5347\u5de8\u5927\uff0cHard Negative\u90fd\u6709\u63d0\u5347\uff08Hard Negative\u5728\u5bf9\u6bd4\u5b66\u4e60\u4e2d\u5f88\u6709\u6548\uff09\uff0cMomentum Model\u4e00\u822c\uff08\u4f46\u662f\u7814\u7a76noisy data\u4e2d\u63d0\u53d6\u7279\u5f81\u662f\u6709\u8da3\u7684\u65b9\u5411\uff09</li> <li>\u56fe\u6587\u68c0\u7d22\u6570\u636e\u96c6Flickr30K\u548cMSCOCO\u5df2\u7ecf\u90fd\u5237\u7206\u4e86\uff0c\u9700\u8981\u65b0\u7684\u6570\u636e\u96c6\uff0c\u66f4\u5927\u6216\u8005annotated\u66f4\u597d\u7684\u6570\u636e\u96c6\uff0c\u6216\u8005\u7684\u89c6\u9891\u6587\u672c\u68c0\u7d22\u6570\u636e\u96c6</li> </ul> </li> <li> <p>VLMo: Unified Vision-Language Pre-training with Mixture-of-Modality-Experts</p> </li> <li> <p>\u7814\u7a76\u52a8\u673a1\uff1a\u76ee\u524d\u4e3b\u6d41\u6709\u4e24\u79cd\u7ed3\u6784</p> <ul> <li>\u50cfCLIP\u548cALIGN\u7684\u53cc\u5854\u7ed3\u6784\uff08\u6587\u672c\u548c\u56fe\u50cf\u5206\u5f00\uff0c\u53ea\u5728\u4e0a\u9762\u505a\u4e2a\u7b80\u5355\u7684cosine\u7b97\u76f8\u4f3c\u5ea6\u878d\u5408\uff09\u5f00\u9500\u4f4e\u9002\u5408\u5927\u89c4\u6a21\u56fe\u50cf\u6587\u672c\u68c0\u7d22\uff0c\u4f46\u662f\u4ea4\u4e92\u6bd4\u8f83\u5f31\uff0c\u4e0d\u9002\u5408\u505a\u96be\u7684\u573a\u666f</li> <li>Fusion\u5c31\u4e0a\u9762\u7684ALBEF\uff0c\u68c0\u7d22\u7b49\u5f00\u9500\u975e\u5e38\u5927</li> <li>\u6240\u4ee5\u4f5c\u8005\u5e0c\u671b\u80fd\u591f\u878d\u5408\u8fd9\u4e24\u79cd\u67b6\u6784\u7684\u4f18\u70b9\uff0c\u6240\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684FC\u4ea7\u751fvision expert / language expert / multi-modality expert</li> <li>MOE\u7ed3\u6784\uff08mixture of experts\uff09</li> </ul> </li> <li> <p>\u7814\u7a76\u52a8\u673a2\uff1a\u4f7f\u7528\u7684\u76ee\u6807\u51fd\u6570\u4e5f\u662f\u4e0a\u9762\u4e09\u79cd\uff0c\u9700\u8981\u5927\u91cf\u6570\u636e\uff0c\u4f46\u662f\u5f53\u65f6\u591a\u6a21\u6001\u7684\u6570\u636e\u4e0d\u591a\uff0c\u6240\u4ee5\u4f5c\u8005\u4f7f\u7528stagewise pre-training strategy\uff0c\u56e0\u4e3a\u5355\u6a21\u6001\u7684\u6570\u636e\u975e\u5e38\u591a\uff0c\u6240\u4ee5\u5c31\u8ba9vision expert\u548clanguage expert\u5206\u522b\u5728\u5404\u81ea\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\uff0c\u4e4b\u540e\u518d\u5728\u591a\u6a21\u6001\u4e0a\u505a\u8bad\u7ec3\uff0c\u6548\u679c\u5c31\u5f88\u597d</p> </li> <li> <p>\u67b6\u6784\uff1a</p> </li> </ul> <p>\u6bcf\u4e2aBlock\u548cTransformer Block\u5f88\u50cf\uff0c\u4e4b\u662f\u6700\u540e\u7528\u4e0d\u540c\u7684FFN\uff08Feed-forward Network\uff09\uff0c\u4e09\u4e2a\u4e0d\u540c\u7684FFN\u662f\u4e0dshare weights\uff0c\u4f46\u662f\u81ea\u6ce8\u610f\u529b\u5c42\u662fshare weights\uff08\u8bf4\u660e\u81ea\u6ce8\u610f\u529b\u4e0d\u6311\u8f93\u5165\u5f62\u5f0f\uff0c\u9002\u5408\u591a\u6a21\u6001\u5b66\u4e60\uff09</p> <p>ITC\u5c31\u662fCLIP\uff0cITM\u662fFusion Encoder\u5f62\u5f0f</p> <p>\u597d\u5904\u5c31\u662f\u7075\u6d3b</p> <p></p> Text Only<pre><code>&gt; \n&gt; FFN\u548cFC\u548cMLP\u90fd\u662f\u795e\u7ecf\u7f51\u7edc\u7684\u7c7b\u578b\uff0c\u4f46\u5b83\u4eec\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\u3002\n&gt;\n&gt; FFN\uff08Feedforward Neural Network\uff09\u662f\u4e00\u79cd\u524d\u5411\u4f20\u64ad\u795e\u7ecf\u7f51\u7edc\uff0c\u5176\u8f93\u5165\u53ea\u80fd\u4ece\u8f93\u5165\u5c42\u5230\u8f93\u51fa\u5c42\u6d41\u52a8\uff0c\u6ca1\u6709\u53cd\u9988\u8def\u5f84\u3002\u5e38\u89c1\u7684FFN\u5305\u62ec\u5355\u5c42\u611f\u77e5\u673a\u548c\u591a\u5c42\u611f\u77e5\u673a\u3002\n&gt;\n&gt; FC\uff08Fully Connected\uff09\u662f\u4e00\u79cd\u5168\u8fde\u63a5\u5c42\uff0c\u4e5f\u79f0\u4e3a\u5bc6\u96c6\u5c42\u3002\u5728FC\u5c42\u4e2d\uff0c\u6bcf\u4e2a\u8f93\u5165\u795e\u7ecf\u5143\u90fd\u8fde\u63a5\u5230\u6bcf\u4e2a\u8f93\u51fa\u795e\u7ecf\u5143\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u5b66\u4e60\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u590d\u6742\u975e\u7ebf\u6027\u6620\u5c04\u3002\n&gt;\n&gt; MLP\uff08Multilayer Perceptron\uff09\u662f\u4e00\u79cd\u591a\u5c42\u611f\u77e5\u673a\uff0c\u662f\u7531\u591a\u4e2aFC\u5c42\u548c\u6fc0\u6d3b\u51fd\u6570\u7ec4\u6210\u7684\u795e\u7ecf\u7f51\u7edc\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u5206\u7c7b\u548c\u56de\u5f52\u95ee\u9898\uff0c\u5e76\u4e14\u53ef\u4ee5\u5904\u7406\u975e\u7ebf\u6027\u5173\u7cfb\u3002\n&gt;\n</code></pre> <p>\u56e0\u6b64\uff0c\u53ef\u4ee5\u8bf4FFN\u548cFC\u662fMLP\u7684\u7ec4\u6210\u90e8\u5206\uff0cMLP\u5305\u542b\u4e86\u591a\u4e2aFC\u5c42\u548c\u6fc0\u6d3b\u51fd\u6570\uff0c\u800cFFN\u662f\u4e00\u79cd\u7279\u6b8a\u7684MLP\uff0c\u53ea\u5305\u542b\u4e00\u4e2a\u8f93\u5165\u5c42\u3001\u4e00\u4e2a\u8f93\u51fa\u5c42\u548c\u82e5\u5e72\u4e2a\u9690\u85cf\u5c42\u3002</p> <ul> <li>\u5206\u9636\u6bb5\u9884\u8bad\u7ec3\uff1a</li> </ul> <p>Vision Pre-training\u4f7f\u7528\u81ea\u5df1\u7684BEiT\uff08Masked Image Modeling\uff09\uff0cLanguage Pre-training\u7528\u7684\u662fMasked Language Modeling\uff0c\u6700\u540eVL Pretraining\u7528\u7684\u662f\u4e0a\u9762\u63d0\u5230\u7684\u4e09\u4e2a\u51fd\u6570</p> <p>\u6ce8\u610f\u54ea\u4e9b\u662ffrozen\u7684\uff1a\u4e00\u5f00\u59cb\u5168\u90e8\u6253\u5f00\u5f88\u6b63\u5e38\uff0cLanguage\u8bad\u7ec3\u9636\u6bb5\u6ce8\u610f\u81ea\u6ce8\u610f\u529b\u5c42\u88abfrozen\u4e86\u76f4\u63a5\u7528 Image \u4e0a\u8bad\u7ec3\u7684\u81ea\u6ce8\u610f\u529b\u5c42\uff08\u53cd\u8fc7\u6765\u4e0d\u884c\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u63a2\u7d22\uff09\uff0c\u6700\u540e\u5c31\u90fd\u6253\u5f00\u4e86</p> <p></p> <ul> <li>\u672a\u6765\uff1a</li> </ul> <p>BeiT\u2014\u2014VLMo\u2014\u2014VL-BeiT\u2014\u2014BeiT v2\u2014\u2014BeiT v3</p> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/37-%E5%A4%9A%E6%A8%A1%E6%80%81%E4%B8%B2%E8%AE%B2/#encoderdecoder","title":"Encoder+Decoder\u67b6\u6784","text":"<ul> <li> <p>BLIP\uff1aBootstrapping Language-Image Pre-training for Unified Vision-Language Understanding and Generation</p> </li> <li> <p>\u5173\u952e\u8bcd\uff1aBootstrap\u548cUnified\u3002Bootstrap\u8868\u793a\u4ecenoisy data\u4e2d\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\u7136\u540e\u901a\u8fc7\u4e00\u4e9b\u65b9\u6cd5\u5f97\u5230\u66f4\u5e72\u51c0\u7684\u6570\u636e\uff0c\u7136\u540e\u7528\u66f4\u5e72\u51c0\u7684\u6570\u636etrain\u51fa\u66f4\u597d\u7684\u6a21\u578b\uff1bUnified\u8868\u793a\u5e94\u7528\u5728\u591a\u79cd\u4efb\u52a1\u4e0a\uff0c\u5305\u62ecUnderstanding\u4efb\u52a1\uff08Retrieval / VQA / VR / VE\uff09\u548cGeneration\uff08Image Captioning\u751f\u6210\u5b57\u5e55\uff09\u751f\u6210\u5f0f\u4efb\u52a1</p> </li> <li> <p>\u7814\u7a76\u52a8\u673a</p> <ul> <li> <p>\u6a21\u578b\uff1a\u4e4b\u524d\u7684Encoder\u6a21\u578b\u4e0d\u80fd\u8fd0\u7528\u5230\u751f\u6210\u4efb\u52a1\u4e2d\uff0c\u800cEncoder-Decoder\u4e0d\u80fd\u505aImage-text Retrieval\u7684\u4efb\u52a1\uff0c\u8fd9\u4e2a\u52a8\u673a\u548cVLMo\u662f\u4e00\u6837\u7684</p> </li> <li> <p>\u6570\u636e\uff1a\u901a\u8fc7\u6570\u636e\u96c6\u53d8\u5927\u53ef\u4ee5\u63d0\u9ad8\u6548\u679c\uff0c\u4f46\u662f\u5728Noisy\u7684\u6570\u636e\u96c6\u4e0a\u9884\u8bad\u7ec3\u8fd8\u662f\u4e0d\u597d\u7684\uff08suboptimal\uff0c\u4e0d\u662f\u6700\u4f18\u89e3\uff09\uff0c\u4f5c\u8005\u63d0\u51fa\u4e24\u4e2a\u6a21\u5757 caption \u751f\u6210\u5b57\u5e55\uff0cFilter\u5220\u9664\u4e0d\u5339\u914d\u7684\u56fe\u50cf\u6587\u672c\u5bf9</p> </li> </ul> <p></p> </li> <li> <p>\u80cc\u666f\uff1a\u4e4b\u524d\u7684ALBEF\u548cVLMo\uff0c\u540e\u8005\u66f4\u52a0\u7b80\u5355</p> <p></p> </li> <li> <p>\u67b6\u6784</p> <p>\u56fe\u50cf\u5c31\u662f\u4e00\u4e2aViT\uff0c\u6587\u672c\u4f7f\u7528\u4e09\u4e2a\u6a21\u578b\u3002\u4e0d\u770b\u6587\u672c\u7684\u7b2c\u4e09\u4e2a\uff0c\u5176\u5b9e\u5c31\u662f\u4e2aALBEF\uff0c\u53ea\u662f\u6587\u672cEncoder\u66f4\u5927\u4e14\u53ef\u4ee5\u5171\u4eab\u53c2\u6570\uff08\u501f\u9274VLMo\uff09\u800c\u4e0d\u662f\u5288\u5f00\u6210\u4e24\u4e2a\uff1b\u751f\u6210\u6a21\u578b\u5c31\u662f\u7b2c\u4e09\u4e2a\u6587\u672c\u6a21\u578b\uff0c\u4f46\u662f\u6587\u672c\u4e0d\u80fd\u76f4\u63a5\u770b\u5168\u90e8\uff0c\u56e0\u4e3a\u5c31\u662f\u8981\u751f\u6210\u8fd9\u79cd\u6587\u672c\uff08\u4efb\u52a1\u662f\u50cfGPT\u4e00\u6837\u7684LM\uff0c\u4e0d\u662fMLM\u5b8c\u5f62\u586b\u7a7a\uff09\uff0c\u6240\u4ee5\u4f7f\u7528causal self-attention\u56e0\u679c\u81ea\u6ce8\u610f\u529b\u5c42\uff0c\u4f7f\u7528\u76f8\u540c\u53c2\u6570\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u505a\u4e0d\u540c\u4efb\u52a1</p> <p>prompt\u5728\u6700\u524d\u9762\u52a0\u4e0a\u4e86<code>CLS / Encode / Decode</code></p> <p></p> </li> <li> <p>Captioner-Filter</p> <p>\u7f51\u7edc\u4e0b\u8f7d\u7684\u6587\u672c\\(T_w\\)\u8d28\u91cf\u5dee\uff0c\u800c\u624b\u5de5\u6807\u6ce8\u7684\\(T_h\\)\u8d28\u91cf\u8f83\u597d</p> <p>Filter\u5c31\u662f\u5c06ITC\u548cITM\u90e8\u5206\u7684\u6a21\u578b\u62ff\u8fc7\u6765\u7136\u540e\u5728COCO\u624b\u5de5\u6570\u636e\u96c6\u4e0a\u505aFinetune\u4f5c\u4e3aFilter\uff0c\u8fdb\u884c\u6570\u636e\u6e05\u6d17</p> <p>Captioner\uff1a\u4f5c\u8005\u53d1\u73b0Decoder\u80fd\u529b\u5f88\u5f3a\uff0c\u6240\u4ee5\u5c31\u5728COCO\u4e0a\u505a\u5fae\u8c03\u7136\u540e\u53d8\u6210Captioner\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e9b\u56fe\u50cf\u6587\u672c\u5bf9</p> <p>\u751f\u6210Caption\u5f88\u6709\u6548</p> <p></p> </li> <li> <p>\u5b9e\u9a8c\uff1a</p> <ul> <li>Captioner\u66f4\u80fd\u8ba9\u6a21\u578b\u53d7\u76ca\uff0c\u56e0\u4e3a\u5927\u6a21\u578b\u66f4\u9700\u8981\u6570\u636e</li> </ul> </li> <li> <p>\u5e94\u7528\uff1a</p> <ul> <li> <p>Stable Diffusion\u751f\u6210Pokeman\uff0c\u6709\u56fe\u4f46\u6ca1label\uff0c\u7528BLIP\u751f\u6210\u6548\u679c\u5f88\u597d</p> </li> <li> <p>LAION COCO\u6570\u636e\u96c6\uff1a\u4eceLAION 4B\u4e2d\u53d6\u82f1\u8bed\u7136\u540e\u7528\u4e00\u4e2aBLIP\u4e24\u4e2aCLIP\u505aCap-Filter\u5f97\u5230COCO 600M\u3002\u5148\u7528BLIP\u751f\u621040\u4e2aCaption\uff0c\u7136\u540eCLIP\u9009\u6700\u597d\u76845\u4e2a\u7136\u540e\u518d\u7528\u66f4\u5927\u7684CLIP\u9009\u6700\u597d\u7684\u3002</p> </li> </ul> <p>CLIP\u505aRanking / Retrieval \u6548\u679c\u90fd\u633a\u597d</p> <p></p> </li> <li> <p>CoCa: Contrastive Captioners are Image-Text Foundation Models</p> </li> <li> <p>\u770b\u6807\u9898\u5c31\u77e5\u9053\u4f7f\u7528\u4e86\u4e24\u79cdLoss\uff1aContrastive Loss\u548cCaptioning Loss</p> </li> <li> <p>\u67b6\u6784\uff1a</p> <p>\u548cALBEF\u5f88\u50cf\uff0c\u4f46\u662f\u6587\u672c\u4f7f\u7528\u7684\u662fDecoder</p> <p>\u56fe\u50cf\u8fd9\u4e00\u652f\u7528\u7684\u662fattentional pooling\uff0c\u662f\u53ef\u5b66\u4e60\u7684</p> <p>\u6587\u672c\u6700\u540e\u4f7f\u7528captioning loss\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u7684self-attention\u90fd\u662fcasual\u7684\uff08\u5c31\u662fmasked self-attention\uff09\u3002\u4f5c\u8005\u6ca1\u6709\u4f7f\u7528ITM Loss\uff0c\u662f\u56e0\u4e3a\u4e4b\u524d\u7684\u5de5\u4f5c\u8981Forward\u5f88\u591a\u6b21\uff0c\u8bad\u7ec3\u65f6\u95f4\u8fc7\u957f\uff0c\u8fd9\u91cc\u4e3a\u4e86\u53eaForward\u4e00\u6b21\uff0c\u6240\u4ee5\u8f93\u5165\u7684\u6587\u672c\u90fd\u662fmasked\u3002\u7531\u4e8e\u6a21\u578b\u5728\u51e0\u5341\u4ebf\u7684\u6570\u636e\u4e0a\u8bad\u7ec3\u6240\u4ee5\u600e\u4e48masked\u90fd\u53ef\u4ee5</p> <p></p> <p>Casual self-attention layer\u662f\u4e00\u79cd\u795e\u7ecf\u7f51\u7edc\u5c42\uff0c\u7528\u4e8e\u5904\u7406\u5e8f\u5217\u6570\u636e\uff0c\u4f8b\u5982\u81ea\u7136\u8bed\u8a00\u6587\u672c\u3002\u5b83\u662f\u81ea\u6211\u6ce8\u610f\u529b\u673a\u5236\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u5141\u8bb8\u6a21\u578b\u5728\u5904\u7406\u5e8f\u5217\u65f6\u5173\u6ce8\u5148\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u4e0d\u5141\u8bb8\u6a21\u578b\u67e5\u770b\u672a\u6765\u7684\u4f4d\u7f6e\u3002\u8fd9\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u5728\u5904\u7406\u5e8f\u5217\u65f6\u66f4\u597d\u5730\u6355\u6349\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u540c\u65f6\u907f\u514d\u4e86\u4fe1\u606f\u6cc4\u6f0f\u95ee\u9898\u3002Casual self-attention layer\u901a\u5e38\u7528\u4e8eTransformer\u6a21\u578b\u4e2d\uff0c\u662f\u5176\u6838\u5fc3\u7ec4\u4ef6\u4e4b\u4e00\u3002</p> </li> <li> <p>\u6548\u679c</p> <p></p> </li> <li> <p>BeiTv3</p> </li> <li> <p>\u6807\u9898\uff1aImage as a Foreign Language: BEiT Pretraining for All Vision and Vision-Language Tasks</p> </li> <li> <p>\u591a\u8fb9\u5f62\u56fe\uff1a\u8d85\u8d8aCoCa</p> </li> <li> <p>Public Dataset\uff0c\u53ea\u7528\u4e00\u4e2aLoss\u3002\u6240\u4ee5\u4e0d\u662f\u66f4\u591aLoss\u505aRegularization\u5c31\u66f4\u597d\uff0c\u9700\u8981\u770b\u5404\u79cdLoss\u662f\u5426\u6709\u5f25\u8865\u6027\uff0c\u53e6\u5916\u5c31\u662f\u5f53\u6a21\u578b\u53d8\u5927\u7684\u65f6\u5019\u662f\u5426\u9700\u8981\u5176\u4ed6\u7684Loss\u51fd\u6570\uff0c\u53e6\u5916\u6570\u636e\u91cf\u4e5f\u4e0d\u662f\u8d8a\u591a\u8d8a\u597d\uff0cCoCa\u7684\u6570\u636e\u91cf\u662f\u51e0\u5341\u500d\u4e8eBeiTv3\u7684\uff0c\u6240\u4ee5\u6570\u636e\u8d28\u91cf\u5f88\u91cd\u8981</p> </li> <li> <p>\u5f15\u8a00\uff08\u505a\u591a\u6a21\u6001\u5fc5\u8bfb\uff09\uff1aLanguage / Vision / Multimodal \u90fd\u51fa\u73b0Big Convergence\u8d8b\u52bf\uff0c\u5927\u6a21\u578b\u6210\u4e3aFoundation Model\u3002\u8ba8\u8bba\u76ee\u524d\u7684\u591a\u6a21\u6001\u6a21\u578b\u67b6\u6784\uff0c\u4f5c\u8005\u8ba4\u4e3a\u76ee\u524d\u7684\u67b6\u6784\u4ecd\u7136\u9700\u8981\u6839\u636e\u4e0b\u6e38\u4efb\u52a1\u505a\u8c03\u6574\uff0c\u6240\u4ee5\u4f5c\u8005\u5e0c\u671b\u80fd\u591f\u8fdb\u4e00\u6b65\u5b9e\u73b0\u5927\u4e00\u7edf\u3002\u4f5c\u8005\u5c06\u56fe\u50cf\u770b\u505a\u4e00\u79cdforeign language\uff0c\u79f0\u4e3aImglish</p> </li> <li> <p>\u67b6\u6784\uff1a\u5c31\u662fVLMo\uff0c\u5b8c\u578b\u586b\u7a7a</p> <p></p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/37-%E5%A4%9A%E6%A8%A1%E6%80%81%E4%B8%B2%E8%AE%B2/#_3","title":"\u603b\u7ed3","text":"<p>\u76ee\u524d\u6709\u4e24\u79cd\u6a21\u578b\u60f3\u505a\u66f4General\u7684\u6846\u67b6\uff1a</p> <ul> <li>Language Interface: MetaLM / PaLi\uff0c\u5168\u90e8\u8f6c\u6210Text Generation\u7684\u4efb\u52a1</li> <li>Generalist Model\uff1a\u901a\u624d\u6a21\u578b\uff0c\u4e0d\u6839\u636e\u4e0b\u6e38\u4efb\u52a1\u52a0\u5206\u7c7b\u5934\u7b49\u3002Unified-IO / Uniperceiver / Uniperceiver-MOE / Uniperceiver v2</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/38-NeuralCorpusIndexer/","title":"Neural Corpus Indexer","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/38-NeuralCorpusIndexer/#neural-corpus-indexer","title":"Neural Corpus Indexer","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/38-NeuralCorpusIndexer/#_1","title":"\u6807\u9898","text":"<ul> <li>A Neural Corpus Indexer for Document Retrieval \uff08NCI\uff09</li> <li>\u8be5\u6587\u5c06\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6\u6709\u70b9\u641e\u6df7\uff0c\u5bfc\u81f4\u7ed3\u679c\u504f\u9ad8\u3002\u81ea\u5df1\u7684\u5de5\u4f5c\u5982\u679c\u6548\u679c\u5f88\u597d\uff0c\u9700\u8981\u5148\u8d28\u7591\uff0c\u6709\u53ef\u80fd\u53d1\u751f\u6570\u636e\u6cc4\u6f0f\u7b49\u95ee\u9898</li> <li>\u53e6\u5916\u6709\u4eba\u8d28\u7591\u6284\u88ad DSI</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/38-NeuralCorpusIndexer/#_2","title":"\u6458\u8981","text":"<ul> <li>\u76ee\u524d\u6587\u6863\u68c0\u7d22\u7684\u7b97\u6cd5\u662f\u57fa\u4e8e\u7d22\u5f15\u7684\u7cfb\u7edf\uff0c\u7d22\u5f15\u5c31\u662f\u6bcf\u4e2a\u6587\u6863\u505a\u4e00\u4e2aHash\u6216\u8005\u662fEmbedding\uff0c\u4f46\u662f\u5f88\u96be\u505a\u4f18\u5316</li> <li>\u6211\u4eec\u7528\u7aef\u5230\u7aef\u7684\u6df1\u5ea6\u5b66\u4e60\u6765\u7edf\u4e00\u8bad\u7ec3\u548c\u68c0\u7d22\uff0c\u6765\u63d0\u9ad8\u53ec\u56de\u7387</li> <li>seq2seq\u7f51\u7edc\uff0c\u751f\u6210\u76f8\u5173\u6587\u6863\u7684id</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/38-NeuralCorpusIndexer/#_3","title":"\u5f15\u8a00","text":"<ul> <li> <p>retrieval\uff1a\u627e\u5230query\u76f8\u5173\u7684\u6240\u6709\u7684\u6587\u6863\uff1branking\uff1a\u7ed9\u4e00\u4e2a\u66f4\u52a0\u7cbe\u786e\u7684\u5206\u6570\u3002ranking\u9636\u6bb5\u5e38\u5e38\u4f1a\u7528\u6df1\u5ea6\u5b66\u4e60\u6765\u9884\u6d4bquery\u548c\u6587\u6863\u7684\u76f8\u5173\u6027\uff0c\u4f46\u662f\u8fd9\u6bd4\u8f83\u8d35\uff0c\u6240\u4ee5retrieval\u9636\u6bb5\u9700\u8981\u6bd4\u8f83\u9ad8\u7684\u53ec\u56de</p> </li> <li> <p>\u6587\u6863\u68c0\u7d22\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a</p> </li> <li> <p>term-based\uff1a\u5012\u6392\u7d22\u5f15\uff0c\u9ad8\u6548\u4f46\u662f\u8bed\u4e49\u641c\u7d22\u80fd\u529b\u4e0d\u5f3a</p> </li> <li> <p>semantic-based\uff1aquery\u548cdocument\u6620\u5c04\u6210\u4e00\u4e2a\u5411\u91cf\uff0c\u5f80\u5f80\u4f7f\u7528two-tower\u6a21\u578b\u3002\u7136\u540e\u641c\u7d22\u7684\u65f6\u5019\u7528\u8fd1\u4f3c\u7684K\u8fd1\u90bb\u7b97\u6cd5\uff0c\u4e0d\u9002\u5408exact match</p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/38-NeuralCorpusIndexer/#_4","title":"\u7b97\u6cd5","text":"<ul> <li>\u67b6\u6784\uff1a</li> </ul> <p>\u7528\u4e86\u4e2atrick\uff0c\u9664\u4e86Transformer\u672c\u6765\u7684Decoder\uff0c\u8fd9\u91cc\u53e6\u5916\u52a0\u4e86AdaptiveDecoder</p> <p></p> <ul> <li>\u751f\u6210docid\u7528\u7684\u662f hierachical k-means\uff0c\u9996\u5148\u5148\u505a\u805a\u7c7b\uff0c\u5982\u679c\u8be5\u7c7b\u7684\u6570\u91cf\u8fc7\u591a\u5c31\u518d\u505a\u805a\u7c7b\u3002\u7531\u4e8e\u4f7f\u7528seq2seq\uff0c\u6240\u4ee5\u9884\u6d4b\u7684\u65f6\u5019\u5148\u9884\u6d4b2\u7136\u540e\u518d\u9884\u6d4b3\u7136\u540e\u518d\u9884\u6d4b3</li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/39-InstructGPT/","title":"InstructGPT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/39-InstructGPT/#instructgpt","title":"InstructGPT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/39-InstructGPT/#_1","title":"\u6807\u9898","text":"<ul> <li>Training language models to follow instructions with human feedback</li> <li>\u672c\u6587\u5c55\u793a\u5982\u4f55\u8ba9\u8bed\u8a00\u6a21\u578b\u548c\u4eba\u7c7b\u7684\u610f\u56fe\u4e4b\u95f4\u505aalign\u5bf9\u9f50</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/39-InstructGPT/#_2","title":"\u6458\u8981","text":"<ul> <li>\u4e3b\u8981\u5de5\u4f5c\uff1a\u505a\u4e24\u4e2a\u6570\u636e\u96c6\uff0c\u4e00\u4e2a\u662f\u7528\u95ee\u9898\u548c\u7b54\u6848\u6765\u8bad\u7ec3\u6a21\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u6392\u5e8f\u6570\u636e\u96c6\u505a\u5f3a\u5316\u5b66\u4e60\uff0c\u7ed3\u679c\u53d1\u73b0InstructGPT\u53c2\u6570\u91cf\u662fGPT3\u76841%\u4f46\u6548\u679c\u66f4\u597d</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/39-InstructGPT/#_3","title":"\u5f15\u8a00","text":"<ul> <li> <p>GPT\u7684\u76ee\u6807\u51fd\u6570\u662f\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd\uff0c\u4f46\u662f\u4eba\u7c7b\u5e0c\u671b\u7684\u662f\u6b63\u786e\u4e14\u5b89\u5168\u5730\u8f93\u51fa\uff0c\u6240\u4ee5\u4f5c\u8005\u8ba4\u4e3a\u8bed\u8a00\u6a21\u578b\u7684\u76ee\u6807\u51fd\u6570\u6ca1\u6709align</p> </li> <li> <p>\u4f5c\u8005\u4f7f\u7528RLHF\uff0c\u539f\u56e0\u53ef\u80fd\u662fOpenAI\u662f\u505a\u5f3a\u5316\u5b66\u4e60\u51fa\u5bb6\u7684</p> </li> <li> <p>\u65b9\u6cd5</p> </li> <li> <p>\u7b2c\u4e00\u9636\u6bb5\uff1aSFT\uff0cSupervised FineTune\uff0c\u6807\u6ce8\u4e00\u4e9b\u5bf9\u8bdd</p> </li> <li> <p>\u7b2c\u4e8c\u9636\u6bb5\uff1a\u7c7b\u4f3c\u4f2a\u6807\u7b7e\uff0c\u8ba9GPT\u751f\u6210\u591a\u79cd\u8f93\u51fa\u8ba9\u7528\u6237\u6765\u9009 Beam Search\uff0c\u4eba\u7c7b\u8fdb\u884c\u7b54\u6848\u6392\u5e8f\uff0c\u79f0\u4e3a RM \u5956\u52b1\u6a21\u578b</p> <p>Beam Search\u662f\u4e00\u79cd\u641c\u7d22\u7b97\u6cd5\uff0c\u7528\u4e8e\u5728\u56fe\u5f62\u6216\u6811\u5f62\u7ed3\u6784\u4e2d\u5bfb\u627e\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002\u5b83\u662f\u4e00\u79cd\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u6bcf\u6b21\u6269\u5c55\u641c\u7d22\u6811\u65f6\u53ea\u4fdd\u7559\u4e00\u5b9a\u6570\u91cf\u7684\u6700\u4f18\u89e3\uff0c\u800c\u4e0d\u662f\u5168\u90e8\u6269\u5c55\u3002\u8fd9\u4e2a\u6570\u91cf\u79f0\u4e3aBeam Width\u6216Beam Size\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u8f83\u5c0f\u7684\u5e38\u6570\u3002</p> <p>Beam Search\u7684\u57fa\u672c\u601d\u60f3\u662f\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408\uff0c\u8be5\u96c6\u5408\u5305\u542b\u6700\u6709\u53ef\u80fd\u7684\u89e3\u3002\u8fd9\u4e2a\u96c6\u5408\u4f1a\u968f\u7740\u641c\u7d22\u7684\u8fdb\u884c\u800c\u4e0d\u65ad\u6269\u5927\uff0c\u4f46\u662f\u96c6\u5408\u4e2d\u7684\u89e3\u7684\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7Beam Width\u3002\u6bcf\u6b21\u6269\u5c55\u641c\u7d22\u6811\u65f6\uff0c\u4f1a\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684\u6269\u5c55\uff0c\u7136\u540e\u9009\u62e9\u4e00\u4e9b\u6700\u6709\u53ef\u80fd\u7684\u89e3\u4f5c\u4e3a\u4e0b\u4e00\u6b65\u7684\u641c\u7d22\u3002\u8fd9\u4e9b\u89e3\u4f1a\u88ab\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\uff0c\u5e76\u4e14\u6839\u636e\u5b83\u4eec\u7684\u5f97\u5206\u8fdb\u884c\u6392\u5e8f\u3002\u7136\u540e\uff0c\u96c6\u5408\u4e2d\u7684\u89e3\u5c31\u662f\u4e0b\u4e00\u6b65\u641c\u7d22\u7684\u5019\u9009\u89e3\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u91cd\u590d\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u89e3\u3002</p> <p>Beam Search\u7684\u4f18\u70b9\u662f\u5b83\u80fd\u591f\u5728\u77ed\u65f6\u95f4\u5185\u627e\u5230\u4e00\u4e2a\u8f83\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u4e0d\u9700\u8981\u641c\u7d22\u6574\u4e2a\u89e3\u7a7a\u95f4\u3002\u7f3a\u70b9\u662f\u5b83\u53ef\u80fd\u4f1a\u9677\u5165\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u56e0\u4e3a\u5b83\u53ea\u4fdd\u7559\u4e86\u4e00\u90e8\u5206\u89e3\u3002</p> </li> <li> <p>\u7b2c\u4e09\u9636\u6bb5\uff1a\u7528\u4e00\u4e2a\u65b0\u7684prompt\u751f\u6210output\u7ed9reward model\u8ba1\u7b97reward\uff0c\u7136\u540e\u63d0\u9ad8\u5206\u6570</p> </li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/39-InstructGPT/#_4","title":"\u65b9\u6cd5","text":"<ul> <li> <p>\u6570\u636e\u96c6</p> </li> <li> <p>\u9996\u5148\u7528\u4eba\u6807\u4e3b\u7684\u4fe1\u606f\u5b9e\u73b0\u4e00\u4e2aInstructGPT\uff0c\u6807\u51c6\u5305\u62ec\uff1a</p> <p></p> <p>\u7136\u540e\u653e\u5230Playground\u91cc\uff0c\u7136\u540e\u6536\u96c6\u7528\u6237\u7684\u95ee\u9898\uff0c\u7136\u540e\u518d\uff0c\u8fc7\u6ee4\u6389\u4e2a\u4eba\u4fe1\u606f\uff0c\u5e76\u4e14\u8bad\u7ec3\u7684\u65f6\u5019\u4e0d\u4f7f\u7528\u540c\u4e00\u4e2a\u4eba\u6587\u7684\u5f88\u591a\u95ee\u9898\uff08\u6700\u591a200\u4e2a\uff09</p> </li> <li> <p>\u4e09\u4e2adataset\uff1aSFT / RM / PPO\uff0c\u7b2c\u4e09\u4e2a\u6570\u636e\u96c6\u6ca1\u6709human label</p> <p></p> </li> <li> <p>\u6a21\u578b</p> </li> <li> <p>SFT\uff1aFineTune GPT3\uff0c\u7528\u4eba\u5de5\u6807\u6ce8\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u53ea\u670913K\uff0c\u6240\u4ee5\u53ea\u7528\u4e8616epoch\uff0c\u4f46\u662f\u53d1\u73b0\u53ea\u626b\u4e00\u8fb9\u5c31\u8fc7\u62df\u5408\u4e86\uff0c\u4f46\u662f\u8fd9\u662f\u4e3a\u4e86\u521d\u59cb\u5316\u540e\u9762\u7684\u6a21\u578b\uff0c\u6240\u4ee5\u8fc7\u62df\u5408\u4e5f\u6ca1\u592a\u5927\u95ee\u9898</p> </li> <li> <p>RM\uff1a</p> <p>\u76ee\u7684\u662f\u8bad\u7ec3\u53e6\u4e00\u4e2a\u6a21\u578b\uff0c\u62df\u5408\u4eba\u5bf9\u4e8eprompt+reponse\u7684\u8bc4\u4ef7\uff08\u6392\u5e8f\uff09</p> <p>\u4f7f\u75286B\u7684\u6a21\u578b\uff0c\u4eceSFT\u5f00\u59cb\u53bb\u6389\u6700\u540e\u7684Unbedding\u5c42\uff08\u53ef\u80fd\u5c31\u662f\u53bb\u9664Softmax\u5c42\uff0c\u7136\u540e\u76f4\u63a5\u7528\u7ebf\u6027\u5c42\u6295\u5f71\u6210\u4e00\u4e2a\u503c\uff0c\u5c06\u8fd9\u4e2a\u6807\u91cf\u8f93\u51fa\u770b\u4f5c\u662freward\uff09\uff0c\u8f93\u5165\u662fprompt\u53ca\u5176response\u3002\u4f5c\u8005\u53d1\u73b0\u5927\u6a21\u578b\u4e0d\u7a33\u5b9a\uff0c\u6240\u4ee5\u4f7f\u7528\u5c0f\u7684\u6a21\u578b</p> <p>\u8f93\u5165\u662f\u6392\u5e8f\u800c\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5\u9700\u8981\u628a\u987a\u5e8f\u53d8\u6210\u503c\uff0c\u4f7f\u7528Pairwise Ranking Loss\uff0c\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\u5982\u679c\u4e00\u4e2aresponse\u6bd4\u53e6\u4e00\u4e2a\u7684\u6392\u5e8f\u66f4\u9ad8\u5c31\u8ba9\u5b83\u7684reward\u548c\u53e6\u4e00\u4e2a\u5dee\u66f4\u8fdc\u3002\u8fd9\u91cc\u6392\u5e8f\u7b54\u6848\u6570\u91cf\\(K=9\\)\uff0c\u56e0\u4e3a\u53d1\u73b0\u6392\u5e8f\u8bfb\u9898\u7684\u65f6\u95f4\u66f4\u957f\uff0c\u5f53\\(K\\)\u8d8a\u5927\uff0c\u5f97\u5230\u7684\u6392\u5e8f\u5173\u7cfb\u5c31\u8d8a\u591a\uff1b\u540c\u65f6\u4e0b\u5f0f\u4e2d\\(r_{\\theta}\\)\u6700\u8d35\uff0c\u4f46\u662f\u53ea\u7528\u505a\\(K\\)\u6b21RM\uff0c\u6240\u4ee5\\(K\\)\u8d8a\u5927\u7701\u66f4\u591a\u65f6\u95f4</p> <p></p> </li> <li> <p>RL\uff1aPPO\u662f\u4e4b\u524dOpenAI\u7684\u5de5\u4f5c\uff0c\u5c31\u662f\u5728\u4e0b\u9762\u7684\u76ee\u6807\u51fd\u6570\u4e0a\u505a\u68af\u5ea6\u4e0b\u964d</p> <p></p> <p>\u5728\u5f3a\u5316\u5b66\u4e60\u4e2d\uff0c\u6a21\u578b\u79f0\u4e3aPolicy\u3002\u6211\u4eec\u8981\u5b66\u4e60\\(\\pi_{\\phi}^{RL}\\)\uff0c\u521d\u59cb\u5316\u6210\\(\\pi^{SFT}\\)\uff0c\\(E_{(x,y)}\\)\u4e2d\u7684\\((x,y)\\)\u5c31\u662f\u7b2c\u4e09\u4e2aPPO\u6570\u636e\u96c6\u91cc\u7684prompt \\(x\\) \u53ca\u5176reponse \\(y\\)\uff08\\(y\\)\u662f\u7528\u5f53\u524d\u6a21\u578b \\(\\pi_{\\phi}^{RL}\\) \u7b97\u51fa\u6765\u7684\uff09\uff0c\u5f53\u6a21\u578b\u6570\u636e\u66f4\u65b0\u4e4b\u540e\uff0c\\(y\\)\u662f\u4f1a\u6539\u53d8\u7684\uff08\u5373\u73af\u5883\u53d1\u751f\u53d8\u5316\uff09\u3002\u7136\u540e\u5c06\\((x,y)\\)\u4e22\u5230RM\u6a21\u578b\u91cc\u6765\u7b97reward\u5206\u6570\uff0c\u6211\u4eec\u5e0c\u671b\u8ba9\u8fd9\u4e2a\u5206\u6570\u6700\u5927\u3002</p> <p>RM\u6a21\u578b\u5176\u5b9e\u76f8\u5f53\u4e8e\u505a\u4e00\u4e2aAI\u5224\u5206\uff0c\u66ff\u4ee3\u4e86\u4eba\u5de5\u5224\u5206\uff0c\u672c\u6765RLHF\u9636\u6bb5\u5e94\u8be5\u662f\\(x\\)\u901a\u8fc7\u6a21\u578b\u5f97\u5230\\(y\\)\u7136\u540e\u505c\u4e0b\u4eba\u5de5\u6392\u5e8f\u7136\u540e\u7ed9\u5206\u6570\uff0c\u518d\u66f4\u65b0\u6a21\u578b\uff0c\u8fd9\u91ccRM\u6a21\u578b\u76f4\u63a5\u8df3\u8fc7\u4eba\u5de5\u6392\u5e8f\u6b65\u9aa4\uff08\u5728\u7ebf\uff09\u3002\u5982\u679c\u4eba\u80fd\u76f4\u63a5\u6807\u51fa\\(y\\)\u90a3\u5c31\u53d8\u6210\u4e86\u6709\u76d1\u7763\uff0c\u53ef\u4ee5\u653e\u5230SFT\u9636\u6bb5</p> <p>\u4f46\u662f\\(r_{\\theta}\\)\u662f\u57fa\u4e8e\\(\\pi^{SFT}\\)\u7684\uff0c\u5f53\\(\\pi^{RL}\\)\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u4f1a\u8ba9\u8f93\u51fa\\(y\\)\u5206\u5e03\u53d8\u5316\uff0c\u4f7f\u5f97\\(r\\)\u7684\u5206\u6570\u4f30\u7b97\u9010\u6e10\u53d8\u5f97\u4e0d\u51c6\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u4e2d\u62ec\u53f7\u4e2d\u7684\u7b2c\u4e8c\u9879\u4f7f\u5f97\u65b0\u6a21\u578b\u548c\u4e4b\u524d\u7684\u6a21\u578b\u4e0d\u8981\u8dd1\u592a\u8fdc\uff0c\u5176\u5b9e\u5c31\u662fKL\u6563\u5ea6\uff0c\u770b\u4e24\u4e2a\u6a21\u578b\u8f93\u5165\u540c\u4e00\u4e2a\\(x\\)\u8f93\u51fa\\(y\\)\u7684\u6982\u7387\u503c\u7684KL\u6563\u5ea6\uff08\u8fd9\u4e2a\u5c31\u662fPPO\u601d\u60f3\uff09\u3002\u6700\u540e\u4e00\u9879\u662f\u4e0d\u5149\u6ce8\u91cdRLHF\u3001\u9632\u6b62\u9057\u5fd8\u4e4b\u524d\u7684\u8bad\u7ec3\u53c2\u6570\u3001\u591a\u504f\u5411\u539f\u59cb\u6570\u636e\uff0c\u5176\u5b9e\u5c31\u662f\u539f\u59cb\u7684GPT3\u7684\u76ee\u6807\u51fd\u6570\uff0c\u52a0\u4e0a\u6700\u540e\u4e00\u9879\u79f0\u4e3aPPO-ptx</p> <p></p> <p></p> <p>https://datawhalechina.github.io/easy-rl/#/chapter5/chapter5</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/","title":"Transformer","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/#transformer","title":"Transformer","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/#abstract","title":"Abstract","text":"<ul> <li>sequence transduction\u5e8f\u5217\u8f6c\u5f55\u6a21\u578b\uff0cseq2seq\uff0c\u4e00\u6bb5\u5e8f\u5217\u751f\u6210\u53e6\u4e00\u7aef\u5e8f\u5217\uff0c\u4e00\u822c\u662f\u7528encoder\u52a0decoder</li> <li>\u672c\u6587\u53ea\u9002\u7528attention\uff0c\u800c\u4e0d\u4f7f\u7528CNN\u548cRNN</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/#conclusion","title":"Conclusion","text":"<ul> <li>\u6211\u4eec\u53ea\u4f7f\u7528\u4e86attention</li> <li>\u4ee3\u7801\u4e00\u822c\u662f\u76f4\u63a5\u653e\u5728\u6458\u8981\u91cc\u7684\uff0c\u672c\u6587\u662ftensor2tensor</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/#introduction","title":"Introduction","text":"<ul> <li>RNN\u96be\u4ee5\u5e76\u884c\u3002\u65f6\u5e8f\u957f\u7684\u524d\u9762\u7684\u4fe1\u606f\u53ef\u80fd\u4f1a\u4e22\u5931</li> </ul> <ul> <li>\u7eaf\u7528attention\u5e76\u884c\u5ea6\u9ad8</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/#relation-work","title":"Relation Work","text":"<ul> <li>CNN\u53ea\u80fd\u770b\u5230\u5e8f\u5217\u4e2d\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u800cattention\u80fd\u591f\u770b\u5230\u6240\u6709\u7684\u5e8f\u5217\u3002\u5377\u79ef\u597d\u7684\u5730\u65b9\u5728\u4e8e\u53ef\u4ee5\u505a\u591a\u4e2a\u8f93\u51fa\u901a\u9053\uff0c\u6bcf\u4e2a\u8f93\u51fa\u901a\u9053\u8ba4\u4e3a\u662f\u8bc6\u522b\u4e00\u79cd\u7279\u5b9a\u7684\u6a21\u5f0f\uff0c\u672c\u6587\u63d0\u51fa\u591a\u5934\u7684\u6ce8\u610f\u529b\u673a\u5236</li> <li>\u81ea\u6ce8\u610f\u529b\u673a\u5236\u5f88\u91cd\u8981\uff0c\u4f46\u5e76\u4e0d\u662f\u672c\u6587\u7b2c\u4e00\u6b21\u63d0\u51fa</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/#model-architecture","title":"Model Architecture","text":"<ul> <li>\u9996\u5148\u4ecb\u7ecdEncoder\u548cDecoder\u3002\u7f16\u7801\u5668\u662f\u6574\u4e2a\u53e5\u5b50\u62ff\u5230\uff0c\u800c\u89e3\u7801\u5668\u662f\u81ea\u56de\u5f52\u7684\uff0c\u4e00\u4e2a\u8bcd\u4e00\u4e2a\u8bcd\u7684\u751f\u6210</li> </ul> <ul> <li>\u67b6\u6784\u56fe\uff1a</li> </ul> <p>\u5de6\u8fb9\u662f\u7f16\u7801\u5668\u53f3\u8fb9\u662f\u89e3\u7801\u5668\uff0c\u89e3\u7801\u5668\u4e4b\u524d\u7684\u8f93\u51fa\u4f5c\u4e3a\u5f53\u524d\u7684\u8f93\u5165\uff08\u6240\u4ee5\u8fd9\u91cc\u6700\u4e0b\u9762\u5199\u7684\u662foutput\uff09</p> <p>Nx\u8868\u793a\u7531N\u4e2aBlock\u6784\u6210\uff0c\u6bcf\u4e2ablock\u91cc\u9762\u6709\u4e00\u4e2a\u591a\u5934\u6ce8\u610f\u529b\u5c42+\u524d\u9988\u795e\u7ecf\u7f51\u7edc\uff08\u57fa\u672c\u662fMLP\uff09\u5e76\u4f7f\u7528ResNet\u3002</p> <p>MLP\uff08Multilayer Perceptron\uff0c\u591a\u5c42\u611f\u77e5\u5668\uff09\u662f\u4e00\u79cd\u57fa\u672c\u7684\u524d\u9988\u795e\u7ecf\u7f51\u7edc\uff0c\u7531\u591a\u4e2a\u5168\u8fde\u63a5\u5c42\u7ec4\u6210\u3002\u5728\u6bcf\u4e2a\u5168\u8fde\u63a5\u5c42\u4e2d\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u4e0e\u524d\u4e00\u5c42\u7684\u6240\u6709\u795e\u7ecf\u5143\u76f8\u8fde\uff0c\u901a\u8fc7\u5b66\u4e60\u6743\u91cd\u548c\u504f\u7f6e\uff0c\u5b9e\u73b0\u5bf9\u8f93\u5165\u6570\u636e\u7684\u975e\u7ebf\u6027\u6620\u5c04\u3002</p> <p>MLP\u901a\u5e38\u7528\u4e8e\u89e3\u51b3\u5206\u7c7b\u548c\u56de\u5f52\u95ee\u9898\uff0c\u53ef\u4ee5\u5904\u7406\u975e\u7ebf\u6027\u6570\u636e\uff0c\u5177\u6709\u5f88\u5f3a\u7684\u9002\u5e94\u80fd\u529b\u548c\u6cdb\u5316\u80fd\u529b\u3002\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0cMLP\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u6765\u66f4\u65b0\u6743\u91cd\u548c\u504f\u7f6e\uff0c\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u9010\u6e10\u903c\u8fd1\u771f\u5b9e\u6570\u636e\u7684\u5206\u5e03\u3002</p> <p>MLP\u7684\u7f51\u7edc\u7ed3\u6784\u901a\u5e38\u5305\u62ec\u8f93\u5165\u5c42\u3001\u9690\u85cf\u5c42\u548c\u8f93\u51fa\u5c42\u3002\u8f93\u5165\u5c42\u63a5\u6536\u539f\u59cb\u6570\u636e\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u7b2c\u4e00\u4e2a\u9690\u85cf\u5c42\uff1b\u6bcf\u4e2a\u9690\u85cf\u5c42\u901a\u8fc7\u5b66\u4e60\u975e\u7ebf\u6027\u6620\u5c04\uff0c\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u66f4\u9ad8\u5c42\u6b21\u7684\u7279\u5f81\u8868\u793a\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u9690\u85cf\u5c42\u6216\u8f93\u51fa\u5c42\uff1b\u8f93\u51fa\u5c42\u6839\u636e\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u5982sigmoid\u3001softmax\u7b49\uff0c\u5c06\u7279\u5f81\u8f6c\u6362\u4e3a\u8f93\u51fa\u7ed3\u679c\u3002</p> <p>MLP\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u5177\u6709\u91cd\u8981\u7684\u5730\u4f4d\uff0c\u662f\u5176\u4ed6\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u57fa\u7840\u3002\u5b83\u53ef\u4ee5\u901a\u8fc7\u5806\u53e0\u591a\u4e2a\u9690\u85cf\u5c42\u6765\u6784\u5efa\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u5f3a\u5927\u7684\u7279\u5f81\u63d0\u53d6\u548c\u5b66\u4e60\u80fd\u529b\u3002\u540c\u65f6\uff0cMLP\u8fd8\u53ef\u4ee5\u4e0e\u5176\u4ed6\u6df1\u5ea6\u5b66\u4e60\u6280\u672f\u76f8\u7ed3\u5408\uff0c\u5982\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u548c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u7b49\uff0c\u6784\u5efa\u66f4\u52a0\u590d\u6742\u7684\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u3002</p> <p>\u89e3\u7801\u5668\u4e2d\u591a\u4e86Masked Multi-head Attention</p> <p>\u4e0e\u4f20\u7edf\u7684Encoder-Decoder\u7684\u67b6\u6784\u7684\u533a\u522b\u662fBlock\u7684\u67b6\u6784\u4ee5\u53ca\u4e2d\u95f4\u4eceEncoder\u5230Decoder\u7684\u8f93\u5165\u3002</p> <p></p> <ul> <li>Encoder\uff1a\u4e3a\u4e86\u6b8b\u5dee\u7684\u65b9\u4fbf\uff0c\u6240\u6709\u7684\u7ef4\u5ea6\u90fd\u662f512\uff0c\u6ca1\u6709\u505a\u7ef4\u5ea6\u7684\u51cf\u5c0f\u6216\u8005\u589e\u52a0\u3002\u53c2\u6570\u5f88\u5c11\uff0c\u5c31\u5c42\u6570N\u548c\u7ef4\u5ea6d\u3002</li> </ul> <p></p> <ul> <li> <p>LayerNorm\u4e0eBatchNorm\uff0c\u5728\u53d8\u957f\u7684\u60c5\u51b5\uff08\u6587\u672c\u4e0d\u662f\u7edf\u4e00\u957f\u5ea6\uff09\u4e0d\u4f7f\u7528BatchNorm</p> <p>\u5bf9\u4e8eBatchNorm\uff0c\u5728train\u7684\u65f6\u5019\uff0c\u4e00\u822c\u662f\u53d6\u5c0f\u6279\u91cf\u91cc\u7684\u5747\u503c\u548c\u65b9\u5dee\uff0c\u5728\u9884\u6d4b\u7684\u65f6\u5019\u7528\u7684\u662f\u5168\u5c40\u7684\u5747\u503c\u548c\u65b9\u5dee\u3002\u4ec0\u4e48\u662f\u6279\u6807\u51c6\u5316 (Batch Normalization) - \u77e5\u4e4e (zhihu.com)\u3002\u4e8c\u7ef4\u60c5\u51b5\uff08\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u4e00\u4e2afeature\uff09\u5728\u4e0b\u56fe\u4e2dBatchNorm\u662f\u4e0b\u56fe\u5de6\u8fb9\uff0cLayerNorm\u7684\u4e0b\u56fe\u53f3\u8fb9\u3002</p> <p></p> <p>\u4e09\u7ef4\u60c5\u51b5\uff08batch\u7531\u6837\u672c\u7ec4\u6210\uff0c\u6bcf\u4e2a\u6837\u672c\u662fseq\u957f\u5ea6\u7684\u5411\u91cf\uff0c\u6bcf\u4e2a\u8bcd\u7531\u4e00\u4e2afeature\u5411\u91cf\u6765\u63cf\u8ff0\uff0cfeature\u957f\u5ea6\u662fd\uff0ctransformer\u4e2d\u662f512\uff09\uff0c\u84dd\u8272\u662fBatchNorm\uff0c\u9ec4\u8272\u662fLayerNorm\u3002</p> <p></p> <p>\u53e5\u5b50\u957f\u5ea6\u662f\u4e0d\u540c\u7684\uff0c\u5bf9\u4e8eBatchNorm\u6709\u5f88\u591a\u96f6\uff0c\u5bfc\u81f4\u5747\u503c\u65b9\u5dee\u6296\u52a8\u5927\uff0c\u5e76\u4e14\u4e0d\u4e00\u5b9a\u80fd\u9002\u5408\u4e8e\u957f\u53e5\u5b50</p> <p></p> <p></p> </li> <li> <p>\u89e3\u7801\u5668\uff1a\u5176\u4e2d\u7684masked multi-head attention\uff0c\u8f93\u5165\u7684\u65f6\u5019\u5728\\(t\\)\u65f6\u95f4\u4e0d\u4f1a\u770b\u5230\\(t\\)\u65f6\u95f4\u4e4b\u540e\u7684\u8f93\u5165\uff08\u6ce8\u610f\u529b\u673a\u5236\u4e2d\u662f\u53ef\u4ee5\u770b\u5230\u5b8c\u6574\u8f93\u5165\u7684\uff0c\u6240\u4ee5\u8981\u52a0masked\uff09</p> </li> </ul> <p></p> <ul> <li>Attention\uff1a\u6ce8\u610f\u529b\u51fd\u6570\u662f\u4ece\u4e00\u4e2aquery\u548c\u4e00\u7cfb\u5217\u952e\u503c\u5bf9\u6620\u5c04\u5230output\u7684\u51fd\u6570\uff0c\u8fd9\u4e9bquery\u3001\u952e\u503c\u5bf9\u90fd\u662f\u5411\u91cf\uff0coutput\u662f\u5bf9values\u7684\u52a0\u6743\u6c42\u548c\uff0c\u8fd9\u4e9b\u6743\u91cd\u53ef\u4ee5\u7531query\u548c\u5bf9\u5e94key\u7684\u5173\u7cfb\u8ba1\u7b97\u51fa\u6765\uff08compatibility function\u76f8\u4f3c\u51fd\u6570\uff09\uff0c\u4e0d\u540c\u6ce8\u610f\u529b\u673a\u5236\u6709\u4e0d\u540c\u7684\u8ba1\u7b97\u65b9\u6cd5</li> </ul> <p></p> <p></p> <p>\u4e0a\u9762\u9ec4\u8272\u548c\u7eff\u8272\u8868\u793aquery\uff0c\u548c\u84dd\u8272\u8d8a\u63a5\u8fd1\uff0c\u5bf9\u5e94\u7684\u6743\u91cd\u5c31\u8d8a\u5927</p> <ul> <li>Scaled Dot-Product Attention \u6700\u7b80\u5355\u7684\u6ce8\u610f\u529b\u51fd\u6570</li> </ul> <p>\u5c06query\u548ckey\u7684\u5185\u79ef\u4f5c\u4e3a\u76f8\u4f3c\u5ea6\uff08cos\uff09\uff0c\u5982\u679c\u4e3a0\u8bf4\u660e\u6b63\u4ea4\u3002\u7b2c\u4e8c\u6bb5\u662f\u77e9\u9635\u8fd0\u7b97\u6765\u52a0\u901f\u7684\u65b9\u6cd5</p> <p></p> <p>query\u7684\u6570\u91cf\u53ef\u80fd\u6709\\(n\\)\u4e2a\uff0ckey-value\u7684\u6570\u91cf\u662f\\(m\\)\u4e2a\uff0c\u4f46\u662fquery\u548ckey\u7684\u957f\u5ea6\u90fd\u662f\\(d_k\\)\u3002\u6700\u540e\u7ed3\u679c\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u7ed3\u679c</p> <p></p> <p>\u5176\u4ed6\u4eba\u4f7f\u7528\u7684\u6ce8\u610f\u529b\u673a\u5236\uff1aadditive attention\uff08\u5904\u7406query\u548ckey\u4e0d\u7b49\u957f\u7684\u60c5\u51b5\uff09\u548cdot-product attention\uff08\u548c\u672c\u6587\u76f8\u540c\uff0c\u9664\u4e86\u672c\u6587\u9664\u4e86\\(\\sqrt{d_k}\\)\uff09</p> <p></p> <p>\u9664\u4ee5\u8fd9\u4e2a\u6570\u7684\u539f\u56e0\u662f\uff1a\u5f53\\(d_k\\)\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u7b97\u51fa\u6765\u7684\u52a0\u6743value\u503c\u5dee\u8ddd\u8f83\u5927\uff0c\u7ecf\u8fc7softmax\u6709\u4e9b\u503c\u53d8\u62101\u6709\u4e9b\u503c\u53d8\u62100\uff0c\u6240\u4ee5\u8981\u9664</p> <p></p> <p>\u4e0a\u56femasked\u8868\u793a\u5bf9\u4e8e\\(t\\)\u65f6\u95f4\u7684query \\(q_t\\)\uff0c\u5e94\u8be5\u53ea\u770b\\(k_1,k_2,\\dots,k_{t-1}\\)\u3002\u8fd9\u91cc\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\uff1a\u5c06\\(k_t,\\dots\\)\u6362\u6210\u975e\u5e38\u5927\u7684\u8d1f\u6570\uff0c\u4f7f\u5f97\u901a\u8fc7softmax\u90fd\u662f0</p> <ul> <li>Multi-head Attention\uff1a\u5c06VKQ\u5148\u6295\u5f71\u5230\u4f4e\u7ef4\\(h\\)\u6b21\u505a\u5185\u79ef\u7136\u540e\u518d\u8fde\u63a5\u8d77\u6765\u5347\u7ef4\u3002\u539f\u56e0\uff1aScaled Dot-Product\u6ca1\u6709\u80fd\u5b66\u7684\u53c2\u6570\uff08additive attention\u91cc\u6709\u53ef\u4ee5\u5b66\u7684\u53c2\u6570\uff09</li> </ul> <p></p> <p></p> <p></p> <p>Transformer\u8f93\u5165\u8f93\u51fa\u7ef4\u5ea6\u4e00\u76f4\u662f512\uff0c\u8fd9\u91cc\\(h\\)\u7528\u7684\u662f8\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u8ba9\u6295\u5f71\u4e4b\u540e\u4e3a64\u7ef4\uff0c\u4e4b\u540e\u62fc\u8d77\u6765\u53d8\u6210512\u7ef4</p> <p>\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\u5b9e\u73b0</p> <ul> <li>\u6ce8\u610f\u529b\u7684application</li> </ul> <p></p> <p>\u7b2c\u4e00\u4e2a\u81ea\u6ce8\u610f\u529b\u5c42\uff1a\u8f93\u5165\\(n\\)\u4e2a\uff08\u53e5\u5b50\u4e2d\u8bcd\u7684\u6570\u91cf\uff09\u957f\u4e3a\\(d\\)\uff08\u6bcf\u4e2a\u8bcd\u7684feature\uff09\u7684\u5411\u91cf\u3002\u81ea\u6ce8\u610f\u529b\u8868\u793a\u8f93\u5165\u540c\u65f6\u4f5c\u4e3aquery\u548ckey\u548cvalue\u3002\u5047\u8bbe\u4e0d\u8003\u8651\u591a\u5934\uff0c\u90a3\u4e48\u4f1a\u5f97\u5230\\(n\\)\u4e2a\u957f\u4e3a\\(d\\)\u7684\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u90fd\u662f\u6240\u6709value\u7684\u52a0\u6743\u548c\uff0c\u800c\u8fd9\u4e2a\u6743\u91cd\u91cc\uff0c\u6700\u5927\u7684\u5c31\u662f\u81ea\u5df1\u548c\u81ea\u5df1\u7684\u6743\u91cd</p> <p></p> <p></p> <p>\u7b2c\u4e8c\u4e2a\u81ea\u6ce8\u610f\u529b\u5c42\uff1a\u548c\u4e0a\u9762\u57fa\u672c\u4e00\u81f4\uff0c\u9664\u4e86masked\uff0c\u6240\u4ee5\u4e0a\u56fe\u4e2d\u9ec4\u8272\u753b\u7684\u7ebf\u90fd\u8981\u7f6e\u62100</p> <p></p> <p>\u7b2c\u4e09\u4e2a\u6ce8\u610f\u529b\u5c42\uff1akey\u548cvalue\uff08\\(n\\)\u4e2a\u957f\u4e3a\\(d\\)\uff09\u6765\u81eaEncoder\uff0cquery\uff08\\(m\\)\u4e2a\u957f\u4e3a\\(d\\)\uff09\u6765\u81eaDecoder\u3002\u4f8b\u5982Encoder\u4e2dHello\u548cWorld\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a\u957f\u4e3a\\(d\\)\u7684\u5411\u91cf\u5373value\uff0c\u90a3\u4e48\u7ed3\u679c\u4e00\u5b9a\u662f\u8fd9\u4e9bvalue\u7684\u52a0\u6743\u6c42\u548c\uff0c\u800c\u8fd9\u6743\u91cd\u5c31\u662fDecoder\u4e2dquery\u548c\u5bf9\u5e94key\u7684\u76f8\u4f3c\u5ea6\uff0c\u4f8b\u5982\u201c\u4f60\u201d\u53ef\u80fd\u548c\"Hello\"\u6bd4\u8f83\u63a5\u8fd1\u5219\u6743\u91cd\u66f4\u5927\u3002</p> <ul> <li>Feed-Forward Network</li> </ul> <p>\u5c31\u662fMLP\u3002\u7279\u70b9\u662f\u201capplied to each position separately and identically\u201d\u3002\u4e0b\u9762\\(x\\)\u662f512\u7684\u5411\u91cf\uff0c\\(W_1\\)\u5c06\u5176\u6295\u5f71\u52302048\uff0c\\(W_2\\)\u5c06\u5176\u6295\u5f71\u56de\u5230512\uff0c\u5373\u5355\u9690\u85cf\u5c42\u7684MLP\u3002</p> <p></p> <ul> <li>\u518d\u770b\u67b6\u6784\u56fe</li> </ul> <p></p> <p>\u4e0b\u9762\u7684\u7ea2\u8272\u662fattention\u5c42\uff0c\u4e0a\u9762\u662f\u5bf9\u6bcf\u4e2aposition\u505aMLP\uff08\u5c3d\u7ba1\u753b\u4e86\u591a\u4e2a\u65b9\u5757\uff0c\u4f46\u662f\u6bcf\u4e2aposition\u7684MLP\u662f\u76f8\u540c\u7684\uff09\u3002attention\u7684\u4f5c\u7528\u662faggregate\u6c47\u805a\u6211\u6240\u6709\u611f\u5174\u8da3\u7684\u4fe1\u606f\uff0c\u5373\u5b8c\u6210\u4e86\u5e8f\u5217\u4fe1\u606f\u7684\u6c47\u805a\uff0c\u6240\u4ee5\u53ef\u4ee5\u5206\u5f00MLP</p> <p></p> <p>\u53f3\u8fb9\u5176\u5b9e\u548cRNN\u5f88\u50cf\uff0c\u4f46\u662f\u7528\u7684\u662fattention\u62bd\u53d6\u7684\u5e8f\u5217\u4fe1\u606f\u3002</p> <ul> <li>Embeddings and Softmax\uff1a\u7f16\u7801input\u548coutput token\uff0c\u5c06\u5176\u6620\u5c04\u5230\\(d\\)\u7ef4\u3002\u6700\u540e\u4e58\u4e00\u4e2a\\(\\sqrt{d}\\)\uff0c\u56e0\u4e3a\u7ef4\u5ea6\u5927\u4e86\u4e4b\u540e\uff0c\u4e00\u65e6\u6b63\u5219\uff0c\u6743\u91cd\u503c\u5c0f\uff0c\u6240\u4ee5\u9700\u8981\u4e58\u4ee5\u4e00\u4e2a\u6570\u3002\u53e6\u5916\u9700\u8981\u52a0Positional Encoding\u800c\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u4f1a\u56e0\u4e3aNorm\u800c\u53d8\u5c0f\u6240\u4ee5\u4e24\u8005\u9700\u8981\u5728\u76f8\u8fd1\u7684scale\u4e0a\uff0c\u6240\u4ee5\u4e58\u4e86\u8fd9\u4e2a\u6570</li> </ul> <p></p> <ul> <li>Positional Encoding</li> </ul> <p>attention\u6ca1\u6709\u65f6\u5e8f\u4fe1\u606f\uff0c\u53e5\u5b50\u6253\u4e71\u4e4b\u540e\u503c\u4e0d\u4f1a\u53d8\uff0c\u8fd9\u6709\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u91cc\u5c06\u4f4d\u7f6e1,2,3,4,5...\u52a0\u5230\u53e5\u5b50\u91cc\u9762\u3002</p> <p>\u516c\u5f0f\uff1a</p> <p></p> <p>\u4f7f\u7528\u4e0a\u9762\u7684\u516c\u5f0f\u7f16\u7801\u6570\u5b57\uff0c\u7136\u540e\u52a0\u5230Embedding\u4e4b\u540e\u7684\u5411\u91cf\u91cc\u3002\u7531\u4e8e\u662f\u4f7f\u7528sin\u548ccos\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u7f16\u7801\u662f\u5728-1\u52301\u4e4b\u95f4\u7684\uff0c\u6240\u4ee5\u4e0a\u9762\u7684embedding\u8981\u4e58\u4e00\u4e2a\u5e38\u6570\u4f7f\u5176\u5927\u81f4\u5728-1\u52301\u4e4b\u95f4</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/#why-self-attention","title":"Why Self-Attention","text":"<ul> <li>\u7b2c\u4e00\u7ec4\u662f\u8ba1\u7b97\u590d\u6742\u5ea6</li> <li>\u7b2c\u4e8c\u5217\u662f\u987a\u5e8f\u8ba1\u7b97\uff0c\u8d8a\u5c11\u5e76\u884c\u5ea6\u8d8a\u9ad8</li> <li>\u7b2c\u4e09\u5217\u662f\u4fe1\u606f\u4ece\u4e00\u4e2a\u6570\u636e\u70b9\u5230\u53e6\u4e00\u4e2a\u6570\u636e\u70b9\u8981\u8d70\u591a\u8fdc\uff0c\u8d8a\u5c0f\u8d8a\u597d\u3002\u4efb\u4f55\u4e00\u4e2aquery\u53ef\u4ee5\u548ckey\u76f4\u63a5\u505a\u8fd0\u7b97\uff0cpath\u5f88\u77ed</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/4-Transformer/#training","title":"Training","text":"<ul> <li>\u5b66\u4e60\u7387\u57fa\u672c\u4e0d\u8c03\uff0c\u4f7f\u7528\u7684\u662fAdam</li> <li>\u4f7f\u7528\u5927\u91cf\u7684dropout</li> <li>label smooth\uff1asoftmax\u7684\u7f6e\u4fe1\u5ea6\u8bbe\u7f6e\u62100.1\uff0c\u5373\u8fbe\u52300.1\u5c31\u7b97\u662f\u6b63\u786e</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/40-HELM/","title":"HELM","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/40-HELM/#helm","title":"HELM","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/40-HELM/#_1","title":"\u6807\u9898","text":"<ul> <li>Holistic Evaluation of Language Models \u5bf9\u8bed\u8a00\u6a21\u578b\u7684\u5168\u9762\u8bc4\u4f30</li> <li>\u7701\u6d41\uff1a</li> <li>InstructGPT\u76ee\u524d\u6548\u679c\u6700\u597d</li> <li>\u901a\u5e38\u662f\u8d8a\u5927\u8d8a\u597d\uff0c\u5728\u67d0\u4e2a\u9886\u57df\u6bd4\u8f83\u5f3a\u4e00\u822c\u90fd\u9700\u898150B\u4ee5\u4e0a\u7684\u6a21\u578b</li> <li>\u76ee\u524d\u6a21\u578b\u5bf9Prompt\u975e\u5e38\u654f\u611f</li> <li>\u5176\u4ed6\u7565</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/41-AnthropicLLM/","title":"AnthropicLLM","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/41-AnthropicLLM/#anthropicllm","title":"AnthropicLLM","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/41-AnthropicLLM/#_1","title":"\u6807\u9898","text":"<ul> <li>Training a Helpful and Harmless Assistant with Reinforcement Learning from Human Feedback</li> <li>Claude\u7684\u57fa\u7840</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/41-AnthropicLLM/#_2","title":"\u5f15\u8a00","text":"<ul> <li>\u6a21\u578b\u53c2\u6570\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019RLHF\u4f1a\u5bfc\u81f4\u7cbe\u5ea6\u4e0b\u964d\uff0c\u4f46\u662f\u6a21\u578b\u5927\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a</li> <li>\u63d0\u51fa\u4e00\u4e2a\u591a\u8f6e\u5bf9\u8bdd\u6570\u636e\u96c6</li> <li>\u4f7f\u7528OOD\uff08out of domain\uff09\u6765\u62d2\u7edd\u5947\u602a\u6216\u8005\u6709\u5bb3\u7684\u8f93\u5165</li> <li>\u76f8\u5173\u5de5\u4f5c</li> <li>LaMDA\uff08Bard\uff09\uff1a\u53ea\u6709\u76d1\u7763\u5b66\u4e60</li> <li>InstructGPT\uff08ChatGPT\uff09\uff1a\u4f7f\u7528\u4e86\u76d1\u7763\u5b66\u4e60\u800cAnthropic\u5168\u90e8RL\uff08\u8fd8\u7528\u5230\u4e86context distillation\uff0c\u4f46\u662f\u8fd9\u4e2a\u6280\u672f\u76f8\u5f53\u4e8eprompt engineering\uff09\uff0c\u540c\u65f6Anthropic\u4f7f\u7528\u6700\u5927\u6a21\u578b\u4f5c\u4e3aRM\u6a21\u578b\uff0c\u53e6\u5916Anthropic\u5173\u6ce8harmlessness</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/41-AnthropicLLM/#_3","title":"\u6570\u636e\u6536\u96c6","text":"<ul> <li>\u591a\u8f6e\u5bf9\u8bdd\uff0c\u4e3b\u8981\u662f\u8ba9\u4eba\u968f\u4fbf\u63d0\u95ee\u7136\u540e\u5728\u4e24\u4e2a\u6a21\u578b\u8f93\u51fa\u91cc\u9009\u54ea\u4e2a\u66f4\u597d</li> <li>\u53d1\u73b0\u6807\u6ce8\u7ed3\u679c\u7684agreement\u6bd4\u8f83\u4f4e</li> <li>\u6700\u540e\u6807\u6ce8\u4e86\u4e24\u4e2a\u6570\u636e\u96c6\uff1aHelpfulness\u548cHarmlessness</li> <li>\u524d\u8005\u662f\u8ba9\u6807\u6ce8\u5de5\u9009\u62e9\u66f4\u6709\u5e2e\u52a9\u7684response\uff0c\u540e\u8005\u662f\u8ba9\u6807\u6ce8\u5de5\u9009\u62e9\u66f4harmful\u7684response\uff0c\u8fd9\u5bfc\u81f4\u4e86\u6a21\u578b\u5206\u88c2\uff0c\u540e\u9762\u6709\u5de5\u4f5c\u53bb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/41-AnthropicLLM/#_4","title":"\u65b9\u6cd5","text":"<ul> <li>\u6a21\u578b\uff1a\u6709\u70b9\u7c7b\u4f3cInstructGPT</li> <li>\u4e00\u5f00\u59cb\u7684\u521d\u59cb\u6a21\u578b\uff0c\u6ca1\u6709\u5fae\u8c03\u8fc7\uff0c\u6bd4\u8f83\u539f\u59cb</li> <li>\u5956\u52b1\u6a21\u578b\uff0c\u4f7f\u7528\\(k=16\\)\u4f5c\u4e3a\u4e0a\u9762\u6a21\u578b\u8f93\u51fa\u7684\u4e2a\u6570</li> <li>RLHF\u5fae\u8c03\u540e\u7684\u6a21\u578b</li> <li>\u5956\u52b1\u6a21\u578b\uff1a\u5206\u6210\u4e09\u4e2a\u9636\u6bb5</li> <li>Language Model pre-training</li> <li>PMP (Preference Model Pretraining)\uff1a\u5728\u7f51\u7edc\u4e0a\u641c\u96c6comparison data\uff08\u4f8b\u5982\u70b9\u8d5e\u7b49\uff09\u6765\u8bad\u7ec3\uff0c\u5b66\u4e60\u7387\u662f0.1\uff0c\u6570\u636e\u91cf\u8f83\u5927</li> <li>\u4f7f\u7528Human Feedback\u6765\u5fae\u8c03\uff1a\u6570\u636e\u91cf\u8f83\u5c0f\uff0c\u5b66\u4e60\u7387\u4e3a0.01</li> <li>\u4ee5\u4e0a\u7a97\u53e3\u662f1024 token\uff0c\u4e4b\u540e\u5728\u7ebf\u6a21\u578b\u4f7f\u75282048 token</li> <li>RLHF\u548cInstructGPT\u5dee\u4e0d\u591a\uff0c\u4e5f\u4f7f\u7528PPO\uff0c\u4f46\u662f\u53d1\u73b0PPO\u7684\u60e9\u7f5a\u6027\u5176\u5b9e\u5bf9\u7ed3\u679c\u5f71\u54cd\u53ef\u80fd\u5e76\u4e0d\u5927</li> <li>\u5956\u52b1\u6a21\u578b PM \u7684\u7a33\u5b9a\u6027\u95ee\u9898</li> <li>\u5f53\u4e24\u4e2a\u7b54\u6848\u90fd\u6bd4\u8f83\u597d\u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0\u5956\u52b1\u6a21\u578b\u4e0d\u51c6\u7684\u60c5\u51b5</li> <li>\u5c06\u6570\u636e\u96c6\u5206\u6210\u4e24\u534a\u5e76\u5728\u6bcf\u4e00\u5757\u4e0a\u5206\u522b\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u4e00\u4e2a\u662ftrain PM\uff0c\u4e00\u4e2a\u662ftest PM\u3002\u7136\u540e\u7528train PM\u53bb\u8c03\u6a21\u578b\uff0c\u7136\u540e\u770b\u6a21\u578b\u662f\u5426\u5728test PM\u4e0a\u4e5f\u80fd\u5f97\u5230\u66f4\u9ad8\u7684\u5206\u6570\uff0c\u5982\u679c\u6ca1\u6709\u66f4\u591a\u63d0\u5347\u5c31\u8868\u793a\u8fc7\u5ea6\u4f18\u5316\u4e86</li> <li>\u53d1\u73b0train PM\u7684\u5927\u5c0f\u5927\u7684\u65f6\u5019\uff0c\u5728test PM\u4e0a\u5f97\u5230\u7684\u5206\u6570\u662f\u968f\u7740\u6a21\u578bRLHF\u5fae\u8c03\u4f9d\u65e7\u4e0d\u65ad\u4e0a\u5347\u7684</li> <li>\u4f5c\u8005\u8ba4\u4e3a \\(\\sqrt{D_{KL}}\\) \u548c Reward\uff08test PM\u4e0a\u7684\u5206\u6570\uff09 \u6709\u7ebf\u6027\u5173\u7cfb\uff08\u5f88\u7384\u5b66\uff09\uff0c\u4f5c\u8005\u8bf4\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u8ba1\u7b97\u51fa\u60f3\u8fbe\u5230\u4ec0\u4e48\u6837\u7684\u6548\u679c\u9700\u8981\u591a\u5c11\u7684\u6570\u636e\u91cf</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/42-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E7%9A%84%E7%A7%91%E7%A0%94/","title":"\u5927\u6a21\u578b\u65f6\u4ee3\u7684\u79d1\u7814","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/42-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E7%9A%84%E7%A7%91%E7%A0%94/#_1","title":"\u5927\u6a21\u578b\u65f6\u4ee3\u7684\u79d1\u7814","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/42-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E7%9A%84%E7%A7%91%E7%A0%94/#_2","title":"\u65b9\u5411","text":"<ul> <li>Efficient</li> <li>PEFT\uff1aparameter efficient fine tuning\uff0c\u505a\u5927\u6a21\u578b\u7684\u5fae\u8c03</li> <li>Exising stuff (pretained model) &amp; new directions</li> <li>\u4f8b\u5982\u4f7f\u7528CLIP\u505a\u5404\u79cd\u5e94\u7528</li> <li>Plug-and-play</li> <li>\u5373\u63d2\u5373\u7528\u7684\u6a21\u5757\uff0c\u4f8b\u5982\u65b0\u7684\u76ee\u6807\u51fd\u6570\u3001\u65b0\u7684loss\u548c\u6570\u636e\u589e\u5f3a\u7684\u65b9\u6cd5\uff0c\u5728\u80fd\u627f\u53d7\u7684baseline\u4e0a\u505a\u516c\u5e73\u5bf9\u6bd4\u8bf4\u660e\u6709\u6548\u6027</li> <li>Dataset, evaluation and survey</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/42-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E7%9A%84%E7%A7%91%E7%A0%94/#efficient","title":"Efficient","text":"<ul> <li> <p>Parameter-Efficient Transfer Learning for NLP</p> </li> <li> <p>Adapter\u5c31\u662f\u4e00\u4e2a\u4e0b\u91c7\u6837\u7684FC\u5c42+\u975e\u7ebf\u6027\u5c42+\u4e0a\u91c7\u6837\u7684FC\u5c42\uff0c\u5728\u6a21\u578b\u5fae\u8c03\u7684\u8fc7\u7a0b\u662f\u4e0d\u4f1a\u52a8Transformer Block\u4e2d\u7684\u5176\u4ed6\u6a21\u5757\u7684\u53c2\u6570</p> <p></p> </li> <li> <p>Lora\u5c31\u4f7f\u7528\u4e86PFET\u65b9\u6cd5</p> </li> <li> <p>\u76f8\u5173\u8bba\u6587\uff1aTowards A Unified View of Parameter-Efficient Transfer Learning</p> </li> <li> <p>\u6587\u672cPrompt\u76f8\u5173\u6280\u672f</p> </li> <li> <p>\u8bba\u6587\uff1aCoOp\uff08Context Optimization\uff09</p> </li> <li> <p>\u6807\u9898\uff1aLearning to Prompt for Vision-Language Models</p> </li> <li> <p></p> <p>CLIP\u7684\u5206\u7c7b\u4efb\u52a1\u7684\u63a8\u7406\uff0c\u5c31\u662f\u7528\u5404\u79cd\u6807\u7b7e\uff08Prompt\uff09\u548c\u56fe\u7247\u7b97\u76f8\u4f3c\u5ea6\uff0c\u8fd9\u79cdPrompt\u53ef\u4ee5\u4fee\u6539\u683c\u5f0f\uff0c\u4ece\u800c\u5927\u5e45\u5f71\u54cd\u6a21\u578b\u7684\u51c6\u786e\u7387</p> <p>\u4eba\u5de5\u5199\u6b7b\u7684Prompt\u662fhard prompt\uff0c\u800c\u672c\u6587\u63d0\u51fasoft prompt\u53ef\u5b66\u4e60\u7684prompt\uff0c\u5c31\u662f\u4e00\u4e2alearnable vector\u3002\u5c06\u6a21\u578b\u53c2\u6570\u9501\u4f4f\uff0c\u7136\u540e\u5b66\u4e60\u8fd9\u4e2alearnable vector</p> </li> <li> <p>\u67b6\u6784\uff1a\u548cCLIP\u4e0d\u540c\u7684\u662ftext\u7684\u8f93\u5165\u662f\u4e00\u4e2a\u53ef\u5b66\u4e60\u7684\u5411\u91cf</p> <p></p> </li> <li> <p>\u89c6\u89c9Prompt\u76f8\u5173\u6280\u672f</p> </li> <li> <p>\u8bba\u6587\uff1aVPT\uff08Visual-Prompt Tuning\uff09</p> </li> <li> <p>\u6807\u9898\uff1aVisual-Prompt Tuning</p> </li> <li> <p>\u67b6\u6784</p> <ul> <li>VPT Shallow\uff0c\u548c\u6587\u672c\u7aef\u5f88\u50cf\uff0c\u5728\u8f93\u5165\u7aef\u52a0\u4e00\u4e2alearnable prompt\u4e14\u52a0\u5728\u539f\u6765\u7684patch embedding\u4e4b\u524d\uff0c\u7136\u540e\u9501\u4f4f\u6574\u4e2a\u6a21\u578b\u53ea\u5b66\u4e60\u8fd9\u4e24\u4e2aprompt</li> <li>VPT deep\uff0c\u6bcf\u4e00\u5c42\u90fd\u4f7f\u7528prompt</li> </ul> <p></p> </li> <li> <p>AIM: Adapting Image Models for Efficient Video Action Recognition</p> </li> <li> <p>\u89c6\u9891\u52a8\u4f5c\u8bc6\u522b</p> </li> <li> <p>\u4e4b\u524d\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u9996\u5148\u6211\u4eec\u90fd\u8981\u6709\u4e00\u4e2a\u9884\u8bad\u7ec3\u7684Image\u6a21\u578b\uff082D\uff09</p> <ul> <li>\u65f6\u7a7a\u5206\u5f00\u505a\uff082D\uff09\uff0c\u5728\u5df2\u6709\u7684Image\u6a21\u578b\uff082D\uff09\u4e0a\u52a0\u65f6\u5e8f\u5904\u7406\u6a21\u5757\uff0c\u4f8b\u5982TSN\u5c06\u89c6\u9891\u5206\u6210\u591a\u6bb5\u7136\u540e\u5c06\u89c6\u9891\u62bd\u53d6\u7684\u7279\u5f81\u505a\u52a0\u6743\u5e73\u5747\uff0cTimesFormer\u5148\u505aTimeAttention\u518d\u505aSpatialAttention</li> <li> <p>\u65f6\u7a7a\u4e00\u8d77\u505a</p> </li> <li> <p>\u65f6\u7a7a\u4e00\u8d77\u505a\uff083D\uff09\uff0c\u4f7f\u75283D\u7f51\u7edc\uff08\u8f93\u5165\u662f3D\u7684\uff0c\u6a21\u578b\u4e5f\u662f3D\u7684\uff09\uff0c\u4f8b\u5982 I3D \u7b49</p> </li> </ul> </li> <li> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u6210\u672c\u90fd\u6bd4\u8f83\u5927\uff0c\u9700\u8981\u5728\u89c6\u9891\u6570\u636e\u4e0a\u505aFineTune\uff0c\u4f46\u89c6\u9891\u6570\u636e\u96c6\u5f88\u5927\uff0c\u6570\u636e IO \u6709Bottleneck\uff0c\u5bfc\u81f4\u8bad\u7ec3\u65f6\u95f4\u6781\u957f\uff0c\u8fd9\u4e9b\u8fd8\u5df2\u7ecf\u662f\u5728\u9884\u8bad\u7ec3\u6a21\u578b\u4e0aFineTune\uff0c\u5176\u4ed6train from scratch\u7684\u5c31\u66f4\u8017\u8d39\u65f6\u95f4\u4e86</p> <p></p> </li> <li> <p>\u4f5c\u8005\u8ba4\u4e3a\u5f3a\u5927\u7684\u56fe\u50cf\u6a21\u578b\u62bd\u53d6\u7684\u89c6\u9891\u7279\u5f81\u5df2\u7ecf\u5f88\u5f3a\u4e86\uff0c\u540c\u65f6\u4e0b\u6e38\u4efb\u52a1\u6570\u636e\u96c6\u4e0d\u591f\u5f3a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6a21\u578b\u8fc7\u62df\u5408\u6216\u707e\u96be\u6027\u9057\u5fd8\uff0c\u6240\u4ee5\u5c31\u6253\u7b97\u76f4\u63a5\u9501\u4f4fImage Model\uff0c\u7136\u540e\u5728\u4e0a\u9762\u52a0Adapters</p> <p>\u672c\u6587\u63d0\u51fa\u4e09\u79cdAdaptation\uff1a</p> <ul> <li>Spatial Adaptation\uff1a\u5728Self-Attention\u540e\u9762\u52a0Adapter\uff0c\u4e0d\u6dfb\u52a0\u65f6\u5e8f\u7406\u89e3\u7684\u80fd\u529b\uff0c\u53ea\u662f\u60f3\u628a\u56fe\u50cf\u7279\u5f81\u8fc1\u79fb\u5230\u89c6\u9891\u7279\u5f81\uff0c\u5c3d\u91cf\u89e3\u51b3Domain Gap\u95ee\u9898\uff0c\u53d1\u73b0\u8fd9\u4e00\u6b65\u5df2\u7ecf\u5f88\u6709\u7528\u4e86\uff0c\u4f46\u662f\u7f3a\u5c11\u65f6\u5e8f\u5efa\u6a21\u80fd\u529b\uff0c\u5728\u5f88\u591a\u6570\u636e\u96c6\u4e0a\u6548\u679c\u4ecd\u4e0d\u597d\uff0c\u6bd4\u4e0d\u8fc7full fine tune model</li> <li>Temporal Adaptation\uff1a\u590d\u7528MSA\uff0c\u53c2\u6570\u76f8\u540c\u4e14frozen\uff0c\u76ee\u7684\u662f\u60f3\u8ba9\u4e00\u4e2aMSA\u5b66Spatial\uff0c\u4e00\u4e2aMSA\u5b66Temporal\uff0c\u65b9\u6cd5\u662freshape\uff0c\u53ef\u4ee5\u770b\u5230(d)\u4e2d\u7b2c\u4e00\u4e2aMSA\u662f\u5728\\(T\\)\u4e0a\u505a\uff0c\u7b2c\u4e8c\u4e2a\u662f\\(N+1\\)\uff08sequence length\uff09\u7ef4\u5ea6\u4e0a\u505a\u81ea\u6ce8\u610f\u529b\uff0c\u7136\u540e\u518d\u52a0\u4e24\u4e2aAdapter\uff0c\u6b64\u65f6\u6027\u80fd\u5df2\u7ecf\u8fbe\u5230Full Fine Tune\u6c34\u5e73</li> <li>Joint Adaptation\uff1a\u6700\u540e\u518d\u52a0\u4e00\u4e2aAdapter\u53bb\u5b66Spatial Temporal Feature</li> </ul> <p>(e)\u5c31\u662f\u4e00\u4e2aViT Block\uff0c\u91cd\u590d12\u6b21\u5f97\u5230Vit-Base</p> <p></p> </li> <li> <p>\u53d1\u73b0\u5982\u679cImage Foundation Model\u53d8\u5f3a\uff0c\u6027\u80fd\u4e5f\u4f1a\u5927\u5e45\u63d0\u9ad8</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/42-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E7%9A%84%E7%A7%91%E7%A0%94/#exising-stuff-pretained-model-new-directions","title":"Exising stuff (pretained model) &amp; new directions","text":"<ul> <li> <p>zero shot &gt; few shot &gt; pretaining</p> </li> <li> <p>Unsupervised Semantic Segmentation With Self-Supervised Object-Centric Representations</p> </li> <li> <p>\u8bed\u4e49\u5206\u5272\u4efb\u52a1</p> </li> <li> <p>Self-Supervised\uff1a\u4f7f\u7528\u9884\u8bad\u7ec3\u597d\u7684DINO\u7f51\u7edc\u7b49\uff0c\u4e0d\u9700\u8981\u989d\u5916\u8bad\u7ec3</p> </li> <li> <p>Object-Centric Representation\uff1a\u6bd4\u8f83\u65b0\u7684\u8d5b\u9053\u3002\u4e4b\u524d\u5927\u5bb6\u5173\u6ce8\u56fe\u50cf\u6574\u4f53\u5c42\u9762\u7684\u7279\u5f81\uff0c\u8fd9\u4e2a\u8d5b\u9053\u662f\u63d0\u53d6\u7269\u4f53\u5c42\u9762\u7684\u7279\u5f81\uff0c\u56e0\u4e3a\u4eba\u4f1a\u5148\u89c2\u5bdf\u4eba\u518d\u89c2\u5bdf\u7269\u4f53\u7136\u540e\u89c2\u5bdf\u4eba\u4e0e\u7269\u4f53\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\u672c\u6587\u5173\u6ce8\u5982\u4f55\u65e0\u76d1\u7763\u6216\u81ea\u76d1\u7763\u5730\u5b66\u4e60\u7269\u4f53\u7279\u5f81\u3002</p> <p>\u9996\u5148\u5148\u7528DeepUSPS\uff08\u7ed9\u5b9a\u56fe\u7247\u4f1a\u63d0\u53d6\u51fa\u663e\u8457\u7269\u4f53\u7684Mask\uff09\u62bd\u53d6saliency mask label\uff0c\u5982\u6b64\u89e3\u51b3\u5b9a\u4f4d\u95ee\u9898\uff1b\u7136\u540e\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\uff0c\u5c06\u6263\u51fa\u7684\u8fd9\u4e9b\u56fe\u5f62\u4e4b\u540e\u7136\u540eresize\u6210224*224\u6254\u7ed9DINO\u7f51\u7edc\uff0c\u5f97\u5230representations\uff1b\u7136\u540e\u505a\u65e0\u76d1\u7763\u7684\u805a\u7c7b\uff0c\u5f97\u5230pseudo masks\uff08\u5373\u80fd\u544a\u8bc9\u4f60\u6bcf\u4e2a\u4e1c\u897f\u662f\u7c7b0\u6216\u662f\u7c7b1\u6216\u662f\u7c7b2\uff0c\u53ea\u662f\u4e00\u4e2aid\uff09\uff1b\u6709\u4e86\u56fe\u50cf\u548cmask label\u5c31\u53ef\u4ee5\u6709\u76d1\u7763\u5730\u8bad\u7ec3\u4e00\u4e2asemantic segmentation network\uff08\u4f8b\u5982DeepLab v3\uff09</p> <p></p> </li> <li> <p>\u6700\u8fd1\u8be5\u65b9\u5411\u5377\u8d77\u6765\u4e86\uff0c\u56e0\u4e3a\u6709CLIP\u7684Language Guided Segmentation</p> </li> <li> <p>\u5173\u6ce8\u4e00\u4e9b\u65b0\u7684topic\u5305\u62ec\u56e0\u679c\u5b66\u4e60\u3001Feedforward Network\uff08FFNet\uff09\u3001In-Context Learning\u3001Chain of Thought Prompting</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/42-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E7%9A%84%E7%A7%91%E7%A0%94/#plug-and-play","title":"Plug-and-play","text":"<ul> <li>\u53ef\u4ee5\u5728ResNet\u540e\u9762\u52a0\u4e00\u4e2aNon-Local\uff0c\u6216\u8005\u662f\u4e00\u4e2aloss\u4f8b\u5982Focal Loss\uff0c\u8fd8\u6709\u6570\u636e\u589e\u5f3a\uff08\u53ef\u4ee5\u4e0d\u53d7\u9650\u4e8e\u4efb\u52a1\u548c\u6a21\u6001\uff09\u4f8b\u5982MixUp</li> <li>\u8bc1\u660e\u67d0\u4e2a\u65b9\u6cd5\u7684\u6709\u6548\u6027\u53ef\u4ee5\u4e0d\u5237\u699c\uff08\u5149\u5237\u699c\u8fd8\u6709\u53ef\u80fd\u662foverfit\uff09\uff0c\u53ea\u9700\u8981\u8bc1\u660e\u5728\u591a\u4e2a\u6570\u636e\u96c6\u4e0a\u6709\u63d0\u5347\u6709\u6cdb\u5316\u6027\u6709\u5408\u9002\u5206\u6790</li> <li>MixGen: A New Multi-Modal Data Augmentation</li> <li>\u591a\u6a21\u6001\u7684\u6570\u636e\u589e\u5f3a</li> <li>\u5f00\u9898\u7684\u65f6\u5019\uff0c\u60f3\u7684\u662fCross-Modality Distillation\uff0c\u5c31\u662fVLMo\u8bc1\u660e\u56fe\u50cf\u548c\u6587\u672c\u53ef\u4ee5\u5171\u4eab\u81ea\u6ce8\u610f\u529b\u5c42\uff0c\u56e0\u4e3a\u6587\u672c\u6a21\u578b\u5927\u800c\u56fe\u50cf\u6a21\u578b\u5c0f\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u6587\u672c\u6a21\u578b\u84b8\u998f\u6210\u4e00\u4e2a\u56fe\u50cf\u6a21\u578b\uff0c\u6216\u8005\u53cd\u8fc7\u6765\uff0c\u53d1\u73b0\u63d0\u9ad8\u5f88\u5c0f\u4e14\u6210\u672c\u6bd4\u8f83\u5927</li> <li>\u540e\u6765\u53d1\u73b0\u591a\u6a21\u6001\u8bba\u6587\u8981\u4e48\u89c9\u5f97\u6570\u636e\u96c6\u592a\u5927\u4e0d\u9700\u8981\u505a\u6570\u636e\u589e\u5f3a\uff0c\u8981\u4e48\u53bb\u6389\u4e86\u4e00\u4e9b\u6570\u636e\u589e\u5f3a\uff08\u4e3b\u8981\u662fColor Jittering\u548cRandom Flip\uff0c\u4f1a\u5bfc\u81f4\u989c\u8272\u548c\u65b9\u5411\u5bf9\u4e0d\u4e0a\uff09\u3002\u4f5c\u8005\u8ba4\u4e3a\u6570\u636e\u589e\u5f3a\u5bf9CV\u662f\u5f88\u6709\u7528\u7684</li> <li>\u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u7684\u4fdd\u7559\u4fe1\u606f\uff1a<ul> <li>\u56fe\u50cf\uff1aMixUp\uff0c\u5373\u5c06\u4e24\u5f20\u56fe\u76f4\u63a5\u505a\u7ebf\u6027\u63d2\u503c\uff0c\u867d\u7136\u751f\u6210\u7684\u56fe\u7247\u5f88\u602a\u4f46\u662f\u57fa\u672c\u4e0d\u4f1a\u4e22\u5931\u4fe1\u606f</li> <li>\u6587\u672c\uff1a\u76f4\u63a5\u5c06\u4e24\u4e2a\u6587\u672c\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u4e0d\u4f1a\u4e22\u5931\u4efb\u4f55\u4fe1\u606f</li> </ul> </li> <li>\u5ba1\u7a3f\u4eba\u63d0\u51fa\u610f\u89c1\uff1a\u9884\u8bad\u7ec3\u7684\u65f6\u5019\u591a\u6a21\u6001\u6570\u636e\u96c6\u5f88\u591a\uff0c\u4f46\u662f\u4e0b\u6e38\u4efb\u52a1\u6570\u636e\u5c11\uff0c\u53ef\u4ee5\u8003\u8651\u5728\u4e0b\u6e38\u4efb\u52a1FineTune\u65f6\u505a\u6570\u636e\u589e\u5f3a\u3002\u4f46\u662f\u4f5c\u8005\u53d1\u73b0\u5f88\u591a\u4e0b\u6e38\u4efb\u52a1MixGen\u6709\u70b9\u96be\uff0c\u6bd4\u5982VQA\u662f\u4e00\u4e2a\u56fe\u50cf\u4e24\u4e2a\u6587\u672c</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/42-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E7%9A%84%E7%A7%91%E7%A0%94/#dataset-evaluation-and-survey","title":"Dataset, evaluation and survey","text":"<ul> <li>BigDetection: A Large-scale Benchmark for Improved Object Detector Pre-training</li> <li>\u505a\u6570\u636e\u96c6\u4e0d\u4e00\u5b9a\u8d35\uff0c\u672c\u6587\u5c06\u4e09\u4e2a\u6570\u636e\u96c6\u5408\u5230\u4e00\u8d77</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/5-GNN/","title":"GNN","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/5-GNN/#gnn","title":"GNN","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/5-GNN/#_1","title":"\u4ec0\u4e48\u662f\u56fe","text":"<ul> <li>\u6211\u4eec\u5173\u5fc3V\uff0cE\uff0cU\u7684attributes</li> </ul> <ul> <li>\u6bcf\u4e2aV\uff0cE\uff0cU\u90fd\u53ef\u4ee5\u7528\u4e00\u4e2a\u5411\u91cf\u8868\u793a</li> </ul> <ul> <li>\u56fe\u7247\u53ef\u4ee5\u8868\u793a\u6210\u56fe\uff1a\u76f8\u90bb\u7684\u50cf\u7d20\u90fd\u8fde\u63a5\u8d77\u6765</li> </ul> <ul> <li>\u6587\u672c\u53ef\u4ee5\u8868\u793a\u6210\u8fb9</li> </ul> <ul> <li> <p>\u54ea\u4e9b\u95ee\u9898\u6709\u56fe\u7ed3\u6784\u7684data</p> </li> <li> <p>\u56fe\u5c42\u9762\u4efb\u52a1\uff1a\u4f8b\u5982\u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u6709\u73af\uff0c\u53ef\u4ee5\u4e0d\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u5373\u53ef</p> </li> <li> <p>\u9876\u70b9\u5c42\u9762\u7684\u4efb\u52a1\uff1a\u4e24\u4e2a\u9876\u70b9\u4ee3\u8868\u7684\u4eba\u51b3\u88c2\u4e4b\u540e\uff0c\u5176\u4ed6\u548c\u4ed6\u4eec\u4e24\u4e2a\u6709\u793e\u4ea4\u5173\u7cfb\u7684\u4eba\u51b3\u5b9a\u662f\u5426\u548c\u4ed6\u4eec\u4e00\u8d77</p> <p></p> </li> <li> <p>\u8fb9\u5c42\u9762\u7684\u4efb\u52a1\uff1a\u5148\u5bf9\u56fe\u8fdb\u884c\u8bed\u4e49\u5206\u5272\uff0c\u7136\u540e\u7528\u56fe\u795e\u7ecf\u7f51\u7edc\u5b66\u4e60\u5176\u5173\u7cfb</p> <p></p> </li> <li> <p>\u673a\u5668\u5b66\u4e60\u4e2d\u4f7f\u7528\u56fe\u7684\u6311\u6218</p> </li> <li> <p>\u70b9\u3001\u8fb9\u3001\u5168\u5c40\u4fe1\u606f\u90fd\u662f\u5411\u91cf\u6bd4\u8f83\u597d\u5904\u7406\uff0c\u4f46\u662f\u8fde\u901a\u6027\u5982\u679c\u7528\u90bb\u63a5\u77e9\u9635\u5f00\u9500\u5c31\u8fc7\u4e8e\u5927\u4e86</p> </li> <li> <p>\u90bb\u63a5\u77e9\u9635\u53ef\u4ee5\u6709\u591a\u79cd\u8868\u8fbe</p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/5-GNN/#_2","title":"\u56fe\u795e\u7ecf\u7f51\u7edc","text":"<ul> <li>\u5b9a\u4e49\uff1a\u91cd\u70b9\u662fperserve graph symmetries\u3002\u4f7f\u7528\u7684\u6846\u67b6\u662fmessage passing neural network\uff0c\u56fe\u8fdb\u56fe\u51fa\uff0c\u4e0d\u4f1a\u4fee\u6539\u8fde\u901a\u6027</li> </ul> <ul> <li>\u6700\u7b80\u5355\u7684CNN\uff1a\u5bf9\u9876\u70b9\u3001\u8fb9\u548c\u5168\u5c40\u5404\u901a\u8fc7\u4e00\u4e2aMLP\u6784\u6210\u4e86GNN\u7684\u4e00\u4e2a\u5c42</li> </ul> <ul> <li> <p>\u6700\u540e\u4e00\u5c42\u7684\u8f93\u51fa\u5f97\u5230\u9884\u6d4b\u503c</p> </li> <li> <p>\u4f8b\uff1a\u5bf9\u6bcf\u4e2a\u9876\u70b9\u505a\u9884\u6d4b\u3002\u6bcf\u4e2a\u9876\u70b9\u90fd\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u5982\u679c\u505a\u4e8c\u5206\u7c7b\uff0c\u5c31\u901a\u8fc7\u4e00\u4e2a\u8f93\u51fa\u7ef4\u5ea6\u4e3a2\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u7136\u540e\u52a0\u4e2asoftmax\u5f97\u5230\u8f93\u51fa</p> <p></p> </li> <li> <p>Pooling\uff0c\u5982\u679c\u67d0\u4e2a\u70b9\u6ca1\u6709\u5411\u91cf\uff0c\u90a3\u4e48\u5c31\u53d6\u5b83\u6240\u6709\u76f8\u90bb\u8fb9\u7684\u5411\u91cf\u4ee5\u53ca\u5168\u5c40\u5411\u91cf\u76f8\u52a0\uff0c</p> <p></p> <p>\u6240\u4ee5\u5982\u679c\u6ca1\u6709\u8fb9\u7684\u5411\u91cf\u4fe1\u606f\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u70b9\u7684\u5411\u91cf\u4fe1\u606f\u6765\u805a\u5408Pooling\u3002\u53cd\u4e4b\u4ea6\u7136</p> <p></p> <p></p> </li> <li> <p>\u7f51\u7edc\u7ed3\u6784\uff1a\u4e0d\u540c\u5c5e\u6027\u7ecf\u8fc7GNN\u5c42\u5f97\u5230\u53d8\u5316\u4e4b\u540e\u7684\u56fe\uff0c\u7136\u540e\u7528\u805a\u5408\u64cd\u4f5c\u5f97\u5230\u5e0c\u671b\u9884\u6d4b\u7684\u5c5e\u6027\uff0c\u7136\u540e\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\u5f97\u5230\u6700\u540e\u7684Prediction</p> <p></p> </li> <li> <p>\u4e0a\u8ff0\u7ed3\u6784\u5b58\u5728\u95ee\u9898\uff0c\u70b9\u4e0e\u70b9\u7684\u76f8\u90bb\u5173\u7cfb\u7b49\u90fd\u6ca1\u6709\u5305\u542b\u8fdb\u53bb</p> </li> <li> <p>Message passing\u4fe1\u606f\u4f20\u9012</p> </li> <li> <p>\u8fdb\u5165MLP\u4e4b\u524d\uff0c\u8f93\u5165\u70b9\u76f8\u90bb\u7684\u70b9\u4e5f\u8981\u8f93\u5165\u5230MLP\u4e2d</p> <p></p> </li> <li> <p>\u4fe1\u606f\u4f20\u9012\u6700\u7b80\u5355\u7684\u662f\u4e00\u8fd1\u90bb\u3002</p> <p></p> </li> <li> <p>\u53e6\u5916\u53ef\u4ee5\u4e0d\u5728\u6700\u540e\u4e00\u5c42\u505aPooling\uff0c\u53ef\u4ee5\u63d0\u524d\u5728\u524d\u9762\u7684\u5c42\u5148\u6c47\u805a\u8d77\u6765</p> </li> <li> <p>\u4f8b\u5b50\uff1a\\(\\rho(V_n\\rightarrow E_n)\\)\u8868\u793a\u5c06\u9876\u70b9\u4fe1\u606f\u6c47\u805a\u5230\u8fb9\u4e0a</p> <p></p> </li> <li> <p>\u5168\u5c40\u4fe1\u606f</p> </li> <li> <p>\u67d0\u4e9b\u70b9\u76f8\u8ddd\u8f83\u8fdc\uff0c\u9700\u8981\u6bd4\u8f83\u957f\u65f6\u95f4\u624d\u80fd\u4f20\u9012\u5230</p> </li> <li> <p>\u52a0\u5165\u4e00\u4e2a\u865a\u62df\u7684\u70b9 master node\u6216\u8005\u53eb context vector</p> <p></p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/5-GNN/#_3","title":"\u5b9e\u9a8c","text":"<p>\u7565</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/5-GNN/#_4","title":"\u76f8\u5173\u6280\u672f","text":"<ul> <li> <p>\u91c7\u6837</p> </li> <li> <p>CNN\u4e2d\u4f1a\u4f7f\u7528\u968f\u673a\u91c7\u6837\u3002GNN\u4e2d\u4f7f\u7528\u7684\u662f\u5982\u4e0b\u7b56\u7565</p> <p></p> </li> <li> <p>GNN\u7684\u5047\u8bbe\uff1a\u56fe\u7684\u8fde\u901a\u6027</p> </li> <li> <p>GCN\uff1a\u56fe\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u5e26\u6c47\u805a\u7684GNN</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/6-GAN/","title":"GAN","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/6-GAN/#gan","title":"GAN","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/6-GAN/#abstract","title":"Abstract","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/6-GAN/#introduction","title":"Introduction","text":"<ul> <li>\u6df1\u5ea6\u5b66\u4e60\u5728\u751f\u6210\u4e0a\u7684\u95ee\u9898</li> </ul> <p>\u6df1\u5ea6\u751f\u6210\u6a21\u578b\u7684\u5f71\u54cd\u8f83\u5c0f\uff0c\u8fd9\u662f\u7531\u4e8e\u5728\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u548c\u76f8\u5173\u7b56\u7565\u4e2d\u51fa\u73b0\u4e86\u8bb8\u591a\u96be\u4ee5\u8fd1\u4f3c\u7684\u6982\u7387\u8ba1\u7b97\uff0c\u5e76\u4e14\u5f88\u96be\u5229\u7528\u5206\u6bb5\u7ebf\u6027\u5355\u5143\u5728\u751f\u6210\u73af\u5883\u4e2d\u7684\u4f18\u52bf\u3002\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u751f\u6210\u6a21\u578b\u4f30\u8ba1\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u907f\u5f00\u8fd9\u4e9b\u56f0\u96be\u3002</p> <ul> <li> <p>\u751f\u6210\u6a21\u578b\uff1a\u9020\u5047\u8005\uff1b\u5224\u522b\u6a21\u578b\uff1a\u8b66\u5bdf</p> </li> <li> <p>\u751f\u6210\u6a21\u578b\u662f\u4e00\u4e2aMLP\uff0c\u901a\u8fc7\u968f\u673a\u566a\u97f3\u751f\u6210sample\uff1b\u5224\u522b\u6a21\u578b\u4e5f\u7528MLP</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/6-GAN/#related-work","title":"Related Work","text":"<ul> <li>\u4e4b\u524d\u7684\u5de5\u4f5c\u90fd\u662f\u6784\u9020\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0c\u7136\u540e\u63d0\u4f9b\u53c2\u6570\u4f9b\u4ed6\u5b66\u4e60\uff0c\u8fd9\u4e9b\u53c2\u6570\u901a\u8fc7\u6700\u5927\u5316\u5b83\u7684\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u6765\u4f30\u8ba1\uff0c\u4f46\u662f\u8fd9\u4e9b\u8ba1\u7b97\u6bd4\u8f83\u56f0\u96be\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u5206\u5e03\u51fd\u6570\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u5177\u4f53\u7684\u5747\u503c\u65b9\u5dee\u7b49</li> </ul> <p>\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u662f\u4e00\u79cd\u7528\u4e8e\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u7684\u51fd\u6570\u3002\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u662f\u4e00\u79cd\u7edf\u8ba1\u63a8\u65ad\u65b9\u6cd5\uff0c\u7528\u4e8e\u4f30\u8ba1\u53c2\u6570\u503c\uff0c\u4f7f\u5f97\u7ed9\u5b9a\u89c2\u6d4b\u6570\u636e\u7684\u6761\u4ef6\u4e0b\uff0c\u8be5\u53c2\u6570\u4e0b\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u6216\u6982\u7387\u8d28\u91cf\u51fd\u6570\u6700\u5927\u5316\u3002</p> <p>\u5728\u6570\u5b66\u4e2d\uff0c\u7ed9\u5b9a\u6570\u636e\u6837\u672c\u96c6\u5408\uff0c\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u662f\u6307\u8fd9\u4e2a\u6837\u672c\u96c6\u5408\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u6216\u6982\u7387\u8d28\u91cf\u51fd\u6570\u7684\u5bf9\u6570\u5f62\u5f0f\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u503c\u8d8a\u5927\uff0c\u8868\u793a\u8be5\u53c2\u6570\u4f30\u8ba1\u503c\u8d8a\u4f18\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u7684\u5f62\u5f0f\u662f\u4e00\u4e2a\u5173\u4e8e\u53c2\u6570\u7684\u51fd\u6570\uff0c\u7528\u53c2\u6570\u7684\u4f30\u8ba1\u503c\u4ee3\u5165\u51fd\u6570\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\u6700\u5927\u5316\uff0c\u5373\u662f\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u7684\u7ed3\u679c\u3002</p> <p>\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u7684\u4f7f\u7528\u53ef\u4ee5\u7b80\u5316\u8ba1\u7b97\uff0c\u56e0\u4e3a\u5c06\u4f3c\u7136\u51fd\u6570\u53d6\u5bf9\u6570\u540e\uff0c\u53ef\u4ee5\u5c06\u8fde\u4e58\u53d8\u4e3a\u8fde\u52a0\uff0c\u51cf\u5c11\u4e86\u6570\u503c\u8ba1\u7b97\u7684\u590d\u6742\u5ea6\u3002\u6b64\u5916\uff0c\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u8fd8\u6709\u5176\u5b83\u4e00\u4e9b\u4f18\u70b9\uff0c\u5982\u907f\u514d\u6570\u503c\u4e0b\u6ea2\u3001\u6613\u4e8e\u6c42\u5bfc\u7b49\u3002</p> <p>\u751f\u6210\u6a21\u578b\u662f\u4e00\u79cd\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u7528\u4e8e\u5b66\u4e60\u6837\u672c\u6570\u636e\u7684\u6982\u7387\u5206\u5e03\u51fd\u6570\u3002\u4e0e\u751f\u6210\u6a21\u578b\u76f8\u5bf9\u5e94\u7684\u662f\u5224\u522b\u6a21\u578b\uff0c\u5224\u522b\u6a21\u578b\u76f4\u63a5\u4ece\u8f93\u5165\u5230\u8f93\u51fa\u6620\u5c04\uff0c\u4e0d\u8003\u8651\u6570\u636e\u7684\u5206\u5e03\u60c5\u51b5\u3002</p> <p>\u751f\u6210\u6a21\u578b\u901a\u5e38\u57fa\u4e8e\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0c\u7528\u4e8e\u751f\u6210\u4e0e\u6837\u672c\u6570\u636e\u7c7b\u4f3c\u7684\u65b0\u6570\u636e\u3002\u56e0\u6b64\uff0c\u751f\u6210\u6a21\u578b\u9700\u8981\u5bf9\u6837\u672c\u6570\u636e\u7684\u6982\u7387\u5206\u5e03\u8fdb\u884c\u5efa\u6a21\uff0c\u4ee5\u4fbf\u751f\u6210\u65b0\u7684\u6570\u636e\u3002</p> <p>\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u53ef\u4ee5\u88ab\u7528\u6765\u8bc4\u4f30\u6982\u7387\u5206\u5e03\u51fd\u6570\u7684\u8d28\u91cf\uff0c\u56e0\u4e3a\u5b83\u662f\u8861\u91cf\u6a21\u578b\u5bf9\u6837\u672c\u6570\u636e\u62df\u5408\u7684\u5e38\u7528\u6307\u6807\u3002\u901a\u5e38\uff0c\u751f\u6210\u6a21\u578b\u4f7f\u7528\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u4f5c\u4e3a\u76ee\u6807\u51fd\u6570\u8fdb\u884c\u4f18\u5316\uff0c\u4ee5\u6700\u5927\u5316\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u7684\u503c\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u6700\u5927\u5316\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u53ef\u4ee5\u4f7f\u5f97\u751f\u6210\u6a21\u578b\u7684\u8f93\u51fa\u66f4\u52a0\u63a5\u8fd1\u4e8e\u6837\u672c\u6570\u636e\u7684\u771f\u5b9e\u5206\u5e03\uff0c\u4ece\u800c\u63d0\u9ad8\u6a21\u578b\u7684\u751f\u6210\u80fd\u529b\u3002\u6b64\u5916\uff0c\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u7684\u4f18\u5316\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d\u7b49\u4f18\u5316\u7b97\u6cd5\u8fdb\u884c\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u503c\u4f18\u5316\u65b9\u6cd5\u6765\u6c42\u89e3\u6700\u4f18\u7684\u6a21\u578b\u53c2\u6570\uff0c\u4ee5\u6700\u5927\u5316\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u7684\u503c\u3002</p> <p>\u56e0\u6b64\uff0c\u751f\u6210\u6a21\u578b\u901a\u5e38\u4f1a\u6784\u9020\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0c\u5e76\u901a\u8fc7\u6700\u5927\u5316\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u6765\u8bad\u7ec3\u6a21\u578b\uff0c\u4ee5\u4fbf\u751f\u6210\u4e0e\u6837\u672c\u6570\u636e\u7c7b\u4f3c\u7684\u65b0\u6570\u636e\u3002</p> <ul> <li> <p>\u672c\u6587\u662f\u6784\u9020\u4e00\u4e2a\u6a21\u578b\u6765\u8fd1\u4f3c\u4e00\u4e2a\u5206\u5e03\uff0c\u574f\u5904\u662f\u4e0d\u77e5\u9053\u5206\u5e03\u662f\u4ec0\u4e48\u6837\u5b50</p> </li> <li> <p>\u7406\u8bba\u57fa\u7840\uff1a\u5bf9\u671f\u671b\u7684\u6c42\u5bfc\u7b49\u4e8e\u5bf9f\u7684\u6c42\u5bfc</p> </li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/6-GAN/#_1","title":"\u6a21\u578b","text":"<ul> <li> <p>\u4e00\u4e2a\u6bd4\u55bb\uff1a\u73b0\u5728\u6709\u4e2a\u6e38\u620f\uff0c\u5b83\u7684\u753b\u9762\u662f800\u4e07\u50cf\u7d20\u7684\u56fe\u50cf\uff0c\u6211\u8981\u7528\u751f\u6210\u5668\u8fd1\u4f3c\u751f\u6210\u51fa\u8fd9\u4e2a\u6e38\u620f\u3002\u751f\u6210\u5668\u662f\u4e00\u4e2a\u6982\u7387\u5206\u5e03\\(p_g\\)\uff08\u5373\u6211\u4eec\u5b66\u51fa\u6765\u7684\u201c\u5047\u201d\u6e38\u620f\uff09\uff0c800\u4e07\u50cf\u7d20\u7684\u56fe\u7247\u662f\u76ee\u6807 \\(x\\)\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6765\u81ea\u4e8e\u8fd9\u4e2a\\(p_g\\)\u3002\u6211\u4eec\u9996\u5148\u5728\u4e00\u4e2a\u8f93\u5165\u566a\u97f3 \\(z\\) \uff08\\(z\\) \u53ef\u4ee5\u662f\u4e00\u4e2a100\u7ef4\u7684\u5411\u91cf\uff0c\u5176\u4e2d\u5143\u7d20\u5747\u503c\u4e3a0\u65b9\u5dee\u4e3a1\u7684\u9ad8\u65af\u566a\u97f3\uff09\u4e0a\u5b9a\u4e49\u4e00\u4e2a\u5148\u9a8c\u7684\u6982\u7387 \\(p_z(z)\\)\uff0c\u751f\u6210\u6a21\u578b\u5c31\u662f\u5c06 \\(z\\) \u6620\u5c04\u6210 \\(x\\)\uff08\u6211\u8ba4\u4e3a\u4e00\u4e2a100\u7ef4\u7684\u53d8\u91cf\u5c31\u51b3\u5b9a\u4e86\u8fd9\u4e2a\u6e38\u620f\u903b\u8f91\uff0c\u5b9e\u9645\u4e0a\u4e0d\u77e5\u9053\u771f\u5b9e\u6e38\u620f\u7684\u4ee3\u7801\uff09\uff0c\u5b83\u6709\u4e00\u4e2a\u53ef\u5b66\u4e60\u7684\u53c2\u6570 \\(\\theta_g\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u751f\u6210\u5668\u5b9a\u4e49\u4e3a \\(G(z;\\theta_g)\\)\u3002\u6240\u4ee5\u6bcf\u6b21\u90fd\u968f\u673a\u4e00\u4e2a \\(z\\) \u53bb\u770b\u751f\u6210\u7684\u6548\u679c\u3002</p> </li> <li> <p>\u5224\u522b\u5668\u662fMLP\u52301\u62160\u7684\u51fd\u6570\uff0c1\u8868\u793a\u662f\u771f\u56fe\uff0c0\u8868\u793a\u5047\u56fe</p> </li> <li> <p>\u6240\u4ee5\\(G\\)\u8981\u6700\u5c0f\u5316 \\(\\log (1-D(G(z)))\\)\uff0c\u8ba9\\(D\\)\u5c3d\u91cf\u72af\u9519\uff0c\u4e0d\u8ba9\u4ed6\u5206\u8fa8\u51fa\u6765\u3002</p> </li> <li> <p>\u76ee\u6807\uff1a\\(x\\sim p_{data}(x)\\) \u8868\u793a \\(x\\) \u662f\u91c7\u6837\u771f\u5b9e\u5206\u5e03\uff0c\u7b2c\u4e00\u9879\u5982\u679c \\(D\\) \u662f\u5b8c\u7f8e\u7684\u90a3\u4e48 \\(D(x)=1,\\log D(x)=0\\)\uff0c\u5426\u5219\u4e3a\u8d1f\u6570\uff1b\u7b2c\u4e8c\u9879\uff0c\u91c7\u6837\u566a\u97f3\uff0c\u5982\u679c \\(D\\) \u662f\u5b8c\u7f8e\u7684\uff0c\u90a3\u4e48 \\(D(G(z))=0,\\log(1-D(G(z)))=0\\)\uff0c\u5426\u5219\u4e3a\u8d1f\u6570\uff0c\u6240\u4ee5\u8981 \\(\\max\\limits_{D}\\)\u3002</p> </li> </ul> <p></p> <ul> <li> <p>\u8fbe\u5230\u5747\u8861\u5c31\u662f\u7eb3\u4ec0\u5747\u8861</p> </li> <li> <p>\u4f8b\u5b50\uff1a\u4e0b\u56fe\u9ed1\u70b9\u7ebf\\(p_x\\)\u662f\u6570\u636e\u771f\u5b9e\u5206\u5e03\uff0c\u7eff\u8272\u7ebf\\(p_g\\)\u662f\u751f\u6210\u5668\u7684\u5206\u5e03\uff0c\u84dd\u8272\u70b9\u7ebf\u662f\\(D\\)\u662f\u5224\u522b\u5668\u7684\u5206\u5e03\u3002\u56fe(b)\u4e2d\u53ef\u4ee5\u770b\u5230\u63a5\u8fd1\u9ed1\u70b9\u7ebf\u7684\u65f6\u5019\uff0c\u5224\u522b\u5668\u9760\u8fd11\uff0c\u63a5\u8fd1\u7eff\u7ebf\u9760\u8fd10\uff0c(c)\u4e2d\u5c06\u7eff\u7ebf\u5f80\u9ed1\u70b9\u7ebf\u9760\u8fd1\uff0c\u4f7f\u5f97\u5224\u522b\u5668\u5bf9\u4e24\u4e2a\u533a\u5206\u5f88\u56f0\u96be\uff0c\u6700\u540e\u56fe(d)\u4e2d\u5224\u522b\u5668\u6c38\u8fdc\u7ed9\u51fa0.5</p> </li> </ul> <p></p> <ul> <li>\u7b97\u6cd5\uff1a\u6bcf\u6b21\u8fed\u4ee3\uff08\u6700\u5916\u5c42\u7684for-loop\uff09\u91cc\uff0c\u5148\u8fdb\u884c\\(k\\)\u6b21\\(2m\\)\u5927\u5c0f\u7684\u5c0f\u6279\u91cf\u91c7\u6837\uff08\u566a\u97f3\u6837\u672c\u548c\u771f\u5b9e\u6837\u672c\u5404\u4e00\u534a\uff09\uff0c\u7136\u540e\u5bf9\\(D\\)\u8fdb\u884c\u68af\u5ea6\u66f4\u65b0\uff0c\u7136\u540e\u518d\u91c7\u6837\\(m\\)\u7684\u566a\u97f3\u6837\u672c\u5bf9\\(G\\)\u8fdb\u884c\u68af\u5ea6\u66f4\u65b0\u3002</li> </ul> <p>\u8fd9\u91cc\\(k\\)\u662f\u8d85\u53c2\u6570\uff0c\u5982\u679c\u5bf9\\(D\\)\u6ca1\u6709\u8db3\u591f\u597d\u7684\u66f4\u65b0\uff0c\u90a3\u4e48\u4e0b\u9762\u4e00\u9879\u4e2d\\(D\\)\u6ca1\u6709\u5347\u7ea7\uff0c\\(G\\)\u7684\u5347\u7ea7\u5c31\u6ca1\u6709\u610f\u4e49\u53cd\u6b63\u603b\u80fd\u7cca\u5f04\u8fc7\u53bb\uff1b\u4f46\u662f\u5982\u679c\\(D\\)\u66f4\u65b0\u7684\u592a\u5b8c\u7f8e\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7ed3\u679c\u4e3a0\uff0c\u6ca1\u6709\u68af\u5ea6</p> <p>\u5224\u65ad\u6536\u655b\u6bd4\u8f83\u96be\u3002</p> <p></p> <ul> <li>\u95ee\u9898\uff1a\u4e00\u5f00\u59cb\\(G\\)\u5f88\u5f31\uff0c\u5f88\u5bb9\u6613\u5c06\\(D\\)\u8bad\u7ec3\u5230\u5b8c\u7f8e\uff0c\u5bfc\u81f4\u68af\u5ea6\u6d88\u5931\uff0c\u53ef\u4ee5\u8003\u8651\u6700\u5927\u5316\\(\\log D(G(z))\\)\uff0c\u4f46\u662f\\(\\log 0\\)\u4f1a\u6709\u6570\u5b66\u4e0a\u7684\u95ee\u9898\uff0c\u540e\u6765\u4f1a\u6709\u6539\u8fdb</li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/6-GAN/#_2","title":"\u7406\u8bba","text":"<ul> <li>\u4e0b\u56fe\u4e2d\\(p\\)\u8868\u793a\u6982\u7387\u5206\u5e03\uff080\u52301\u7684\u503c\uff09\uff0c\u5982\u679c\u6700\u540e\\(p_{data}=p_{g}\\)\u90a3\u4e48\\(D^*_G=\\frac12\\)\uff0c\u4e8c\u5206\u7c7b\u5668\u533a\u5206\u4e24\u4e2a\u5206\u5e03\u7684\u5f88\u597d\u7684\u529e\u6cd5</li> </ul> <ul> <li>\u6982\u7387\u8bba\u671f\u671b\u7684\u6c42\u89e3\uff1a   $$   E_{x\\sim p}f(x)=\\int_xp(x)f(x)dx   $$   </li> </ul> <p>\u6ce8\u610f\uff1a\\(g(z)=x\\)</p> <p></p> <p>\u5bf9 \\(a\\log(y)+b\\log (1-y)\\)\u6c42\u5bfc\u5373\u53ef\u5f97\u6700\u5927\u503c\uff0c\u5b83\u662f\u51f8\u51fd\u6570</p> <ul> <li>\u6c42\u51fa \\(\\max\\limits_{D}\\)\uff1a</li> </ul> <p></p> <ul> <li>\u518d\u6c42 \\(\\min\\limits_{G}\\)\uff1a</li> </ul> <p>\u9996\u5148\u8981\u5b66\u4e60\u4e00\u4e0b KL \u6563\u5ea6\uff08\u6682\u65f6\u4e0d\u4f1a\uff09\uff0c\\(KL(p||q)=E_{x\\sim p}\\log\\frac{p(x)}{q(x)}\\)\uff0c\u8868\u793a\u5728\u77e5\u9053 \\(p\\) \u7684\u60c5\u51b5\u4e0b\u81f3\u5c11\u8981\u591a\u5c11\u6bd4\u7279\u624d\u80fd\u5c06 \\(q\\) \u63cf\u8ff0\u51fa\u6765</p> <p>\u4e24\u4e2aKL\u6563\u5ea6\u53ef\u4ee5\u62fc\u6210JS\u6563\u5ea6\uff0cKL\u6563\u5ea6\u662f\u975e\u5bf9\u79f0\u7684\uff0cJS\u6563\u5ea6\u662f\u5bf9\u79f0\u7684</p> <p></p> <ul> <li> <p>\u6709\u4eba\u8bf4\u56e0\u4e3aGAN\u4f7f\u7528\u4e86\u5bf9\u79f0\u6563\u5ea6\u6240\u4ee5\u8bad\u7ec3\u7b80\u5355\uff0c\u672a\u6765\u8fd8\u6709\u5de5\u4f5c\u7528\u66f4\u7b80\u5355\u7684\u76ee\u6807\u51fd\u6570</p> </li> <li> <p>\u8bc1\u660e\u4e8c\uff1a</p> </li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/7-BERT/","title":"BERT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/7-BERT/#bert","title":"BERT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/7-BERT/#_1","title":"\u6807\u9898","text":"<ul> <li>BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</li> <li>\u91cd\u70b9\u662fBidirectional \u53cc\u5411</li> <li>BERT\u5168\u79f0 Bidirectional Encoder Representations from Transformers</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/7-BERT/#abstract","title":"Abstract","text":"<ul> <li>\u5de5\u4f5c\u6765\u6e90\u4e8eELMo\uff0c\u8fd9\u4e2a\u662f\u829d\u9ebb\u8857\u4e2d\u7684\u4eba\u7269\uff0c\u800cBERT\u662f\u5176\u4e2d\u53e6\u4e00\u4e2a\u4eba\u7269\u3002\u540e\u6765\u829d\u9ebb\u8857\u4e2d\u7684\u4eba\u7269\u90fd\u88ab\u7528\u4e86\u4e2a\u904d</li> <li>BERT\u548cGPT\u7684\u533a\u522b\u662fGPT\u53ea\u7528\u4e86\u53f3\u4fa7\u4fe1\u606f\uff0c\u800cBERT\u7528\u4e86\u5de6\u53f3\u4fa7\u4fe1\u606f\u3002ELMo\u662f\u7528RNN\uff0c\u4e0b\u6e38\u4efb\u52a1\u9700\u8981\u5fae\u8c03\u67b6\u6784\uff0c\u4f46BERT\u6cdb\u7528\u6027\u5f3a</li> <li>\u572811\u4e2a\u4efb\u52a1\u4e2d\u5b9e\u73b0SOTA\u3002\u4ecb\u7ecd\u4e86\u7edd\u5bf9\u4f18\u52bf\uff08\u6b63\u786e\u7387\uff09\u548c\u76f8\u5bf9\u4f18\u52bf\uff08\u6b63\u786e\u7387\u7684\u63d0\u5347\uff09</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/7-BERT/#_2","title":"\u5bfc\u8a00","text":"<ul> <li> <p>\u76ee\u524d\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u5230\u4e0b\u6e38\u4efb\u52a1\u7684\u6709\u4e24\u79cd\u601d\u8def</p> </li> <li> <p>feature-based</p> <p>\u4f8b\u5982ELMo\uff0c\u5c06\u9884\u8bad\u7ec3\u8868\u793a\u4f5c\u4e3a\u989d\u5916\u7684\u7279\u5f81\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u3002\u4f7f\u7528\u4e86\u53cc\u5411\u4fe1\u606f\u4f46\u662f\u7528\u7684\u662f\u8001\u7684RNN</p> <p>\u9884\u8bad\u7ec3\u6a21\u578b\u4e2d\u7684feature-based\u6307\u7684\u662f\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u4e2d\u95f4\u5c42\uff08\u901a\u5e38\u662f\u6700\u540e\u4e00\u5c42\uff09\u7684\u8f93\u51fa\u4f5c\u4e3a\u7279\u5f81\u6765\u8fdb\u884c\u4e0b\u6e38\u4efb\u52a1\u3002\u8fd9\u4e9b\u7279\u5f81\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u9884\u8bad\u7ec3\u7279\u5f81\u201d\u6216\u201c\u8868\u793a\u201d\u3002</p> <p>\u9884\u8bad\u7ec3\u6a21\u578b\u901a\u8fc7\u5728\u5927\u89c4\u6a21\u672a\u6807\u6ce8\u6570\u636e\u4e0a\u8fdb\u884c\u9884\u8bad\u7ec3\u6765\u5b66\u4e60\u901a\u7528\u7684\u7279\u5f81\u8868\u793a\uff0c\u8fd9\u4e9b\u8868\u793a\u53ef\u4ee5\u88ab\u7528\u4e8e\u5404\u79cd\u4e0b\u6e38\u4efb\u52a1\uff0c\u5982\u6587\u672c\u5206\u7c7b\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u3001\u60c5\u611f\u5206\u6790\u7b49\u3002\u5728\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u4e0b\u6e38\u4efb\u52a1\u65f6\uff0c\u53ef\u4ee5\u5c06\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u4e2d\u95f4\u5c42\u8f93\u51fa\u4f5c\u4e3a\u8f93\u5165\u7279\u5f81\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u7279\u5f81\u63d0\u4f9b\u7ed9\u4e0b\u6e38\u6a21\u578b\uff0c\u5982\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6216\u8005\u5176\u4ed6\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u4ee5\u5b8c\u6210\u5177\u4f53\u7684\u4efb\u52a1\u3002</p> </li> <li> <p>fine-tuning</p> <p>\u4f8b\u5982GPT\uff0c\u5fae\u8c03\u53c2\u6570\u3002\u53ea\u7528\u4e86\u5355\u5411\u4fe1\u606f\u3002</p> </li> <li> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u76ee\u6807\u51fd\u6570\uff0c\u5e76\u4e14\u662f\u5355\u5411\u7684</p> </li> <li> <p>\u5f88\u591a\u8bed\u8a00\u4efb\u52a1\u5e76\u4e0d\u4e00\u5b9a\u662f\u4ece\u5de6\u770b\u5230\u53f3\uff0c\u6587\u672c\u4e24\u4e2a\u65b9\u5411\u7684\u4fe1\u606f\u90fd\u6709\u7528</p> </li> <li> <p>BERT\u601d\u8def\uff1a\u7528mask\u63a9\u7801\u76d6\u4f4f\u90e8\u5206\u6587\u672c\u505a\u5b8c\u578b\u586b\u7a7a\uff0c\u53ef\u4ee5\u770b\u5de6\u53f3\u7684\u4fe1\u606f\uff1b\u53e6\u5916\u8fd8\u8bad\u7ec3\u4e86\u5224\u65ad\u4e24\u4e2a\u7ed9\u5b9a\u53e5\u5b50\u5728\u539f\u6587\u4e2d\u662f\u5426\u76f8\u90bb</p> </li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/7-BERT/#_3","title":"\u6a21\u578b","text":"<ul> <li>\u9884\u8bad\u7ec3\uff1a\u6ca1\u6709\u6807\u53f7\u7684\u6570\u636e\uff1b\u5fae\u8c03\uff1a\u6709\u6807\u53f7\u7684\u6570\u636e</li> </ul> <ul> <li>\u5bf9Transformer\u8fdb\u884c\u4e86\u8c03\u53c2</li> </ul> <ul> <li>\u53c2\u6570\u91cf\u7684\u8ba1\u7b97\uff1a\u6700\u4e0b\u9762\u662f\u5d4c\u5165\u5c42\uff0c\u5b57\u5178\u4e3a30K\u5927\u5c0f\u53d8\u6210model\u5927\u5c0f\u4e3aH\u3002\u7136\u540e\u591a\u5934\u5bf9query/key/value\u5404\u6709\u4e00\u4e2a\u77e9\u9635\uff0c\u77e9\u9635\u5927\u5c0f\u4e3a\\(H*H\\)\uff08\u8bba\u6587\u4e2d\u5199\u7684\\(d_{model}*d_v*head\\)\uff0c\u800c\\(d_v*head=d_{model}\\)\uff09\uff0c\u7136\u540e\u518d\u53d8\u56de\u53bb\u9700\u8981\u4e00\u4e2a\\(H*H\\)\u3002\u4e0a\u9762\u5168\u8fde\u63a5\u5c42\u662f\\(H*(4H)\\)\u548c\\((4H)*H\\)\u3002\u7136\u540e\u6709\\(L\\)\u4e2atransformer block</li> </ul> <ul> <li> <p>BERT\u8f93\u5165\u662f\u4e00\u4e2a\u53e5\u5b50\u6216\u8005\u53e5\u5b50\u5bf9\uff08\u4f8b\u5982\u7b54\u6848\u548c\u56de\u7b54\u4f5c\u4e3a\u4e00\u5bf9\u8f93\u5165\uff09\uff0c\u79f0\u4e3asequence\u3002\u800cTransformer\u662f\u4e00\u4e2asequence\u5bf9\uff0c\u56e0\u4e3aencoder\u548cdecoder\u5404\u9700\u8981\u4e00\u4e2asequence\u3002</p> </li> <li> <p>\u5207\u8bcd\u7684\u65b9\u6cd5\u662fWordPiece\u3002\u5982\u679c\u6309\u7a7a\u683c\u5207\u8bcd\uff0c\u90a3\u4e48\u4f1a\u5bfc\u81f4\u5d4c\u5165\u5c42\u7684\u53c2\u6570\u91cf\u8fc7\u5927</p> </li> </ul> <p>WordPiece\u662f\u4e00\u79cd\u7528\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e2d\u7684\u5206\u8bcd\u65b9\u6cd5\uff0c\u5b83\u5c06\u5355\u8bcd\u62c6\u5206\u6210\u8f83\u5c0f\u7684\u5b50\u8bcd\u6216\u6807\u8bb0\uff0c\u8fd9\u4e9b\u5b50\u8bcd\u6216\u6807\u8bb0\u88ab\u79f0\u4e3aWordPieces\u3002WordPiece\u6a21\u578b\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f1a\u6839\u636e\u8bed\u6599\u5e93\u7684\u9891\u7387\u548c\u8bed\u8a00\u6a21\u578b\u9009\u62e9\u6700\u4f18\u7684WordPieces\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u5904\u7406\u672a\u77e5\u8bcd\u6c47\u548c\u7f55\u89c1\u8bcd\u6c47\u3002WordPiece\u5df2\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1\u3001\u8bed\u97f3\u8bc6\u522b\u548c\u6587\u672c\u5206\u7c7b\u7b49\u4efb\u52a1\u4e2d\u3002</p> <p>\u4ee5\u82f1\u8bed\u5355\u8bcd\"unbelievable\"\u4e3a\u4f8b\uff0c\u4f7f\u7528WordPiece\u5206\u8bcd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5176\u62c6\u5206\u6210\u8f83\u5c0f\u7684\u5b50\u8bcd\u6216\u6807\u8bb0\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <p>un- ##be- ##liev- ##able</p> <p>\u5176\u4e2d\uff0c\"##\"\u8868\u793a\u8fd9\u662f\u4e00\u4e2aWordPiece\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u6837\uff0c\u5355\u8bcd\"unbelievable\"\u5c31\u88ab\u62c6\u5206\u6210\u4e86\u56db\u4e2aWordPieces\uff0c\u8fd9\u4e9bWordPieces\u53ef\u4ee5\u66f4\u597d\u5730\u5904\u7406\u672a\u77e5\u8bcd\u6c47\u548c\u7f55\u89c1\u8bcd\u6c47\uff0c\u4ece\u800c\u63d0\u9ad8\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u6548\u679c\u3002</p> <ul> <li>BERT\u5728\u53e5\u5b50\u6700\u524d\u9762\u52a0\u4e0a\u4e86\u4e00\u4e2a<code>[CLS]</code>\u7684\u7279\u6b8a\u6807\u8bb0\u8868\u793aClassification\uff0c\u5728\u4e24\u4e2a\u53e5\u5b50\u4e2d\u95f4\u52a0\u4e0a\u4e86<code>[SEP]</code>\u3002\u5c06\u6bcf\u4e2a\u8bcd\u90fdembed\u4e4b\u540e\u7136\u540e\u8f93\u5165BERT\uff0c\u5f97\u5230\u8f93\u51fa\\(C,T_1,\\dots,T_N,T_{[SEP]},T_1',\\dots,T_M'\\)\uff0c\u7136\u540e\u518d\u63a5\u8f93\u51fa\u5c42\u3002</li> </ul> <p></p> <p>\u5d4c\u5165\u5c42\uff08Embedding Layer\uff09\u662f\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u4e2d\u7684\u4e00\u79cd\u5e38\u89c1\u5c42\u7c7b\u578b\uff0c\u7528\u4e8e\u5c06\u79bb\u6563\u7684\u8f93\u5165\u6570\u636e\uff08\u5982\u5355\u8bcd\u3001\u7c7b\u522b\u7b49\uff09\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u5411\u91cf\u8868\u793a\u3002\u5b83\u7684\u4f5c\u7528\u7c7b\u4f3c\u4e8e\u5b57\u5178\uff0c\u5c06\u6bcf\u4e2a\u79bb\u6563\u6570\u636e\u6620\u5c04\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u5411\u91cf\uff0c\u4ece\u800c\u4f7f\u5f97\u6570\u636e\u53ef\u4ee5\u88ab\u795e\u7ecf\u7f51\u7edc\u5904\u7406\u3002\u5d4c\u5165\u5c42\u7684\u8f93\u51fa\u5411\u91cf\u662f\u6839\u636e\u8f93\u5165\u6570\u636e\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5b66\u4e60\u5230\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u6355\u6349\u5230\u6570\u636e\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u7cfb\uff0c\u4f8b\u5982\u76f8\u4f3c\u6027\u548c\u76f8\u5173\u6027\u3002\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001\u63a8\u8350\u7cfb\u7edf\u7b49\u9886\u57df\u4e2d\uff0c\u5d4c\u5165\u5c42\u662f\u975e\u5e38\u5e38\u7528\u7684\u3002</p> <ul> <li>\u5d4c\u5165\u5c42\u7684\u5b9e\u73b0\uff1a</li> </ul> <p></p> <ul> <li>Task1\uff1aMasked LM\uff08MLM\uff09</li> </ul> <p>\u5bf9WordPiece\u751f\u6210\u7684\u8bcd\u5143\uff0c\u670915%\u7684\u6982\u7387\u968f\u673a\u66ff\u6362\u6210\u4e00\u4e2a\u63a9\u7801\\([MASK]\\)\uff0c\u8ba9BERT\u6765\u9884\u6d4b\u3002\u800c\u5fae\u8c03\u7684\u65f6\u5019\u6ca1\u6709\u8fd9\u4e2a\u63a9\u7801\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u95ee\u9898\uff08\u4e0d\u5339\u914d\uff09\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u5bf9\u4e8e15%\u9009\u4e2dtoken\u3002\u6709\u65f6\u5019\u5e76\u4e0d\u662f\u771f\u7684\u66ff\u6362\u8fd9\u4e2a\u8bcd\u4e3a\\([MASK]\\)\uff0880%\u6982\u7387\uff09\uff0c\u5269\u4e0b10%\u66ff\u6362\u6210\u4e00\u4e2a\u968f\u673atoken\uff0c\u5269\u4e0b10%\u4e0d\u53d8\u3002</p> <ul> <li>Task2\uff1aNext Sentence Prediction \uff08NSP\uff09</li> </ul> <p>\u4e24\u79cd\u60c5\u51b5\uff0cA\u548cB\u662f\u76f8\u90bb\u7684\uff0c\u6807\u4e0a<code>IsNext</code>\uff1bA\u548cB\u4e0d\u76f8\u90bb\uff0c\u6807\u4e0a<code>NotNext</code>\u3002\u8fd9\u80fd\u63d0\u9ad8QA\u548c\u63a8\u7406\u7684\u6548\u679c</p> <p></p> <ul> <li>\u5fae\u8c03BERT</li> </ul> <p>\u4e0d\u80fd\u50cfTransformer\u4e00\u6837\u505a\u673a\u5668\u7ffb\u8bd1</p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/","title":"ViT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/#vit","title":"ViT","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/#_1","title":"\u6807\u9898","text":"<ul> <li>An Image is Worth 16x16 Words: Transformers for Image Recognition at scale</li> <li>\u8fd9\u91cc\u662f16x16\u8868\u793a\u7684\u662f\u56fe\u7247\u53ef\u4ee5\u770b\u621016x16\u7684patch\u7ec4\u6210\u7684\u6574\u4f53</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/#_2","title":"\u6458\u8981","text":"<ul> <li>\u5355\u5361TPUv3\u8bad\u7ec3\u9700\u89812500\u5929</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/#_3","title":"\u5f15\u8a00","text":"<ul> <li>NLP\u9886\u57df\u4e00\u822c\u662f\u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u505a\u9884\u8bad\u7ec3\uff0c\u7136\u540e\u5728\u7279\u5b9a\u9886\u57df\u7684\u5c0f\u6570\u636e\u96c6\u4e0a\u505a\u5fae\u8c03</li> <li>Transformer\u5904\u7406\u7684\u662f\u5e8f\u5217\uff0c\u56e0\u4e3a\u8981\u505a\u5e8f\u5217\u5143\u7d20\u4e24\u4e24\u8fd0\u7b97\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f\\(O(n^2)\\)\uff0c\u6240\u4ee5\u5e8f\u5217\u4e00\u822c\u4e0d\u4f1a\u5f88\u957f\uff0cBERT\u4f7f\u7528512\u957f\u5ea6\uff0c\u56fe\u7247\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u5c062D\u62c9\u62101D\uff0c\u9700\u8981\u964d\u4f4e\u5e8f\u5217\u957f\u5ea6</li> <li>\u4e4b\u524d\u7684\u5de5\u4f5c\u6709\uff1a</li> <li>CNN\u548c\u81ea\u6ce8\u610f\u529b\u7ed3\u5408\uff1a\u5728Res50\u6700\u540e\u4e00\u5c42\u7684\u7279\u5f81\u56fe\u52a0\u4e0aattention\uff0c\u6700\u540e\u4e00\u5c42\u8fd9\u4e2a\u65f6\u5019\u53ea\u670914*14\u4e86\uff1b</li> <li>\u66ff\u6362\u6389\u6574\u4e2aCNN\uff1a\u5b64\u7acb\u81ea\u6ce8\u610f\u529b\uff0c\u53d6\u5c40\u90e8\u7a97\u53e3\uff1b\u8f74\u6ce8\u610f\u529b\uff0c\u5206\u522b\u5728\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u4e0a\u505a\u4e00\u6b21\u81ea\u6ce8\u610f\u529b\u3002\u6ca1\u6709\u786c\u4ef6\u4f18\u5316\uff0c\u6bd4\u8f83\u6162\uff0c\u6240\u4ee5\u6a21\u578b\u6bd4\u8f83\u5c0f</li> <li>ViT\u662f\u5c06\u56fe\u7247\u7684\u5c0fpatch\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\u5f97\u5230\u4e00\u4e2alinear embeddings\uff0c\u7136\u540e\u4f5c\u4e3a\u8f93\u5165\u7ed9Transformer\uff0c\u56fe\u7247\u5757\u5f53\u505a\u662f\u5355\u8bcd</li> <li>\u6709\u76d1\u7763\u76d1\u7763</li> <li>\u7ed3\u679c\uff1a\u5728\u6ca1\u6709\u5f3a\u7684\u7ea6\u675f\u7684\u65f6\u5019\uff0c\u5728\u4e2d\u7b49\u6570\u636e\u96c6\u4e0a\u548c\u540c\u7b49\u5927\u5c0f\u7684ResNet\u76f8\u6bd4\u5e76\u4e0d\u597d\uff0c\u8fd9\u662f\u53ef\u9884\u671f\u7684\uff0c\u56e0\u4e3aTransformer\u6ca1\u6709CNN\u7684\u5f52\u7eb3\u504f\u7f6e inductive biases\uff08\u5148\u9a8c\u77e5\u8bc6\uff0c\u63d0\u524d\u7684\u5047\u8bbe\uff09</li> <li>CNN\u7684\u5f52\u7eb3\u504f\u7f6e\u662flocality\u548ctranslation equivariance\uff08\u540e\u8005\u662f\\(f(g(x))=g(f(x))\\)\uff0c\u8fd9\u91cc\\(g\\)\u662f\u5e73\u79fb\uff0c\\(f\\)\u662f\u5377\u79ef\uff09</li> <li>\u5f53\u6709\u8db3\u591f\u6570\u636e\u9884\u8bad\u7ec3\u7684\u65f6\u5019\u6548\u679c\u5c31\u597d\uff08\u76f8\u5f53\u4e8e\u8981\u66f4\u591a\u6570\u636e\u6765\u5b66\u51fa\u8fd9\u4e9b\u5f52\u7eb3\u504f\u7f6e\uff09</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/#_4","title":"\u7ed3\u8bba","text":"<ul> <li>\u5728CV\u9886\u57df\u7528\u6807\u51c6\u7684Transformer</li> <li>\u9664\u4e86\u56fe\u7247\u5207\u5272\u548c\u4f4d\u7f6e\u7f16\u7801\u7528\u5230\u4e86\u56fe\u50cf\u7279\u6709\u7684\u5f52\u7eb3\u504f\u7f6e\uff0c\u5176\u4ed6\u90fd\u6ca1\u6709\uff0c\u597d\u5904\u662f\u5bf9vision\u9886\u57df\u4e0d\u9700\u8981\u6709\u5f88\u591a\u4e86\u89e3\u5373\u53ef</li> <li>\u5176\u4ed6CV\u4efb\u52a1\u4e5f\u53ef\u4ee5\u7528\u5305\u62ec\u5206\u5272\u548c\u8bc6\u522b\u3002\u540e\u6765\u505a\u4e86ViT-FRCNN\u548cSETR\uff0cSwin Transformer</li> <li>\u81ea\u76d1\u7763\u6709\u7528\uff0c\u4f46\u548c\u65e0\u76d1\u7763\u8fd8\u662f\u5dee\u5f88\u591a</li> <li>\u8fd8\u80fd\u505a\u7684\u66f4\u5927\uff0c\u540e\u6765\u63d0\u51faViT-G\uff0c\u5237ImageNet\u523090\u5206\u4ee5\u4e0a</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/#_5","title":"\u76f8\u5173\u5de5\u4f5c","text":"<ul> <li>\u5199\u7684\u975e\u5e38\u8be6\u7ec6\uff0c\u6b64\u5904\u7565</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/#vit_1","title":"ViT\u6a21\u578b","text":"<ul> <li> <p>\u6574\u4f53\u67b6\u6784\u56fe</p> </li> <li> <p>\u52a0\u5165\u4f4d\u7f6e\u7f16\u7801</p> </li> <li>\u6700\u540e\u6709\u5f88\u591a\u8f93\u51fa\u7ed3\u679c\uff0c\u8fd9\u91cc\u5b66\u4e60BERT\uff0c\u5728\u6700\u524d\u9762\u52a0\u4e00\u4e2a<code>[CLS]</code>\u6807\u8bb0\u4e5f\u5c31\u662f\u4e0b\u56fe\u4e2d\u7684<code>0*</code>\uff0c\u7136\u540e\u770b\u8fd9\u4e2atoken\u7684\u6700\u540e\u7ed3\u679c\uff0c\u5f53\u505a\u6574\u4e2a\u6a21\u578b\u7684\u8f93\u51fa</li> </ul> <p></p> <ul> <li> <p>\u4e0a\u9762\u7684\u5168\u8fde\u63a5\u5c42\u79f0\u4e3a \\(E\\)\uff0c\u7ef4\u5ea6\u662f 768*768\uff08\u56fe\u7247\u539f\u5927\u5c0f\u662f224*224\uff0c\u5207\u621016*16\u65b9\u683c\u5f97\u523014*14\u4e2apatch\u5373196\uff0c768\u662f16*16*3\u662f\u6bcf\u4e2apatch\u7684\u5927\u5c0f\uff09</p> </li> <li> <p>\u6bcf\u5f20\u56fe\u7247\uff08\u5171196\u5f20\uff09\u53d8\u6210768\u957f\u5ea6\u7684\u5411\u91cf\uff0c\u524d\u9762\u518d\u52a0\u4e00\u4e2a<code>CLS</code>\uff0c\u5f97\u5230Transformer\u8f93\u5165\u957f\u5ea6197*768</p> </li> <li> <p>\u4f4d\u7f6e\u7f16\u7801\u4e5f\u662f768\u957f\u5ea6\u7684\u5411\u91cf\uff0c\u7136\u540e\u76f8\u52a0\uff0c\u800c\u4e0d\u662f\u62fc\u63a5</p> </li> <li> <p>\u4f4d\u7f6e\u7f16\u7801\u9009\u75281D\u548c2D\u53d1\u73b0\u6548\u679c\u7c7b\u4f3c</p> </li> <li> <p>CLS\u7684\u4f7f\u7528</p> </li> <li> <p>\u5728Res50\u4e2d\uff0c\u6700\u540e\u5f97\u5230\u4e00\u4e2a14*14\u7684\u7279\u5f81\u56fe\uff0c\u7136\u540e\u4f1a\u901a\u8fc7\u4e00\u4e2aGAP\uff08Global Average Pooling\uff09\u5f97\u5230\u4e00\u4e2a\u5411\u91cf\u6765\u5206\u7c7b\uff0c\u4e3a\u4ec0\u4e48ViT\u4e0d\u505aGAP\u800c\u7528CLS\uff1f</p> </li> <li> <p>\u901a\u8fc7\u5b9e\u9a8c\u53d1\u73b0\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\u4f5c\u8005\u662fTransformer\u539f\u6559\u65e8\u4e3b\u4e49</p> </li> <li> <p>\u4f4d\u7f6e\u7f16\u7801</p> </li> <li> <p>1D\u4f4d\u7f6e\u7f16\u7801</p> </li> <li>2D\u4f4d\u7f6e\u7f16\u7801\uff0c\u6a2a\u7eb5\u5750\u6807\u5206\u522b\u7f16\u7801\u6210768/2\u7684\u957f\u5ea6\u7136\u540e\u62fc\u63a5\u8d77\u6765</li> <li>\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\uff0c\u7528\u76f8\u5bf9\u4f4d\u7f6e</li> <li> <p>\u901a\u8fc7\u7ed3\u679c\u53d1\u73b0\u4ee5\u4e0a\u4e09\u79cd\u6548\u679c\u7c7b\u4f3c</p> </li> <li> <p>\u5fae\u8c03</p> </li> <li> <p>\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4e0d\u592a\u597d\u8c03\u8f93\u5165\u56fe\u7247\u7684\u5c3a\u5bf8\uff0c\u4e00\u65e6\u56fe\u7247\u589e\u5927\u5e8f\u5217\u957f\u5ea6\u5c31\u4f1a\u589e\u5927\uff08patch\u5927\u5c0f\u4e0d\u53d8\uff09\uff0c\u867d\u7136\u57fa\u672c\u80fd\u7528\uff0c\u4f46\u662f\u63d0\u524d\u8bad\u7ec3\u7684\u4f4d\u7f6e\u7f16\u7801\u5c31\u6ca1\u7528\u4e86\u3002</p> </li> <li>\u89e3\u51b3\u4e0a\u8ff0\u65b9\u6cd5\u662f\u7528\u63d2\u503c\uff0c\u4f46\u662f\u53ea\u662f\u6743\u5b9c\u4e4b\u8ba1</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/8-ViT/#_6","title":"\u5b9e\u9a8c","text":"<ul> <li> <p>\u81ea\u76d1\u7763\u6548\u679c\u8fd8\u53ef\u4ee5\uff0c\u540e\u6765MAE\u4f7f\u7528\u81ea\u76d1\u7763\u6765\u8bad\u7ec3ViT\u6548\u679c\u975e\u5e38\u597d</p> </li> <li> <p>\u547d\u540d\u65b9\u6cd5\uff1a</p> </li> </ul> <p></p> <p>ViT-L16\u8868\u793a\uff0cViT-Large\u6a21\u578b\u4e14patch size\u662f16*16</p> <ul> <li> <p>\u548cCNN\u5927\u6a21\u578b\u6bd4\uff0c\u5206\u6570\u90fd\u5f88\u9ad8\uff0c\u800cTransformer\u8bad\u7ec3\u6210\u672c\u76f8\u5bf9\u4f4e\u4e00\u4e9b</p> </li> <li> <p>\u6700\u91cd\u8981\u7684\u56fe\uff1a\u5728\u5c0f\u7684\u6570\u636e\u96c6\u4e0aViT\u4e0d\u5982ResNet\uff0c\u5728\u5927\u6570\u636e\u96c6\u4e0a\u76f8\u8fd1</p> </li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/9-MAE/","title":"MAE","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/9-MAE/#mae","title":"MAE","text":""},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/9-MAE/#_1","title":"\u6807\u9898","text":"<ul> <li>\u6807\u9898\uff1aMasked Autoencoders Are Scalable Vision Learners</li> <li>\u4e1c\u897f\u5feb\u5c31\u662fEfficient\uff0c\u4e1c\u897f\u5927\u5c31\u662fScalable</li> <li>Auto\u8868\u793a\u6807\u53f7\u548c\u6837\u672c\u6765\u81ea\u540c\u4e00\u4e2a\u4e1c\u897f\uff0c\u5728\u8bed\u8a00\u9886\u57df\u57fa\u672c\u90fd\u662fauto\uff0c\u4f46\u662f\u5728CV\u9886\u57df\u6bd4\u8f83\u96be\u505a\u5230auto\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u53e6\u5916\u6807\u6ce8\u7684\u5185\u5bb9\uff0c\u800c\u672c\u6587\u6807\u53f7\u5c31\u662f\u56fe\u7247\u672c\u8eab</li> <li>\u6807\u9898\u662f\u4e00\u53e5\u6d53\u7f29\u540e\u7684\u7ed3\u8bba\u6bd4\u8f83\u5ba2\u89c2\uff0c\u9002\u5408\u5f53\u6807\u9898</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/9-MAE/#_2","title":"\u6458\u8981","text":"<ul> <li>MAE\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff1a\u968f\u673a\u76d6\u4f4f\u4e00\u4e9b\u5757\uff0c\u7136\u540e\u91cd\u5efa\u5b83\u4eec</li> <li>\u4e24\u4e2a\u6838\u5fc3\u8bbe\u8ba1</li> <li>\u975e\u5bf9\u79f0\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u8bbe\u8ba1\uff1a\u7f16\u7801\u5668\u53ea\u5bf9\u53ef\u89c1\u7684patch\u505a\u7f16\u7801\uff08\u80fd\u5927\u5e45\u52a0\u901f\u8ba1\u7b97\uff09\uff0c\u89e3\u7801\u5668\u80fd\u91cd\u6784\u56fe\u7247</li> <li>\u5f53\u8f93\u5165\u56fe\u7247mask\u7684\u6bd4\u4f8b\u5f88\u9ad8\u7684\u65f6\u5019\uff0c\u6bd4\u598275%\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8feb\u4f7f\u6a21\u578b\u53bb\u5b66\u4e60\u66f4\u6709\u610f\u4e49\u7684\u7279\u5f81</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/9-MAE/#_3","title":"\u5173\u952e\u56fe","text":"<ul> <li> <p>\u67b6\u6784\u56fe</p> </li> <li> <p>\u8fd9\u91ccEncoder\u753b\u7684\u6bd4Decoder\u9ad8\uff0c\u8868\u793a\u8ba1\u7b97\u91cf\u4e3b\u8981\u5728Encoder\u8fd9\u91cc</p> </li> </ul> <p></p>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/9-MAE/#_4","title":"\u5bfc\u8a00","text":"<ul> <li>\u5728Vision\u548cLanguage\u9886\u57dfMasked Autoencoder\u4e0d\u540c\u7684\u539f\u56e0</li> <li>CNN\u4e2d\u7684\u63a9\u7801\u5c31\u662f\u5c06\u90e8\u5206\u50cf\u7d20\u7f6e\u4e3a\u7279\u5b9a\u503c\uff0c\u4f46\u662f\u5377\u79ef\u5bf9\u8fb9\u754c\u5e76\u4e0d\u654f\u611f\uff0c\u8fd9\u5df2\u7ecf\u88abViT\u89e3\u51b3\u4e86</li> <li>\u4e24\u8005\u7684\u4fe1\u606f\u5bc6\u5ea6\u4e0d\u540c\u3002\u8bed\u8a00\u9ad8\u5ea6\u8bed\u4e49\u5316\uff0c\u4f46\u56fe\u7247\u4e2d\u6709\u5f88\u591a\u5197\u4f59\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u63d2\u503c\u8fd8\u539f\uff0c\u65b9\u6cd5\u5c31\u662f\u9ad8\u6bd4\u4f8b</li> <li>\u89e3\u7801\u5668\u7684role\u4e0d\u540c\u3002\u5728\u8bed\u8a00\u4e2ddecoder\u53ea\u8981\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f46\u662fvision\u4e2d\u5c31\u6bd4\u8f83\u56f0\u96be</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/9-MAE/#mae_1","title":"MAE\u6a21\u578b","text":"<ul> <li>\u975e\u5bf9\u79f0\u7ed3\u6784\uff1a\u7f16\u7801\u5668\u53ea\u770b\u5230\u53ef\u89c1\u7684\u5757\uff0c\u89e3\u7801\u5668\u80fd\u770b\u5230</li> <li>\u89e3\u7801\u5668\u53ef\u4ee5\u770b\u5230</li> <li>encoded visible patches\uff1a\u7f16\u7801\u5668\u5bf9\u53ef\u89c1\u90e8\u5206\u7684\u6d45\u8868\u793a</li> <li>mask tokens\uff1a\u53ef\u4ee5\u5b66\u4e60\u7684\u5411\u91cf</li> <li>\u89e3\u7801\u5668\u4e5f\u662f\u4e00\u4e2aTransformer\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u7ed9mask token\u52a0\u5165\u4f4d\u7f6e\u4fe1\u606f\uff08\u4f46\u662f\u4ece\u7f16\u7801\u5668\u6765\u7684token\u6ca1\u8bf4\u8981\u4e0d\u8981\u52a0\u5165\u4f4d\u7f6e\u4fe1\u606f\uff09</li> <li>\u89e3\u7801\u5668\u6700\u540e\u4e00\u5c42\u662f\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u8f93\u51fa\u53ef\u80fd\u662f256\u7ef4\u5411\u91cf\u7136\u540ereshap\u621016*16</li> <li>\u635f\u5931\u51fd\u6570MSE</li> <li>\u505a\u6b63\u5219\u5316\u6548\u679c\u66f4\u597d\uff08\u5747\u503c\u53d8\u62100\uff0c\u65b9\u5dee\u53d8\u62101\uff09</li> </ul>"},{"location":"JY_HU/AI/%E8%B7%9F%E6%9D%8E%E6%B2%90%E5%AD%A6AI/9-MAE/#_5","title":"\u5b9e\u9a8c","text":"<ul> <li>\u4f7f\u7528ViT\uff0c\u4e4b\u524d\u8bf4ViT\u5fc5\u987b\u8981\u4f7f\u7528\u5f88\u5927\u7684\u6570\u636e\u96c6\u624d\u6709\u597d\u7684\u6548\u679c\uff0c\u4f46\u662f\u5176\u5b9e\u52a0\u5165\u4e00\u4e9b\u6b63\u5219\u9879\u4e5f\u80fd\u4f7f\u7ed3\u679c\u53d8\u597d\uff0c\u5728ImageNet-1K\u7684\u6570\u636e\u96c6\u4e0a\u4e5f\u80fd\u5b9e\u73b0</li> <li>MAE\u5bf9\u6570\u636e\u589e\u5f3a\u4e0d\u654f\u611f\uff0c\u968f\u673acrop\u6548\u679c\u5c31\u5f88\u597d</li> <li>\u968f\u673a\u91c7\u6837\u6548\u679c\u6700\u597d</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/verilog/","title":"verilog \u5e38\u89c1\u8bed\u6cd5\u95ee\u9898","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/verilog/#verilog-regwire-alwaysassign","title":"Verilog\u4e2d reg\u548cwire \u7528\u6cd5\u548c\u533a\u522b\u4ee5\u53caalways\u548cassign\u7684\u533a\u522b","text":"<p>1\u3001\u4ece\u4eff\u771f\u89d2\u5ea6\u6765\u8bf4\uff0cHDL\u8bed\u8a00\u9762\u5bf9\u7684\u662f\u7f16\u8bd1\u5668\uff0c\u76f8\u5f53\u4e8e\u4f7f\u7528\u8f6f\u4ef6\u601d\u8def\uff0c\u6b64\u65f6\uff1a</p> Text Only<pre><code>wire\u5bf9\u5e94\u4e8e\u8fde\u7eed\u8d4b\u503c\uff0c\u5982assign\uff1b\n\nreg\u5bf9\u5e94\u4e8e\u8fc7\u7a0b\u8d4b\u503c\uff0c\u5982always\uff0cinitial\uff1b\n</code></pre> <p>2\u3001\u4ece\u7efc\u5408\u89d2\u5ea6\uff0cHDL\u8bed\u8a00\u9762\u5bf9\u7684\u662f\u7efc\u5408\u5668\uff0c\u76f8\u5f53\u4e8e\u4ece\u7535\u8def\u89d2\u5ea6\u6765\u601d\u8003\uff0c\u6b64\u65f6\uff1a</p> Text Only<pre><code> wire\u578b\u53d8\u91cf\u7efc\u5408\u51fa\u6765\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u4e00\u6839\u5bfc\u7ebf\u3002\n\n reg\u53d8\u91cf\u5728always\u4e2d\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n     \uff081\uff09always @\uff08a or b or c\uff09\u5f62\u5f0f\u7684\uff0c\u5373\u4e0d\u5e26\u65f6\u949f\u8fb9\u6cbf\u7684\uff0c\u7efc\u5408\u51fa\u6765\u8fd8\u662f\u7ec4\u5408\u903b\u8f91\uff1b\n\n     \uff082\uff09always @\uff08posedge clk\uff09\u5f62\u5f0f\u7684\uff0c\u5373\u5e26\u6709\u8fb9\u6cbf\u7684\uff0c\u7efc\u5408\u51fa\u6765\u4e00\u822c\u662f\u65f6\u5e8f\u903b\u8f91\uff0c\u4f1a\u5305\u542b\u89e6\u53d1\u5668\uff08Flip-Flop\uff09\n</code></pre> <p>3\u3001\u8bbe\u8ba1\u4e2d\uff0c\u8f93\u5165\u4fe1\u53f7\u4e00\u822c\u6765\u8bf4\u4e0d\u80fd\u5224\u65ad\u51fa\u4e0a\u4e00\u7ea7\u662f\u5bc4\u5b58\u5668\u8f93\u51fa\u8fd8\u662f\u7ec4\u5408\u903b\u8f91\u8f93\u51fa\uff0c\u5bf9\u4e8e\u672c\u7ea7\u6765\u8bf4\uff0c\u5c31\u5f53\u6210\u4e00\u6839\u5bfc\u7ebf\uff0c\u5373wire\u578b\u3002\u800c\u8f93\u51fa\u4fe1\u53f7\u5219\u7531\u81ea\u5df1\u6765\u51b3\u5b9a\u662freg\u8fd8\u662f\u7ec4\u5408\u903b\u8f91\u8f93\u51fa\uff0cwire\u548creg\u578b\u90fd\u53ef\u4ee5\u3002\u4f46\u4e00\u822c\u7684\uff0c\u6574\u4e2a\u8bbe\u8ba1\u7684\u5916\u90e8\u8f93\u51fa\uff08\u5373\u6700\u9876\u5c42\u6a21\u5757\u7684\u8f93\u51fa\uff09\uff0c\u8981\u6c42\u662freg\u8f93\u51fa\uff0c\u8fd9\u6bd4\u8f83\u7a33\u5b9a\u3001\u6247\u51fa\u80fd\u529b\u597d\u3002</p> <p>4\u3001Verilog\u4e2d\u4f55\u65f6\u8981\u5b9a\u4e49\u6210wire\u578b\uff1f</p> Text Only<pre><code>\u60c5\u51b5\u4e00\uff1aassign\u8bed\u53e5\n\n   \u4f8b\u5982\uff1a\n\n           reg   a,b;\n\n           wire  out;\n\n           ......\n\n          assign   out = a &amp; b;\n\n  \u5982\u679c\u628aout\u5b9a\u4e49\u6210reg\u578b\uff0c\u5bf9\u4e0d\u8d77\uff0c\u7f16\u8bd1\u5668\u62a5\u9519\uff01\n</code></pre> <p>\u60c5\u51b5\u4e8c\uff1a\u5143\u4ef6\u5b9e\u4f8b\u5316\u65f6\u5fc5\u987b\u7528wire\u578b</p> Text Only<pre><code>     \u4f8b\u5982\uff1a\n\n      wire   dout;\n\n     ram   u_ram\n\n   (\n\n    ....\n\n   .out(dout);\n\n   )\n\n  wire\u4e3a\u65e0\u903b\u8f91\u8fde\u7ebf\uff0cwire\u672c\u8eab\u4e0d\u5e26\u903b\u8f91\u6027\uff0c\u6240\u4ee5\u8f93\u5165\u4ec0\u4e48\u5c31\u7684\u8f93\u51fa\u4ec0\u4e48\u3002\u6240\u4ee5\u5982\u679c\u7528always\u8bed\u53e5\u5bf9wire\u53d8\u91cf\u8d4b\u503c\uff0c\u5bf9\u4e0d\u8d77\uff0c\u7f16\u8bd1\u5668\u62a5\u9519\u3002\n\n  \u90a3\u4e48\u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c  assign    c = a &amp; b;   \u4e0d\u662f\u5bf9wire\u7684\u8d4b\u503c\u5417\uff1f\n\n  \u5e76\u975e\u5982\u6b64\uff0c\u7efc\u5408\u65f6\u662f\u5c06  a &amp; b\u7efc\u5408\u6210 a\u3001b\u7ecf\u8fc7\u4e00\u4e2a\u4e0e\u95e8\uff0c\u800cc\u662f\u8fde\u63a5\u5230\u4e0e\u95e8\u8f93\u51fa\u7ebf\uff0c\u771f\u6b63\u7efc\u5408\u51fa\u6765\u7684\u662f\u4e0e\u95e8&amp;\uff0c\u4e0d\u662fc\u3002\n</code></pre> <p>5\u3001\u4f55\u65f6\u7528reg\u3001\u4f55\u65f6\u7528wire\uff1f</p> Text Only<pre><code> \u5927\u4f53\u6765\u8bf4\uff0creg\u548cwire\u7c7b\u4f3c\u4e8eC\u3001C++\u7684\u53d8\u91cf\uff0c\u4f46\u82e5\u6b64\u53d8\u91cf\u8981\u653e\u5728begin...end\u4e4b\u5185\uff0c\u5219\u8be5\u53d8\u91cf\u53ea\u80fd\u662freg\u578b\uff1b\u5728begin...end\u4e4b\u5916\uff0c\u5219\u7528wire\u578b\uff1b\n\n \u4f7f\u7528wire\u578b\u65f6\uff0c\u5fc5\u987b\u642d\u914dassign\uff1breg\u578b\u53ef\u4ee5\u4e0d\u7528\u3002\n\n input\u3001output\u3001inout\u9884\u8bbe\u503c\u90fd\u662fwire\u578b\u3002\n\n \u5728Verilog\u4e2d\u4f7f\u7528reg\u578b\uff0c\u5e76\u4e0d\u8868\u793a\u7efc\u5408\u51fa\u6765\u5c31\u662f\u6682\u5b58\u5668register\uff1a\u5728\u7ec4\u5408\u7535\u8def\u4e2d\u4f7f\u7528reg\uff0c\u7ec4\u5408\u540e\u53ea\u662fnet\uff1b\u5728\u65f6\u5e8f\u7535\u8def\u4e2d\u4f7f\u7528reg\uff0c\u5408\u6210\u540e\u624d\u662f\u4ee5Flip-Flop\u5f62\u5f0f\u8868\u793a\u7684register\u89e6\u53d1\u5668\u3002\n</code></pre> <p>6\u3001reg\u548cwire\u7684\u533a\u522b\uff1a</p> Text Only<pre><code> reg\u578b\u6570\u636e\u4fdd\u6301\u6700\u540e\u4e00\u6b21\u7684\u8d4b\u503c\uff0c\u800cwire\u578b\u6570\u636e\u9700\u8981\u6301\u7eed\u7684\u9a71\u52a8\u3002wire\u7528\u5728\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5assign\u4e2d\uff1breg\u7528\u4e8ealways\u8fc7\u7a0b\u8d4b\u503c\u8bed\u53e5\u4e2d\u3002\n\n\u5728\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5assign\u4e2d\uff0c\u8868\u8fbe\u5f0f\u53f3\u4fa7\u7684\u8ba1\u7b97\u7ed3\u679c\u53ef\u4ee5\u7acb\u5373\u66f4\u65b0\u5230\u8868\u8fbe\u5f0f\u7684\u5de6\u4fa7\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u903b\u8f91\u4e4b\u540e\u76f4\u63a5\u8fde\u63a5\u4e86\u4e00\u6761\u7ebf\uff0c\u8fd9\u4e2a\u903b\u8f91\u5bf9\u5e94\u4e8e\u8868\u8fbe\u5f0f\u7684\u53f3\u4fa7\uff0c\u8fd9\u6761\u7ebf\u5bf9\u5e94\u4e8ewire\uff1b\n\n \u5728\u8fc7\u7a0b\u8d4b\u503c\u8bed\u53e5\u4e2d\uff0c\u8868\u8fbe\u5f0f\u53f3\u4fa7\u7684\u8ba1\u7b97\u7ed3\u679c\u5728\u67d0\u79cd\u6761\u4ef6\u7684\u89e6\u53d1\u4e0b\u653e\u5230\u4e00\u4e2a\u53d8\u91cf\u5f53\u4e2d\uff0c\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u58f0\u660e\u6210reg\u578b\uff0c\u6839\u636e\u89e6\u53d1\u6761\u4ef6\u7684\u4e0d\u540c\uff0c\u8fc7\u7a0b\u8bed\u53e5\u53ef\u4ee5\u5efa\u6a21\u4e0d\u540c\u7684\u786c\u4ef6\u7ed3\u6784\uff1a\n\n\uff081\uff09\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u662f\u65f6\u949f\u4e0a\u5347\u6cbf\u6216\u4e0b\u964d\u6cbf\uff0c\u90a3\u786c\u4ef6\u6a21\u578b\u5c31\u662f\u4e00\u4e2a\u89e6\u53d1\u5668\uff0c\u53ea\u6709\u662f\u6307\u5b9a\u4e86always@\uff08posedge or negedge\uff09\u624d\u662f\u89e6\u53d1\u5668\u3002\n\n\uff082\uff09\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u662f\u67d0\u4e00\u4fe1\u53f7\u7684\u9ad8\u4f4e\u7535\u5e73\uff0c\u90a3\u8fd9\u4e2a\u786c\u4ef6\u6a21\u578b\u5c31\u662f\u4e00\u4e2a\u9501\u5b58\u5668\u3002\n\n\uff083\uff09\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u662f\u8d4b\u503c\u8bed\u53e5\u53f3\u4fa7\u4efb\u610f\u64cd\u4f5c\u6570\u7684\u53d8\u5316\uff0c\u90a3\u8fd9\u4e2a\u786c\u4ef6\u6a21\u578b\u5c31\u662f\u4e00\u4e2a\u7ec4\u5408\u903b\u8f91\u3002\n</code></pre> <p>7\u3001\u8fc7\u7a0b\u8d4b\u503c\u8bed\u53e5always@\u548c\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5assign\u7684\u533a\u522b\uff1a</p> Text Only<pre><code>\uff081\uff09wire\u578b\u7528\u4e8eassign\u7684\u8d4b\u503c\uff0calways@\u5757\u4e0b\u7684\u4fe1\u53f7\u7528reg\u578b\u3002\u8fd9\u91cc\u7684reg\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u89e6\u53d1\u5668\uff0c\u53ea\u6709\u654f\u611f\u5217\u8868\u5185\u7684\u4e3a\u4e0a\u5347\u6cbf\u6216\u4e0b\u964d\u6cbf\u89e6\u53d1\u65f6\u624d\u7efc\u5408\u4e3a\u89e6\u53d1\u5668\u3002\n\n\uff082\uff09\u53e6\u4e00\u4e2a\u533a\u522b\uff0c\u4e3e\u4f8b\uff1a\n\n      wire     a;\n      reg      b;\n     assign     a = 1'b0;\n     always@(*)\n             b = 1'b0;\n\n     \u4e0a\u9762\u4f8b\u5b50\u4eff\u771f\u65f6a\u5c06\u4f1a\u662f0\uff0c\u4f46\u662fb\u7684\u72b6\u6001\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u56e0\u4e3aVerilog\u89c4\u5b9a\uff0calways@\uff08*\uff09\u4e2d\u7684*\u6307\u7684\u662f\u8be5always\u5757\u5185\u7684\u6240\u6709\u8f93\u5165\u4fe1\u53f7\u7684\u53d8\u5316\u4e3a\u654f\u611f\u5217\u8868\uff0c\u5c31\u662f\u8bf4\u53ea\u6709\u5f53always@\uff08*\uff09\u5757\u5185\u8f93\u5165\u4fe1\u53f7\u53d1\u751f\u53d8\u5316\uff0c\u8be5\u5757\u5185\u63cf\u8ff0\u7684\u4fe1\u53f7\u624d\u4f1a\u53d1\u751f\u53d8\u5316\u3002\n\n    \u50cfalways@\uff08*\uff09  b= 1'b0; \u4e2d\u7531\u4e8e1\u2018b0\u662f\u4e2a\u5e38\u6570\uff0c\u4e00\u76f4\u6ca1\u6709\u53d8\u5316\uff0c\u7531\u4e8eb\u7684\u8db3\u7ec4\u5408\u903b\u8f91\u8f93\u51fa\uff0c\u6240\u6709\u590d\u4f4d\u65f6\u6ca1\u6709\u660e\u786e\u7684\u503c--\u5373\u4e0d\u786e\u5b9a\u72b6\u6001\uff0c\u53c8\u56e0\u4e3aalways@\uff08*\uff09\u5757\u5185\u6ca1\u6709\u654f\u611f\u4fe1\u53f7\u53d8\u5316\uff0c\u6b64\u65f6b\u4fe1\u53f7\u4e00\u76f4\u4fdd\u6301\u4e0d\u53d8\uff0c\u5373\u4e0d\u786e\u5b9a\u662f\u5565\uff0c\u53d6\u51b3\u4e8eb\u7684\u521d\u59cb\u72b6\u6001\u3002\n</code></pre> <p>\u4ee5\u4e0b\u4e3a\u4e2a\u4eba\u4e66\u5199\u89c4\u8303\uff0c\u65b9\u4fbf\u4e2a\u4eba\u7edf\u4e00\u683c\u5f0f\uff0c\u4e0e\u884c\u4e1a\u89c4\u8303\u6709\u6240\u4e0d\u7b26</p> Verilog<pre><code>module name (   //input \n            clk,\n        rst,\n        datain1,\n        datain2,\n        //output \n            dataout1,\n        dataout2\n);\n\ninput clk,rst;\ninput [7:0] datain1, datain2;\n\noutput reg [7:0] dataout1;//\u82e5\u4e0d\u662fwire\u578b\u53ef\u4ee5\u5728output\u540e\u76f4\u63a5\u58f0\u660e\u4e3areg\u7c7b\u578b\uff1b\noutput [7:0] dataout2;//\u53ef\u4ee5\u4e0d\u7528\u58f0\u660e\u4e3awire\uff1boutput [7:0] wire dataout2\u4e0e\u6b64\u76f8\u540c\n\nalways@ (posedge clk or negedge rst)\nbegin\n    if(~rst)//~\u4e3a\u6309\u4f4d\u53d6\u53cd\uff0c!\u4e3a\u903b\u8f91\u53d6\u53cd\n        begin\n        dataout1 &lt;= 8'd0;\n        end\n    else\n        begin\n    dataout1 &lt;= datain1 + datain2;  \n        end\nend\n\nassign dataout2 = dataout1 + 8'd1;\n\nendmodule \n</code></pre> <ul> <li>Verilog\u4e2dinput\u548coutput\u9ed8\u8ba4\u7c7b\u578b\u4e3awire\u7c7b\u578b\uff0c\u82e5\u4e0d\u58f0\u660e\u4e3areg\u7edf\u4e00\u4e3awire\u7c7b\u578b\uff0c\u8f93\u5165\u4fe1\u53f7\u53ea\u80fd\u4e3awire\u578b\uff0c\u800c\u8f93\u51fa\u4fe1\u53f7\u53ef\u4ee5\u4e3awire\uff0c\u4e5f\u53ef\u4ee5\u4e3areg\uff1b\u8f93\u51fa\u7c7b\u578b\u53ef\u4ee5\u4e3areg\u4f46\u662f\u5e76\u4e0d\u662f\u6240\u6709\u7684reg\u578b\u90fd\u88ab\u7f16\u8bd1\u4e3a\u5bc4\u5b58\u5668\uff0c\u56e0\u4e3a\u53ea\u8981\u5728always@\u91cc\u8fdb\u884c\u8d4b\u503c\u5fc5\u987b\u4f7f\u7528reg\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a</li> </ul> Verilog<pre><code>reg a ;\nreg b;\nalways@ \uff08*\uff09 begin\n  if (&lt;condition&gt;) begin\n    a = tmp ;\n    b = a ;\n  end\nend\n</code></pre> <p>\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2da\u662f\u4e0d\u4f1a\u7efc\u5408\u51fa\u5bc4\u5b58\u5668\u7684\uff0c\u800cb\u5374\u4f1a\uff0c\u539f\u56e0\u5728\u4e8ea\u662f\u4e2d\u95f4\u53d8\u91cf\uff0c\u5c31\u662f\u4e00\u6761\u7ebf\uff0c\u6240\u4ee5\u7efc\u5408\u51fa\u6765\u7684\u4e0d\u662f\u5bc4\u5b58\u5668\uff0c\u800c\u662f\u4e00\u6761\u7ebf\u3002\u800c\u5728condtion\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0bb\u8981\u4fdd\u503c\uff0c\u6240\u4ee5b\u4f1a\u7efc\u5408\u6210\u5bc4\u5b58\u5668\u3002(\u5f15\u7528BruceX\u7684\u56de\u7b54)</p> <p>6t </p> <ul> <li>\u4f7f\u7528always\u8d4b\u503c\u65f6\u4e00\u822c\u4f7f\u7528\u975e\u963b\u585e\u8d4b\u503c\uff08&lt;=\uff09\u4e3a\u65f6\u5e8f\u903b\u8f91\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\u963b\u585e\u8d4b\u503c\uff08=\uff09\u4f46\u8bed\u6cd5\u6b63\u786e\uff0c\u4e3a\u7ec4\u5408\u903b\u8f91\u3002\u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u8d4b\u503c\u65b9\u5f0f\uff0c\u8d4b\u503c\u53f7\u5de6\u8fb9\u5fc5\u987b\u4e3areg\u7c7b\u578b\u3002</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/","title":"\u6570\u903b\u7b14\u8bb0","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#notes","title":"\u6570\u5b57\u903b\u8f91\u8bbe\u8ba1 notes","text":"<p>SOP\uff1asum of minterms</p> <p>\u5bf9\u51fd\u6570\u6c42complement</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#implicant-squares-in-the-map","title":"Implicant: squares in the map","text":"<p>product term obtained by combining adjacent squares in the map into a rectangle with the number of squares a power of 2.</p> <p>A Prime Implicant is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2.</p> <p>A prime implicant is called an Essential Prime Implicant if it is the only prime implicant that covers (includes) one or more minterms.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#essential-prime-implicant","title":"\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u5708\u6709\u7684\u683c\u5b50\u5c31\u5305\u88f9\u4e0d\u8fdb\u53bb\uff0c\u5c31\u662f essential prime implicant","text":"<p>1.3 implicant \u8574\u542b\u9879\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u6587\u7ae0\u6700\u5f00\u59cb\u63d0\u5230\u7684\u201c\u5708\u201d\uff0c\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u5708\u5c31\u662f\u4e00\u4e2a\u8574\u542b\u9879</p> <p></p> <p>\u4e0a\u56fe\u4e2d\u5c31\u67097\u4e2a\u4e00\u6b21\u8574\u542b\u9879\uff0c6\u4e2a\u4e8c\u6b21\u8574\u542b\u9879\u548c1\u4e2a\u56db\u6b21\u8574\u542b\u9879\uff0c\u5171\u8ba114\u4e2a\u8574\u542b\u9879</p> <p>1.4 prime implicant \u8d28\u8574\u542b\u9879\u5c31\u662f\u4e0d\u80fd\u4e0e\u5176\u5b83\u8574\u542b\u9879\u5408\u5e76\u7684\u8574\u542b\u9879\uff0c\u57281.3\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u56db\u6b21\u8574\u542b\u9879\u4e2d\u67094\u4e2a\u4e8c\u6b21\u8574\u542b\u9879\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u4e0d\u662f\u8d28\u8574\u542b\u9879</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\u4e0a\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5708\u90fd\u4e0d\u80fd\u548c\u5176\u5b83\u5708\u5408\u5e76\uff0c\u6240\u4ee5\u4e0a\u56fe\u6709\u5171\u8ba14\u4e2a\u8d28\u8574\u542b\u9879</p> <p>1.5 essential prime implicant \u5b9e\u8d28\u672c\u6e90\u8574\u542b\u9879\u4e2d\u5fc5\u987b\u542b\u6709\u81f3\u5c11\u4e00\u4e2a\u6ca1\u88ab\u5305\u542b\u5728\u5176\u5b83\u8574\u542b\u9879\u4e2d\u7684\u9879\uff0c\u800c\u4e14\u4e0d\u80fd\u88ab\u66f4\u5927\u7684\u5708\u5305\u88f9</p> <p></p> <p>\u4e0a\u56fe\u4e2d\u6709\u4e09\u4e2a\u5b9e\u8d28\u672c\u6e90\u8574\u542b\u9879\uff0c\u800c\u6211\u4eec\u627e\u5230\u6700\u7b80SOP\u7684\u65b9\u5f0f\u5c31\u662f\u627e\u5230\u6240\u6709\u7684\u5b9e\u8d28\u672c\u6e90\u8574\u542b\u9879</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#cost-criteria","title":"cost criteria","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#literal-cost-l","title":"Literal cost L","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#gate-input-cost-g","title":"gate input cost G","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#gate-input-cost-with-nots-gn","title":"gate input cost with NOTs GN","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#propagation-delay-t_pd-maxt_plht_phl","title":"propagation delay \\(t_{pd} = max{(t_{PLH},t_{PHL})}\\)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#t_phl","title":"\\(t_{PHL}\\)\u662f","text":"<p>propagation : \u4f20\u8f93</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#transport-delay-inertia-delayrejection-time","title":"\u5206\u4e3atransport delay \u548c inertia delay\uff08\u6709rejection time\u5c5e\u6027\uff09","text":"<p>\u4e09\u4e2a\u4e32\u8054\uff1f\u56db\u4e2a\u53ef\u4ee5\u5417</p> <p>74LS00\u4e0e\u975e\u95e8\u4f20\u8f93\u5ef6\u8fdf\u6d4b\u91cf\uff1a3\u4e2a74LS00\u95e8\u4e32\u8054\uff0c4\u4e2a\u53ef\u4ee5\u5417\uff1f</p> <p>\\((\\overline{A B})\\)</p> <p></p> <p>2-12\u600e\u4e48\u5316\u7b80</p> <p>4\u4f4d\u5168\u52a0\u5668\u7684\u5ef6\u65f6\u8f83\u957f</p> <p>\u56e0\u6b64\u91c7\u7528carry look ahead adder</p> <p>16\u4f4d\u52a0\u6cd5\u5668\u4f7f\u75284\u4e2aCLA\u4e32\u8054</p> <p>64\u4f4d \u7ec4\u8d85\u524d\u8fdb\u4f4d</p> <p>\u5c06G0~3, P0~3\u4f20\u7ed9\u4e0b\u4e00\u5c42\uff1f</p> <p>C4 = G3 +P3G2 + P3P2G1+P3P2P1G0+P3P2P1P0C0</p> <p>\u200b     = G0~3 + P0~3*C0</p> <p>C8 = G4~7 + P4~7*C4</p> <p>\u540c\u7406\uff0cC12 = G8~11+ P8~11*C8</p> <p>C16 = G12~15+ P12~15*C12</p> <p>\u4f9d\u8d56\u5173\u7cfb\u548c4\u4f4d\u7684CLA\u76f8\u4f3c</p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#1","title":"\u5c0f\u6d4b1 \u590d\u4e60","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#1_1","title":"1\u3001\u903b\u8f91\u8868\u8fbe\u5f0f\u5316\u7b80\uff1a","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#aoverlineababaoverlineaab","title":"\\(A+\\overline{A}B=(A+B)(A+\\overline{A})=A+B\\)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#_1","title":"\\(\u903b\u8f91\u8868\u8fbe\u5f0f\u53ef\u91cd\u590d\u4f7f\u7528\\)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#2","title":"2\u3001\u95e8\u4ee3\u4ef7\u8ba1\u7b97\uff1a","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%20notes/#3","title":"3\u3001\u5361\u8bfa\u56fe\u5316\u7b80","text":"<p>4\u53d8\u91cf\u7684\u5361\u8bfa\u56fe\uff0c16\u4e2a\u683c\u5b50\uff0c\u5708\u7684\u5927\u5c0f\u4e3a8-&gt;1\u4e2a\u53d8\u91cf</p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E9%80%BB%E5%AE%9E%E9%AA%8C/","title":"\u5b9e\u9a8c\u8fc7\u7a0b","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E9%80%BB%E5%AE%9E%E9%AA%8C/#_1","title":"\u6570\u903b\u5b9e\u9a8c\u8fc7\u7a0b\u7b14\u8bb0","text":"<p>\u53d1\u73b0\u53ea\u8981\u662f\u5728\u8fd9\u4e2a\u6587\u4ef6\u7ed3\u6784\u4e0b\u7684\u56fe\u7247\u90fd\u4f1a\u6b63\u5e38\u663e\u793a</p> <p>\u56e0\u4e3a\u5b9e\u9645\u4e0atypora\u7f16\u8f91\u5668\u7684\u8bbe\u7f6e\u4e2d\u62f7\u8d1d\u56fe\u7247\u65f6\u4f1a\u5c06assets\u4f1a\u5355\u72ec\u590d\u5236\u4e00\u4efd</p> <p></p> <p>\u7136\u800c\uff0c\u62f7\u8d1d\u540e\u8fdb\u884c\u7f29\u653e\uff0c\u5c31\u662f\u6539\u4e3a\u4e86html\u683c\u5f0f\uff0c\u5c31\u4e0d\u80fd\u591f\u6b63\u5e38\u6e32\u67d3\uff1f</p> <p></p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%95%B0%E9%80%BB%E5%AE%9E%E9%AA%8C/#mkdocshtmlmd","title":"\u53d1\u73b0mkdocs\u5728\u6e32\u67d3\u5bfc\u51faHTML\u65f6\u662f\u4f1a\u5c06\u9664\u4e86md\u683c\u5f0f\u7684\u6240\u6709\u4e1c\u897f\u90fd\u62f7\u8d1d\u4e00\u4efd\u5230\u81ea\u5df1\u7684\u76ee\u5f55\u4e0b\u9762\u7684","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/","title":"\u671f\u672b\u590d\u4e60","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#digital-design-final-exam","title":"Digital Design final exam","text":"<p>\u5bf9\u5e94\u7684\u82f1\u6587\u540d\u8bcd</p> <p>\u4e0a\u8bfeppt\uff0c\u91cd\u70b9\u7ae0\u8282\u56de\u653e\uff0cguahao\u5b9e\u9a8c\u6307\u5bfc\u7f51\u9875\uff0c\u5c0f\u6d4bppt\uff0c</p> <p>\u65f6\u949f\u7a7a\u7ffb\u95ee\u9898</p> <p>D\u9501\u5b58\u5668 </p> <p>\u548c\u65f6\u949f\u957f\u5ea6\u6709\u5173\u3001D\u9501\u5b58\u5668\u5ef6\u65f6\u6709\u5173</p> <p>Triggered SR  \u4e3b\u4ece\u89e6\u53d1\u5668</p> <p>\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898</p> <p>\u5c0f\u7684\u6bdb\u523a\uff0c\u5e72\u6270</p> <p>\u82f1\u6587\u7535\u5b50\u4e66pdf\u641c\u7d22\u627e\u5230\u540d\u8bcd\uff0c\u4e2d\u6587\u7eb8\u8d28\u4e66\u7406\u89e3</p> <p>BCD\u7801\uff0cgray code \u4f59\u4e09\u7801</p> <p>SOP,POS \u6700\u5927\u9879\uff0c\u6700\u5c0f\u9879\uff0c\u5361\u8bfa\u56fe\u5316\u7b80\uff0c</p> <p>\u9ad8\u963b\u8f93\u51fa \u4e09\u6001\u95e8\u548c\u4f20\u8f93\u95e8</p> <p>\u591a\u7ea7\u7535\u8def\uff0c\u4e8c\u7ea7\u7535\u8def</p> <p>\u95e8\u8f93\u5165\u6210\u672c\uff1fgate input cost</p> <p>PLD\uff1a programmable logic devices </p> <p>PLD includes ROM,PAL,PLA</p> <p>ROM\uff1a\u4e0e\u95e8\u56fa\u5b9a\uff0c\u6216\u95e8\u9635\u5217\u53ef\u7f16\u7a0b</p> <p>PAL\uff1a\u6216\u95e8\u56fa\u5b9a\uff0c\u4e0e\u95e8\u9635\u5217\u53ef\u7f16\u7a0b</p> <p></p> <p></p> <p></p> <p>PLA\uff1a\u4e0e\u95e8\u548c\u6216\u95e8\u5747\u53ef\u7f16\u7a0b</p> <p>CPLD, FPGA, *LUT</p> <p>\u7b2c\u4e8c\u7ae0 \u7ec4\u5408\u903b\u8f91\u7535\u8def \u5e03\u5c14\u4ee3\u6570(Boolean)\u7684\u6982\u5ff5</p> <ul> <li>\u53d8\u91cf\u4e0e\u771f\u503c\u7684\u5173\u7cfb\uff0c\u4e8c\u503c\u903b\u8f91\u548c\u95e8</li> <li>\u4e09\u79cd\u57fa\u672c\u8fd0\u7b97:\u4e0e\u6216\u975e \u67e5\u852c\u7bc7\u6cd5\u5219\u4e0e\u7535\u8def\u7b26\u53f7\uff0c\u57fa\u672c\u8fd0\u7b97\u516c\u5f0f\u3001\u89c4\u5219\u3001\u53cd\u6f14\uff0c \u57fa\u672c\u903b\u8f91\u7535\u8def\u4e0e\u5176\u903b\u8f91\u7279\u6027</li> <li> <p>\u4e0e\u3001\u6216\u95e8\u7684\u5f00\u3001\u5173\u95e8\u7279\u70b9\uff0c\u5f02\u6216\u7684\u540c\u76f8\u3001\u53cd\u76f8\u6027\u8d28 \u903b\u8f91\u51fd\u6570\u7684\u5316\u7b80.</p> </li> <li> <p>\u516c\u5f0f\u5316\u7b80\u3001\u6700\u5c0f\u9879\uff0c\u6700\u5927\u9879\u3001\u5361\u8bfa\u56fe\u5316\u7b80\u3001\u8574\u6db5\u9879\uff0c\u4efb\u610f\u9879\u3002 \u4e0d\u540c\u51fd\u6570\u5f62\u5f0f\u7684\u53d8\u6362\u53ca\u4e0e\u6700\u5c0f\u9879\u7684\u5173\u7cfb \u51fd\u6570\u7684\u4e94\u79cd\u8868\u793a\u5f62\u5f0f</p> </li> <li>\u771f\u503c\u8868\u3001\u903b\u8f91\u89e3\u6790\u5f0f\u3001\u6ce2\u5f62\u56fe\u3001\u5361\u8bfa\u56fe\u3001\u903b\u8f91\u7535\u8def\u56fe \u9ad8\u963b\u8f93\u51fa(\u4e09\u6001\u95e8\uff0c\u4f20\u8f93\u95e8)\u3002</li> </ul> <p>\u529f\u80fd\u6a21\u5757\u5316\u8bbe\u8ba1</p> <p>\u8bd1\u7801\u5668\u548c\u4e0e\u6216\u95e8</p> <p>encoder&amp;decoder</p> <p>\u591a\u8def\u590d\u7528\u5668\uff08\u52a0\u53cd\u76f8\u5668?\uff09</p> <p>\u52a0\u51cf\u6cd5\u5668\uff1a\u7b97\u6570\u51fd\u6570\uff1a+-*\uff0c\u589e\u91cf\u51fd\u6570\u53ca\u8fd0\u7b97</p> <p>\u8865\u7801\u8fd0\u7b97</p> <p>\u534a\u52a0\u5668\u53ca\u5168\u52a0\u5668\u7535\u8def\u8bbe\u8ba1</p> <p>\u591a\u4f4d\u5168\u52a0\u5668\uff0c\u5168\u51cf\u5668\u8bbe\u8ba1  \u5f02\u6216\u95e8</p> <p>\u8d85\u524d\u8fdb\u4f4d</p> <p>\u8fdb\u4f4d\u4f20\u9012\u4e0e\u5ef6\u8fdf\uff0c\u8fdb\u4f4d\u51fd\u6570\uff1agenerate\uff0cGi\uff0cpropagate</p> <p>ALU\u8bbe\u8ba1</p> <p>\u89e6\u53d1\u5668 JK\uff0cSR, D </p> <p>\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898</p> <p>\u4e3b\u4ece\u89e6\u53d1\u5668\u548c\u8fb9\u6cbf\u89e6\u53d1\u5668</p> <p>\u8109\u51b2\u89e6\u53d1\u5668</p> <p>SR \u9501\u5b58\u5668 R=1 S=0    \u590d\u4f4d Q=0\uff0c R=0,S=1 \u7f6e\u4f4d Q=1\uff0c</p> <p>\\(\\overline{S}\\overline{R}\\) \u9501\u5b58\u5668 $$$$$$$$$</p> <p>D \u9501\u5b58\u5668 </p> <p>\u6a21\u4e09\u7d2f\u52a0\u5668</p> <p>\u8f93\u51fa\u53ea\u4f9d\u8d56\u72b6\u6001</p> <p>\u8f93\u51fa\u753b\u5230\u5f27\u7ebf\u4e0a\u9762</p> <p>\u8109\u51b2\uff08\u4e3b\u4ece\uff09\u89e6\u53d1\u5668</p> <p>\u8fb9\u6cbf\u89e6\u53d1\u5668  edge triggered \u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff1f</p> <p>J-K    T flip-flops</p> <p>\u72b6\u6001\u56fe\u5316\u7b80\u6ce8\u610f\u672a\u5b9a\u4e49\u72b6\u6001\u5229\u7528\u6001\u8fdb\u884c\u5316\u7b80</p> <p>\u6240\u8c13setup time\u5c31\u662f\u5728negedge\u6216posedge\u53d1\u751f\u524d\u4fe1\u53f7\u8981\u6709\u7a33\u5b9a\u7684\u4e00\u6bb5\u65f6\u95f4</p> <p>\u6240\u8c13hold time\u5c31\u662f\u5728negedge\u6216posedge\u53d1\u751f\u540e\u4fe1\u53f7\u8981\u6709\u7a33\u5b9a\u7684\u4e00\u6bb5\u65f6\u95f4</p> <p>mealy \u72b6\u6001\u662f\u62bd\u8c61\u7684\u6570\u5b57\u7f16\u53f7\uff08000\uff0c001\uff0c010........111// 0,1,2,3,4,5),\u72b6\u6001\u8f6c\u79fb\u66f2\u7ebf\u4e0a\u753b\u7684\u662finput/output</p> <p>current state\u5230next state\u7684\u72b6\u6001\u8f6c\u79fb\u5c31\u662f\u4ece\u4e00\u4e2a\u5706\u5708\u5230\u4e0b\u4e00\u4e2a\u5706\u5708</p> <p>moore \u5706\u5708\u91cc\u753b\u7684\u662f\u72b6\u6001/\u8f93\u51fa\uff0c\u56e0\u4e3a\u8f93\u51fa\u4ec5\u4ec5\u548c\u5f53\u524d\u7684\u72b6\u6001\u6709\u5173\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u8f93\u5165\uff0c\u8f93\u5165\u4ec5\u4ec5\u5f71\u54cd\u72b6\u6001\u8f6c\u79fb\uff0c\u6240\u4ee5\u753b\u5728\u72b6\u6001\u8f6c\u79fb\u66f2\u7ebf\u4e0a</p> <p>\u7535\u8def\u5ef6\u65f6\u5206\u6790</p> <p>\u65f6\u5e8f\u95ee\u9898</p> <p>\u9501\u5b58\u5668\u4e0e\u89e6\u53d1\u5668 S-R\u9501\u5b58\u5668\u7684\u539f\u7406\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b\uff0c\u5185\u90e8\u7535\u8def\u5206\u6790\uff0c\u4e0d\u786e\u5b9a\u72b6\u6001\u7684\u539f\u56e0\u53ca\u51fa\u73b0\u6761\u4ef6 D\u9501\u5b58\u5668\u3001D\u89e6\u53d1\u5668\u7684\u539f\u7406\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b \u5185\u90e8\u7535\u8def\u5206\u6790JK\u89e6\u53d1\u5668\u3001T\u89e6\u53d1\u5668\u7684\u884c\u4e3a\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b \u970d\u8363\u99a8\u7b54\u52bf\u76d7\u83cc\u89e6\u53d1\u7684\u6982\u5ff5\uff0c\u8109\u51b2\u89e6\u53d1\u7684\u4e00\u6b21\u6027\u91c7\u6837\u884c\u4e3a\u7684\u539f\u56e0 \u9501\u5b58\u5668\u548c\u89e6\u53d1\u5668\u7684\u65f6\u5e8f\uff0c\u5efa\u7acb\u65f6\u95f4\u3001\u4fdd\u6301\u65f6\u95f4\u3001\u4f20\u8f93\u5ef6\u65f6\u7b49\u65f6\u5e8f\u6210\u5206</p> <p>\u5404\u79cd\u89e6\u53d1\u5668\u7684\u56fe\u5f62\u7b26\u53f7</p> <p>\u7eb9\u6ce2\u8ba1\u6570\u5668</p> <p>\u4f4e\u4f4d\u7684\u8fdb\u4f4d\u8f93\u51fa\u5230\u9ad8\u4f4d\u7684\u8ba1\u6570EN\u7aef\u53e3</p> <p>\u548c\u540c\u6b65\u8ba1\u6570\u5668</p> <p>\u5b58\u50a8\u5668\u57fa\u7840\uff1a</p> <p>\u5730\u5740\u7ebf\u91cd\u5408\u9009\u62e9</p> <p>\u8ba1\u7b97\u6240\u9700\u5185\u5b58\u4f4d\u6570</p> <p>\u731d\u53d1\u8bfb\u5199\uff1f</p> <p>SRAM\u548cDRAM\u7684\u533a\u522b\u5728\u4e8e\uff1a123</p> <ul> <li>\u5b58\u50a8\u539f\u7406\uff1aSRAM\u7684\u5b58\u50a8\u5355\u5143\u91c7\u7528\u7a33\u5b9a\u7684\u89e6\u53d1\u5668\u7ed3\u6784\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u5b9a\u671f\u5237\u65b0\u64cd\u4f5c\uff0c\u800cDRAM\u7684\u7535\u5bb9\u9010\u6e10\u6f0f\u7535\uff0c\u6570\u636e\u9700\u8981\u5b9a\u671f\u5237\u65b0\u4ee5\u4fdd\u6301\u5176\u6b63\u786e\u6027\u3002</li> <li>\u8bbf\u95ee\u901f\u5ea6\uff1aSRAM\u7684\u8bbf\u95ee\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u56e0\u4e3a\u6570\u636e\u5b58\u50a8\u5728\u89e6\u53d1\u5668\u4e2d\uff0c\u53ef\u4ee5\u7acb\u5373\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u800cDRAM\u7684\u8bbf\u95ee\u901f\u5ea6\u76f8\u5bf9\u8f83\u6162\uff0c\u56e0\u4e3a\u6570\u636e\u5b58\u50a8\u5728\u7535\u5bb9\u4e2d\uff0c\u9700\u8981\u7ecf\u8fc7\u8bbf\u95ee\u6676\u4f53\u7ba1\u7684\u64cd\u4f5c\u3002</li> <li>\u4ef7\u683c\uff1aSRAM\u6bd4DRAM\u66f4\u5feb\uff0c\u4f46\u662f\u66f4\u6602\u8d35\uff0c\u800cDRAM\u5219\u66f4\u4fbf\u5b9c\u4f46\u901f\u5ea6\u8f83\u6162\u3002</li> <li>\u5b58\u50a8\u65b9\u5f0f\uff1aSRAM\u4f7f\u7528\u66f4\u591a\u7684\u7535\u8def\u6765\u5b58\u50a8\u6bcf\u4e2a\u4f4d\uff0c\u800cDRAM\u4f7f\u7528\u4e00\u4e2a\u7535\u5bb9\u5668\u548c\u4e00\u4e2a\u6676\u4f53\u7ba1\u6765\u5b58\u50a8\u6bcf\u4e2a\u4f4d\u3002</li> <li> <p>\u5bfb\u5740\u65b9\u5f0f\uff1aDRAM\u9700\u8981\u901a\u8fc7\u884c\u5730\u5740\u548c\u5217\u5730\u5740\u6765\u5bfb\u5740\uff0c\u800cSRAM\u5219\u53ea\u9700\u8981\u4e00\u4e2a\u5730\u5740\u5c31\u53ef\u4ee5\u4e86\u3002</p> </li> <li> <p>Refresh Controller and Refresh Counter\uff08\u5237\u65b0\u63a7\u5236\u5668\u548c\u5237\u65b0\u8ba1\u6570\u5668\uff09\uff1a</p> </li> <li>\u95ee\u9898\u89e3\u91ca\uff1a \u8fd9\u63d0\u5230\u4e86DRAM\u4e2d\u7684\u5237\u65b0\u673a\u5236\u3002\u5728DRAM\u4e2d\uff0c\u7531\u4e8e\u5b58\u50a8\u5355\u5143\u7684\u7535\u8377\u9010\u6e10\u6cc4\u6f0f\uff0c\u9700\u8981\u5b9a\u671f\u8fdb\u884c\u5237\u65b0\uff0c\u4ee5\u9632\u6b62\u6570\u636e\u4e22\u5931\u3002</li> <li>\u89e3\u7b54\uff1a \u5237\u65b0\u63a7\u5236\u5668\u548c\u5237\u65b0\u8ba1\u6570\u5668\u534f\u540c\u5de5\u4f5c\uff0c\u5b9a\u671f\u5237\u65b0\u5b58\u50a8\u5668\u4e2d\u7684\u6570\u636e\uff0c\u786e\u4fdd\u5176\u7a33\u5b9a\u6027\u3002</li> <li>Read and Write Operations\uff08\u8bfb\u548c\u5199\u64cd\u4f5c\uff09\uff1a</li> <li>\u95ee\u9898\u89e3\u91ca\uff1a \u63d0\u5230\u4e86DRAM\u7684\u8bfb\u548c\u5199\u64cd\u4f5c\uff0c\u4ee5\u53ca\u5e94\u7528\u884c\u5730\u5740\u548c\u5217\u5730\u5740\u7684\u65b9\u5f0f\u3002</li> <li>\u89e3\u7b54\uff1a \u8bfb\u64cd\u4f5c\u6d89\u53ca\u4ece\u5b58\u50a8\u5355\u5143\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5199\u64cd\u4f5c\u6d89\u53ca\u5411\u5b58\u50a8\u5355\u5143\u5199\u5165\u6570\u636e\u3002\u884c\u5730\u5740\u6307\u5b9a\u4e86\u6240\u9009\u884c\uff0c\u5217\u5730\u5740\u6307\u5b9a\u4e86\u6240\u9009\u5217\u3002\u8fd9\u79cd\u5206\u89e3\u5730\u5740\u7684\u65b9\u5f0f\u6709\u52a9\u4e8e\u5b9a\u4f4d\u5230\u5177\u4f53\u7684\u5b58\u50a8\u5355\u5143\u3002</li> <li>Why is the address split?\uff08\u4e3a\u4ec0\u4e48\u5730\u5740\u8981\u62c6\u5206\uff1f\uff09\uff1a</li> <li>\u95ee\u9898\u89e3\u91ca\uff1a \u95ee\u4e3a\u4ec0\u4e48\u9700\u8981\u5c06\u5730\u5740\u62c6\u5206\u6210\u884c\u5730\u5740\u548c\u5217\u5730\u5740\u3002</li> <li>\u89e3\u7b54\uff1a \u5730\u5740\u62c6\u5206\u6709\u52a9\u4e8e\u63d0\u9ad8\u5b58\u50a8\u5668\u7684\u5b9a\u4f4d\u7cbe\u5ea6\u3002\u884c\u5730\u5740\u7528\u4e8e\u9009\u62e9\u7279\u5b9a\u884c\uff0c\u800c\u5217\u5730\u5740\u7528\u4e8e\u9009\u62e9\u884c\u4e2d\u7684\u5177\u4f53\u5143\u7d20\u3002\u8fd9\u79cd\u62c6\u5206\u6709\u52a9\u4e8e\u63d0\u9ad8DRAM\u7684\u5bfb\u5740\u6548\u7387\u3002</li> <li>Why is the row address applied first?\uff08\u4e3a\u4ec0\u4e48\u9996\u5148\u5e94\u7528\u884c\u5730\u5740\uff1f\uff09\uff1a</li> <li>\u95ee\u9898\u89e3\u91ca\uff1a \u8be2\u95ee\u4e3a\u4ec0\u4e48\u5728\u64cd\u4f5c\u4e2d\u9996\u5148\u5e94\u7528\u884c\u5730\u5740\u3002</li> <li>\u89e3\u7b54\uff1a \u884c\u5730\u5740\u7684\u5e94\u7528\u786e\u5b9a\u4e86\u6240\u9700\u7684\u884c\uff0c\u8fd9\u662f\u5b58\u50a8\u5355\u5143\u7684\u5927\u81f4\u4f4d\u7f6e\u3002\u5728\u786e\u5b9a\u4e86\u884c\u540e\uff0c\u5217\u5730\u5740\u7528\u4e8e\u9009\u62e9\u884c\u4e2d\u7684\u5177\u4f53\u5143\u7d20\u3002\u8fd9\u79cd\u987a\u5e8f\u6709\u52a9\u4e8e\u63d0\u9ad8\u5730\u5740\u7684\u5b9a\u4f4d\u6548\u7387\u3002</li> </ul> <p>SRAM\u548cDRAM\u7684\u533a\u522b\uff1a</p> <ul> <li>SRAM\uff08\u9759\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff09\uff1a</li> <li>\u7531\u89e6\u53d1\u5668\uff08flip-flops\uff09\u6784\u6210\uff0c\u4e0d\u9700\u8981\u5b9a\u671f\u5237\u65b0\u3002</li> <li>\u8bfb\u5199\u901f\u5ea6\u8f83\u5feb\uff0c\u4f46\u6210\u672c\u8f83\u9ad8\uff0c\u5bc6\u5ea6\u8f83\u4f4e\u3002</li> <li>\u901a\u5e38\u7528\u4e8e\u9ad8\u6027\u80fd\u7f13\u5b58\u3002</li> <li>DRAM\uff08\u52a8\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff09\uff1a</li> <li>\u7531\u7535\u5bb9\u548c\u6676\u4f53\u7ba1\u6784\u6210\uff0c\u9700\u8981\u5b9a\u671f\u5237\u65b0\u4ee5\u9632\u6b62\u6570\u636e\u4e22\u5931\u3002</li> <li>\u8bfb\u5199\u901f\u5ea6\u76f8\u5bf9\u8f83\u6162\uff0c\u4f46\u6210\u672c\u8f83\u4f4e\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u3002</li> <li>\u901a\u5e38\u7528\u4e8e\u4e3b\u5b58\u50a8\u5668\u3002</li> </ul> <p>\u603b\u4f53\u800c\u8a00\uff0cSRAM\u9002\u7528\u4e8e\u9700\u8981\u9ad8\u6027\u80fd\u548c\u4e0d\u9700\u8981\u9891\u7e41\u5237\u65b0\u7684\u573a\u666f\uff0c\u800cDRAM\u9002\u7528\u4e8e\u9700\u8981\u9ad8\u5bc6\u5ea6\u5b58\u50a8\u548c\u8f83\u4f4e\u6210\u672c\u7684\u573a\u666f\u3002</p> <p>\u753b\u51fa\u72b6\u6001\u673a\u6240\u5bf9\u5e94\u7684\u7535\u8def\u56fe\uff1a</p> <p>mealy\u72b6\u6001\u673a\u7684\u4e0b\u4e00\u72b6\u6001\u7531\u5f53\u524d\u72b6\u6001\u548c\u8f93\u5165\u51b3\u5b9a</p> <p>\u53ef\u4ee5\u753b\u5f88\u591a\u6761\u7ad6\u7ebf</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#counter","title":"counter \u8ba1\u6570\u5668\u7684\u5b9e\u73b0","text":"<p>\u63a5\u53e3\u5b9a\u4e49\uff1a\u8f93\u5165EN,clk\uff0c\u8f93\u51faQ0-Q3,CO  \u56db\u4e2aD flip-flop</p> <p>ripple counter\u662fasynchronous counter\uff0c\u662f \u5c06\u4e00\u4e2a\u4e0d\u65ad\u81ea\u53cd\u7684 <code>FF</code> \u7684\u8f93\u51fa\u76f4\u63a5\u6216\u95f4\u63a5\u4f5c\u4e3a\u4e0b\u4e00\u4e2a <code>FF</code> \u7684\u65f6\u949f\u8109\u51b2\u3002\u7531\u4e8e\u5f62\u6210\u4e00\u6b21\u8109\u51b2\u9700\u8981\u4e00\u5bf9 <code>0</code>&amp;<code>1</code>\uff0c\u6240\u4ee5\u524d\u4e00\u4e2a <code>FF</code> \u53d6\u53cd\u4e24\u6b21\u624d\u80fd\u5f15\u8d77\u4e0b\u4e00\u4e2a <code>FF</code> \u53d6\u53cd\u4e00\u6b21\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a <code>FF</code> \u662f\u5728\u4e0a\u4e00\u4e2a <code>FF</code> \u7684\u8f93\u51fa\u4ece <code>1</code> \u53d8 <code>0</code> \u65f6\u89e6\u53d1\uff0c\u90a3\u4e24\u4e2a <code>FF</code> \u7684\u53d8\u5316\u521a\u597d\u5bf9\u5e94\u4e8e\u4e8c\u8fdb\u5236\u81ea\u589e\u7684\u8fdb\u4f4d\u89c4\u5f8b\uff1a<code>(0,0)</code>\uff0c<code>(0,1)</code>\uff0c<code>(1,0)</code>\uff0c<code>(1,1)</code>\uff0c<code>(0,0)</code>\uff0c...</p> <p>ring counter\u662f\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u4ee3\u8868\uff0c</p> <p>4-bit \u201csynchronous\uff08\u540c\u6b65\uff09\u201d\u8ba1\u6570\u5668\uff0c\u5206\u4e3aserial gating \u548c parallel gating\uff0c\u533a\u522b\u5728\u4e8e\u903b\u8f91\u95e8\u4e4b\u95f4\u7684\u5ef6\u65f6parallel gating\u5c0f\u4e00\u4e9b</p> <p>4-bit binary counter with parallel load \u5c31\u662f\u5c06LD\u4fe1\u53f7\u548cLD\u975e\u4fe1\u53f7\u8f93\u5165\uff0cLD\u975e\u4fe1\u53f7\u548cclk\u4e0e\u4e00\u4e0b\uff0c\u4f7f\u5f97LD==1\u65f6\u5c31\u4e0dcount\uff0c\u76f4\u63a5\u5e76\u884c\u8f93\u5165\u6570\u636e</p> <p>BCD counter\u5c31\u662f\u5728Q0\u548cQ3\u90fd\u4e3a1\u65f6\uff08\u6570\u52309\u7684\u65f6\u5019\uff09\u8981\u56de\u52300\uff0c\u90a3\u4e48LD=1\u65f6\u5e76\u884c\u8f93\u51650\uff0c\u4e14LD\u4fe1\u53f7\u5c31\u662fQ0andQ3</p> <p>radix = 50/256 counter \u9700\u8981\u4f7f\u7528\u4e24\u575774LS161\u82af\u7247\uff0816\u8fdb\u5236adder\uff0c\u540c\u6b65\u56db\u4f4d2\u8fdb\u5236\u8ba1\u6570\u5668\uff09\u8fde\u63a5\u5b9e\u73b0\uff0c\u4e00\u822cclk\u4fe1\u53f7\u662f\u76f4\u63a5\u63a5\u5165\u7684\uff0c\u800cCTp\u548cCTt\u4fe1\u53f7\u53ef\u4ee5\u4f5c\u4e3a\u4f7f\u80fd\uff0c\u4f7f\u7528\u5f02\u6b65\u6e05\u96f6\uff08CR\u975e\uff09\u6765\u5b9e\u73b0mod N\u8ba1\u6570\u5668\uff0c\u5f02\u6b65\u6e05\u96f6\u4e0d\u662f\u901a\u8fc7LD\u65b0\u7684\u6570\u6765\u5b9e\u73b0\u7684\uff0c\u5f02\u6b65\u6e05\u96f6\u548cclk\u662f\u540c\u7b49\u5730\u4f4d\u7684\u4fe1\u53f7\uff08always @posedge clk or negedge CRn begin)</p> <p>\u4e0b\u56fe\u8f93\u51fa50\uff080011 0010\uff09\u65f6\u91cd\u7f6e</p> <p></p> <p>arbitrary counter\u9700\u8981\u4f7f\u7528\u72b6\u6001\u56fe\u548c\u72b6\u6001\u673a\u5b9e\u73b0</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#adder-subtracter","title":"adder subtracter","text":"<p>\u534a\u52a0\u5668\uff0c\u5168\u52a0\u5668</p> <p>half adder\u7684\u903b\u8f91\u5c31\u662fS = X\u975eY+Y\u975eX\uff0cC = XY</p> <p>full adder\u8003\u8651\u4e86\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u8fdb\u4f4d\u7684\u64cd\u4f5c\uff1a S = X,Y,Ci-1\u4e09\u8005\u5947\u6570\u4e2a\u4e3a1\uff0c\u51b3\u5b9a\u5f53\u524d\u4f4d\uff0cCi = XY+Ci-1*\uff08 X\u975eY+Y\u975eX\uff09\u51b3\u5b9a\u5f53\u524d\u4f4d\u7ed9\u51fa\u7684\u8fdb\u4f4d\uff0c\u901a\u5e38\u4f7f\u7528\u5f02\u6216\u95e8\uff0cS\u662f\u4e09\u4e2a\u4ea6\u6216\uff0c X\u975eY+Y\u975eX\u662fX\u5f02\u6216Y</p> <p>full adder\u53ef\u7531\u4e24\u4e2ahalf adder\u53e0\u52a0\u642d\u5efa</p> <p>4-bit  ripple adder\u7684\u8fc7\u7a0b\u5c31\u662f\u6b63\u5e38\u52a0\u6cd5\u8fdb\u4f4d\u7684\u8fc7\u7a0b</p> <p></p> <p>4\u4f4d\u52a0\u6cd5\u5668\u7684\u62bd\u8c61\u8868\u793a</p> <p></p> <p>4\u4f4d\u52a0\u51cf\u6cd5\u5668\u7684\u62bd\u8c61\u8868\u793a\uff0cS\u662f\u8fd0\u7b97\u7b26</p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#register-cell-design","title":"register cell design","text":"<p>\u9488\u5bf9\u65e0\u79fb\u4f4d\u64cd\u4f5c\u7684\u5bc4\u5b58\u5668cell \u8bbe\u8ba1\uff1a</p> <p>Give two register transfer operations (R1 unchanged except for the following cases):</p> <p>C1: R1&lt;-- R1 + R2</p> <p>(~C1)C2: R1&lt;--R1 - 1</p> <p>Use two 4-bits registers, one 4-bit adder, and other necessary gates to implement the above operations.</p> <p>source register\u7684\u503c\u4f5c\u4e3a\u8f93\u5165\u548c\u63a7\u5236\u4fe1\u53f7\u4e00\u5e76\u63a5\u5230D FF\u7684\u8f93\u5165\u7aef\uff0cD FF\u7684\u8f93\u51fa\u7aef\u63a5\u7ed9destination register</p> <p>LD = C1+C1\u975e = 1</p> <p>Di = C1(R1+R2)+\u975eC1(R1-1)</p> <p>\u6709\u79fb\u4f4d\u64cd\u4f5c\u7684\u5bc4\u5b58\u5668cell</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#shared-logic","title":"shared logic","text":"<p>\u5373\u53ea\u6d89\u53ca\u8f93\u5165\u7684\u63a7\u5236\u4fe1\u53f7\uff0c\u4e0d\u6d89\u53ca\u5f53\u524d\u72b6\u6001\u7684\u903b\u8f91\u503c\u7ec4\u5408\u53ef\u4ee5\u88ab\u91cd\u590d\u5229\u7528</p> <p>\u5316\u7b80\u7684\u65b9\u6cd5\uff1a\u4e00\u822c\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u4e24\u4e2a\u5bc4\u5b58\u5668\u8bbe\u4e3aAi\uff0cBi\uff0c\u72b6\u6001\u8bb0\u4f5cAt\uff0cBt\uff0c\u4e0b\u4e00\u72b6\u6001\u4e3aAt+1\uff0cBt+1\uff0c\u5f53\u524d\u7684\u5bc4\u5b58\u5668\u7684\u503c</p> <p>\u8fd8\u662f\u7528\u5361\u8bfa\u56fe\u5316\u7b80\u7684</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/1%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#serial-transfer-and-microoperations","title":"serial transfer and microoperations","text":"<p>serial transfer\u5c31\u662f\u50cf\u4e3b\u4ece\u89e6\u53d1\u5668\u4e00\u6837\u63a5\u8d77\u6765\uff0cn\u4f4d\u9700\u8981n\u4e2a\u4e0a\u5347\u6cbf\u624d\u80fd\u4f20\u8f93\u5b8c\u6bd5</p> <p>serial addition\u4e0e4\u4f4dcarry adder\u7684\u76f4\u63a5\u5b9e\u73b0\u662fspace and time\u7684tradeoff</p> <p></p> <p>8-1 multiplexer\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f3\u8f93\u5165\u7684\u903b\u8f91\u51fd\u6570</p> <p>8-1 multiplexer\u75313-8 decoder\u5148\u5c063\u4f4d\u7684\u63a7\u5236\u4fe1\u53f7\u8bd1\u7801\u62108\u4e2a\u5355\u72ec\u7684\u4fe1\u53f7\uff0c\u518d\u57288\u4e2a\u4fe1\u53f7\u4e2d\u9009\u4e00\u4e2a</p> <p></p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/15-16-middle/","title":"15-16","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/15-16-middle/#15-16","title":"15-16\u5e74\u671f\u4e2d\u8003\u8bd5\u8bd5\u5377","text":"\u6d59\u6c5f\u5927\u5b662015-16\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60 \u6d59\u6c5f\u5927\u5b662015-16\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60\u5f00\u59cb\u65f6\u95f401/01/2016 8:00:00 AM\u7ed3\u675f\u65f6\u95f401/18/2038 8:00:00 AM\u7b54\u9898\u65f6\u957f90\u5206\u949f\u8003\u751f\u5f97\u520643\u603b\u5206104\u5224\u65ad\u9898\u5f97\u5206\uff1a8\u603b\u5206\uff1a10R1-1<p>N(logN)2N(logN)^2N(logN)2 is O(N2)O(N^2)O(N2).</p> (2\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(2 \u5206)R1-2<p>If the postorder and inorder traversal sequences of a binary tree are the same, then none of the nodes in the tree has a right child.</p> (2\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(2 \u5206)R1-3<p>The best \"worst-case time complexity\" for any algorithm that sorts by comparisons only must be O(NlogN)O(NlogN)O(NlogN).</p> (2\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(2 \u5206)R1-4<p>If the most commonly used operations are to visit a random position and to insert and delete the last element in a linear list, then sequential storage works the fastest.</p> (2\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(2 \u5206)R1-5<p>Given the input sequence onto a stack as {1, 2, 3, ..., NNN}.  If the first output is iii, then the jjj-th output must be j\u2212i\u22121j-i-1j\u2212i\u22121.</p> (2\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)\u5355\u9009\u9898\u5f97\u5206\uff1a30\u603b\u5206\uff1a64R2-1<p>Given a tree of degree 4.  Suppose that the numbers of nodes of degrees 2, 3 and 4 are 4, 2 and 1, respectively.  Then the number of leaf nodes must be:</p> (6\u5206)A.<p>8</p> B.<p>12</p> C.<p>18</p> D.<p>20</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-2<p>Suppose that an array of size <code>m</code> is used to store a circular queue.  If the front position is <code>front</code> and the current size is <code>size</code>, then the rear element must be at:</p> (6\u5206)A.<p><code>front+size</code></p> B.<p><code>(front+size)%m</code></p> C.<p><code>(front+size-1)%m</code></p> D.<p><code>front+size-1</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-3<p>Insert {5, 2, 7, 3, 4, 1, 6} one by one into an initially empty min-heap.  The preorder traversal sequence of the resulting tree is:</p> (6\u5206)A.<p>1, 3, 2, 5, 4, 7, 6</p> B.<p>1, 3, 5, 4, 2, 7, 6</p> C.<p>1, 2, 5, 3, 4, 7, 6</p> D.<p>1, 2, 3, 4, 5, 7, 6</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(6 \u5206)R2-4<p>Among the following methods, which one's time complexity is always O(NlogN)O(NlogN)O(NlogN), no matter what the initial condition is?</p> (3\u5206)A.<p>bubble sort</p> B.<p>heap sort</p> C.<p>quick sort</p> D.<p>simple selection sort</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-5<p>Suppose that the height of a binary tree is hhh (the height of a leaf node is defined to be 1), and it has only the nodes of degrees 0 and 2.  Then the minimum and maximum possible total numbers of nodes are:</p> (6\u5206)A.<p>2h\u22121+12^{h-1}+12h\u22121+1, 2h\u221212^h-12h\u22121</p> B.<p>2h\u221212h-12h\u22121, 2h\u221212^h-12h\u22121</p> C.<p>2h2h2h, 2h\u221212^h-12h\u22121</p> D.<p>2h\u221212h-12h\u22121, 2h\u22121\u221212^{h-1}-12h\u22121\u22121</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-6<p>Suppose that the level-order traversal sequence of a min-heap is {1, 3, 2, 5, 4, 7, 6}.  Use the linear algorithm to adjust this min-heap into a max-heap.  The inorder traversal sequence of the resulting tree is:</p> (6\u5206)A.<p>4, 1, 3, 7, 6, 2, 5</p> B.<p>3, 5, 4, 2, 6, 1, 7</p> C.<p>3, 5, 4, 7, 2, 6, 1</p> D.<p>1, 4, 3, 7, 2, 6, 5</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(6 \u5206)R2-7<p>To delete <code>p</code> from a doubly linked list, we must do:</p> (6\u5206)A.<p><code>p-&gt;prior-&gt;next=p-&gt;next; p-&gt;next-&gt;prior=p-&gt;prior;</code></p> B.<p><code>p-&gt;next=p-&gt;prior-&gt;prior; p-&gt;prior=p-&gt;next-&gt;next;</code></p> C.<p><code>p-&gt;next-&gt;prior=p; p-&gt;next=p-&gt;next-&gt;next;</code></p> D.<p><code>p-&gt;prior=p-&gt;prior-&gt;prior; p-&gt;prior-&gt;next=p;</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(6 \u5206)R2-8<p>If on the 9th level of a complete binary tree (assume that the root is on the 1st level) there are 100 leaf nodes, then the maximum number of nodes of this tree must be:</p> (6\u5206)A.<p>1847</p> B.<p>823</p> C.<p>cannot be determined</p> D.<p>311</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(6 \u5206)R2-9<p>The array representation of a disjoint set containing numbers 0 to 8 is given by { 1, -4, 1, 1, -3, 4, 4, 8, -2 }.  Then to union the two sets which contain 6 and 8 (with union-by-size), the index of the resulting root and the value stored at the root are:</p> (6\u5206)A.<p>4 and -5</p> B.<p>8 and -6</p> C.<p>1 and -6</p> D.<p>8 and -5</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-10<p>For a binary search tree, in which order of traversal that we can obtain a non-decreasing sequence?</p> (3\u5206)A.<p>level-order traversal</p> B.<p>preorder traversal</p> C.<p>postorder traversal</p> D.<p>inorder traversal</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R2-11<p>Given input { 321, 156, 57, 46, 28, 7, 331, 33, 34, 63 }.  Which one of the following is the result after the 1st run of the Least Signification Digit (LSD) radix sort?</p> (4\u5206)A.<p>\u2192321\u2192331\u219233\u219263\u219234\u2192156\u219246\u219257\u21927\u219228</p> B.<p>\u2192331\u2192321\u219233\u219263\u219234\u2192156\u219246\u219257\u21927\u219228</p> C.<p>\u2192156\u219228\u2192321\u2192331\u219233\u219234\u219246\u219257\u219263\u21927</p> D.<p>\u219257\u219246\u219228\u21927\u219233\u219234\u219263\u2192156\u2192321\u2192331</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-12<p>Which one of the following relations is correct about the extra space taken by heap sort, quick sort and merge sort?</p> (3\u5206)A.<p>heap sort &gt;&gt;&gt; quick sort &gt;&gt;&gt; merge sort</p> B.<p>heap sort &lt;&lt;&lt; quick sort &lt;&lt;&lt; merge sort</p> C.<p>heap sort &gt;&gt;&gt; merge sort &gt;&gt;&gt; quick sort</p> D.<p>heap sort &lt;&lt;&lt; merge sort &lt;&lt;&lt; quick sort</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-13<p>Given the pushing sequence of a stack as {1, 2, 3, 4, 5}.  If the first number being popped out is 4, then the last one out must be:</p> (3\u5206)A.<p>1</p> B.<p>3</p> C.<p>5</p> D.<p>1 or 5</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)\u7a0b\u5e8f\u586b\u7a7a\u9898\u5f97\u5206\uff1a0\u603b\u5206\uff1a10R5-1<p>The function is to increase the value of the integer key at position <code>P</code> by a positive amount <code>D</code> in a max-heap <code>H</code>.</p> <pre><code>void IncreaseKey( int P, int D, PriorityQueue H )\n{\n   int i, key;\n   key = H-&gt;Elements[P] + D;\n   for ( i = (3\u5206); H-&gt;Elements[i/2] &lt; key; i/=2 )\n      (3\u5206);\n   H-&gt;Elements[i] = key;\n}</code></pre> \u5e8f\u53f7\u7ed3\u679c\u6d4b\u8bd5\u70b9\u5f97\u52060\u7f16\u8bd1\u9519\u8bef01\u672a\u4f5c\u7b540\u8bc4\u6d4b\u7ed3\u679c\u591a\u79cd\u9519\u8bef(0 \u5206)\u51fd\u6570\u9898\u5f97\u5206\uff1a5\u603b\u5206\uff1a20R6-1No Greater Than X in BST(20\u5206)<p>You are supposed to output, in decreasing order, all the elements no greater than <code>X</code> in a binary search tree <code>T</code>.</p> \u7f16\u8bd1\u5668GCC\u4ee3\u7801<pre>void Print_NGT( Tree T,  int X ) {\n    return;\n}</pre>\u7f16\u8bd1\u5668\u8f93\u51fa<pre>a.c: In function \u2018BuildTree\u2019:\na.c:33:6: warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result [-Wunused-result]\n      scanf(\"%d\", &amp;n);\n      ^~~~~~~~~~~~~~~\na.c:35:10: warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result [-Wunused-result]\n          scanf(\"%d\", &amp;x);\n          ^~~~~~~~~~~~~~~\na.c: In function \u2018main\u2019:\na.c:52:5: warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result [-Wunused-result]\n     scanf(\"%d\", &amp;X);\n     ^~~~~~~~~~~~~~~</pre>\u6d4b\u8bd5\u70b9\u7ed3\u679c\u6d4b\u8bd5\u70b9\u5f97\u5206\u8017\u65f6\u5185\u5b580\u7b54\u6848\u9519\u8bef04.00 ms312 KB1\u7b54\u6848\u6b63\u786e34.00 ms432 KB2\u7b54\u6848\u9519\u8bef04.00 ms336 KB3\u7b54\u6848\u6b63\u786e24.00 ms352 KB4\u7b54\u6848\u9519\u8bef04.00 ms384 KB\u8bc4\u6d4b\u7ed3\u679c\u90e8\u5206\u6b63\u786e(5 \u5206)"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/15-16-middle/#format-of-function","title":"Format of function:","text":"<pre><code>void Print_NGT( Tree T,  int X );</code></pre> <p>where <code>Tree</code> is defined as the following:</p> <pre><code>typedef struct TreeNode *Tree;\nstruct TreeNode {\n    int Element;\n    Tree  Left;\n    Tree  Right;\n};</code></pre> <p>The function is supposed to use <code>Output(X)</code> to print <code>X</code>.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/15-16-middle/#sample-program-of-judge","title":"Sample program of judge:","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct TreeNode *Tree;\nstruct TreeNode {\n    int Element;\n    Tree  Left;\n    Tree  Right;\n};\n\nTree BuildTree(); /* details omitted */\nvoid Output( int X ); /* details omitted */\n\nvoid Print_NGT( Tree T,  int X );\n\nint main()\n{\n    Tree T;\n    int X;\n\n    T = BuildTree();\n    scanf(\"%d\", &amp;X);\n    Print_NGT( T, X );\n    printf(\"End\\n\");\n\n    return 0;\n}\n\n/* Your function will be put here */\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/15-16-middle/#sample-output-1-for-the-tree-shown-in-figure-1","title":"Sample Output 1 (for the tree shown in Figure 1):","text":"<pre><code>91 90 85 81 80 55 End</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/15-16-middle/#sample-output-2-for-the-tree-shown-in-figure-2","title":"Sample Output 2 (for the tree shown in Figure 2):","text":"<pre><code>End</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/16-17-middle/","title":"16-17","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/16-17-middle/#16-17","title":"16-17\u5e74\u671f\u4e2d\u8003\u8bd5\u8bd5\u5377","text":"\u6d59\u6c5f\u5927\u5b662016-17\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60 \u6d59\u6c5f\u5927\u5b662016-17\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60\u5f00\u59cb\u65f6\u95f401/01/2016 8:00:00 AM\u7ed3\u675f\u65f6\u95f401/18/2038 8:00:00 AM\u7b54\u9898\u65f6\u957f45\u5206\u949f\u8003\u751f\u5f97\u520617\u603b\u5206100\u5224\u65ad\u9898\u5f97\u5206\uff1a12\u603b\u5206\uff1a15R1-1<p>In a binary search tree, the keys on the same level from left to right must be in sorted (non-decreasing) order.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-2<p>For a sequentially stored linear list of length NNN, the time complexities for query and insertion are O(1)O(1)O(1) and O(N)O(N)O(N), respectively.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-3<p>2N2^N2N and NNN^NNN have the same speed of growth.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R1-4<p>In a directed graph, the sum of the in-degrees must be equal to the sum of the out-degrees of all the vertices.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-5<p>If keys are pushed onto a stack in the order {1, 2, 3, 4, 5}, then it is impossible to obtain the output sequence {3, 4, 1, 2, 5}.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)\u5355\u9009\u9898\u5f97\u5206\uff1a0\u603b\u5206\uff1a65R2-1<p>Suppose that an array of size <code>m</code> is used to store a circular queue.  If the front position is <code>front</code> and the current size is <code>size</code>, then the rear element must be at:</p> (5\u5206)A.<p><code>front+size-1</code></p> B.<p><code>front+size</code></p> C.<p><code>(front+size-1)%m</code></p> D.<p><code>(front+size)%m</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-2<p>The result of performing three DeleteMin operations in the min-heap {1,3,2,6,7,5,4,15,14,12,9,10,11,13,8} is:</p> (5\u5206)A.<p>4,5,6,12,7,10,8,15,14,13,9,11</p> B.<p>4,5,6,7,8,9,10,11,12,13,14,15</p> C.<p>4,6,5,13,7,10,8,15,14,12,9,11</p> D.<p>4,6,5,12,7,10,8,15,14,9,13,11</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-3<p>In a complete binary tree with 1102 nodes, there must be __ leaf nodes.</p> (6\u5206)A.<p>1063</p> B.<p>551</p> C.<p>79</p> D.<p>cannot be determined</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-4<p>Use Dijkstra algorithm to find the shortest paths from 1 to every other vertices.  In which order that the destinations must be obtained?</p> <p></p> (5\u5206)A.<p>5, 2, 3, 4, 6</p> B.<p>5, 2, 3, 6, 4</p> C.<p>5, 2, 6, 3, 4</p> D.<p>5, 2, 4, 3, 6</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-5<p>Given a directed graph G=(V, E) where <code>V = {v1, v2, v3, v4, v5, v6}</code> and <code>E = {&lt;v1,v2&gt;, &lt;v1,v4&gt;, &lt;v2,v6&gt;, &lt;v3,v1&gt;, &lt;v3,v4&gt;, &lt;v4,v5&gt;, &lt;v5,v2&gt;, &lt;v5,v6&gt;}</code>.  Then the topological order of G is:</p> (5\u5206)A.<p><code>v3, v4, v1, v5, v2, v6</code></p> B.<p><code>v3, v1, v4, v5, v2, v6</code></p> C.<p><code>v1, v3, v4, v5, v2, v6</code></p> D.<p><code>v1, v4, v3, v5, v2, v6</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-6<p>In a weighted graph, if the length of the shortest path from <code>b</code> to <code>a</code> is 10, and there exists an edge of weight 3 between <code>c</code> and <code>b</code>, then how many of the following statements is/are TRUE?</p> <ol> <li>The length of the shortest path from <code>c</code> to <code>a</code> must be 13.</li> <li>The length of the shortest path from <code>c</code> to <code>a</code> must be 7.</li> <li>The length of the shortest path from <code>c</code> to <code>a</code> must be no greater than 13.</li> <li>The length of the shortest path from <code>c</code> to <code>a</code> must be no less than 7.</li> </ol> (6\u5206)A.<p>4</p> B.<p>3</p> C.<p>2</p> D.<p>1</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-7<p>The array representation of a disjoint set is given by { 4, 6, 5, 2, -3, -4, 3 }.  If the elements are numbered from 1 to 7, the resulting array after invoking <code>Union(Find(7),Find(1))</code> with union-by-size and path-compression is:</p> (5\u5206)A.<p>{ 4, 6, 5, 2, 6, -7, 3 }</p> B.<p>{ 6, 6, 5, 6, 6, -7, 5 }</p> C.<p>{ 4, 6, 5, 2, -7, 5, 3 }</p> D.<p>{ 6, 6, 5, 6, -7, 5, 5 }</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-8<p>Given a quadtree(\u56db\u53c9\u6811) with 3 nodes of degree 2, 2 nodes of degree 3, 4 nodes of degree 4.  The number of leaf nodes in this tree is __.</p> (5\u5206)A.<p>21</p> B.<p>10</p> C.<p>12</p> D.<p>20</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-9<p>What is a critical path in an AOE network?</p> (5\u5206)A.<p>the shortest path from the first to the last event</p> B.<p>the longest path from the first to the last event</p> C.<p>the shortest circuit</p> D.<p>the longest circuit</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-10<p>Insert { 6, 9, 12, 3, 4, 8 } one by one into an initially empty binary search tree.  The post-order traversal sequence of the resulting tree is:</p> (6\u5206)A.<p>3, 4, 6, 8, 12, 9</p> B.<p>4, 3, 6, 8, 12, 9</p> C.<p>4, 3, 8, 12, 9, 6</p> D.<p>3, 4, 9, 8, 12, 6</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-11<p>To insert <code>s</code> after <code>p</code> in a doubly linked circular list, we must do:</p> (6\u5206)A.<p><code>s-&gt;prior=p; s-&gt;next=p-&gt;next; p-&gt;next=s; p-&gt;next-&gt;prior=s;</code></p> B.<p><code>p-&gt;next=s; s-&gt;prior=p; p-&gt;next-&gt;prior=s ; s-&gt;next=p-&gt;next;</code></p> C.<p><code>p-&gt;next-&gt;prior=s; p-&gt;next=s; s-&gt;prior=p; s-&gt;next=p-&gt;next;</code></p> D.<p><code>s-&gt;prior=p; s-&gt;next=p-&gt;next; p-&gt;next-&gt;prior=s; p-&gt;next=s;</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-12<p>If an undirected graph G = (V, E) contains 7 vertices.  Then to guarantee that G is connected in any cases, there has to be at least ____ edges.</p> (6\u5206)A.<p>6</p> B.<p>16</p> C.<p>21</p> D.<p>15</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)\u7a0b\u5e8f\u586b\u7a7a\u9898\u5f97\u5206\uff1a5\u603b\u5206\uff1a20R5-1<p>The function is to lower the value of the integer key at position <code>P</code> by a positive amount <code>D</code> in a min-heap <code>H</code>.</p> <pre><code>void DecreaseKey( int P, int D, PriorityQueue H )\n{\n   int i, key;\n   key = H-&gt;Elements[P] - D;\n   for ( i = (5\u5206); H-&gt;Elements[i/2] &gt; key; i/=2 )\n      (5\u5206);\n   H-&gt;Elements[i] = key;\n}</code></pre> \u8bc4\u6d4b\u7ed3\u679c\u672a\u4f5c\u7b54(0 \u5206)R5-2<p>Please fill in the blanks in the program which performs <code>Find</code> as a Union/Find operation with path compression.</p> <pre><code>SetType Find ( ElementType X, DisjSet S )\n{   \n   ElementType root, trail, lead;\n\n   for ( root = X; S[root] &gt; 0; (5\u5206) ) ;  \n   for ( trail = X; trail != root; trail = lead ) {\n      lead = S[trail] ;   \n      (5\u5206);   \n   } \n   return root;\n}</code></pre> \u5e8f\u53f7\u7ed3\u679c\u6d4b\u8bd5\u70b9\u5f97\u52060\u7b54\u6848\u6b63\u786e51\u672a\u4f5c\u7b540\u8bc4\u6d4b\u7ed3\u679c\u90e8\u5206\u6b63\u786e(5 \u5206)"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/17-18-middle/","title":"17-18","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/17-18-middle/#17-18","title":"17-18\u5e74\u671f\u4e2d\u8003\u8bd5\u8bd5\u5377","text":"\u6d59\u6c5f\u5927\u5b662017-18\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60 \u6d59\u6c5f\u5927\u5b662017-18\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60\u5f00\u59cb\u65f6\u95f401/01/2016 8:00:00 AM\u7ed3\u675f\u65f6\u95f401/18/2038 8:00:00 AM\u7b54\u9898\u65f6\u957f45\u5206\u949f\u8003\u751f\u5f97\u520627\u603b\u5206100\u5224\u65ad\u9898\u5f97\u5206\uff1a9\u603b\u5206\uff1a15R1-1<p>If keys are pushed onto a stack in the order {1, 2, 3, 4, 5}, then it is impossible to obtain the output sequence {3, 4, 1, 2, 5}.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-2<p>For a sequentially stored linear list of length NNN, the time complexities for deleting the first element and inserting the last element are O(1)O(1)O(1) and O(N)O(N)O(N), respectively.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R1-3<p>The sum of the degrees of all the vertices in a connected graph must be an even number.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-4<p>In a binary search tree, the keys on the same level from left to right must be in sorted (non-decreasing) order.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-5<p>N2logNN^2 logNN2logN and NlogN2N logN^2NlogN2 have the same speed of growth.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)\u5355\u9009\u9898\u5f97\u5206\uff1a18\u603b\u5206\uff1a65R2-1<p>How many leaf node does a complete binary tree with 2435 nodes have?</p> (6\u5206)A.<p>1218</p> B.<p>1217</p> C.<p>cannot be determined</p> D.<p>812</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(6 \u5206)R2-2<p>The result of performing three DeleteMin operations in the min-heap {1,3,2,6,7,5,4,15,14,12,9,10,11,13,8} is:</p> (5\u5206)A.<p>4,5,6,12,7,10,8,15,14,13,9,11</p> B.<p>4,5,6,7,8,9,10,11,12,13,14,15</p> C.<p>4,6,5,13,7,10,8,15,14,12,9,11</p> D.<p>4,6,5,12,7,10,8,15,14,9,13,11</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-3<p>The array representation of a disjoint set is given by { 4, 6, 5, 2, -3, -4, 3 }.  If the elements are numbered from 1 to 7, the resulting array after invoking <code>Union(Find(7),Find(1))</code> with union-by-size and path-compression is:</p> (5\u5206)A.<p>{ 4, 6, 5, 2, -7, 5, 3 }</p> B.<p>{ 4, 6, 5, 2, 6, -7, 3 }</p> C.<p>{ 6, 6, 5, 6, -7, 5, 5 }</p> D.<p>{ 6, 6, 5, 6, 6, -7, 5 }</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-4<p>Insert { 6, 9, 12, 3, 4, 8 } one by one into an initially empty binary search tree.  The post-order traversal sequence of the resulting tree is:</p> (6\u5206)A.<p>3, 4, 6, 8, 12, 9</p> B.<p>3, 4, 9, 8, 12, 6</p> C.<p>4, 3, 8, 12, 9, 6</p> D.<p>4, 3, 6, 8, 12, 9</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-5<p>In-order traversal of a binary tree can be done iteratively.  Given the stack operation sequence as the following:</p> <pre><code>push(1), push(2), push(3), pop(), push(4), pop(), pop(), push(5), pop(), pop(), push(6), pop()</code></pre> <p>Which one of the following statements is TRUE?</p> (6\u5206)A.<p>2 and 6 are siblings</p> B.<p>6 is the root</p> C.<p>2 is the parent of 4</p> D.<p>None of the above</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(6 \u5206)R2-6<p>The recurrent equations for the time complexities of programs P1 and P2 are:</p> <ul> <li>P1: T(1)=1T(1)=1T(1)=1, T(N)=T(N/2)+1T(N)=T(N/2)+1T(N)=T(N/2)+1;</li> <li>P2: T(1)=1T(1)=1T(1)=1, T(N)=2T(N/2)+1T(N)=2T(N/2)+1T(N)=2T(N/2)+1;</li> </ul> <p>Then the best conclusion about their time complexities is:</p> (5\u5206)A.<p>they are both O(logN)O(logN)O(logN)</p> B.<p>O(logN)O(logN)O(logN) for P1, and O(N)O(N)O(N) for P2</p> C.<p>O(logN)O(logN)O(logN) for P1, and O(NlogN)O(NlogN)O(NlogN) for P2</p> D.<p>they are both O(N)O(N)O(N)</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-7<p>From the given graph shown by the figure, how many different topological orders can we obtain?</p> <p></p> (5\u5206)A.<p>4</p> B.<p>3</p> C.<p>1</p> D.<p>2</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-8<p>If an undirected graph G = (V, E) contains 7 vertices.  Then to guarantee that G is connected in any cases, there has to be at least ____ edges.</p> (6\u5206)A.<p>6</p> B.<p>15</p> C.<p>16</p> D.<p>21</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-9<p>To delete <code>p</code> from a doubly linked list, we must do:</p> (6\u5206)A.<p><code>p-&gt;prior=p-&gt;prior-&gt;prior; p-&gt;prior-&gt;next=p;</code></p> B.<p><code>p-&gt;next=p-&gt;prior-&gt;prior; p-&gt;prior=p-&gt;next-&gt;next;</code></p> C.<p><code>p-&gt;next-&gt;prior=p; p-&gt;next=p-&gt;next-&gt;next;</code></p> D.<p><code>p-&gt;prior-&gt;next=p-&gt;next; p-&gt;next-&gt;prior=p-&gt;prior;</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(6 \u5206)R2-10<p>Which of the following statements is TRUE about topological sorting?</p> (5\u5206)A.<p>In a DAG, if for any pair of distinct vertices ViV_iVi\u200b and VjV_jVj\u200b, there is a path either from ViV_iVi\u200b to VjV_jVj\u200b or from VjV_jVj\u200b to ViV_iVi\u200b, then the DAG must have a unique topological sequence.</p> B.<p>If the adjacency matrix is triangular, then the corresponding directed graph must have a unique topological sequence.</p> C.<p>If  ViV_iVi\u200b precedes  VjV_jVj\u200b in a topological sequence, then there must be a path from ViV_iVi\u200b to VjV_jVj\u200b.</p> D.<p>If a graph has a topological sequence, then its adjacency matrix must be triangular.</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-11<p>Given a quadtree(\u56db\u53c9\u6811) with 4 nodes of degree 2, 4 nodes of degree 3, 3 nodes of degree 4.  The number of leaf nodes in this tree is __.</p> (5\u5206)A.<p>21</p> B.<p>20</p> C.<p>12</p> D.<p>22</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-12<p>Suppose that an array of size <code>m</code> is used to store a circular queue.  If the front position is <code>front</code> and the current size is <code>size</code>, then the rear element must be at:</p> (5\u5206)A.<p><code>front+size</code></p> B.<p><code>(front+size)%m</code></p> C.<p><code>front+size-1</code></p> D.<p><code>(front+size-1)%m</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)\u7a0b\u5e8f\u586b\u7a7a\u9898\u5f97\u5206\uff1a0\u603b\u5206\uff1a20R5-1<p>The function is to find the <code>K</code>-th largest element in a list <code>A</code> of <code>N</code> elements.  The function <code>BuildMinHeap(H, K)</code> is to arrange elements <code>H[1]</code> ... <code>H[K]</code> into a min-heap.  Please complete the following program. </p> <pre><code>ElementType FindKthLargest ( int A[], int N, int K )\n{   /* it is assumed that K&lt;=N */\n    ElementType *H;\n    int i, next, child;\n\n    H = (ElementType *)malloc((K+1)*sizeof(ElementType));\n    for ( i=1; i&lt;=K; i++ ) H[i] = A[i-1];\n    BuildMinHeap(H, K);\n\n    for ( next=K; next&lt;N; next++ ) {\n        H[0] = A[next];\n        if ( H[0] &gt; H[1] ) {\n            for ( i=1; i*2&lt;=K; i=child ) {\n                child = i*2;\n                if ( child!=K &amp;&amp; (5\u5206) ) child++;\n                if ( (5\u5206) )\n                    H[i] = H[child];\n                else break;\n            }\n            H[i] = H[0];\n        }\n    }\n    return H[1];\n}\n</code></pre> \u5e8f\u53f7\u7ed3\u679c\u6d4b\u8bd5\u70b9\u5f97\u52060\u7f16\u8bd1\u9519\u8bef01\u672a\u4f5c\u7b540\u8bc4\u6d4b\u7ed3\u679c\u591a\u79cd\u9519\u8bef(0 \u5206)R5-2<p>Please fill in the blanks in the program which performs <code>Find</code> as a Union/Find operation with path compression.</p> <pre><code>SetType Find ( ElementType X, DisjSet S )\n{   \n   ElementType root, trail, lead;\n\n   for ( root = X; S[root] &gt; 0; (5\u5206) ) ;  \n   for ( trail = X; trail != root; trail = lead ) {\n      lead = S[trail] ;   \n      (5\u5206);   \n   } \n   return root;\n}</code></pre> \u5e8f\u53f7\u7ed3\u679c\u6d4b\u8bd5\u70b9\u5f97\u52060\u7f16\u8bd1\u9519\u8bef01\u672a\u4f5c\u7b540\u8bc4\u6d4b\u7ed3\u679c\u591a\u79cd\u9519\u8bef(0 \u5206)"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/18-19-middle/","title":"18-19","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/18-19-middle/#18-19","title":"18-19\u5e74\u671f\u4e2d\u8003\u8bd5\u8bd5\u5377","text":"\u6d59\u6c5f\u5927\u5b662018-19\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60 \u6d59\u6c5f\u5927\u5b662018-19\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60\u5f00\u59cb\u65f6\u95f401/01/2016 8:00:00 AM\u7ed3\u675f\u65f6\u95f401/18/2038 8:00:00 AM\u7b54\u9898\u65f6\u957f90\u5206\u949f\u8003\u751f\u5f97\u520619\u603b\u5206100\u5224\u65ad\u9898\u5f97\u5206\uff1a12\u603b\u5206\uff1a15R1-1<p>2N2^N2N and NNN^NNN have the same speed of growth.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R1-2<p>If keys are pushed onto a stack in the order {1, 2, 3, 4, 5}, then it is impossible to obtain the output sequence {3, 4, 1, 2, 5}.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-3<p>If there are less than 20 inversions in an integer array, then Insertion Sort will be the best method among Quick Sort, Heap Sort and Insertion Sort.  </p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-4<p>For a sequentially stored linear list of length NNN, the time complexities for query and insertion are O(1)O(1)O(1) and O(N)O(N)O(N), respectively.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-5<p>In a binary search tree, the keys on the same level from left to right must be in sorted (non-decreasing) order.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)\u5355\u9009\u9898\u5f97\u5206\uff1a5\u603b\u5206\uff1a64R2-1<p>The recurrent equations for the time complexities of programs P1 and P2 are:</p> <ul> <li>P1: T(1)=1T(1)=1T(1)=1, T(N)=T(N/2)+1T(N)=T(N/2)+1T(N)=T(N/2)+1;</li> <li>P2: T(1)=1T(1)=1T(1)=1, T(N)=2T(N/2)+1T(N)=2T(N/2)+1T(N)=2T(N/2)+1;</li> </ul> <p>Then the best conclusion about their time complexities is:</p> (5\u5206)A.<p>O(logN)O(logN)O(logN) for P1, and O(NlogN)O(NlogN)O(NlogN) for P2</p> B.<p>they are both O(N)O(N)O(N)</p> C.<p>O(logN)O(logN)O(logN) for P1, and O(N)O(N)O(N) for P2</p> D.<p>they are both O(logN)O(logN)O(logN)</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-2<p>To delete <code>p</code> from a doubly linked list, we must do:</p> (5\u5206)A.<p><code>p-&gt;prior=p-&gt;prior-&gt;prior; p-&gt;prior-&gt;next=p;</code></p> B.<p><code>p-&gt;next-&gt;prior=p; p-&gt;next=p-&gt;next-&gt;next;</code></p> C.<p><code>p-&gt;prior-&gt;next=p-&gt;next; p-&gt;next-&gt;prior=p-&gt;prior;</code></p> D.<p><code>p-&gt;next=p-&gt;prior-&gt;prior; p-&gt;prior=p-&gt;next-&gt;next;</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-3<p>Given input {15, 9, 7, 8, 20, -1, 4}.  If the result of the 1st run of Shell sort is {15, -1, 4, 8, 20, 9, 7}, then the initial increment must be:</p> (5\u5206)A.<p>3</p> B.<p>4</p> C.<p>1</p> D.<p>2</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-4<p>In-order traversal of a binary tree can be done iteratively.  Given the stack operation sequence as the following:</p> <pre><code>push(1), push(2), push(3), pop(), push(4), pop(), pop(), push(5), pop(), pop(), push(6), pop()</code></pre> <p>Which one of the following statements is TRUE?</p> (5\u5206)A.<p>6 is the root</p> B.<p>2 is the parent of 4</p> C.<p>None of the above</p> D.<p>3 and 5 are siblings</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-5<p>How many leaf node does a complete binary tree with 2435 nodes have?</p> (5\u5206)A.<p>1217</p> B.<p>cannot be determined</p> C.<p>812</p> D.<p>1218</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-6<p>Suppose that an array of size <code>m</code> is used to store a circular queue.  If the head pointer <code>front</code> and the current size variable <code>size</code> are used to represent the range of the queue instead of <code>front</code> and <code>rear</code>, then the maximum capacity of this queue can be:</p> (5\u5206)A.<p><code>m+1</code></p> B.<p>cannot be determined</p> C.<p><code>m-1</code></p> D.<p><code>m</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-7<p>Given input { 4321, 56, 57, 46, 28, 7, 331, 33, 234, 63 }.  Which one of the following is the result after the 1st run of the Least Signification Digit (LSD) radix sort?</p> (5\u5206)A.<p>\u21924321\u2192331\u219233\u219263\u2192234\u219256\u219246\u219257\u21927\u219228</p> B.<p>\u219257\u219246\u219228\u21927\u219233\u2192234\u219263\u219256\u21924321\u2192331</p> C.<p>\u219256\u219228\u21924321\u2192331\u219233\u2192234\u219246\u219257\u219263\u21927</p> D.<p>\u2192331\u21924321\u219233\u219263\u2192234\u219256\u219246\u219257\u21927\u219228</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(5 \u5206)R2-8<p>Given a quadtree(\u56db\u53c9\u6811) with 4 nodes of degree 2, 4 nodes of degree 3, 3 nodes of degree 4.  The number of leaf nodes in this tree is __.</p> (5\u5206)A.<p>20</p> B.<p>21</p> C.<p>12</p> D.<p>22</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-9<p>For an in-order threaded binary tree, if the pre-order and in-order traversal sequences are <code>B E A C F D</code> and <code>A E C B D F</code> respectively, which pair of nodes' left links are both threads?</p> (4\u5206)A.<p>B and E</p> B.<p>E and F</p> C.<p>C and F</p> D.<p>C and D</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-10<p>The result of performing three DeleteMin operations in the min-heap {1,3,2,12,6,4,8,15,14,9,7,5,11,13,10} is:</p> (5\u5206)A.<p>4,6,5,12,7,10,8,15,14,9,13,11</p> B.<p>4,6,5,13,7,10,8,15,14,12,9,11</p> C.<p>4,5,6,12,7,10,8,15,14,13,9,11</p> D.<p>4,5,6,7,8,9,10,11,12,13,14,15</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-11<p>For the quicksort implementation with the left pointer stops at an element with the same key as the pivot during the partitioning, but the right pointer does not stop in a similar case, what is the running time when all keys are equal?</p> (5\u5206)A.<p>O(logN)O(logN)O(logN)</p> B.<p>O(N)O(N)O(N)</p> C.<p>O(N2)O(N^2)O(N2)</p> D.<p>O(NlogN)O(NlogN)O(NlogN)</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-12<p>Among the following sorting methods, which ones will be slowed down if we store the elements in a linked structure instead of a sequential structure?</p> <ol> <li>Insertion sort;  2. Selection Sort;  3. Bubble sort;  4. Shell sort;  5. Heap sort</li> </ol> (5\u5206)A.<p>3 and 4 only</p> B.<p>4 and 5 only</p> C.<p>2 and 3 only</p> D.<p>1 and 2 only</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-13<p>Insert { 3, 8, 9, 1, 2, 6 } one by one into an initially empty binary search tree.  The post-order  traversal sequence of the resulting tree is:</p> (5\u5206)A.<p>1, 2, 3, 6, 9, 8</p> B.<p>2, 1, 3, 6, 9, 8</p> C.<p>1, 2, 8, 6, 9, 3</p> D.<p>2, 1, 6, 9, 8, 3</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)\u7a0b\u5e8f\u586b\u7a7a\u9898\u5f97\u5206\uff1a0\u603b\u5206\uff1a15R5-1<p>The function is to find the <code>K</code>-th smallest element in a list <code>A</code> of <code>N</code> elements.  The function <code>BuildMaxHeap(H, K)</code> is to arrange elements <code>H[1]</code> ... <code>H[K]</code> into a max-heap.  Please complete the following program. </p> <pre><code>ElementType FindKthSmallest ( int A[], int N, int K )\n{   /* it is assumed that K&lt;=N */\n    ElementType *H;\n    int i, next, child;\n\n    H = (ElementType *)malloc((K+1)*sizeof(ElementType));\n    for ( i=1; i&lt;=K; i++ ) H[i] = A[i-1];\n    BuildMaxHeap(H, K);\n\n    for ( next=K; next&lt;N; next++ ) {\n        H[0] = A[next];\n        if ( H[0] &lt; H[1] ) {\n            for ( i=1; i*2&lt;=K; i=child ) {\n                child = i*2;\n                if ( child!=K &amp;&amp; (3\u5206) ) child++;\n                if ( (3\u5206) )\n                    H[i] = H[child];\n                else break;\n            }\n            H[i] = H[0];\n        }\n    }\n    return H[1];\n}\n</code></pre> \u5e8f\u53f7\u7ed3\u679c\u6d4b\u8bd5\u70b9\u5f97\u52060\u7f16\u8bd1\u9519\u8bef01\u672a\u4f5c\u7b540\u8bc4\u6d4b\u7ed3\u679c\u591a\u79cd\u9519\u8bef(0 \u5206)R5-2<p>The function is to sort the list { <code>r[1] \u2026 r[n]</code> } in non-decreasing order.  Unlike selection sort which places only the minimum unsorted element in its correct position, this algorithm finds both the minimum and the maximum unsorted elements and places them into their final positions.</p> <pre><code>void  sort( list r[], int n )  \n{\n   int i, j, mini, maxi;\n\n   for (i=1; i&lt;n-i+1; i++) {\n      mini = maxi = i;\n      for( j=i+1; (3\u5206); ++j ){\n         if( (3\u5206) ) mini = j; \n         else if(r[j]-&gt;key &gt; r[maxi]-&gt;key) maxi = j;\n      }\n      if( mini != i ) swap(&amp;r[mini], &amp;r[i]);\n      if( maxi != n-i+1 ){\n         if( (3\u5206) ) swap(&amp;r[mini], &amp;r[n-i+1]);\n         else swap(&amp;r[maxi], &amp;r[n-i+1]);\n      }\n   }\n} </code></pre> \u8bc4\u6d4b\u7ed3\u679c\u672a\u4f5c\u7b54(0 \u5206)\u51fd\u6570\u9898\u5f97\u5206\uff1a2\u603b\u5206\uff1a6R6-1No Less Than X in BST(6\u5206)<p>You are supposed to output, in decreasing order, all the elements no less than <code>X</code> in a binary search tree <code>T</code>.</p> \u7f16\u8bd1\u5668GCC\u4ee3\u7801<pre>void Print_NLT( Tree T,  int X ) {\n    return;\n}</pre>\u7f16\u8bd1\u5668\u8f93\u51fa<pre>a.c: In function \u2018BuildTree\u2019:\na.c:33:6: warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result [-Wunused-result]\n      scanf(\"%d\", &amp;n);\n      ^~~~~~~~~~~~~~~\na.c:35:10: warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result [-Wunused-result]\n          scanf(\"%d\", &amp;x);\n          ^~~~~~~~~~~~~~~\na.c: In function \u2018main\u2019:\na.c:52:5: warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result [-Wunused-result]\n     scanf(\"%d\", &amp;X);\n     ^~~~~~~~~~~~~~~</pre>\u6d4b\u8bd5\u70b9\u7ed3\u679c\u6d4b\u8bd5\u70b9\u5f97\u5206\u8017\u65f6\u5185\u5b580\u7b54\u6848\u9519\u8bef05.00 ms316 KB1\u7b54\u6848\u6b63\u786e14.00 ms384 KB2\u7b54\u6848\u9519\u8bef05.00 ms356 KB3\u7b54\u6848\u6b63\u786e14.00 ms324 KB4\u7b54\u6848\u9519\u8bef05.00 ms400 KB\u8bc4\u6d4b\u7ed3\u679c\u90e8\u5206\u6b63\u786e(2 \u5206)"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/18-19-middle/#format-of-function","title":"Format of function:","text":"<pre><code>void Print_NLT( Tree T,  int X );</code></pre> <p>where <code>Tree</code> is defined as the following:</p> <pre><code>typedef struct TreeNode *Tree;\nstruct TreeNode {\n    int Element;\n    Tree  Left;\n    Tree  Right;\n};</code></pre> <p>The function is supposed to use <code>Output(X)</code> to print <code>X</code>.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/18-19-middle/#sample-program-of-judge","title":"Sample program of judge:","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct TreeNode *Tree;\nstruct TreeNode {\n    int Element;\n    Tree  Left;\n    Tree  Right;\n};\n\nTree BuildTree(); /* details omitted */\nvoid Output( int X ); /* details omitted */\n\nvoid Print_NLT( Tree T,  int X );\n\nint main()\n{\n    Tree T;\n    int X;\n\n    T = BuildTree();\n    scanf(\"%d\", &amp;X);\n    Print_NLT( T, X );\n    printf(\"End\\n\");\n\n    return 0;\n}\n\n/* Your function will be put here */\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/18-19-middle/#sample-output-1-for-the-tree-shown-in-figure-1","title":"Sample Output 1 (for the tree shown in Figure 1):","text":"<pre><code>92 91 90 85 81 80 End</code></pre> Figure 1"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/18-19-middle/#sample-output-2-for-the-tree-shown-in-figure-2","title":"Sample Output 2 (for the tree shown in Figure 2):","text":"<pre><code>End</code></pre> Figure 2"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/19-20-middle/","title":"19-20","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/exams/19-20-middle/#19-20","title":"19-20\u5e74\u671f\u4e2d\u8003\u8bd5\u8bd5\u5377","text":"\u6d59\u6c5f\u5927\u5b662019-20\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60\uff0845\u5206\u949f\uff09 \u6d59\u6c5f\u5927\u5b662019-20\u79cb\u51ac\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\u671f\u4e2d\u6a21\u62df\u7ec3\u4e60\uff0845\u5206\u949f\uff09\u5f00\u59cb\u65f6\u95f401/01/2016 8:00:00 AM\u7ed3\u675f\u65f6\u95f401/18/2038 8:00:00 AM\u7b54\u9898\u65f6\u957f45\u5206\u949f\u8003\u751f\u5f97\u520638\u603b\u5206100\u5224\u65ad\u9898\u5f97\u5206\uff1a12\u603b\u5206\uff1a15R1-1<p>NlogN\\sqrt{N}logNN\u200blogN is O(N)O(N)O(N).</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-2<p>In Union/Find algorithm, if Unions are done by size, the depth of any node must be no more than N/2N/2N/2, but not O(logN)O(logN)O(logN). </p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R1-3<p>If a linear list is represented by a 1-dimensional array, the addresses of the elements in the memory must be consecutive.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-4<p>ADT is the abbreviation for Abstract Data Type in the textbook of data structures.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)R1-5<p>In a directed graph, the sum of the in-degrees must be equal to the sum of the out-degrees of all the vertices.</p> (3\u5206)TF\u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(3 \u5206)\u5355\u9009\u9898\u5f97\u5206\uff1a26\u603b\u5206\uff1a60R2-1<p>If a binary search tree of NNN nodes is also a complete binary tree, then among the following, which one is FALSE?</p> (5\u5206)A.<p>The average search time is O(logN)O(logN)O(logN)</p> B.<p>The largest key must be on the last level</p> C.<p>The median key must be at either the root or in the left subtree of the root</p> D.<p>The smallest key must be at a leaf node</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(5 \u5206)R2-2<p>The following figure shows the AOE network of a project with 8 activities.  The earliest and the latest start times of the activity <code>d</code> are __, respectively.</p> <p></p> (5\u5206)A.<p>15 and 15</p> B.<p>12 and 14</p> C.<p>12 and 12</p> D.<p>3 and 7</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(5 \u5206)R2-3<p></p> <p>Which one of the following is the data structure that is best represented by the above picture?</p> (1\u5206)A.<p>Complete binary tree</p> B.<p>Two-dimensional array</p> C.<p>Directed graph</p> D.<p>Circularly linked list</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(1 \u5206)R2-4<p>For a sequentially stored linear list of length NNN, the time complexities for query and insertion are:</p> (5\u5206)A.<p>O(1)O(1)O(1), O(1)O(1)O(1)</p> B.<p>O(1)O(1)O(1), O(N)O(N)O(N)</p> C.<p>O(N)O(N)O(N), O(1)O(1)O(1)</p> D.<p>O(N)O(N)O(N), O(N)O(N)O(N)</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-5<p>If graph G is NOT connected and has 27 edges, then it must have at least ____ vertices.</p> (5\u5206)A.<p>8</p> B.<p>10</p> C.<p>7</p> D.<p>9</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-6<p>A full tree of degree 3 is a tree in which every node other than the leaves has 3 children.  How many leaves does a full tree of degree 3 have if it has 127 nodes?</p> (5\u5206)A.<p>41</p> B.<p>86</p> C.<p>42</p> D.<p>85</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(5 \u5206)R2-7<p>Since the speed of a printer cannot match the speed of a computer, a buffer is designed to temperarily store the data from a computer so that later the printer can retrieve data in order.  Then the proper structure of the buffer shall be a:</p> (5\u5206)A.<p>tree</p> B.<p>stack</p> C.<p>queue</p> D.<p>graph</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(5 \u5206)R2-8<p>Let nnn be a non-negative integer representing the size of input.  The time complexity of the following piece of code is:</p> <pre><code>x = 0;\nwhile ( n &gt;= (x+1)*(x+1) )\n    x = x+1;</code></pre> (5\u5206)A.<p>O(logn)O(log n)O(logn)</p> B.<p>O(n1/2)O(n^{1/2})O(n1/2)</p> C.<p>O(n)O(n)O(n)</p> D.<p>O(n2)O(n^2)O(n2)</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-9<p>From the given graph shown by the figure, how many different topological orders can we obtain?</p> <p></p> (5\u5206)A.<p>2</p> B.<p>1</p> C.<p>3</p> D.<p>4</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u6b63\u786e(5 \u5206)R2-10<p>If besides finding the shortest path from <code>S</code> to every other vertices, we also need to count the number of different shortest paths, we can modify the Dijkstra algorithm in the following way: add an array <code>count[]</code> so that <code>count[V]</code> records the number of different shortest paths from <code>S</code> to <code>V</code>.  Then <code>count[V]</code> shall be initialized as:</p> (5\u5206)A.<p><code>count[V]=1</code> for all vertices</p> B.<p><code>count[S]=1; </code> and <code>count[V]=0</code> for other <code>V</code></p> C.<p><code>count[V]=0</code> for all vertices</p> D.<p><code>count[S]=0; </code> and <code>count[V]=1</code> for other <code>V</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-11<p>Given the shape of a binary tree shown by the figure below.  If its postorder traversal sequence is { <code>e</code>, <code>a</code>, <code>c</code>, <code>b</code>, <code>d</code>, <code>f</code> }, then the node on the same level of <code>b</code> must be:</p> <p></p> (5\u5206)A.<p>None</p> B.<p><code>c</code></p> C.<p><code>a</code></p> D.<p><code>e</code></p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-12<p>The array representation of the disjoint sets is given by {2, \u20134, 2, 3, -3, 5, 6, 9, -2}. Keep in mind that the elements are numbered from 1 to 9. After invoking Union(Find(4), Find(6)) with union-by-size, which elements will be changed in the resulting array?</p> (4\u5206)A.<p>a.    elements of index 4 and 6</p> B.<p>a.    elements of index 2 and 6</p> C.<p>a.    elements of index 4 and 5</p> D.<p>a.    elements of index 2 and 5</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)R2-13<p>Given the popping sequence of a stack as {1, 2, 3, 4, 5}.  Among the following, the impossible pushing sequence is:</p> (5\u5206)A.<p>4 5 1 3 2</p> B.<p>3 2 1 5 4</p> C.<p>5 4 1 2 3</p> D.<p>5 1 2 3 4</p> \u8bc4\u6d4b\u7ed3\u679c\u7b54\u6848\u9519\u8bef(0 \u5206)\u7a0b\u5e8f\u586b\u7a7a\u9898\u5f97\u5206\uff1a\u6682\u65e0\u603b\u5206\uff1a25R5-1<p>The function <code>Dijkstra</code> is to find the shortest path from <code>Vertex S</code> to every other vertices in a given <code>Graph</code>.  The distances are stored in <code>dist[]</code>, and <code>path[]</code> records the paths.  The <code>MGraph</code> is defined as the following:</p> <pre><code>typedef struct GNode *PtrToGNode;\nstruct GNode{\n    int Nv;  /* Number of vertices */\n    int Ne;  /* Number of edges    */\n    WeightType G[MaxVertexNum][MaxVertexNum]; /* adjacency matrix */\n};\ntypedef PtrToGNode MGraph;</code></pre> <pre><code>void Dijkstra( MGraph Graph, int dist[], int path[], Vertex S )\n{\n    int collected[MaxVertexNum];\n    Vertex V, W;\n\n    for ( V=0; V&lt;Graph-&gt;Nv; V++ ) {\n        dist[V] = Graph-&gt;G[S][V];\n        path[V] = -1;\n        collected[V] = false;\n    }\n    dist[S] = 0;\n    collected[S] = true;\n\n    while (1) {\n        V = FindMinDist( Graph, dist, collected );\n        if ( V==ERROR ) break;\n        collected[V] = true;\n        for( W=0; W&lt;Graph-&gt;Nv; W++ )\n            if ( collected[W]==false &amp;&amp; Graph-&gt;G[V][W]&lt;INFINITY ) {\n                if ( (4\u5206) ) {\n                    dist[W] = (3\u5206);\n                    path[W] = (3\u5206);\n                }\n            }\n    } /* end while */\n}</code></pre> R5-2<p>The function is to return the reverse linked list of <code>L</code>, with a dummy header.</p> <pre><code>List Reverse( List L )\n{\n    Position Old_head, New_head, Temp;\n    New_head = NULL;\n    Old_head = L-&gt;Next;\n\n    while ( Old_head )  {\n        Temp = Old_head-&gt;Next;\n        (3\u5206);  \n        New_head = Old_head;  \n        Old_head = Temp; \n    }\n    (3\u5206);\n    return L;\n}</code></pre> R5-3<p>Please fill in the blanks in the program which deletes a given element at position <code>p</code> from a max-heap <code>H</code>.</p> <pre><code>Deletion ( PriorityQueue H,  int p )  /* delete the element H-&gt;Elements[p] */\n{\n   ElementType temp;\n   int child;\n\n   temp = H-&gt; Elements[ H-&gt;Size-- ];\n   if ( temp &gt; H-&gt;Elements[p] ) {\n      while ( (p != 1) &amp;&amp; (temp &gt; H-&gt;Elements[p/2]) ) { \n         (3\u5206);\n         p /= 2;\n      } \n   }\n   else {\n      while( (child = 2*p) &lt;= H-&gt;Size) {\n         if ( child != H-&gt;Size &amp;&amp; (3\u5206) )\n            child ++;\n         if ( (3\u5206) ) {\n            H-&gt;Elements[p] = H-&gt;Elements[child];\n            p = child;\n         }\n         else\n            break;\n      }\n   }\n   H-&gt;Elements[p] = temp;\n}</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/labs%26hw/FDS%20Lab%26hw%20review/","title":"Labs&hw review","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/labs%26hw/FDS%20Lab%26hw%20review/#fds-labhw-review","title":"FDS Lab&amp;hw review","text":"<p>\u6765\u770b\u770b\u4ec0\u4e48\u662f\u9006\u5929\u5947\u624d</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#define MAX_N 500\n#define INF 100000000\nint visited[MAX_N] = {0};\nint parent[MAX_N] = {-1};\n\nchar* names[MAX_N];      // \u5b58\u50a8\u6240\u6709\u7684\u8282\u70b9\u540d\nint graph[MAX_N][MAX_N]; // \u90bb\u63a5\u77e9\u9635,graph[start[3]][end[3]]\u8868\u793a\u4ecestart\u5230end\u7684\u8fb9\n\nvoid print_matrix(int count);\nint bfs(int start, int end, int count);\nint solve(int source, int sink, int count);\n\nint find(char *name, int num)\n{\n    for (int i = 0; i &lt; num; i++)\n    {\n        if (names[i] != NULL &amp;&amp; strcmp(names[i], name) == 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main()\n{\n    char* source=malloc(sizeof(char) * 3);\n    char* destination=malloc(sizeof(char) * 3);\n    int num;\n    scanf(\"%s %s %d\", source, destination, &amp;num);\n    for(int i=0;i&lt;MAX_N;i++)\n    names[i]=(char*)malloc(sizeof(char) * 3);\n\n    names[0] = source;\n    names[1] = destination;\n    int count = 1;\n    for (int i = 0; i &lt; num; i++)\n    {\n        char* start=malloc(sizeof(char) * 3);\n        char* end=malloc(sizeof(char) * 3);\n        int capacity;\n        scanf(\"%s %s %d\", start, end, &amp;capacity);\n        if (find(start, num))\n        {\n            count++;\n            names[count]= start;\n        }\n        if (find(end, num))\n        {\n            count++;\n            names[count] = end;\n        }\n        // \u627e\u5230start\u548cend\u5728names\u4e2d\u7684\u4e0b\u6807\n        int start_index = 0, end_index = 0;\n        for (int j = 0; j &lt; num; j++)\n        {\n            if (names[j]!= NULL &amp;&amp; strcmp(names[j], start) == 0)\n            {\n                start_index = j;\n            }\n            if (names[j] != NULL &amp;&amp; strcmp(names[j], end) == 0)\n            {\n                end_index = j;\n            }\n        }\n        graph[start_index][end_index] = capacity;\n    }\n    //print_matrix(count);\n    // \u7528\u961f\u5217\u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u627e\u5230\u4e00\u6761\u8def\u5f84\u540e\uff0c\u5c06\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u5bb9\u91cf\u7684\u6700\u5c0f\u503c\n    // \u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u9a71\u8282\u70b9\uff0c\u627e\u5230\u4e00\u6761\u8def\u5f84\u540e\uff0c\u4ece\u7ec8\u70b9\u5f00\u59cb\uff0c\u6cbf\u7740\u524d\u9a71\u8282\u70b9\u56de\u6eaf\uff0c\u627e\u5230\u4e00\u6761\u8def\u5f84\n    // \u540c\u65f6\u6dfb\u52a0\u4e00\u6761\u53cd\u5411\u8fb9\uff0c\u5bb9\u91cf\u548c\u6240\u6709\u8fb9\u5bb9\u91cf\u7684\u6700\u5c0f\u503c\u76f8\u540c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230\u4e0b\u4e00\u6761\u8def\u5f84\n    int res =  solve(0, 1, count);\n    printf(\"%d\\n\", res);\n\n}\n\nvoid print_matrix(int count)\n{\n    // graph[i][j]\u8868\u793a\u4ecei\u5230j\u7684\u8fb9,\n    for (int i = 0; i &lt;= count; i++)\n    {\n        printf(\"%4s \", names[i]);\n    }\n    printf(\"\\n\");\n    for (int i = 0; i &lt;= count; i++)\n    {\n        for (int j = 0; j &lt;= count; j++)\n        {\n            printf(\"%4d \", graph[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"count:%d\\n\", count);\n}\n\ntypedef struct\n{\n    int front;\n    int rear;\n    int list[MAX_N];\n} queue;\ntypedef queue *queue_ptr;\n\nvoid enqueue(int data, queue_ptr queue)\n{\n    queue-&gt;list[queue-&gt;rear++] = data;\n}\n\nint dequeue(queue_ptr queue)\n{\n    if (queue-&gt;front == queue-&gt;rear)\n        return -1;\n    int data = queue-&gt;list[queue-&gt;front++];\n    return data;\n}\n\nint is_empty(queue_ptr queue)\n{\n    if (queue-&gt;front == queue-&gt;rear)\n        return 1;\n    else\n        return 0;\n}\n\nint bfs(int start, int end, int count)\n{\n    queue_ptr bfs_queue = (queue_ptr)malloc(sizeof(queue));\n    bfs_queue-&gt;front = 0;\n    bfs_queue-&gt;rear = 0;\n    // \u4f7f\u7528visited\u6570\u7ec4\u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9,visited[i] = 1\u8868\u793a\u8282\u70b9i\u5df2\u7ecf\u8bbf\u95ee\u8fc7,\u521d\u59cb\u5316\u4e3a0\n    for (int i = 0; i &lt;= count; i++)\n    {\n        visited[i] = 0;\n        parent[i] = -1; // parent[i]\u8868\u793a\u8282\u70b9i\u7684\u524d\u9a71\u8282\u70b9\n    }\n    enqueue(start, bfs_queue);\n    while (!is_empty(bfs_queue))\n    {\n        int current = dequeue(bfs_queue);\n        for (int i = 0; i &lt;= count; i++)\n        {\n            if (!visited[i] &amp;&amp; graph[current][i] &gt; 0)\n            {\n                parent[i] = current;\n                visited[i] = 1;\n                enqueue(i, bfs_queue);\n                // \u5982\u679c\u6709\u8fb9\n                if (i == end)\n                    return 1; // \u627e\u5230\u4e86\n            }\n        }\n    }\n    return 0;\n}\n\nint solve(int source, int sink, int count)\n{\n    int maxFlow = 0;\n\n    while (bfs(source, sink, count))\n    {\n        int pathFlow = INF;\n\n        // \u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u6d41\u91cf\n        for (int v = sink; v != source; v = parent[v])\n        {\n            int u = parent[v];\n            pathFlow = (pathFlow &lt; graph[u][v]) ? pathFlow : graph[u][v];\n        }\n\n        // \u66f4\u65b0\u589e\u5e7f\u8def\u5f84\u4e0a\u7684\u6d41\u91cf\n        for (int v = sink; v != source; v = parent[v])\n        {\n            int u = parent[v];\n            graph[u][v] -= pathFlow;\n            graph[v][u] += pathFlow;\n        }\n\n        maxFlow += pathFlow;\n    }\n\n    return maxFlow;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/labs%26hw/coding-thoughts/","title":"coding-thoughts","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/labs%26hw/coding-thoughts/#coding-thoughts","title":"coding-thoughts","text":"<p>\u5c11\u7528\u5168\u5c40\u53d8\u91cf</p> <p>\u5168\u5c40\u521d\u59cb\u5316\u65f6</p> <p>qsort\u7528\u6cd5</p> <p><code>qsort</code> \u662fC\u8bed\u8a00\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u5bf9\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002\u5b83\u7684\u58f0\u660e\u5982\u4e0b\uff1a</p> Text Only<pre><code>void qsort\n(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));\n</code></pre> <ul> <li><code>base</code>\uff1a\u6307\u5411\u8981\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u6307\u9488\u3002</li> <li><code>nmemb</code>\uff1a\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6570\u91cf\u3002</li> <li><code>size</code>\uff1a\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002</li> <li><code>compar</code>\uff1a\u6bd4\u8f83\u51fd\u6570\u7684\u6307\u9488\uff0c\u7528\u4e8e\u5b9a\u4e49\u6392\u5e8f\u987a\u5e8f\u3002</li> </ul> <p>\u6bd4\u8f83\u51fd\u6570 <code>compar</code> \u5e94\u8be5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u6bcf\u4e2a\u53c2\u6570\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u8868\u793a\u5b83\u4eec\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\u8fd4\u56de\u503c\u7684\u542b\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>\u5982\u679c\u8fd4\u56de\u503c\u5c0f\u4e8e0\uff0c\u5219\u8868\u793a\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002</li> <li>\u5982\u679c\u8fd4\u56de\u503c\u7b49\u4e8e0\uff0c\u5219\u8868\u793a\u4e24\u4e2a\u53c2\u6570\u76f8\u7b49\u3002</li> <li>\u5982\u679c\u8fd4\u56de\u503c\u5927\u4e8e0\uff0c\u5219\u8868\u793a\u7b2c\u4e00\u4e2a\u53c2\u6570\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002</li> </ul> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6f14\u793a\u5982\u4f55\u4f7f\u7528 <code>qsort</code> \u5bf9\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\nint main() {\n    int array[] = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n    int size = sizeof(array) / sizeof(array[0]);\n\n    qsort(array, size, sizeof(int), compare);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", array[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>compare</code> \u51fd\u6570\u7528\u4e8e\u5347\u5e8f\u6392\u5e8f\u6574\u6570\u6570\u7ec4\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4fee\u6539\u6bd4\u8f83\u51fd\u6570\u6765\u6539\u53d8\u6392\u5e8f\u7684\u987a\u5e8f\u6216\u8005\u9002\u5e94\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002</p> <p>\u5148\u5199\u51fa<code>int compare(const void *a,const void *b)</code>.</p> <p><code>a</code>\u548c<code>b</code>\u8fdb\u884c\u7c7b\u578b\u5f3a\u8f6c\uff0c\u5982\u679c\u662f\u6574\u5f62\u5c31\u6539\u4e3a<code>(int*)a</code>\uff0c\u6700\u540e\u8bbf\u95ee\u65f6\u8981\u52a0*\uff0c<code>*(int*)a</code>\uff0c\u5426\u5219\u8bbf\u95ee\u7684\u662f\u6307\u9488\u7684\u5730\u5740</p> <p>\u5982\u679c\u662f\u7ed3\u6784\u4f53\u5982<code>edge</code>,\u5219\u6539\u4e3a<code>(edge*)a-&gt;weight</code>,\u8fd9\u6574\u4e2a\u662f\u8bbf\u95ee\u7684\u5143\u7d20</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/8.2%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/","title":"toplogical sorting","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/8.2%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_1","title":"\u62d3\u6251\u6392\u5e8f\u6ce8\u610f\u70b9","text":"<p>Given the relations of all the activities of a project, you are supposed to find the earliest completion time of the project. Input Specification:</p> <p>Each input file contains one test case. Each case starts with a line containing two positive integers N (&lt;=100), the number of activity check points (hence it is assumed that the check points are numbered from 0 to N-1), and M, the number of activities. Then M lines follow, each gives the description of an activity. For the i-th activity, three non-negative numbers are given: S[i], E[i], and L[i], where S[i] is the index of the starting check point, E[i] of the ending check point, and L[i] the lasting time of the activity. The numbers in a line are separated by a space. Output Specification: For each test case, if the scheduling is possible, print in a line its earliest completion time; or simply output \"Impossible*</p> <p>example\uff1a</p> <p>9 12</p> <p>0 1 6</p> <p>0 2 4</p> <p>0 3 5</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAX_N 100\n\ntypedef struct {\n    int start;\n    int end;\n    int duration;\n} Activity;\n\nint earliest_completion_time(int N, int M, Activity activities[]) {\n    int graph[MAX_N][MAX_N] = {0};\n    int in_degree[MAX_N] = {0};\n    int earliest_start_time[MAX_N] = {0};\n    int queue[MAX_N];\n    int front = 0, rear = 0;\n\n    for (int i = 0; i &lt; M; i++) {\n        graph[activities[i].start][activities[i].end] = activities[i].duration;\n        in_degree[activities[i].end]++;\n    }\n\n    for (int i = 0; i &lt; N; i++) {\n        if (in_degree[i] == 0) {\n            queue[rear++] = i;\n        }\n    }\n\n    while (front &lt; rear) {\n        int current = queue[front++];\n\n        for (int neighbor = 0; neighbor &lt; N; neighbor++) {\n            if (graph[current][neighbor] &gt; 0) {\n                in_degree[neighbor]--;\n                earliest_start_time[neighbor] =               \n                    max(earliest_start_time[neighbor],\n                        earliest_start_time[current] + graph[current][neighbor])\n\n                if (in_degree[neighbor] == 0) {\n                    queue[rear++] = neighbor;\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i &lt; N; i++) {\n        if (in_degree[i] &gt; 0) {\n            return -1; // Graph contains a cycle, scheduling is not possible\n        }\n    }\n\n    int max_completion_time = 0;\n    for (int i = 0; i &lt; N; i++) {\n        if (earliest_start_time[i] &gt; max_completion_time) {\n            max_completion_time = earliest_start_time[i];\n        }\n    }\n\n    return max_completion_time;\n}\n\nint main() {\n    int N, M;\n    scanf(\"%d %d\", &amp;N, &amp;M);\n\n    Activity activities[MAX_N];\n\n    for (int i = 0; i &lt; M; i++) {\n        scanf(\"%d %d %d\", &amp;activities[i].start, &amp;activities[i].end, &amp;activities[i].duration);\n    }\n\n    int result = earliest_completion_time(N, M, activities);\n\n    if (result == -1) {.......\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/BFS%E5%92%8CDFS%E7%9A%84%E7%90%86%E8%A7%A3/","title":"BFS/DFS","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/BFS%E5%92%8CDFS%E7%9A%84%E7%90%86%E8%A7%A3/#bfs","title":"BFS\uff1a","text":"<ol> <li>\u62d3\u6251\u6392\u5e8f\u53ca\u5176\u6539\u8fdb</li> </ol> C<pre><code>/*Test an AOV for feasibility, and generate a topological order if possible*/\nvoid Topsort( Graph G )\n{   \n int Counter;\n    Vertex V, W;\n    for ( Counter = 0; Counter &lt; NumVertex; Counter++ ) \n    {\n     V = FindNewVertexOfDegreeZero( );\n     if ( V == NotAVertex ) //\u786e\u8ba4\u56fe\u4e2d\u65e0\u73af\uff1f\n        {\n         Error ( \u201cGraph has a cycle\u201d );   \n            break;  \n        }\n     TopNum[ V ] = Counter; /* or output V */\n     for ( each W adjacent to V )\n         Indegree[ W ]\u2013\u2013; //\u5bf9\u6240\u6709\u524d\u7f6e\u9009\u8bfe\u8981\u6c42\u6709V\u7684\u8bfe\u7a0b\uff0c\u5728\u4fee\u4e4b\u524d\u5fc5\u987b\u4fee\u5b8c\u7684\u8bfe\u5c11\u4e86\u4e00\u95e8\n    }\n}\n</code></pre> <p>$$    T=O(|V|^2+|E|) = O(|V|^2)    $$</p> C<pre><code>//\u6539\u8fdb\u7b56\u7565\u662f\u5148\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\u90fd\u5165\u961f\uff0c\u6bcf\u6b21\u4ece\u8fd9\u4e2a0\u5165\u5ea6\u961f\u5217\u4e2d\u5f39\u51fa\u4e00\u4e2a\u8282\u70b9\uff0c\u56fe\u4e2d\u4e0e\u4e4b\u76f8\u90bb\u7684\u8282\u70b9\u5165\u5ea6--\uff0c\n//\u5982\u679c\u51cf\u52300\u5c31\u5165\u961f\nvoid Topsort( Graph G )\n{   \n Queue Q;\n    int Counter = 0;\n    Vertex V, W;\n    Q = CreateQueue( NumVertex );  \n    MakeEmpty( Q );\n    for ( each vertex V )\n     if ( Indegree[ V ] == 0 ) Enqueue( V, Q );\n    while ( !IsEmpty( Q ) ) \n    {\n     V = Dequeue( Q );\n     TopNum[ V ] = ++Counter; /* assign next */\n     for ( each W adjacent to V )\n         if (\u2013\u2013Indegree[ W ] == 0 ) Enqueue( W, Q );\n    }  /* end-while */\n    if ( Counter != NumVertex )\n Error( \u201cGraph has a cycle\u201d );\n    DisposeQueue( Q ); /* free memory */\n}\n</code></pre> <p>$$    T=O(|V|+|E|)    $$</p> <p>\\(\u6ce8\u610fE\u7684\u8303\u56f4 \u6700\u5c0f V \u6700\u5927 |V|^2\\)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/BFS%E5%92%8CDFS%E7%9A%84%E7%90%86%E8%A7%A3/#dfs","title":"DFS","text":"<p>\u56de\u6eaf\u7b97\u6cd5\uff08Backtracking\uff09\u548c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\uff08DFS\uff09\u4e4b\u95f4\u5b58\u5728\u5173\u7cfb\uff0c\u4f46\u5b83\u4eec\u6709\u4e00\u4e9b\u4e3b\u8981\u7684\u4e0d\u540c\u4e4b\u5904\u3002</p> <ol> <li>\u5b9a\u4e49\uff1a</li> <li>DFS\u7b97\u6cd5\u662f\u4e00\u79cd\u56fe\u904d\u5386\u7b97\u6cd5\uff0c\u901a\u5e38\u7528\u4e8e\u641c\u7d22\u56fe\u6216\u6811\u7684\u6240\u6709\u8282\u70b9\u3002\u5728DFS\u4e2d\uff0c\u6211\u4eec\u4ece\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u7136\u540e\u5c3d\u53ef\u80fd\u6df1\u5165\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6df1\u5165\u4e3a\u6b62\uff0c\u7136\u540e\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u7ee7\u7eed\u6df1\u5165\u5176\u4ed6\u672a\u63a2\u7d22\u7684\u5206\u652f\u3002</li> <li>\u56de\u6eaf\u7b97\u6cd5\u662f\u4e00\u79cd\u66f4\u4e00\u822c\u7684\u7b97\u6cd5\u8303\u5f0f\uff0c\u901a\u5e38\u7528\u4e8e\u89e3\u51b3\u7ec4\u5408\u4f18\u5316\u95ee\u9898\uff0c\u4f8b\u5982\u516b\u7687\u540e\u95ee\u9898\u30010-1\u80cc\u5305\u95ee\u9898\u7b49\u3002\u56de\u6eaf\u7b97\u6cd5\u8bd5\u56fe\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u901a\u8fc7\u5c1d\u8bd5\u4e0d\u540c\u7684\u9009\u62e9\u6765\u627e\u5230\u95ee\u9898\u7684\u89e3\uff0c\u5982\u679c\u5f53\u524d\u7684\u9009\u62e9\u4e0d\u80fd\u5bfc\u81f4\u89e3\uff0c\u5c31\u56de\u6eaf\u5230\u4e4b\u524d\u7684\u72b6\u6001\uff0c\u7136\u540e\u5c1d\u8bd5\u5176\u4ed6\u7684\u9009\u62e9\u3002</li> <li>\u5e94\u7528\u9886\u57df\uff1a</li> <li>DFS\u7b97\u6cd5\u4e3b\u8981\u5e94\u7528\u4e8e\u56fe\u548c\u6811\u7684\u904d\u5386\uff0c\u67e5\u627e\u8def\u5f84\u6216\u5bfb\u627e\u7279\u5b9a\u8282\u70b9\u3002</li> <li>\u56de\u6eaf\u7b97\u6cd5\u66f4\u901a\u7528\uff0c\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u4e00\u4e9b\u7ec4\u5408\u4f18\u5316\u95ee\u9898\uff0c\u5176\u4e2d\u9700\u8981\u5728\u53ef\u80fd\u7684\u89e3\u7a7a\u95f4\u4e2d\u641c\u7d22\u5e76\u627e\u5230\u95ee\u9898\u7684\u89e3\u3002</li> <li>\u76ee\u6807\uff1a</li> <li>DFS\u7b97\u6cd5\u7684\u4e3b\u8981\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6df1\u5165\u5730\u641c\u7d22\uff0c\u67e5\u627e\u76ee\u6807\u8282\u70b9\u6216\u8def\u5f84\u3002</li> <li>\u56de\u6eaf\u7b97\u6cd5\u7684\u4e3b\u8981\u76ee\u6807\u662f\u901a\u8fc7\u5c1d\u8bd5\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u627e\u5230\u95ee\u9898\u7684\u89e3\u3002\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u591a\u6b21\u56de\u6eaf\u5230\u4e4b\u524d\u7684\u72b6\u6001\u3002</li> <li>\u72b6\u6001\u7ef4\u62a4\uff1a</li> <li>DFS\u7b97\u6cd5\u901a\u5e38\u901a\u8fc7\u6808\uff08\u9012\u5f52\u8c03\u7528\u6808\u6216\u663e\u5f0f\u6808\uff09\u6765\u7ef4\u62a4\u72b6\u6001\uff0c\u8bb0\u5f55\u5f53\u524d\u8def\u5f84\u548c\u8bbf\u95ee\u72b6\u6001\u3002</li> <li>\u56de\u6eaf\u7b97\u6cd5\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u6765\u7ef4\u62a4\u72b6\u6001\uff0c\u5c1d\u8bd5\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u5e76\u5728\u9700\u8981\u65f6\u56de\u6eaf\u5230\u4e4b\u524d\u7684\u72b6\u6001\u3002</li> </ol> <p>\u5c3d\u7ba1\u6709\u8fd9\u4e9b\u4e0d\u540c\uff0cDFS\u7b97\u6cd5\u5b9e\u9645\u4e0a\u53ef\u4ee5\u770b\u4f5c\u662f\u56de\u6eaf\u7b97\u6cd5\u7684\u4e00\u79cd\u7279\u4f8b\uff0c\u56e0\u4e3a\u56de\u6eaf\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u65b9\u5f0f\u8fdb\u884c\u5b9e\u73b0\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e24\u4e2a\u672f\u8bed\u53ef\u4ee5\u4ea4\u66ff\u4f7f\u7528\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\u548c\u95ee\u9898\u7684\u7279\u6027</p> C<pre><code>/*a generalization of preorder traversal*/\nvoid DFS(Vertex V)\n{   \n    visited[ V ] = true;  /*mark this vertex to avoid cycles*/\n    for ( each W adjacent to V )\n        if ( !visited[ W ] ) DFS( W );\n} /*T = O(|E|+|V|) as long as adjacency lists are used*/\n</code></pre> Java<pre><code>class Solution {\n    List&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;&gt;();\n/* \u4e3b\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u7ec4\u4e0d\u91cd\u590d\u7684\u6570\u5b57\uff0c\u8fd4\u56de\u5b83\u4eec\u7684\u5168\u6392\u5217 */\nList&lt;List&lt;Integer&gt;&gt; permute(int[] nums) {\n    // \u8bb0\u5f55\u300c\u8def\u5f84\u300d\n    LinkedList&lt;Integer&gt; track = new LinkedList&lt;&gt;();\n    // \u300c\u8def\u5f84\u300d\u4e2d\u7684\u5143\u7d20\u4f1a\u88ab\u6807\u8bb0\u4e3a true\uff0c\u907f\u514d\u91cd\u590d\u4f7f\u7528\n    boolean[] used = new boolean[nums.length];\n\n\n    backtrack(nums, track, used);\n    return res;\n\n}\n\n// \u8def\u5f84\uff1a\u8bb0\u5f55\u5728 track \u4e2d\n// \u9009\u62e9\u5217\u8868\uff1anums \u4e2d\u4e0d\u5b58\u5728\u4e8e track \u7684\u90a3\u4e9b\u5143\u7d20\uff08used[i] \u4e3a false\uff09\n// \u7ed3\u675f\u6761\u4ef6\uff1anums \u4e2d\u7684\u5143\u7d20\u5168\u90fd\u5728 track \u4e2d\u51fa\u73b0\nvoid backtrack(int[] nums, LinkedList&lt;Integer&gt; track, boolean[] used) {\n    // \u89e6\u53d1\u7ed3\u675f\u6761\u4ef6\n    if (track.size() == nums.length) {\n        res.add(new LinkedList(track));\n        return;\n    }\n\n\n    for (int i = 0; i &lt; nums.length; i++) {\n        // \u6392\u9664\u4e0d\u5408\u6cd5\u7684\u9009\u62e9\n        if (used[i]) {\n            // nums[i] \u5df2\u7ecf\u5728 track \u4e2d\uff0c\u8df3\u8fc7\n            continue;\n        }\n        // \u505a\u9009\u62e9\n        track.add(nums[i]);\n        used[i] = true;\n        // \u8fdb\u5165\u4e0b\u4e00\u5c42\u51b3\u7b56\u6811\n        backtrack(nums, track, used);\n        // \u53d6\u6d88\u9009\u62e9\n        track.removeLast();\n        used[i] = false;\n    }\n\n}\n    }\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS-notes/","title":"FDS-notes","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS-notes/#fds-notes-2023","title":"FDS-notes-2023","text":"<p>\u6ce8\u610f\u590d\u4e60\uff1a\u586b\u7a7a\u9898\uff0c\u4ee5\u4e0b\u5185\u5bb9\u5747\u53ef\u80fd\u4f5c\u4e3a\u586b\u7a7a</p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS-notes/#_1","title":"\u6811","text":"<p>\u56db\u79cd\u904d\u5386\u987a\u5e8f</p> <p>\u5c42\u5e8f 1 11 5 12 17 8 20 15</p> <p>\u4e2d\u5e8f 12 11 20 17 1 15 8 5</p> <p>\u524d\u5e8f 1 11 12 17 20 5 8 15</p> <p>\u540e\u5e8f 12 20 17 11 15 8 5 1</p> C<pre><code>level-order(Tree T){\n    //\u6ce8\u610flevel-order\u4f7f\u7528\u4e86while\uff0c\u662fenqueue\n    enqueue(T)\n    while(queue is not empty){\n        print(T = dequeue())\n        enqueue(T-&gt;left)\n        enaueue(T-&gt;right)\n    }\n}\n\n//\u4ee5\u4e0b\u4e3a\u9519\u8bef\u7684\u5c42\u5e8f\u904d\u5386\u505a\u6cd5\uff01\nvoid zigzag_levelorder(tree_ptr tree, int rev, queue_ptr queue)\n{\n    enqueue(tree, queue);\n    while (is_empty(queue) == 0)\n    {\n        tree_ptr T = dequeue(queue);\n        visit(T); // \u6253\u5370\u51fa\u8fd9\u5c42\u7684\u8282\u70b9\n        // \u5728\u6b64\u5904\u8c03\u6574\u987a\u5e8f\n        if (rev == 0)\n        {\n            rev = 1;\n            zigzag_levelorder(T-&gt;left, rev, queue);//\u5e94\u8be5\u6539\u4e3aenqueue~~\n            zigzag_levelorder(T-&gt;right, rev, queue);\n        }\n        else\n        {\n            rev = 0;\n            zigzag_levelorder(T-&gt;right, rev, queue);\n            zigzag_levelorder(T-&gt;left, rev, queue);\n        }\n    }\n}\n//zigzag-levelorder hw4\u771f\u662f\u591a\u91d1\nint zigzag_levelorder(tree_ptr tree, queue_ptr queue)\n{\n    // zigzag\u7684\u5c42\u5e8f\u904d\u5386\n    int level = 0;\n    enqueue(tree, queue);\n    while (is_empty(queue) == 0)\n    {\n        int len = queue-&gt;rear - queue-&gt;front;\n        if (level % 2)\n        {\n            for (int i = queue-&gt;front; i &lt; queue-&gt;front + len; i++)\n            {\n                printf(\" %d\", queue-&gt;list[i]-&gt;data);\n            }\n        }\n        else\n        {\n            for (int i = queue-&gt;front + len - 1; i &gt;= queue-&gt;front; i--)\n            {\n                if (level == 0)\n                    printf(\"%d\", queue-&gt;list[i]-&gt;data);\n                else\n                    printf(\" %d\", queue-&gt;list[i]-&gt;data);\n            }\n        }\n        //\u5230\u6b64\u4e3a\u6b62\uff0c\u5f80\u4e0a\uff1a\u6253\u5370\uff0c\u4e5f\u5c31\u662fvisit\n        //\u5f80\u4e0b\uff0cenqueue\n        for (int i = queue-&gt;front; i &lt; queue-&gt;front + len; i++)\n        {\n            if (queue-&gt;list[i]-&gt;left != NULL)\n                enqueue(queue-&gt;list[i]-&gt;left, queue);\n            if (queue-&gt;list[i]-&gt;right != NULL)\n                enqueue(queue-&gt;list[i]-&gt;right, queue);\n        }\n        queue-&gt;front = queue-&gt;front + len;\n        level++;\n    }\n}\n\n\n\nin-order(Tree T){\n    if(T){\n        pre-order(T-&gt;left)\n        print(T);\n        pre-order(T-&gt;right)\n    }\n}\n\nin-order-iterative(Tree_ptr Tree){\n    //\u5199\u6210iterative\u7684\u5f62\u5f0f,\u4f7f\u7528\u6808\u6a21\u62df\n    //\u5148\u5c06\u6700\u5de6\u8fb9\u4e00\u6761\u5168\u90e8\u8fdb\u6808\uff0c\u5f39\u51fa\u6808\u9876\u8282\u70b9\uff08\u79bb\u53f6\u5b50\u5c42\u8f83\u8fd1\u7684\u8282\u70b9\uff09\u540e\u53f3\u8282\u70b9\u8fdb\u6808\n    stack S = init_stack();\n    while(1){\n        while(Tree-&gt;left!=NULL)S.push(Tree = Tree-&gt;left);\n        Tree = S.pop();\n        if(Tree == NULL)break; //\u76f4\u5230stack\u5f39\u7a7a\uff0c\u9000\u51fawhile\u5faa\u73af\n        print(Tree-&gt;data);\n        Tree = Tree-&gt;right;\n    }\n\n}\n\npre-order(Tree T){\n    if(T){\n        print(T);\n        pre-order(T-&gt;left)\n        pre-order(T-&gt;right)\n    }\n}\n\npost-order(Tree T){\n    if(T){\n        post-order(T-&gt;left)\n        post-order(T-&gt;right)\n        print(T);\n    }\n}\n</code></pre> <p>\u524d\u5e8f\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u540e\u5e8f\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a\u6839\u8282\u70b9</p> <p>\u4e2d\u5e8f\u4ece\u5de6\u5230\u53f3\uff0c\u5b9e\u9645\u4e0a\u7684\u6839\u8282\u70b9\u5c06\u6570\u7ec4\u5206\u6210\u4e86\u5b8c\u6574\u7684\u4e24\u4e2a\u90e8\u5206\uff0c\u56e0\u6b64\u53ea\u8981\u786e\u5b9a\u5f53\u524d\u7684\u6839\u8282\u70b9\uff0c\u5c31\u80fd\u627e\u51fa\u5de6\u3001\u53f3\u5b50\u6811\u7684\u533a\u95f4</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS-notes/#week-4-hw","title":"\u4e2d\u5e8f\u904d\u5386+\u540e\u5e8f\u904d\u5386\u5efa\u6811\uff1aweek-4-hw","text":"C<pre><code>//\u7531\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u5efa\u7acb\u4e0a\u9762\u7684\u6811\uff1a\n//\u4e2d\u5e8f\u904d\u5386\uff1a12 11 20 17 1 15 8 5 \n//\u540e\u5e8f\u904d\u5386\uff1a12 20 17 11 15 8 5 1\n//index =             4   \n//11\u4e3a\u65b0\u6811\u7684\u6839\u8282\u70b9\n\ntree_ptr build_tree(int *in_order, int *post_order, int n)\n{\n    if (n &lt;= 0 || in_order == NULL || post_order == NULL || n &gt; MAX_NODE_NUM)\n        return NULL;\n    tree_ptr root = (tree_ptr)malloc(sizeof(tree_node));\n    root-&gt;data = post_order[n - 1];\n    int index = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (in_order[i] == post_order[n - 1]) //\u4e2d+\u540e\uff1a\u53d6\u540e\u5e8f\u533a\u95f4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5728\u4e2d\u5e8f\u4e2d\u627e\u5230\n            index = i;                        //\u8be5\u5143\u7d20\u7684index\uff0c\u4f20\u5165\u4e0b\u9762\u7684\u9012\u5f52\n    }\n    // \u628a\u4e2d\u5e8f\u5e8f\u5217\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5de6\u8fb9\u7684\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u7684\u662f\u53f3\u5b50\u6811\n    // \u6b64\u5904 in_order + index + 1 \u5fd8\u8bb0+1\uff0c\u5bfc\u81f4\u53ea\u6709\u5de6\u679d\u7684\u5de6\u5b50\u6811\u5efa\u6210\u4e86\u53f3\u5b50\u6811\n    root-&gt;left = build_tree(in_order, post_order, index);\n    // in_order/post_order\u7684[0~index-1],\u5171index\u4e2a\u6570\n    root-&gt;right = build_tree(in_order + index + 1, post_order + index, n - index - 1);\n    // in_order/post_order\u7684[index+1~n-1]\uff0c\u5171n-1-(index+1)+1 = n-1-index\u4e2a\u6570\n    //\u5de6\u53f3\u52a0\u8d77\u6765\u4e3an-1\u4e2a\u6570\uff0c\u521a\u597d\u5c11\u4e86\u6839\u8282\u70b9\n    return root;\n}\n</code></pre> <p>\u5f62\u8c61\u4e00\u70b9\uff1a\u4e00\u904d\u8fc7\u540e\uff1a</p> <p>\u4e2d\u5e8f \uff08\u5de6\u5b50\u6811\uff1a12 11 20 17 \uff09\u30101\u3011 \uff08\u53f3\u5b50\u6811\uff1a15 8 5\uff09</p> <p>\u540e\u5e8f \uff0812 20 17 11\uff09\uff08 15 8 5\uff09\u30101\u3011</p> <p>\u4e24\u904d\u540e\uff1a</p> <p>\u4e2d\u5e8f \uff08\uff0812\uff09 11 \uff0820 17\uff09 \uff09\u30101\u3011 \uff08\uff0815 8 \uff09{5}\uff08\uff09\uff09</p> <p>\u540e\u5e8f \uff08\uff0812\uff09 \uff0820 17\uff09 {11}\uff09\uff08 \uff0815 8\uff09 {5}\uff09\u30101\u3011</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS-notes/#lab2","title":"\u524d\u5e8f\u904d\u5386+\u4e2d\u5e8f\u904d\u5386\u5efa\u6811\uff1alab2","text":"C<pre><code>tree_ptr build_tree(int *pre_order, int pre_left, int pre_right, int *in_order, int in_left, int in_right)\n{\n    // \u5148\u5e8f\u904d\u5386\u5efa\u6811,\u5148\u5904\u7406\u6839\u8282\u70b9\uff0c\u518d\u5904\u7406\u5de6\u5b50\u6811\uff0c\u518d\u5904\u7406\u53f3\u5b50\u6811\n    if (pre_left &gt; pre_right || in_left &gt; in_right)\n    {\n        return NULL;\n    }\n    int k;\n    for (k = in_left; k &lt;= in_right; k++)\n    {\n        // \u627e\u5230\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\n        if (in_order[k] == abs(pre_order[pre_left]))\n        {\n            break;\n        }\n    }\n    int num_left = k - in_left; // \u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\n    tree_ptr root = (tree_ptr)malloc(sizeof(tree_node));\n    root-&gt;data = abs(pre_order[pre_left]);\n    root-&gt;color = red_or_black(pre_order[pre_left]);\n    root-&gt;left = build_tree(pre_order, pre_left + 1, pre_left + num_left, in_order, in_left, k - 1); //\u9664\u5f00pre_order[0](\u6839\u8282\u70b9),\u5de6\u6811\u7684\u533a\u95f4[pre_left+1,pre_left+num_left-1]\n    root-&gt;right = build_tree(pre_order, pre_left + num_left + 1, pre_right, in_order, k + 1, in_right);\n    return root;\n}\n</code></pre> <p>\u4e2d\u5e8f \uff0812 11 20 17\uff09 \u30101\u3011 \uff0815 8 5\uff09</p> <p>\u524d\u5e8f\u30101\u3011 \uff0811 12 17 20\uff09\uff08 5 8 15\uff09</p> C<pre><code>//\u81ea\u5df1\u5199\u5199 BST ADT\uff0c\u770b\u770b\u6709\u4ec0\u4e48\u95ee\u9898\n- SearchTree  MakeEmpty( SearchTree T ){\n    T-&gt;left = NULL;\n    T-&gt;right = NULL;\n    T-&gt;\n  }\n- Position  Find( ElementType X, SearchTree T ){\n    //\u67e5\u627e\u5143\u7d20\uff0c\u4eceT\u5f00\u59cb\u627e\uff0c\u8fd4\u56de\u6307\u5411\u8be5\u8282\u70b9\u7684position\uff0c\u4e00\u4e2anode*\n    if(T==NULL)return NULL;//\u6ca1\u6709\u627e\u5230\n    if(T-&gt;data == X)return T;\n    if(T-&gt;-&gt;data&lt; X){\n        Find(T-&gt;right);\n    }\n    else if(T-&gt;data &gt; X){\n        Find(T-&gt;left);\n    }\n\n}\n\n- Position  FindMin( SearchTree T ){\n    //\u627e\u6700\u5c0f\u5143\u7d20\n    if(T==NULL)return NULL;//\u5f53\u524d\u6811\u4e0d\u5b58\u5728\n    else{\n        if(T-&gt;left!=NULL){\n            FindMin(T-&gt;left)\n        }\n    }\n    return T;\n    /*\u522b\u7528while:while(T-&gt;left!=NULL){\n        T = T-&gt;left;\n        FindMin(T);\n    }\n    return T;*/\n}\n- Position  FindMax( SearchTree T ){\n    //\u540c\u4e0a\n    while(T-&gt;right!=NULL){\n        T = T-&gt;right;\n        FindMax(T);\n    }\n    return T;\n}\n- SearchTree  Insert( ElementType X, SearchTree T ){\n    //\u4e8c\u53c9\u6811\u7684\u6b63\u786e\u63d2\u5165\u987a\u5e8f\n    if(T==NULL){\n        node* new_node = (node*)malloc(sizeof(node));\n        T-&gt;data = X;\n        T-&gt;left = NULL;\n        T-&gt;right = NULL;\n        return T;\n    }\n    if(T-&gt;data&gt;X){\n        Insert(X,T-&gt;left);\n    }\n    else if(T-&gt;data&lt;X){\n        Insert(X,T-&gt;right);\n    }\n    return T;\n}\n- SearchTree  Delete( ElementType X, SearchTree T ){\n    //\u5220\u9664\u67d0\u5143\u7d20\uff0c\u662f\u5728\u67e5\u627e\u7684\u57fa\u7840\u4e0a\n    SearchTree pos = FindMax(X,T);\n    //\u5206\u7c7b\u8ba8\u8bba\uff0c\u82e5pos\u7684\u5ea6\u4e3a0/1/2\n    if(pos==NULL)return;\n    else if(pos-&gt;left = NULL &amp;&amp; pos-&gt;right){\n        pos = pos-&gt;right\n    }\n    else if(pos-&gt;right = NULL &amp;&amp; pos-&gt;left){\n        pos = pos-&gt;left\n    }\n    else{\n        //\u5ea6\u4e3a2,\u7528\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9\u66ff\u6362\u5f53\u524dpos\u6307\u5411\u7684\u6839\u8282\u70b9\n        SearchTree pos_right_max = FindMax(pos-&gt;right)\n        pos-&gt;data = pos_right_max-&gt;data;\n        Delete(pos-&gt;data,pos-&gt;right);\n        return pos;\n    }\n}\n- ElementType  Retrieve( Position P ){\n    return P-&gt;data;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS-notes/#double-ended-queuedeque","title":"\u53cc\u7aef\u961f\u5217 double-ended queue\uff0c\u7b80\u79f0Deque","text":"<p>\u94fe\u8868\u5b9e\u73b0</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// \u5b9a\u4e49\u53cc\u7aef\u961f\u5217\u8282\u70b9\u7ed3\u6784\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\n// \u5b9a\u4e49\u53cc\u7aef\u961f\u5217\u7ed3\u6784\nstruct Deque {\n    struct Node* front;  // \u961f\u5934\u6307\u9488\n    struct Node* rear;   // \u961f\u5c3e\u6307\u9488\n};\n\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53cc\u7aef\u961f\u5217\nstruct Deque* createDeque() {\n    struct Deque* deque = (struct Deque*)malloc(sizeof(struct Deque));\n    deque-&gt;front = NULL;\n    deque-&gt;rear = NULL;\n    return deque;\n}\n//**************************\n// \u5728\u961f\u5934\u63d2\u5165\u5143\u7d20\uff0c\u8111\u888b\u8981\u6709\u90a3\u4e2a\u4e09\u89d2\u5f62\uff0c\u5148\u5c06\u65b0\u8282\u70b9\u6307\u5411front\u6307\u5411\u7684node\uff0c\u7136\u540e\u518d\u5c06front\u79fb\u5230\u65b0\u8282\u70b9\u4e0a\n//front\u60f3\u8c61\u6210\u4e00\u4e2a\u6570\u636e\u57df\u4e3a\u9ed1\uff0c\u53ea\u6709\u6307\u9488\u7684dummy node\n//\u4e14\u603b\u662f\u5148\u5c06\u65b0\u8282\u70b9\u5404\u53c2\u6570\u8d4b\u503c\u5b8c\u6bd5\u540e\u518d\u8fdb\u884c\u4e32\u8054\n//**************************\nvoid insertFront(struct Deque* deque, int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode-&gt;data = data;\n    newNode-&gt;next = deque-&gt;front;\n    deque-&gt;front = newNode;\n    if (deque-&gt;rear == NULL) {\n        deque-&gt;rear = newNode;\n    }\n}\n\n// \u5728\u961f\u5c3e\u63d2\u5165\u5143\u7d20\uff0c\u82e5rear==NULL \u5219\u8bf4\u660edeque\u4e3a\u7a7a\uff0c\u6b64\u65f6\u4e0efront\u6709\u5173\uff0c\u5426\u5219\u53ea\u9700\u5904\u7406rear\u6307\u9488\nvoid insertRear(struct Deque* deque, int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode-&gt;data = data;\n    newNode-&gt;next = NULL;\n    if (deque-&gt;rear == NULL) {\n        deque-&gt;front = newNode;\n        deque-&gt;rear = newNode;\n    } else {\n        deque-&gt;rear-&gt;next = newNode;\n        deque-&gt;rear = newNode;\n    }\n}\n\n// \u4ece\u961f\u5934\u5220\u9664\u5143\u7d20,\u6ce8\u610f\u65e0\u8bba\u662f\u4ece\u961f\u5934/\u961f\u5c3e\u5220\u9664\u65f6\uff0c\u5148\u8981\u4fdd\u8bc1\u5934/\u5c3e\u6307\u9488\u4e0d\u662fNULL\uff0c\u5728\u5220\u9664\u5b8c\u540e\u8fd8\u8981\u5224\u65ad\u662f\u5426\u5220\u6389\u4e86\n//deque\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u662f\u5219\u8981\u5c06front\u548crear\u90fd\u8d4b\u503c\u4e3aNULL\nvoid deleteFront(struct Deque* deque) {\n    if (deque-&gt;front != NULL) {\n        struct Node* temp = deque-&gt;front;\n        deque-&gt;front = deque-&gt;front-&gt;next;\n        free(temp);\n        if (deque-&gt;front == NULL) {\n            deque-&gt;rear = NULL;\n        }\n    }\n}\n\n// \u4ece\u961f\u5c3e\u5220\u9664\u5143\u7d20\nvoid deleteRear(struct Deque* deque) {\n    if (deque-&gt;rear != NULL) {\n        if (deque-&gt;front == deque-&gt;rear) {\n            free(deque-&gt;front);\n            deque-&gt;front = NULL;\n            deque-&gt;rear = NULL;\n        } else {\n            struct Node* temp = deque-&gt;front;\n            while (temp-&gt;next != deque-&gt;rear) {\n                temp = temp-&gt;next;\n            }\n            free(deque-&gt;rear);\n            deque-&gt;rear = temp;//temp\u5411\u540e\u904d\u5386\u7684\u8fc7\u7a0b\uff0c\u6613\u51fa\u586b\u7a7a\u9898\n            deque-&gt;rear-&gt;next = NULL;\n        }\n    }\n}\n\n// \u68c0\u67e5\u53cc\u7aef\u961f\u5217\u662f\u5426\u4e3a\u7a7a\nint isEmpty(struct Deque* deque) {\n    return (deque-&gt;front == NULL);\n}\n\n// \u6253\u5370\u53cc\u7aef\u961f\u5217\u4e2d\u7684\u5143\u7d20\nvoid printDeque(struct Deque* deque) {\n    struct Node* current = deque-&gt;front;\n    while (current != NULL) {\n        printf(\"%d \", current-&gt;data);\n        current = current-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\n// \u4e3b\u51fd\u6570\nint main() {\n    struct Deque* deque = createDeque();\n\n    insertFront(deque, 1);\n    insertRear(deque, 2);\n    insertFront(deque, 3);\n\n    printDeque(deque);\n\n    deleteFront(deque);\n    printDeque(deque);\n\n    insertRear(deque, 4);\n    printDeque(deque);\n\n    deleteRear(deque);\n    printDeque(deque);\n\n    return 0;\n}\n</code></pre> <p>\u6570\u7ec4\u5b9e\u73b0</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAX_SIZE 100\n\n// \u5b9a\u4e49\u53cc\u7aef\u961f\u5217\u7ed3\u6784\nstruct Deque {\n    int arr[MAX_SIZE];\n    int front;\n    int rear;\n};\n\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53cc\u7aef\u961f\u5217\nstruct Deque* createDeque() {\n    struct Deque* deque = (struct Deque*)malloc(sizeof(struct Deque));\n    deque-&gt;front = -1;\n    deque-&gt;rear = -1;\n    return deque;\n}\n\n// \u5728\u961f\u5934\u63d2\u5165\u5143\u7d20\nvoid insertFront(struct Deque* deque, int data) {\n    if (deque-&gt;front == -1) {\n        deque-&gt;front = 0;\n        deque-&gt;rear = 0;\n        deque-&gt;arr[deque-&gt;front] = data;\n    } else if (deque-&gt;front &gt; 0) {\n        deque-&gt;arr[--deque-&gt;front] = data;\n    } else {\n        printf(\"Deque is full (front).\\n\");\n    }\n}\n\n// \u5728\u961f\u5c3e\u63d2\u5165\u5143\u7d20\nvoid insertRear(struct Deque* deque, int data) {\n    if (deque-&gt;rear == -1) {\n        deque-&gt;front = 0;\n        deque-&gt;rear = 0;\n        deque-&gt;arr[deque-&gt;rear] = data;\n    } else if (deque-&gt;rear &lt; MAX_SIZE - 1) {\n        deque-&gt;arr[++deque-&gt;rear] = data;\n    } else {\n        printf(\"Deque is full (rear).\\n\");\n    }\n}\n\n// \u4ece\u961f\u5934\u5220\u9664\u5143\u7d20\nvoid deleteFront(struct Deque* deque) {\n    if (deque-&gt;front != -1) {\n        if (deque-&gt;front == deque-&gt;rear) {\n            deque-&gt;front = -1;\n            deque-&gt;rear = -1;\n        } else {\n            deque-&gt;front++;\n        }\n    } else {\n        printf(\"Deque is empty (front).\\n\");\n    }\n}\n\n// \u4ece\u961f\u5c3e\u5220\u9664\u5143\u7d20\nvoid deleteRear(struct Deque* deque) {\n    if (deque-&gt;rear != -1) {\n        if (deque-&gt;front == deque-&gt;rear) {\n            deque-&gt;front = -1;\n            deque-&gt;rear = -1;\n        } else {\n            deque-&gt;rear--;\n        }\n    } else {\n        printf(\"Deque is empty (rear).\\n\");\n    }\n}\n\n// \u68c0\u67e5\u53cc\u7aef\u961f\u5217\u662f\u5426\u4e3a\u7a7a\nint isEmpty(struct Deque* deque) {\n    return (deque-&gt;front == -1);\n}\n\n// \u6253\u5370\u53cc\u7aef\u961f\u5217\u4e2d\u7684\u5143\u7d20\nvoid printDeque(struct Deque* deque) {\n    if (isEmpty(deque)) {\n        printf(\"Deque is empty.\\n\");\n        return;\n    }\n\n    printf(\"Front: %d, Rear: %d\\n\", deque-&gt;front, deque-&gt;rear);\n    printf(\"Elements: \");\n    for (int i = deque-&gt;front; i &lt;= deque-&gt;rear; i++) {\n        printf(\"%d \", deque-&gt;arr[i]);\n    }\n    printf(\"\\n\");\n}\n\n// \u4e3b\u51fd\u6570\nint main() {\n    struct Deque* deque = createDeque();\n\n    insertFront(deque, 1);\n    insertRear(deque, 2);\n    insertFront(deque, 3);\n\n    printDeque(deque);\n\n    deleteFront(deque);\n    printDeque(deque);\n\n    insertRear(deque, 4);\n    printDeque(deque);\n\n    deleteRear(deque);\n    printDeque(deque);\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS-notes/#_2","title":"\u5faa\u73af\u961f\u5217","text":"<p>\u94fe\u8868\u5b9e\u73b0</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// \u5b9a\u4e49\u5faa\u73af\u961f\u5217\u8282\u70b9\u7ed3\u6784\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\n// \u5b9a\u4e49\u5faa\u73af\u961f\u5217\u7ed3\u6784\nstruct CircularQueue {\n    struct Node* front;\n    struct Node* rear;\n};\n\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5faa\u73af\u961f\u5217\nstruct CircularQueue* createCircularQueue() {\n    struct CircularQueue* queue = (struct CircularQueue*)malloc(sizeof(struct CircularQueue));\n    queue-&gt;front = NULL;\n    queue-&gt;rear = NULL;\n    return queue;\n}\n\n// \u5165\u961f\u64cd\u4f5c\nvoid enqueue(struct CircularQueue* queue, int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode-&gt;data = data;\n    newNode-&gt;next = NULL;\n    if (queue-&gt;rear == NULL) {\n        queue-&gt;front = newNode;\n        queue-&gt;rear = newNode;\n        newNode-&gt;next = newNode; // \u94fe\u63a5\u5230\u81ea\u8eab\u4ee5\u6784\u6210\u5faa\u73af\n    } else {\n        newNode-&gt;next = queue-&gt;front;\n        queue-&gt;rear-&gt;next = newNode;\n        queue-&gt;rear = newNode;\n    }\n}\n\n// \u51fa\u961f\u64cd\u4f5c\nint dequeue(struct CircularQueue* queue) {\n    if (queue-&gt;front == NULL) {\n        printf(\"Queue is empty.\\n\");\n        return -1; // \u961f\u5217\u4e3a\u7a7a\u65f6\u8fd4\u56de-1\n    }\n    int data = queue-&gt;front-&gt;data;\n    struct Node* temp = queue-&gt;front;\n    if (queue-&gt;front == queue-&gt;rear) {\n        queue-&gt;front = NULL;\n        queue-&gt;rear = NULL;\n    } else {\n        queue-&gt;front = queue-&gt;front-&gt;next;\n        queue-&gt;rear-&gt;next = queue-&gt;front;\n    }\n    free(temp);\n    return data;\n}\n\n// \u68c0\u67e5\u5faa\u73af\u961f\u5217\u662f\u5426\u4e3a\u7a7a\nint isEmpty(struct CircularQueue* queue) {\n    return (queue-&gt;front == NULL);\n}\n\n// \u6253\u5370\u5faa\u73af\u961f\u5217\u4e2d\u7684\u5143\u7d20\nvoid printCircularQueue(struct CircularQueue* queue) {\n    struct Node* current = queue-&gt;front;\n    if (current == NULL) {\n        printf(\"Circular Queue is empty.\\n\");\n        return;\n    }\n    do {\n        printf(\"%d \", current-&gt;data);\n        current = current-&gt;next;\n    } while (current != queue-&gt;front);\n    printf(\"\\n\");\n}\n\n// \u4e3b\u51fd\u6570\nint main() {\n    struct CircularQueue* queue = createCircularQueue();\n\n    enqueue(queue, 1);\n    enqueue(queue, 2);\n    enqueue(queue, 3);\n    enqueue(queue, 4);\n\n    printCircularQueue(queue);\n\n    dequeue(queue);\n    dequeue(queue);\n\n    printCircularQueue(queue);\n\n    enqueue(queue, 5);\n    printCircularQueue(queue);\n\n    dequeue(queue);\n    dequeue(queue);\n    dequeue(queue);\n    dequeue(queue);\n\n    printCircularQueue(queue);\n\n    return 0;\n}\n</code></pre> <p>\u6570\u7ec4\u5b9e\u73b0</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAX_SIZE 100\n\n// \u5b9a\u4e49\u5faa\u73af\u961f\u5217\u7ed3\u6784\nstruct CircularQueue {\n    int arr[MAX_SIZE];\n    int front;\n    int rear;\n};\n\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5faa\u73af\u961f\u5217\nstruct CircularQueue* createCircularQueue() {\n    struct CircularQueue* queue = (struct CircularQueue*)malloc(sizeof(struct CircularQueue));\n    queue-&gt;front = -1;\n    queue-&gt;rear = -1;\n    return queue;\n}\n\n// \u5165\u961f\u64cd\u4f5c\nvoid enqueue(struct CircularQueue* queue, int data) {\n    if ((queue-&gt;rear + 1) % MAX_SIZE == queue-&gt;front) {\n        printf(\"Queue is full.\\n\");\n        return;\n    }\n    if (queue-&gt;front == -1) {\n        queue-&gt;front = 0;\n        queue-&gt;rear = 0;\n        queue-&gt;arr[queue-&gt;rear] = data;\n    } else {\n        queue-&gt;rear = (queue-&gt;rear + 1) % MAX_SIZE;\n        queue-&gt;arr[queue-&gt;rear] = data;\n    }\n}\n\n// \u51fa\u961f\u64cd\u4f5c\nint dequeue(struct CircularQueue* queue) {\n    if (queue-&gt;front == -1) {\n        printf(\"Queue is empty.\\n\");\n        return -1;\n    }\n    int data = queue-&gt;arr[queue-&gt;front];\n    if (queue-&gt;front == queue-&gt;rear) {\n        queue-&gt;front = -1;\n        queue-&gt;rear = -1;\n    } else {\n        queue-&gt;front = (queue-&gt;front + 1) % MAX_SIZE;\n    }\n    return data;\n}\n\n// \u68c0\u67e5\u5faa\u73af\u961f\u5217\u662f\u5426\u4e3a\u7a7a\nint isEmpty(struct CircularQueue* queue) {\n    return (queue-&gt;front == -1);\n}\n\n// \u6253\u5370\u5faa\u5faa\u73af\u961f\u5217\u4e2d\u7684\u5143\u7d20\nvoid printCircularQueue(struct CircularQueue* queue) {\n    if (isEmpty(queue)) {\n        printf(\"Circular Queue is empty.\\n\");\n        return;\n    }\n\n    int i = queue-&gt;front;\n    do {\n        printf(\"%d \", queue-&gt;arr[i]);\n        i = (i + 1) % MAX_SIZE;\n    } while (i != (queue-&gt;rear + 1) % MAX_SIZE);\n    printf(\"\\n\");\n}\n\n// \u4e3b\u51fd\u6570\nint main() {\n    struct CircularQueue* queue = createCircularQueue();\n\n    enqueue(queue, 1);\n    enqueue(queue, 2);\n    enqueue(queue, 3);\n    enqueue(queue, 4);\n\n    printCircularQueue(queue);\n\n    dequeue(queue);\n    dequeue(queue);\n\n    printCircularQueue(queue);\n\n    enqueue(queue, 5);\n    printCircularQueue(queue);\n\n    dequeue(queue);\n    dequeue(queue);\n    dequeue(queue);\n    dequeue(queue);\n\n    printCircularQueue(queue);\n\n    return 0;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS-notes/#_3","title":"\u53cc\u5411\u5faa\u73af\u94fe\u8868","text":"C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// \u5b9a\u4e49\u53cc\u5411\u5faa\u73af\u94fe\u8868\u8282\u70b9\u7ed3\u6784\nstruct Node {\n    int data;\n    struct Node* next;\n    struct Node* prev;\n};\n\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53cc\u5411\u5faa\u73af\u94fe\u8868\nstruct Node* createDoublyCircularLinkedList(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode-&gt;data = data;\n    newNode-&gt;next = newNode;\n    newNode-&gt;prev = newNode;\n    return newNode;\n}\n\n// \u5728\u53cc\u5411\u5faa\u73af\u94fe\u8868\u7684\u672b\u5c3e\u63d2\u5165\u8282\u70b9\nvoid insertAtEnd(struct Node** head, int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode-&gt;data = data;\n    newNode-&gt;next = (*head);\n    newNode-&gt;prev = (*head)-&gt;prev;\n    (*head)-&gt;prev-&gt;next = newNode;\n    (*head)-&gt;prev = newNode;\n}\n\n// \u6253\u5370\u53cc\u5411\u5faa\u73af\u94fe\u8868\u7684\u5143\u7d20\nvoid printDoublyCircularLinkedList(struct Node* head) {\n    if (head == NULL) {\n        printf(\"Empty Doubly Circular Linked List\\n\");\n        return;\n    }\n\n    struct Node* current = head;\n    do {\n        printf(\"%d \", current-&gt;data);\n        current = current-&gt;next;\n    } while (current != head);\n    printf(\"\\n\");\n}\n\n// \u4e3b\u51fd\u6570\nint main() {\n    struct Node* head = createDoublyCircularLinkedList(1);\n\n    insertAtEnd(&amp;head, 2);\n    insertAtEnd(&amp;head, 3);\n\n    printf(\"Doubly Circular Linked List: \");c \n    printDoublyCircularLinkedList(head);\n\n    return 0;\n}\n</code></pre> <p>\u4e8c\u5206\u6cd5\u7684\u7ec6\u8282\u52a0\u7ec6\u8282 \u4f60\u771f\u7684\u5e94\u8be5\u641e\u61c2\uff01\uff01\uff01_\u4e8c\u5206\u7b97\u6cd5-CSDN\u535a\u5ba2</p> <p>\u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811\u2014\u2014\uff08\u5feb\u901f\u5224\u65ad\u67d0\u68f5\u6811\u662f\u5426\u4e3a\u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811\uff09_\u6298\u534a\u67e5\u627e\u6811_\u53eb\u6211\u8611\u83c7\u5148\u751f\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p> <p>\u5bf9\u4efb\u610f\u65e0\u5e8f\u5e8f\u5217\u53ef\u5efa\u7acb\u5b8c\u5168\u4e8c\u53c9\u67e5\u627e\u6811</p> <p>\u5148\u5bf9\u5e8f\u5217\u6392\u5e8f\uff0c\u6392\u5e8f\u540e\u5f97\u5230\u5347\u5e8f\u5e8f\u5217\u4e3a\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f</p> <p>\u5df2\u77e5\u7236\u8282\u70b9i\uff0c\u53ef\u6c42\u51fa\u5b50\u8282\u70b9\u4e0b\u68072i\u548c 2i+1</p> C<pre><code>void make_tree(int* tree, int* a,int n,int p,int* i){\n    if(p&gt;n||p&lt;1||(*i)&gt;n){\n        return;\n    }\n    make_tree(tree,a,n,p*2,i);\n    tree[p] = a[(*i)++];\n    make_tree(tree,a,n,p*2+1,i);\n}\n</code></pre> <p>\u76f4\u63a5\u627e\u5230\u8d8a\u754c\u4e3a\u6b62</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/","title":"FDS\u671f\u672b\u590d\u4e60","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#fds-final-exam","title":"FDS final exam","text":"<p>\u7a0b\u5e8f\u586b\u7a7a\uff1a\u6392\u5e8f</p> <p>\u7f16\u7a0b\u9898\uff1a\u56fe\uff0c\u6811</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_1","title":"\u80cc\u7b54\u6848\u6ca1\u7528 \u8981\u7406\u89e3 \u73b0\u63a8","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_2","title":"\u57fa\u7840\u7684\u80fd\u591f\u5b9e\u73b0","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#pptlab","title":"ppt(\u4e66)&gt;\u4f5c\u4e1a,lab\u505a\u8fc7\u7684\u9898&gt;\u5237\u65b0\u9898","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#ppt","title":"ppt\u7684\u6bcf\u4e00\u4e2a\u89d2\u843d","text":"<ol> <li>mergesort </li> <li>shellsort</li> <li>\u56db\u79cd\u6811\u904d\u5386\u975e\u9012\u5f52\u5b9e\u73b0</li> <li>\u5e76\u67e5\u96c6 path compression\uff0cunion find\uff0c\u6839\u636e\u5b9e\u73b0\u770b\u5b9a\u4e49</li> <li> <li>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#1","title":"1.\u7b97\u6cd5\u5206\u6790","text":"<p>1.O(N)\u662f\u4e0a\u754c\uff0c\u03a9(N)\u4e3a\u4e0b\u754c\uff0c\u0398(N)\u4e3a\u5e38\u6570\u500d</p> <p>2.\u6ce8\u610f\u5faa\u73af\u7684\u6761\u4ef6\uff0c\u4ee5\u53caN^2^\u8fd8\u662fN^N^\uff0c\u8fd8\u662fN*N</p> <p>\u6bd4\u8f83 \\(N^{1.5}\u548cNlogN\\)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#2","title":"2.\u5217\u8868","text":"<p>1.\u94fe\u8868\u4e2d\u7684\u4e8c\u5206\u6cd5\u590d\u6742\u5ea6\u5927\u4e8eO(NlogN)</p> <p>2.sequentially stored linear list\u8fd9\u4e2a\u662f\u987a\u5e8f\u5b58\u50a8\u7684\u7ebf\u6027\u8868\uff0c\u5c31\u662f\u548c\u6570\u7ec4\u5dee\u4e0d\u591a\uff0c\u4e0d\u662f\u94fe\u8868\u3002\u94fe\u8868\uff1alinked list</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#multilists","title":"multilists","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#polynomial-adt","title":"polynomial adt","text":"<p>\u94fe\u8868\u76f8\u5173\u64cd\u4f5c\uff0c\u8003\u586b\u7a7a</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#3","title":"3.\u6808\u548c\u961f\u5217","text":"<p>array implementation of stack</p> <p>\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u5199\u4e00\u5199</p> <p>topological sort \u6307\u5b9a\u4f7f\u7528stack\u5b9e\u73b0</p> <p>balancing symbol</p> <p>\u6a21\u62df\u5165\u6808\uff0c\u51fa\u6808\u5e8f\u5217</p> <p>infix   inorder traversal\u7684\u975e\u9012\u5f52\u5b9e\u73b0</p> <p>1.prefix\u548cinfix\u548cpostfix\u662f\u6811\u7684\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u53d8\u91cf\u5728\u53f6\u5b50\u7ed3\u70b9\uff0c\u800c\u8fd0\u7b97\u7b26\u53f7\u5728\u975e\u53f6\u5b50\u7ed3\u70b9\u3002</p> <p>index-&gt;postfix:\u9047\u5230\u5b57\u6bcd\u76f4\u63a5\u8f93\u51fa\uff0c\u9047\u5230\u7b26\u53f7\uff1a\u8981\u6c42\u6808\u9876\u7684\u4f18\u5148\u7ea7\u662f\u6700\u9ad8\u7684\uff0c\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\uff0c\u5c31\u51fa\u6808\uff0c\u76f4\u5230\u6ee1\u8db3\u4e3a\u6b62\u3002\u7136\u540e\u8be5\u7b26\u53f7\u5165\u6808\u3002</p> <p>\u62ec\u53f7\u7684\u4f18\u5148\u7ea7\u6808\u5916\u6700\u9ad8\uff0c\u6808\u5185\u6700\u4f4e\u3002\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u51fa\u6808\u76f4\u5230\u5de6\u62ec\u53f7</p> <p>2.\u95ee\u4e0d\u53ef\u80fd\u7684\u5f39\u51fa\u5e8f\u5217\uff0c\u95ee\u6808\u81f3\u5c11\u591a\u5927\uff0c\u90fd\u6a21\u62df\u4e00\u4e0b\u6808\u5373\u53ef\u3002\u6ce8\u610f\u51fa\u6808\u4ee5\u540e\u53ef\u4ee5\u5728\u8be5\u5143\u7d20\u7684\u65c1\u8fb9\u5199\u6570\u5b57\u8868\u793a\u5165\u6808\uff0c\u4e0d\u662f\u5728\u4e0a\u65b9\u3002</p> <p>3.Circle queue:\u51fa\u5165\u961f\u5217\u64cd\u4f5c\u4ee5\u540e\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u5c3e\u8282\u70b9\u5c0f\u4e8e\u5934\u8282\u70b9\u7684\u60c5\u51b5\u3002\u4f46\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u4e0d\u4f1a\u5927\u4e8en\u3002\u5c3e\u8282\u70b9\u5176\u5b9e\u662fn+\u5c3e\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\u56e0\u6b64\u8ba1\u7b97\u4e2a\u6570\u7684\u65f6\u5019\u5c31\u52a0\u56de\u53bb\u3002</p> <p>Circle queue\u6700\u591a\u53ef\u4ee5\u5bb9\u7eb3\u7684\u5143\u7d20\u662f\u6570\u7ec4\u7684\u5927\u5c0f-1\u4e2a\u5143\u7d20\u3002</p> <p>circlular queue\uff1f\u88c5\u6ee1\uff0c\u6ee1\u548c\u7a7a\u662f\u65e0\u6cd5\u533a\u5206\u7684\uff1f</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#4","title":"4.\u6811","text":"<p>how to convert general tree into binary tree</p> <p>expression tree evaluation</p> <p>preorder\u548cpostorder\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u60c5\u51b5\u4e0b\u53ef\u4ee5\u5efa\u6811</p> <p>inorder\u5e8f\u5217must/may </p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#1_1","title":"1.\u6811\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff1a","text":"<p>a.\u5c06\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u538b\u5165\u6808\uff0c\u76f4\u5230\u6ca1\u6709\u5de6\u8282\u70b9\u3002</p> <p>b.\u5f39\u51fa\u4e00\u4e2a\u70b9\uff0c\u5c06\u8fd9\u4e2a\u70b9\u7684\u53f3\u8282\u70b9\u538b\u5165\u6808\uff0c</p> <p>c.\u91cd\u590db\u76f4\u5230\u904d\u5386\u5b8c\u6210</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#2_1","title":"2.\u6811\u7684\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff1a","text":"<p>a.\u5f53\u524d\u7ed3\u70b9\u6240\u6709\u5b69\u5b50\u5165\u961f\u5217\u3002</p> <p>b.\u5f39\u51fa\u4e00\u4e2a\uff0c\u5c06\u5b69\u5b50\u5165\u961f\u5217\uff0c\u76f4\u5230\u961f\u5217\u7a7a</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#3_1","title":"3.\u6709\u5173\u6811\u7684\u8ba1\u7b97\uff1a","text":"<p>\u5df2\u77e5degree\u4e3a1\uff0c2\u7684\u70b9\u6709\u51e0\u4e2a\u8fd9\u79cd\uff0c\u9700\u8981\u7528\u516c\u5f0f\uff1a\\(\u2211degree=2e\\)\uff0c\u4f46\u662fdegree\u5b9a\u4e49\u4e0d\u540c\uff0c\u9700\u8981+1,\u6c42\u548c\u540e\u9700\u8981-1\uff0c\u56e0\u4e3a\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\u3002</p> <p>\u5982\u679c\u6709\u4e24\u4e2adegree\u7684\u70b9\u4e2a\u6570\u4e0d\u77e5\u9053\uff0c\u76f4\u63a5\u5f53\u4f5c0\u5c31\u53ef\u4ee5\u3002\u5fc5\u987b\u80fd\u591f\u7ea6\u6389\uff0c\u5426\u5219\u7b97\u4e0d\u51fa\u6765\u3002</p> <p>\uff08\u4e0e\u53f6\u8282\u70b9\u76f8\u5173\u7684\u8ba1\u7b97\uff09</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#4_1","title":"4.\u524d\u4e2d\u540e\u5c42\u5e8f\u904d\u5386\u53ca\u4e92\u76f8\u8f6c\u5316\uff0c\u6839\u636e\u4efb\u610f\u4e24\u4e2a\u5e8f\u5217\u8fd8\u539f\u6574\u68f5\u6811","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#5","title":"5.\u641c\u7d22\u6811","text":"<p>\u7ed9\u4e00\u4e2a\u5e8f\u5217\u3002\u628abst\u5efa\u51fa\u6765</p> <p>construct BST recursively</p> <p>\u8282\u70b9\u4e0b\u6807\u5173\u7cfb</p> <p>\u5efa\u5806</p> <p>\u5efa\u5e76\u67e5\u96c6return s[x]=find(s[x],S)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#1_2","title":"1.\u6839\u636e\u5f62\u6001\u8fd8\u539f\u6811","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#2_2","title":"2.\u63d2\u5165\u3001\u5220\u9664","text":"<p>insertion deletion</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#3_2","title":"3.\u6709\u5173\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff1a","text":"<p>T(N)=2T(N/2)+1\uff0c\u89e3\u4e00\u4e0b\u662fO(N)</p> <p>\u540e\u5e8f\u904d\u5386\uff1a\u5fc5\u987b\u6700\u540e\u4e00\u4e2a\u662f\u6839\uff0c\u524d\u9762\u5fc5\u987b\u6709\u4e00\u4e2a\u5e8f\u5217\u5b8c\u5168\u5c0f\u4e8e\u6839\uff0c\u540e\u9762\u4e00\u4e2a\u5e8f\u5217\u5b8c\u5168\u5927\u4e8e\u6839\u3002\u7136\u540e\u518d\u5728\u5b50\u5e8f\u5217\u91cc\u627e\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#3bst","title":"3.\u5df2\u77e5BST\u8282\u70b9\u4e2a\u6570\uff0c\u6c42\u5b69\u5b50\u4e2a\u6570\uff1a","text":"<p>\u8282\u70b9\u4e3a\\(1 + 2 + 2 2 + . . . 2 k + m = 2 k + 1 \u2212 1 + m = n 1+2+2^2+...2^k+m=2^{k+1}-1+m=n1+2+2  2  +...2  k  +m=2  k+1  \u22121+m=n\\)</p> <p>m\u662f\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u5b69\u5b50\u3002\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u5b69\u5b50\u7684\u7684\u4e00\u534a+\u5b8c\u6574\u7684k\u9636\u4e8c\u53c9\u6811\u7684\u5b69\u5b50\u4e2a\u6570\u5c31\u662f\u603b\u5b69\u5b50\u4e2a\u6570\u3002</p> <p>4.\u4e8c\u53c9\u6811\u6700\u65b9\u4fbf\u7684\u65b9\u6cd5\u5c31\u662f\u753b\u4e00\u4e2a\u7279\u4f8b\u9a8c\u8bc1</p> <p>5.\u4e8c\u53c9\u641c\u7d22\u6811\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u7684\uff0c\u56e0\u6b64\u548c\u4e8c\u5206\u67e5\u627e\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4e8c\u5206\u67e5\u627e\u76f8\u5f53\u4e8e\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u91cc\u627e</p> <p>6.\u4e8c\u53c9\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1aT(N)=T(N/2)+1\uff0c\u5982\u679c\u4e0d\u662f\u4e8c\u5206\uff0c\u5219\u662fN/K,\u4f46\u662f\u590d\u6742\u5ea6\u8fd8\u662fO(NlogN)</p> <p>7.\u4e8c\u53c9\u68117,9\u540c\u7ea7\uff0c\u52198\u4e00\u5b9a\u5171\u540c\u7684\u7956\u5148\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u662f\u5171\u540c\u7684\u7236\u7ed3\u70b9\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#6","title":"6.\u5806","text":"<p>\u4e0b\u6807\u95ee\u9898\uff1a\u4ece0\u5f00\u59cb\u8fd8\u662f\u4ece1\u5f00\u59cb</p> <p>heapsort\u4ece1\u5f00\u59cb\u7684</p> <p>\u4e0b\u6807\u6027\u8d28\u6bd4\u8f83\u91cd\u8981</p> <p>1.\u5efa\u5806\u662f\u4ece\u4f4eN/2\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5f80\u524d\u8d70\uff0c\u6bcf\u4e2a\u6267\u884cprecdown\u3002precdown\u662f\u6307\u5c06\u8be5\u7ed3\u70b9\u548c\u6700\u5c0f\u7684\u5b69\u5b50\u6bd4\u8f83\uff0c\u5982\u679c\u5927\u4e8e\u6700\u5c0f\u7684\u5b69\u5b50\uff0c\u5219\u4ea4\u6362\uff0c\u76f4\u5230\u5c0f\u4e8e\u6240\u6709\u7684\u5b69\u5b50\u3002</p> <p>2.\u5efa\u5806\u6700\u5927\u6bd4\u8f832N-2\u6b21</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#1_3","title":"1. \u7b2c\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u5e8f\u53f7\u662f\u591a\u5c11","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#2_3","title":"2.\u5927\u6839\u5806\u548c\u5c0f\u6839\u5806\u7684\u7ebf\u6027\u8f6c\u5316\u65b9\u5f0f","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#3_3","title":"3.\u6839\u8282\u70b9\u548c\u53f6\u5b50\u8282\u70b9\u4e0b\u6807\u7ebf\u6027\u8868\u793a\u8ba1\u7b97","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#4_2","title":"4.\u6a21\u62df\u5efa\u5806","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#7","title":"7.\u5e76\u67e5\u96c6","text":"<p>\u590d\u6742\u5ea6\u662f\u591a\u5c11</p> <p>union-by-size \u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9</p> <p>\\(O(log_2N+1)\\)</p> <ul> <li>[Lemma] Let T be a tree created by union-by-size with N nodes, then \\(height(T)\\leq\\lfloor\\log_2N\\rfloor+1\\).</li> </ul> <p>Proved by induction. Each element can have its set name changed at most \\(\\log_2N\\) times.</p> <ul> <li>Time complexity of \\(N\\) Union and \\(M\\) Find operations is now \\(O(N+M\\log_2N)\\).</li> </ul> <p>N union and M find (M&gt;N):\u5bf9\u4e8e\u6709path compression\u548cunion by rank\u7684\u7b97\u6cd5\uff0c</p> <p>\\(T(M,N)=M\\alpha(M,N)=Mlog^*(N)\\)</p> <p>kruskal\u4e3a\u4ec0\u4e48\u662fElogE</p> <p>akammen</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#8","title":"8.\u56fe\u548c\u62d3\u6251\u6392\u5e8f","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_3","title":"\u90bb\u63a5\u8868\u548c\u90bb\u63a5\u77e9\u9635\uff0c\u600e\u4e48\u770b\u5165\u5ea6\u51fa\u5ea6\u591a\u5c11","text":"<p>\u6a2a\u7740\u770b\u7ad6\u7740\u770b</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#adjacency-multilists","title":"adjacency multilists\uff1f","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#aoeaov","title":"AOE\u548cAOV\u7684\u53d8\u6362","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_4","title":"\u5b9a\u4e49","text":"<p>\u8fb9\uff08Edge\uff09</p> <p>\u9876\u70b9\uff08Vertex\uff09</p> <p>\u5ea6\uff1a\u76f8\u8fde\u8fb9\u7684\u4e2a\u6570\uff0c\u4e0d\u540c\u4e0e\u6811\u7684\u5b50\u8282\u70b9\u6570\uff08\u5c11 1\uff09\u3002</p> <p>\\(\u2211 d e g r e e = 2 e\\)\u662f\u5bf9\u6240\u6709\u7684\u56fe\u90fd\u6210\u7acb\uff0c\u548c\u662f\u5426\u8054\u901a\u6ca1\u6709\u5173\u7cfb</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_5","title":"\u8868\u793a","text":"<p>\u4e8c\u7ef4\u6570\u7ec4\uff1a\u8868\u793a\u8fb9\u7684\u65b9\u5411\u3001\u6743\u3002</p> <p>\u65e0\u5411\uff1a\u4f7f\u7528\u5355\u4e00\u6570\u7ec4\uff0c\u591a\u91cd\u94fe\u8868\uff08\u5171\u7528\u5b58\u50a8\uff0c\u7528\u591a\u94fe\u4e32\u8d77\u6bcf\u4e2a\u5143\u7d20\uff09</p> <p>\u6709\u5411\uff1a\u90bb\u63a5\u94fe\u8868\uff0c\u5341\u5b57\u94fe\u8868\uff08\u5171\u7528\u5b58\u50a8\uff0c\u5206\u522b\u7528\u4e24\u94fe\u4e32\u8d77\u51fa\u5165\uff09</p> <p>\u5173\u952e\u4fe1\u606f\u5728\u9876\u70b9\uff08AOV\uff0cActivity On Vertex\uff09</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_6","title":"\u90bb\u63a5\u7ed3\u6784\uff1a\u591a\u91cd\u90bb\u63a5\uff1f","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_7","title":"\u62d3\u6251\u6392\u5e8f\uff1a\u5982\u4f55\u786e\u8ba4\u56fe\u4e2d\u662f\u5426\u6709\u73af\uff1f","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#9","title":"9 \u6700\u77ed\u8def\u548c\u7f51\u7edc\u6d41","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#bfs","title":"\u65e0\u6743\u56fe\u6700\u77ed\u8def\uff1aBFS","text":"<p>\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898\uff0c\u5373\u9009\u51fa\u4e00\u4e2a\u539f\u70b9\uff0c\u5176\u4ed6\u6240\u6709\u70b9\u5230\u8fd9\u4e2a\u539f\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u5e76\u627e\u51fa\u83b7\u5f97\u8fd9\u4e2a\u6700\u5c0f\u8ddd\u79bb\u9700\u8981\u8d70\u54ea\u6761\u8def</p> <p>\u4e24\u79cdBFS\u6c42\u65e0\u6743\u56fe\u6700\u77ed\u8def\u7684\u5199\u6cd5\uff0c\u4e00\u79cd\u662f\u5916\u9762\u4e00\u4e2a\u904d\u5386\u6240\u6709\u8282\u70b9\u7684\u5faa\u73af\uff0c\u7ef4\u62a4\u4e00\u4e2acurdist\u53d8\u91cf\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u5224\u65ad\uff0c\u82e5\u8ddd\u79bb=curdist\uff0c\u5219\u66f4\u65b0\u4e0e\u8be5\u8282\u70b9\u76f8\u90bb\u7684\u6240\u6709\u8282\u70b9\u7684dist\u4e3acurdist+1\uff0c\u5982\u679c\u56fe\u9000\u5316\u4e3a\u7ebf\u6027\u7684\u5219\u590d\u6742\u5ea6\u4e3a\\(O(N^2)\\)</p> <p>\u4e00\u79cd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u961f\u5217\uff0c\u4e5f\u5c31\u662fBFS\u6700\u7ecf\u5178\u7684\u7ed3\u6784\uff0c\u5148\u5c06\u539f\u70b9\u5165\u961f\uff0c......\u76f4\u5230\u961f\u7a7a\uff0c\u590d\u6742\u5ea6\u964d\u4e3a\\(O(|V|+|E|)\\)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#dijkstra","title":"\u6709\u6743\u56fe\u6700\u77ed\u8def\uff1adijkstra","text":"<p>\u6bcf\u6b21\u5728unknown\u7684\u8282\u70b9\u4e2d\u627e\u4e00\u4e2adist\u6700\u5c0f\u7684\u8282\u70b9\u52a0\u5165known\u6570\u7ec4\u4e2d\uff0c\u66f4\u65b0\u4e0e\u4e4b\u76f8\u90bb\u7684\u6240\u6709\u8282\u70b9\u7684dist\uff0c\u5f53\u6240\u6709\u8282\u70b9\u90fd\u5728known\u4e2d\u65f6\u7ec8\u6b62</p> <p>\u6709\u5f88\u591a\u66f4\u65b0\u52a8\u4f5c\uff1a\u8d70\u4e00\u6761\u8df3\u6570\u66f4\u591a\u7684\u8def\u5f84\u53ef\u80fd\u6700\u540e\u66f4\u77ed</p> <p>\u6bcf\u6b21\u627edist\u7684\u52a8\u4f5c\uff1a\u7ebf\u6027\u626b\u63cf \u590d\u6742\u5ea6\u4e3a\\(O(|V^2|+|E|)\\), \u5bf9\u7a20\u5bc6\u56fe\u597d\uff0c\u7531\u4e8e\\(V&lt;E&lt;V^2\\)</p> <p>\u90bb\u63a5\u77e9\u9635\uff0c\u90bb\u63a5\u8868\u5b9e\u73b0\uff0c\u590d\u6742\u5ea6</p> <p>\u7ef4\u62a4\u5806\uff1a</p> <ul> <li> <p>\u5806\u4f18\u5316</p> </li> <li> <p>Keep distances in a priority queue and call <code>DeleteMin</code> to find the smallest unknown distance vertex.\u2014\u2014\\(O(\\log|V|)\\)</p> </li> <li> <p>\u66f4\u65b0\u7684\u5904\u7406\u65b9\u6cd5</p> </li> <li> <p>Method 1 : <code>DecreaseKey</code>\u2014\u2014\\(O(\\log|V|)\\)</p> <p>\\(T=O(|V|\\log|V|+|E|\\log|V|)=O(|E|\\log|V|)\\)</p> </li> <li> <p>Method 2 : insert W with updated Dist into the priority queue</p> <p>Must keep doing <code>DeleteMin</code> until an unknown vertex emerges</p> <p>\\(T=O(|E|\\log|V|)\\) but requires \\(|E|\\) <code>DeleteMin</code> with <code>|E|</code> space</p> </li> <li> <p>Good if the graph is sparse</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_8","title":"\u6709\u8d1f\u6743\u8fb9\u65f6\u8ba1\u7b97\u6700\u77ed\u8def\u7684\u7b97\u6cd5","text":"<p>\u590d\u6742\u5ea6\uff1a\\(O(|V|\u00d7|E|)\\)?</p> <p>combine the update move of weighted graph and the queue of unweighted</p> <p>\u5faa\u73afV-1\u8f6e\uff0c\u904d\u5386\u6bcf\u6761\u8fb9E\uff0c\u770b\u770b\u5bf9\u4e8e\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff08dist!=INT_MAX\uff09\u662f\u5426\u80fd\u7ee7\u7eed\u66f4\u65b0\u4e0e\u4e4b\u76f8\u90bb\u8282\u70b9\u7684dist</p> <p>V-1\u8f6e\u5bf9\u4e8e\u904d\u5386\u6bcf\u6761\u8fb9\u66f4\u65b0\u662f\u80af\u5b9a\u591f\u7684\uff0c\u5c31\u7b97\u662f\u8003\u8651\u9000\u5316\u4e3a\u4e00\u6761\u5355\u94fe\u8868\uff0c\u4e5f\u53ea\u9700\u8981V-1\u6b21</p> <p>\u5224\u65ad\u6709\u8d1f\u6743\u73af\u7684\u6761\u4ef6\u662f\uff0c\u5982\u679c\u5728\u7b2cV-1\u6b21\u8fed\u4ee3\u540e\uff0c\u8fd8\u80fd\u7ee7\u7eed\u677e\u5f1b\uff0c\u5219\u8bf4\u660e\u6709\u8d1f\u6743\u73af</p> <p>\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u51fa\u73b0\u4e86\u66f4\u65b0\u7684\u9876\u70b9\uff0c\u90fd\u5c06\u5176\u5165\u961f\uff0c\u6bcf\u4e2a\u9876\u70b9\u6700\u591a\u5165\u961fV\u6b21\uff0c\u800c\u975e\u53d1\u73b0\u65f6\u7684\u4e00\u6b21\uff0c\u4f7f\u7528\u90bb\u63a5\u8868\u65f6\u590d\u6742\u5ea6\u4e3a\\(O(|V|\u00d7|E|)\\)\uff0c\u6bd4dijkstra\u7684\\(O(|E|\\log|V|)\\)\u9ad8\u975e\u5e38\u591a</p> <p>\u4efb\u610f\u9876\u70b9\u7b2cV+1\u51fa\u961f\u65f6\u7ec8\u6b62while\u5faa\u73af</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#aoe","title":"AOE \u8981\u6c42\u662f\u65e0\u73af\u56fe\uff0c\u80fd\u591f\u4f7f\u7528\u4e24\u6b21\u62d3\u6251\u6392\u5e8f","text":"<p>activity on edges\uff0c\u8fb9\u662f\u91cd\u70b9\u52a8\u4f5c\uff0c\u9876\u70b9\u53ea\u662f\u6307\u793a\u8be5\u52a8\u4f5c\u5b8c\u6210\u4e86\uff0c\u50cf\u4e00\u4e2a\u68c0\u67e5\u70b9</p> <p>\u62d3\u6251\u6392\u5e8f\u590d\u6742\u5ea6\uff1a\\(O(|E|+|V|)\\)</p> <p>\u4ecev\u5230w\u7684\u8fb9\u7684\u677e\u5f1b\u5ea6\uff1a\\(LC[w]-EC[v]-C_{w,v}\\)</p> <p>\u7531\u677e\u5f1b\u65f6\u95f4\uff08slack time\uff09==0\u7684\u8def\u5f84\u6784\u6210\u7684\u901a\u8def\u4e3acritical path</p> <p>\u5728AOE\u7f51\u7edc\u4e2d\u6709\u4e00\u4e2a\u6e90\u5934\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u3002 \u4ece\u6e90\u5934\u9876\u70b9\u5f00\u59cb\uff0c\u6267\u884c\u5404\u8fb9\u4e0a\u4e8b\u4ef6\u7684\u884c\u52a8\uff0c\u5230\u76ee\u7684\u9876\u70b9\u5b8c\u6210\u4e3a\u6b62\uff0c\u6240\u9700\u7684\u65f6\u95f4\u4e3a\u6240\u6709\u4e8b\u4ef6\u5b8c\u6210\u7684\u65f6\u95f4\u603b\u82b1\u8d39\u3002 AOE\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u662f\u7531\u4e00\u6761\u6216\u6570\u6761\u5173\u952e\u8def\u5f84\uff08Critical Path\uff09\u6240\u63a7\u5236\u7684\u3002 \u6240\u8c13\u5173\u952e\u8def\u5f84\uff0c\u5c31\u662fAOE\u6709\u5411\u56fe\u4ece\u6e90\u5934\u9876\u70b9\u5230\u76ee\u7684\u9876\u70b9\u4e4b\u95f4\uff0c\u6240\u9700\u82b1\u8d39\u65f6\u95f4\u6700\u957f\u7684\u4e00\u6761\u6709\u65b9\u5411\u6027\u7684\u8def\u5f84\u3002 \u5f53\u6709\u4e00\u6761\u4ee5\u4e0a\u7684\u8def\u5f84\u65f6\u95f4\u76f8\u7b49\u5e76\u4e14\u90fd\u662f\u6700\u957f\uff0c\u5219\u8fd9\u4e9b\u8def\u5f84\u90fd\u79f0\u4e3a\u6b64AOE\u6709\u5411\u56fe\u7684\u5173\u952e\u8def\u5f84\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#all-pairs-shortest-path-problem","title":"All-Pairs Shortest Path Problem","text":"<p>The all-pairs shortest path problem is the determination of the shortest graph distances between every pair of vertices in a given graph. The problem can be solved using V applications of Dijkstra's algorithm or all at once using the Floyd-Warshall algorithm.</p> <p>Dijkstra\u7b97\u6cd5\u91cd\u590d\u7528V\u6b21\u53ef\u8fbe\\(O(\u2223V\u2223^3 )\\)\uff0c\u4f18\u5148\u7ea7\u961f\u5217\u5b9e\u73b0\u7684\u8bdd\u53ef\u4ee5\u7b80\u5316\u81f3\\(O(|V|\u00d7|E|\u00d7log|V|)\\)\uff0c</p> <p>\u5bf9\u4e8e\u7a00\u758f\u56fe\u6bd4\u8f83\u597d</p> C<pre><code>warshallFloyd() //1\u8d77\u70b9\u6570\u7ec4\uff0c\u5bf9\u4e8e\u7a20\u5bc6\u56fe\u6bd4\u8f83\u597d\n    for k = 1 to |V|\n        for i = 1 to |V|\n            for j = 1 to |V|\n                A[i][j] = min(A[i][j], A[i][k] + A[k][j])\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_9","title":"\u7f51\u7edc\u6d41","text":"<p>\u624b\u52a8\u7b97\u7f51\u7edc\u6d41\u8981\u5c0f\u5fc3\uff1a\u6a21\u62df\u6700\u5927\u6d41\uff0c\u8ba1\u7b97\u6b8b\u4f59\u7f51\u7edc\uff08residual graph\uff09</p> <p>\u8fc7\u7a0b\uff1a Gf\u662f\u6700\u7ec8\u6d41\u7684\u60c5\u51b5\uff0cGr\u662f\u5269\u4f59\u5bb9\u91cf\u7684\u60c5\u51b5\uff0c\u5f00\u59cbGf=0\uff0cGr=\u539f\u56fe</p> <ol> <li>\u5728Gr\u56fe\u4e2d\u627e\u51fa\u4efb\u610f\u4e00\u6761\u589e\u957f\u901a\u8def\uff08\u4f7f\u7528\u65e0\u6743\u6700\u77ed\u8def\u7b97\u6cd5\uff09</li> <li>\u9009\u53d6\u8fd9\u6761\u8def\u4e0a\u7684\u6700\u5c0f\u6d41\u91cf\uff0c\u5728Gr\u4e2d\u51cf\u53bb\u8fd9\u6761\u8fb9\uff0c\u5e76\u52a0\u4e0a\u7b49\u5927\u5c0f\u7684\u53cd\u5411\u8fb9</li> <li>\u66f4\u65b0Gr\uff0c\u53bb\u96640\u6d41\u91cf\u7684\u8fb9</li> </ol> <p>\u6ce8\u610f\u662f\u5728\u6b8b\u4f59\u7f51\u7edc\u4e2d\u6dfb\u52a0\u53cd\u65b9\u5411\u7684\u8fb9</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#analysis","title":"Analysis","text":"<ul> <li> <p>An augmenting path can be found by an unweighted shortest path algorithm.</p> </li> <li> <p>\\(T=O(f\u00d7|E|)\\) where \\(f\\) is the maximum flow.</p> </li> <li> <p>Always choose the augmenting path that allows the largest increase in flow</p> </li> <li> <p>\u5bf9Dijkstra\u7b97\u6cd5\u8fdb\u884c\u5355\u7ebf(single-line)\u4fee\u6539\u6765\u5bfb\u627e\u589e\u957f\u901a\u8def</p> </li> <li>\\(cap_{max}\\)\u4e3a\u6700\u5927\u8fb9\u5bb9\u91cf</li> <li>\\(O(|E|\\log cap_{max})\\)\u6761\u589e\u957f\u901a\u8def\u5c06\u8db3\u4ee5\u627e\u5230\u6700\u5927\u6d41\uff0c\u5bf9\u4e8e\u589e\u957f\u901a\u8def\u7684\u6bcf\u6b21\u8ba1\u7b97\u9700\u8981\\(O(|E|\\log|V|)\\)\u65f6\u95f4</li> </ul> <p>$$   T=T_{augmentation}\\times T_{find_a_path}\\   =O(|E|\\log cap_{max})\\times O(|E|\\log|V|)\\   =O(|E|^2\\log|V|\\log cap_{max})\\   dijkstra\u7b97\u6cd5\uff0c\u90bb\u63a5\u8868+\u5806\u7684\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3aO(|E|log|V|)   $$</p> <ul> <li> <p>Always choose the augmenting path that has the least number of edges</p> </li> <li> <p>\u4f7f\u7528\u65e0\u6743\u6700\u77ed\u8def\u7b97\u6cd5\u6765\u5bfb\u627e\u589e\u957f\u8def\u5f84</p> </li> </ul> <p>$$   T=T_{augmentation}\\times T_{find_a_path}\\   =O(|E||V|)\\times O(|E|)\\   =O(|E|^2|V|)   $$</p> <p>Note : </p> <ul> <li>If every \\(v \\notin \\{ s, t \\}\\) has either a single incoming edge of capacity 1 or a single outgoing edge of capacity 1, then time bound is reduced to \\(O( |E| |V|^{1/2} )\\).</li> <li>The min-cost flow problem is to find, among all maximum flows, the one flow of minimum cost provided that each edge has a cost per unit of flow.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#10","title":"10.\u6700\u5c0f\u751f\u6210\u6811","text":"<p>kruskal \u4f7f\u7528\u5e76\u67e5\u96c6\uff1f</p> <p>prim\u548ckruskal \\(|E|log|V|\uff0c Elog|E|\uff1f\\)\uff0c</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_10","title":"\u6700\u5c0f\u751f\u6210\u6811","text":"<p>n \u8282\u70b9\u8fde\u901a\u4e14\u65e0\u56de\u8def\uff1an-1 \u6761\u8fb9</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#prim","title":"Prim \u7b97\u6cd5\uff08\u70b9\u6269\u5c55\uff09\uff1a\u9002\u5408\u7a20\u5bc6\u56fe","text":"<p>\u7531\u67d0\u70b9\u5f00\u59cb\u6269\u5c55\u6811\uff0c\u9009\u53d6\u6700\u5c0f\u8def\u5f84\uff0c\u7c7b Dijkstra</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#kruskal","title":"Kruskal \u7b97\u6cd5\uff08\u8fb9\u52a0\u5165\uff09\uff1a\u9002\u5408","text":"<p>\u5c06\u8fb9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u5c0f\u8fb9\uff0c\u4e0d\u6784\u6210\u56de\u8def\u5219\u653e\u5165\u3002\u4f7f\u7528\u4e8b\u5148\u6392\u5e8f\u6216\u5806\u3002\u4f7f\u7528\u5e76\u67e5\u96c6\u4f18\u5316\u73af\u8def\u5224\u522b</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#13","title":"1.\u627e\u4e00\u4e0b\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u6bd4\u59823\u4e2a\u70b9\u7684\u60c5\u51b5\uff1f","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#2_4","title":"2.\u5224\u5b9a\u6700\u5c0f\u751f\u6210\u6811\u662f\u5426\u552f\u4e00\uff1a","text":"<p>\u6743\u503c\u76f8\u540c\u7684\u5fc5\u987b\u90fd\u6dfb\u52a0\uff08\u4e0d\u80fd\u6784\u6210\u73af\uff09</p> <p>1.\u5bf9\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u626b\u63cf\u5176\u4ed6\u8fb9\uff0c\u5982\u679c\u5b58\u5728\u76f8\u540c\u6743\u503c\u7684\u8fb9\uff0c\u5219\u5bf9\u6b64\u8fb9\u505a\u6807\u8bb0\u3002</p> <p>2.\u7136\u540e\u4f7f\u7528Kruskal\uff08\u6216\u8005prim\uff09\u7b97\u6cd5\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u3002</p> <p>3.\u5982\u679c\u8fd9\u65f6\u5019\u7684\u6700\u5c0f\u751f\u6210\u6811\u6ca1\u6709\u5305\u542b\u672a\u88ab\u6807\u8bb0\u7684\u8fb9\uff0c\u5373\u53ef\u5224\u5b9a\u6700\u5c0f\u751f\u6210\u6811\u552f\u4e00\u3002\u5982\u679c\u5305\u542b\u4e86\u6807\u8bb0\u7684\u8fb9\uff0c\u90a3\u4e48\u4f9d\u6b21\u53bb\u6389\u8fd9\u4e9b\u8fb9\uff0c\u518d\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u6c42\u5f97\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u539f\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u76f8\u540c\uff0c\u5373\u53ef\u5224\u65ad\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u552f\u4e00\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#11dfs","title":"11.DFS\u53ca\u5176\u5e94\u7528","text":"<p>\u9012\u5f52\uff0c\u8bbf\u95ee\u6240\u6709\u672a\u6807\u8bb0\u5df2\u8bbf\u95ee\u7684\u76f8\u90bb\u9876\u70b9</p> <p>\u904d\u5386\u975e\u8fde\u901a\u56fe\uff1a\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u82e5\u672a\u6807\u8bb0\u5df2\u8bbf\u95ee\uff0c\u8c03\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002\u53ef\u7531\u6b64\u83b7\u5f97 Component \u6570</p> <p>\u4e3a\u83b7\u5f97\u552f\u4e00\u987a\u5e8f\uff0c\u8003\u8bd5\u5c06\u4f7f\u7528\u56fe\u7684\u5177\u4f53\u8868\u793a\u8fdb\u884c\u8003\u5bdf</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#dag","title":"DAG(\u6709\u5411\u65e0\u73af):","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_11","title":"\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#-","title":"\u53cc\u8fde\u901a-&gt;\u6865\u70b9\uff08\u9488\u5bf9\u56fe\u7684\u79cd\u7c7b\u4e0d\u540c\uff1f\uff09","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_12","title":"\u53cc\u8fde\u901a\u95ee\u9898","text":"<p>articulation point \u5224\u65ad\uff1a</p> <p></p> <ol> <li> <p>\u6839\u8282\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u4e00\u5b9a\u662f\u5173\u8282\u70b9</p> </li> <li> <p>\u4e0d\u662f\u6839\u8282\u70b9\u7684\u70b9\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u4e14\u4e0d\u80fd\u591f\u5f80\u4e0b\u901a\u8fc7\u80cc\u5411\u8fb9\uff08back edge)\u56de\u5230\u7236\u4eb2</p> </li> </ol> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#hamilton","title":"\u6b27\u62c9\u56de\u8def\u95ee\u9898  \u7279\u6b8a\u8def\u5f84\uff1a\u6b27\u62c9\u8def\u5f84\u548cHamilton\u8def\u5f84","text":"<p>\u4e00\u7b14\u753b\u95ee\u9898\uff08\u8fb9\u4e0d\u91cd\u590d\uff09</p> <p>\u6b27\u62c9\u904d\u5386\uff1a\u4e0d\u91cd\u590d\u904d\u5386\u6240\u6709\u8fb9\uff0c\u8981\u6c42\u56fe\u6709\u4e24\u4e2a\u8282\u70b9\u5ea6\u5947\u6570\uff0c\u5219\u4ece\u4e00\u5947\u6570\u56de\u5230\u53e6\u4e00\u5947\u6570</p> <p>\u6b27\u62c9\u56de\u8def\uff1a\u4e0d\u91cd\u590d\u904d\u5386\u6240\u6709\u8fb9\u5e76\u56de\u5230\u8d77\u70b9\uff0c\u8981\u6c42\u6240\u6709\u8282\u70b9\u5ea6\u4e3a\u5076\u6570\u3002</p> <p>\u5176\u4ed6\uff1a\u54c8\u5bc6\u987f\u56de\u8def\uff08\u70b9\u4e0d\u91cd\u590d\uff09</p> <p>\u4f18\u5148\u8003\u8651\u662f\u5426\u662f\u8054\u901a\u7684\u3002\u6bd4\u5982\u6210\u73af\u7684\u4e00\u5b9a\u662f\u5f3a\u8054\u901a\uff0c\u4f46\u662f\u4e0d\u8054\u901a\u7684\u5c31\u9519\u3002\u5982\u679c\u8fb9\u7684\u5ea6\u6570\u4e3a\u5076\uff0c\u4f46\u662f\u6ca1\u8bf4\u662f\u8054\u901a\u56fe\uff0c\u5219\u4e0d\u662f\u6b27\u62c9\u56fe</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#12","title":"12.\u6392\u5e8f","text":"<p>shell sort's increment \u7684\u51b3\u5b9a\u56e0\u7d20</p> <p>shell\u2019s increments </p> <p>shell \u589e\u91cf\uff1afor ( Increment = N / 2; Increment &gt; 0; Increment /= 2 ) </p> <p></p> <p>\u6700\u5dee\\(O(N^2)\\),\u5e73\u5747\\(O(nlogn)\\)</p> <p>hibbard \u589e\u91cf \\(h_k=2^k-1\\)\u6700\u5dee\\(O(N^{3/2})\\),\u5e73\u5747\\(O(N^{5/4})\\)</p> <p>sedgewick \u589e\u91cf \u6700\u5dee \\(O(N^{4/3})\\),\u5e73\u5747\\(O(N^{7/6})\\)</p> <p>\u5806\u6392\u5e8f\u4e0d\u7528\u5916\u90e8\u7ef4\u62a4\uff0c\u53ef\u4ee5\u539f\u5730\u6392\u5e8f\uff0cmergesort\u662f\u552f\u4e00\u5916\u90e8\u6392\u5e8f</p> <p>1.\u6392\u5e8f\u590d\u6742\u5ea6\uff1a</p> <p>\u5f52\u5e76\uff1a\u5f52\u5e76\uff1aO(N)\uff0c\u603b\u590d\u6742\u5ea6\uff1aO(NlogN)</p> <p>\u5feb\u6392\uff1a\u5e73\u5747\u548c\u4e00\u822c\u60c5\u51b5\uff1aO(BNlogN)\uff0c\u6700\u574fO(N^2)</p> <p>\u5806\u6392\uff1aO(NlogN)</p> <p></p> <p>\u63d2\u5165\uff1aO(N^2)</p> <p>\u6876\u6392\uff1aO(N+M)\uff0cM\u4e3a\u6876\u6570</p> <p>\u6240\u6709\u6392\u5e8f\u6700\u574f\u60c5\u51b5\u5fc5\u987b\u4e3aO(N)</p> <p>2.Heap\u548cquick\u4e0d\u7528\u989d\u5916\u7a7a\u95f4\uff0cMerge\u9700\u8981O(N)\u7a7a\u95f4,\u5916\u90e8\u6392\u5e8f</p> <p></p> <p>\u901a\u5e38\u9700\u8981\\(O(N)\\)\u590d\u6742\u5ea6\u7684\u989d\u5916\u7a7a\u95f4</p> <p>During the sorting, processing every element which is not yet at its final position is called a \"run\". Which of the following cannot be the result after the second run of quicksort? A.5, 2, 16, 12, 28, 60, 32, 72</p> <p>B.2, 16, 5, 28, 12, 60, 32, 72</p> <p>C.2, 12, 16, 5, 28, 32, 72, 60</p> <p>D.5, 2, 12, 28, 16, 32, 72, 60</p> <p>\u6bcf\u4e00\u4e2arun\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2apivot\u7684\u4f4d\u7f6e\uff0c\u4e24\u6b21\u9012\u5f52\u53ef\u4ee5\u786e\u5b9a1+2=3\u4e2a\u3002</p> <p>\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u5982\u679c\u5728\u672b\u5c3e\u7684pivot\u4f7f\u5f97\u9012\u5f52\u53ea\u5728\u4e4b\u524d\u8fdb\u884c\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_13","title":"\u64cd\u4f5c\u65b9\u6cd5\uff0c\u5bf9\u5e94\u4e13\u6709\u540d\u8bcd","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#insertion-sort","title":"insertion sort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#shell-sort","title":"shell sort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#merge-sort","title":"merge sort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#quick-sort","title":"quick sort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#bucket-sort","title":"bucket sort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#13_1","title":"13.\u54c8\u5e0c\u8868","text":"<p>loading factor\uff1f</p> <p>loading density</p> <p>probing methods</p> <p>collision / overflow</p> <p>\u5982\u679c\u51b2\u7a81\u592a\u591a\u8fd8\u4e0d\u5982\u6811\uff0c\u6811\u81f3\u5c11\u6709logN</p> <p>double hashing \u548c rehashing\u662f\u4e0d\u4e00\u6837</p> <p>\u6a21\u62df\u54c8\u5e0c</p> <p>\u51b2\u7a81\u5904\u7406</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_14","title":"\u6563\u5217\u51fd\u6570","text":"<p>\u5b57\u7b26\u4e32\uff1a\u8f6c\u6362\u4e3a 32 \u8fdb\u5236\u6574\u6570\uff0c\u4e0e\u6563\u5217\u8868\u5927\u5c0f\u53d6\u6a21\u3002</p> <p></p> <p>\u5982\u679c\u662fempty\uff0c\u5219key\u6ca1\u6709\u5b9a\u4e49\uff0c\u5148\u5224\u65ad\u4f1a\u51fa\u9519\u3002</p> <p>\u5047\u8bbe\u63a2\u6d4b\u6b65\u6570i\u4e0d\u8d85\u8fc7TS/2+1\u6b65\uff0c\u5373\u5047\u8bbe\u8868&lt;50%\u3002\u8fd9\u65f6CurrentPos+2i-1 &lt;= 2TS-1\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u51cf\u6cd5\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#_15","title":"\u51b2\u7a81\u89e3\u51b3","text":"<ol> <li> <p>\u5206\u79bb\u8fde\u63a5\u6cd5\uff08\u6876\uff09</p> </li> <li> <p>\u5f00\u653e\u5730\u5740\u6cd5</p> </li> </ol> <p>\u7ebf\u6027\u63a2\u6d4b\uff1a\u7ebf\u6027\u5411\u4e0b\u67e5\u627e\u7a7a\u4f4d\u3002</p> <p>\u4e8c\u6b21\u63a2\u6d4b\uff1a</p> <p>\u5fc5\u987btablesize=prime\uff0c\u4f7f\u7528\u4e8c\u6b21\u63a2\u6d4b\uff0c\u5219</p> <p>\u89e3\u51b3\u67e5\u627e\u4e0d\u5b58\u5728\u6620\u5c04\u7684\u6548\u7387\uff0c\u56e0\u4e0d\u6210\u529f\u641c\u7d22\u9700\u8981\u67e5\u627e\u81f3\u7a7a\u4f4d\uff0c\u800c\u5e73\u65b9\u53ef\u8f83\u5feb\u5730\u907f\u5f00\u805a\u96c6\u3002</p> <p>\u5728\u5220\u9664\u65f6\u9700\u8981\u4f7f\u7528\u6807\u8bb0\uff0c\u4f7f\u5f97\u67e5\u627e\u53ef\u4ee5\u5728\u6807\u8bb0\u4f4d\u7f6e\u7ee7\u7eed\uff0c\u800c\u63d2\u5165\u4e5f\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#14","title":"14.\u5386\u5e74\u9898\u9519\u9898","text":"<p>2021-2022</p> <p>quicksort shellsort \u7684\u6b65\u957f</p> <p>double hashing\u548cquadratic probing\u7684\u5173\u7cfb</p> <p>kruskal</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/FDS%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/#15","title":"15.\u5751","text":"<p>\u4e8c\u53c9\u67e5\u627e\u6811\u5b50\u6811\u6240\u6709\u5143\u7d20\u5bf9\u7236\u8282\u70b9\u5927\u5c0f\u5173\u7cfb\u5747\u76f8\u540c\uff0c\u56e0\u6b64\u5224\u65ad\u662f\u5426\u4e3a\u4e8c\u53c9\u67e5\u627e\u5e8f\u5217\u53ef\u6309\u987a\u5e8f\u66f4\u65b0\u5141\u8bb8\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002</p> <p>\u5806\u6392\u5e8f\u4f7f\u7528\u6700\u5927\u5806\u3002</p> <p>\u5feb\u901f\u6392\u5e8f\u7a7a\u95f4\u590d\u6742\u5ea6\u975e O(1)\uff0c\u800c\u662f\u5806\u6808\u5f15\u5165\u7684 O(NlogN)~O(N)\u3002</p> <p>\u7531\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u6784\u5efa\u4e8c\u53c9\u6811\uff1a\u5bfb\u627e\u6839\uff08\u524d\u5e8f\u524d\uff0c\u540e\u5e8f\u540e\uff09\uff0c\u786e\u5b9a\u4e24\u5b50\u6811\uff0c\u9012\u5f52\u3002</p> <p>\u7531\u5143\u7d20\u6784\u5efa\u4e8c\u53c9\u67e5\u627e\u6811\uff1a\u6309\u56fe\u5f62\u786e\u5b9a\u6811\u6839\u548c\u4e24\u5b50\u6811\uff0c\u9012\u5f52\u3002</p> <p>\u5355\u5411\u5217\u8868\u5bfc\u81f4\u5c3e\u90e8\u4e0d\u80fd\u76f4\u63a5\u5220\u9664</p> <p>\u5165/\u51fa\u5806\u6808/\u961f\u5217\u987b\u5224\u65ad\u7a7a/\u6ee1</p> <p>\u961f\u5217 Front \u53ef\u6307\u5728\u961f\u5217\u5934\u524d\u4e00\u4ee5\u4f7f\u5f53 Front Rear \u91cd\u5408\u65f6\u961f\u5217\u4e3a\u6ee1</p> <p>\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u6570\u5b57\u76f4\u63a5\u8f93\u51fa\uff0c\u7b26\u53f7:\u5f53\u5df2\u77e5\u7b26\u53f7\u4f18\u5148\u7ea7\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u7b26\u53f7\u5df2\u77e5\u51fa\u6808\uff0c\u4e4b\u540e\u5f53\u524d\u7b26\u53f7\u5165\u6808\u3002\u62ec\u53f7\u5904\u7406\uff1a\u5de6\u62ec\u53f7\u5728\u6808\u5916\u4f18\u5148\u7ea7\u6700\u9ad8\uff08\u76f4\u63a5\u5165\u6808\uff09\uff0c\u5728\u6808\u5185\u4f18\u5148\u7ea7\u6700\u4f4e\uff08\u4e0d\u51fa\u6808\uff09\uff0c\u53ea\u5728\u9047\u5230\u53f3\u62ec\u53f7\u65f6\u5f39\u51fa\u3002</p> <p>\u4e8c\u53c9\u6811:n0=n2+1\uff0c\u53f6\u5b50\u6570\u4e3a\u53cc\u513f\u5b50\u7236\u4eb2\u6570\u52a0\u4e00\u3002</p> <p>\u4e8c\u53c9\u67e5\u627e\u6811\u63d2\u5165\u3001\u5220\u9664\u5b9e\u73b0\u4f7f\u7528\u8fd4\u56de\u503c\u5f0f\u9012\u5f52\uff0c\u51fd\u6570\u603b\u662f\u8fd4\u56de\u53c2\u6570\u8282\u70b9\u7684\u5143\u7d20\uff08\u53ef\u80fd\u6539\u53d8\uff09\uff0c\u8c03\u7528\u8005\u5c06\u8be5\u8282\u70b9\u7528\u8fd4\u56de\u503c\u8986\u76d6\u3002</p> <p>d\u5806\uff1a\u7236\u8282\u70b9\u4f4d\u4e8e [(i + d \u2212 2) / d]\uff0c\u513f\u5b50\u8282\u70b9\u5728 (i \u2212 1)d + 2, ..., id + 1.</p> <p>\u68ee\u6797\uff1a\u6839\u8282\u70b9\u53f3\u5144\u5f1f\u4e3a\u5176\u4ed6\u6839\u8282\u70b9</p> <p>\u5f00\u653e\u5730\u5740\u6cd5\u4e8c\u6b21\u63a2\u6d4b\u8981\u6c42\u8868\u5927\u5c0f\u4e3a\u7d20\u6570\u4e14\u6700\u591a\u6709 [\u8868\u7684\u5927\u5c0f/2] \uff08\u5411\u4e0b\u53d6\u6574\uff09\u4e2a\u4f4d\u7f6e\u88ab\u5360\u7528\u3002</p> <p>DAG\uff1aDirected Acyclic Graph</p> <p>\u65e0\u73af\u8fde\u901a\u56fe\u4e3a\u6811</p> <p>\u7a33\u5b9a\u6027 \u7a33\u5b9a\u7684\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f O(n2) \u63d2\u5165\u6392\u5e8f O(n2) \u6876\u6392\u5e8f O(n);\u9700\u8981O(k)\u989d\u5916\u7a7a\u95f4 \u5f52\u5e76\u6392\u5e8f O(n log n);\u9700\u8981O(n)\u989d\u5916\u7a7a\u95f4 \u539f\u5730\u5f52\u5e76\u6392\u5e8f O(n2) \u57fa\u6570\u6392\u5e8f O(n\u00b7k);\u9700\u8981O(n)\u989d\u5916\u7a7a\u95f4</p> <p>\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f \u9009\u62e9\u6392\u5e8f O(n2) \u5e0c\u5c14\u6392\u5e8f\uff08shell sort\uff09\u2014O(n log2 n)\u5982\u679c\u4f7f\u7528\u6700\u4f73\u7684\u73b0\u5728\u7248\u672c \u5806\u6392\u5e8f\uff08heap sort\uff09\u2014O(n log n) \u5feb\u901f\u6392\u5e8f\uff08quick sort\uff09\u2014O(n log n)\u671f\u671b\u65f6\u95f4, O(n2)\u6700\u574f\u60c5\u51b5;\u5bf9\u4e8e\u5927\u7684\u3001\u4e71\u6570\u5217\u8868\u4e00\u822c\u76f8\u4fe1\u662f\u6700\u5feb\u7684\u5df2\u77e5\u6392\u5e8f</p> <p>\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u7531\u9ad8\u5230\u4f4e\u4e3a\uff1a \u5192\u6ce1\u6392\u5e8fO(n2) \u9009\u62e9\u6392\u5e8fO(n2) \u63d2\u5165\u6392\u5e8fO(n2) \u5e0c\u5c14\u6392\u5e8fO(n1.25) \u5806\u6392\u5e8fO(n log n) \u5f52\u5e76\u6392\u5e8fO(n log n) \u5feb\u901f\u6392\u5e8fO(n log n) \u57fa\u6570\u6392\u5e8fO(n)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/labuladong/","title":"labuladong","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/labuladong/#leetcode","title":"Leetcode\u5237\u9898\u7b14\u8bb0","text":"<p>int **graph\uff0cint graphsize\u8868\u793agraph\u4e8c\u7ef4\u6570\u7ec4\u6709\u591a\u5c11\u884c</p> <p>int* graphcolsize\u8868\u793a\u6bcf\u884c\u6709\u591a\u5c11\u5217</p> C<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isValidBST(struct TreeNode* root) {\n    if(root==NULL)return true;\n    if(root-&gt;left&amp;&amp;root-&gt;left-&gt;val&gt;=root-&gt;val)return false;\n    if(root-&gt;right&amp;&amp;root-&gt;right-&gt;val&lt;=root-&gt;val)return false;\n    if(isValidBST(root-&gt;left)&amp;&amp;isValidBST(root-&gt;right))return true;\n    else{\n        return false;\n    }\n}\n</code></pre> <p>\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\u7528\u4e2d\u5e8f\u904d\u5386</p> C<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\nbool isBSTUtil(struct TreeNode* root, long min, long max) {\n    if (root == NULL) {\n        return true;\n    }\n\n    if (root-&gt;val &lt;= min || root-&gt;val &gt;= max) {\n        return false;\n    }\n\n    return isBSTUtil(root-&gt;left, min, root-&gt;val) &amp;&amp; isBSTUtil(root-&gt;right, root-&gt;val, max);\n}\n\nbool isValidBST(struct TreeNode* root) {\n    return isBSTUtil(root, LONG_MIN, LONG_MAX);\n}\n</code></pre> C<pre><code>int count=0;\nint a[20000];\nbool isValidBST(struct TreeNode* root) {\n    in_order(root);\n    if(count==1)return true;\n    for(int i=0;i&lt;count-1;i++){\n        if(a[i]&gt;a[i+1])return false;\n    }\n    return true;\n}\n\nvoid in_order(struct TreeNode* root){\n    if(root==NULL)return;\n    in_order(root-&gt;left);\n    a[count++]=root-&gt;val;\n    in_order(root-&gt;right);\n}\n</code></pre> <p>230</p> C<pre><code>int count;\nint kthSmallestUtil(struct TreeNode* root, int k) {\n    if (root == NULL) {\n        return -1; \n    }\n    int leftResult = kthSmallestUtil(root-&gt;left, k);\n    if (leftResult != -1) {\n        return leftResult;\n    }\n    count++;\n    if (count == k) {\n        return root-&gt;val; // Found the kth smallest element\n    }\n\n    return kthSmallestUtil(root-&gt;right, k);\n}\n\nint kthSmallest(struct TreeNode* root, int k) {\n    count = 0;\n    return kthSmallestUtil(root, k);\n}\n</code></pre> <p>797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6709 <code>n</code> \u4e2a\u8282\u70b9\u7684 \u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\uff0c\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u4ece\u8282\u70b9 <code>0</code> \u5230\u8282\u70b9 <code>n-1</code> \u7684\u8def\u5f84\u5e76\u8f93\u51fa\uff08\u4e0d\u8981\u6c42\u6309\u7279\u5b9a\u987a\u5e8f\uff09</p> <p><code>graph[i]</code> \u662f\u4e00\u4e2a\u4ece\u8282\u70b9 <code>i</code> \u53ef\u4ee5\u8bbf\u95ee\u7684\u6240\u6709\u8282\u70b9\u7684\u5217\u8868\uff08\u5373\u4ece\u8282\u70b9 <code>i</code> \u5230\u8282\u70b9 <code>graph[i][j]</code>\u5b58\u5728\u4e00\u6761\u6709\u5411\u8fb9\uff09\u3002</p> <p>\u5206\u6cbb\u601d\u60f3\uff1a</p> <p>\u56de\u6eaf\u6ce8\u91cd\u8fb9\u7684\u9009\u62e9\uff0c\u64a4\u9500\u5728for\u5faa\u73af\u5185</p> <p>\u548cDFS\u4e00\u6837\uff0c\u5148\u770b\u662f\u5426\u8d70\u901a\u4e86\u4e00\u6761\u8def\u5f84/\u8d70\u5230\u5934\u4e86\u4e00\u6761\u8def\u5f84</p> <p>\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u5c06\u5f53\u524d\u4f4d\u7f6e\u76f8\u90bb\u7684\u4e0b\u4e00\u5c42\u6240\u6709\u7684\u53ef\u80fd\u6027\u90fd\u904d\u5386\u4e00\u904d</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/labuladong/#_1","title":"\u4e8c\u53c9\u6811\u7684\u91cd\u8981\u6027","text":"<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u4e24\u4e2a\u7ecf\u5178\u6392\u5e8f\u7b97\u6cd5 \u5feb\u901f\u6392\u5e8f \u548c \u5f52\u5e76\u6392\u5e8f\uff0c\u5bf9\u4e8e\u5b83\u4fe9\uff0c\u4f60\u6709\u4ec0\u4e48\u7406\u89e3\uff1f</p> <p>\u5982\u679c\u4f60\u544a\u8bc9\u6211\uff0c\u5feb\u901f\u6392\u5e8f\u5c31\u662f\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\uff0c\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u4e2a\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u90a3\u4e48\u6211\u5c31\u77e5\u9053\u4f60\u662f\u4e2a\u7b97\u6cd5\u9ad8\u624b\u4e86\u3002</p> <p>\u4e3a\u4ec0\u4e48\u5feb\u901f\u6392\u5e8f\u548c\u5f52\u5e76\u6392\u5e8f\u80fd\u548c\u4e8c\u53c9\u6811\u626f\u4e0a\u5173\u7cfb\uff1f\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u4ed6\u4eec\u7684\u7b97\u6cd5\u601d\u60f3\u548c\u4ee3\u7801\u6846\u67b6\uff1a</p> <p>\u5feb\u901f\u6392\u5e8f\u7684\u903b\u8f91\u662f\uff0c\u82e5\u8981\u5bf9 <code>nums[lo..hi]</code> \u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u5148\u627e\u4e00\u4e2a\u5206\u754c\u70b9 <code>p</code>\uff0c\u901a\u8fc7\u4ea4\u6362\u5143\u7d20\u4f7f\u5f97 <code>nums[lo..p-1]</code> \u90fd\u5c0f\u4e8e\u7b49\u4e8e <code>nums[p]</code>\uff0c\u4e14 <code>nums[p+1..hi]</code> \u90fd\u5927\u4e8e <code>nums[p]</code>\uff0c\u7136\u540e\u9012\u5f52\u5730\u53bb <code>nums[lo..p-1]</code> \u548c <code>nums[p+1..hi]</code> \u4e2d\u5bfb\u627e\u65b0\u7684\u5206\u754c\u70b9\uff0c\u6700\u540e\u6574\u4e2a\u6570\u7ec4\u5c31\u88ab\u6392\u5e8f\u4e86\u3002</p> <p>\u5feb\u901f\u6392\u5e8f\u7684\u4ee3\u7801\u6846\u67b6\u5982\u4e0b\uff1a</p> Java<pre><code>void sort(int[] nums, int lo, int hi) {\n    /****** \u524d\u5e8f\u904d\u5386\u4f4d\u7f6e ******/\n    // \u901a\u8fc7\u4ea4\u6362\u5143\u7d20\u6784\u5efa\u5206\u754c\u70b9 p\n    int p = partition(nums, lo, hi);\n    /************************/\n\n    sort(nums, lo, p - 1);\n    sort(nums, p + 1, hi);\n}\n</code></pre> <p>\u5148\u6784\u9020\u5206\u754c\u70b9\uff0c\u7136\u540e\u53bb\u5de6\u53f3\u5b50\u6570\u7ec4\u6784\u9020\u5206\u754c\u70b9\uff0c\u4f60\u770b\u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u5417\uff1f</p> <p>\u518d\u8bf4\u8bf4\u5f52\u5e76\u6392\u5e8f\u7684\u903b\u8f91\uff0c\u82e5\u8981\u5bf9 <code>nums[lo..hi]</code> \u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u5148\u5bf9 <code>nums[lo..mid]</code> \u6392\u5e8f\uff0c\u518d\u5bf9 <code>nums[mid+1..hi]</code> \u6392\u5e8f\uff0c\u6700\u540e\u628a\u8fd9\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u6570\u7ec4\u5408\u5e76\uff0c\u6574\u4e2a\u6570\u7ec4\u5c31\u6392\u597d\u5e8f\u4e86\u3002</p> <p>\u5f52\u5e76\u6392\u5e8f\u7684\u4ee3\u7801\u6846\u67b6\u5982\u4e0b\uff1a</p> Java<pre><code>// \u5b9a\u4e49\uff1a\u6392\u5e8f nums[lo..hi]\nvoid sort(int[] nums, int lo, int hi) {\n    int mid = (lo + hi) / 2;\n    // \u6392\u5e8f nums[lo..mid]\n    sort(nums, lo, mid);\n    // \u6392\u5e8f nums[mid+1..hi]\n    sort(nums, mid + 1, hi);\n\n    /****** \u540e\u5e8f\u4f4d\u7f6e ******/\n    // \u5408\u5e76 nums[lo..mid] \u548c nums[mid+1..hi]\n    merge(nums, lo, mid, hi);\n    /*********************/\n}\n</code></pre> <p>\u5148\u5bf9\u5de6\u53f3\u5b50\u6570\u7ec4\u6392\u5e8f\uff0c\u7136\u540e\u5408\u5e76\uff08\u7c7b\u4f3c\u5408\u5e76\u6709\u5e8f\u94fe\u8868\u7684\u903b\u8f91\uff09\uff0c\u4f60\u770b\u8fd9\u662f\u4e0d\u662f\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u6846\u67b6\uff1f\u53e6\u5916\uff0c\u8fd9\u4e0d\u5c31\u662f\u4f20\u8bf4\u4e2d\u7684\u5206\u6cbb\u7b97\u6cd5\u561b\uff0c\u4e0d\u8fc7\u5982\u6b64\u5440\u3002</p> <p>\u5982\u679c\u4f60\u4e00\u773c\u5c31\u8bc6\u7834\u8fd9\u4e9b\u6392\u5e8f\u7b97\u6cd5\u7684\u5e95\u7ec6\uff0c\u8fd8\u9700\u8981\u80cc\u8fd9\u4e9b\u7ecf\u5178\u7b97\u6cd5\u5417\uff1f\u4e0d\u9700\u8981\u3002\u4f60\u53ef\u4ee5\u624b\u5230\u64d2\u6765\uff0c\u4ece\u4e8c\u53c9\u6811\u904d\u5386\u6846\u67b6\u5c31\u80fd\u6269\u5c55\u51fa\u7b97\u6cd5\u4e86\u3002</p> <p>\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u65e8\u5728\u8bf4\u660e\uff0c\u4e8c\u53c9\u6811\u7684\u7b97\u6cd5\u601d\u60f3\u7684\u8fd0\u7528\u5e7f\u6cdb\uff0c\u751a\u81f3\u53ef\u4ee5\u8bf4\uff0c\u53ea\u8981\u6d89\u53ca\u9012\u5f52\uff0c\u90fd\u53ef\u4ee5\u62bd\u8c61\u6210\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u3002</p> Java<pre><code>class Solution {\n    List&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;&gt;();\n/* \u4e3b\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u7ec4\u4e0d\u91cd\u590d\u7684\u6570\u5b57\uff0c\u8fd4\u56de\u5b83\u4eec\u7684\u5168\u6392\u5217 */\nList&lt;List&lt;Integer&gt;&gt; permute(int[] nums) {\n    // \u8bb0\u5f55\u300c\u8def\u5f84\u300d\n    LinkedList&lt;Integer&gt; track = new LinkedList&lt;&gt;();\n    // \u300c\u8def\u5f84\u300d\u4e2d\u7684\u5143\u7d20\u4f1a\u88ab\u6807\u8bb0\u4e3a true\uff0c\u907f\u514d\u91cd\u590d\u4f7f\u7528\n    boolean[] used = new boolean[nums.length];\n\n    backtrack(nums, track, used);\n    return res;\n}\n\n// \u8def\u5f84\uff1a\u8bb0\u5f55\u5728 track \u4e2d\n// \u9009\u62e9\u5217\u8868\uff1anums \u4e2d\u4e0d\u5b58\u5728\u4e8e track \u7684\u90a3\u4e9b\u5143\u7d20\uff08used[i] \u4e3a false\uff09\n// \u7ed3\u675f\u6761\u4ef6\uff1anums \u4e2d\u7684\u5143\u7d20\u5168\u90fd\u5728 track \u4e2d\u51fa\u73b0\nvoid backtrack(int[] nums, LinkedList&lt;Integer&gt; track, boolean[] used) {\n    // \u89e6\u53d1\u7ed3\u675f\u6761\u4ef6\n    if (track.size() == nums.length) {\n        res.add(new LinkedList(track));\n        return;\n    }\n\n    for (int i = 0; i &lt; nums.length; i++) {\n        // \u6392\u9664\u4e0d\u5408\u6cd5\u7684\u9009\u62e9\n        if (used[i]) {\n            // nums[i] \u5df2\u7ecf\u5728 track \u4e2d\uff0c\u8df3\u8fc7\n            continue;\n        }\n        // \u505a\u9009\u62e9\n        track.add(nums[i]);\n        used[i] = true;\n        // \u8fdb\u5165\u4e0b\u4e00\u5c42\u51b3\u7b56\u6811\n        backtrack(nums, track, used);\n        // \u53d6\u6d88\u9009\u62e9\n        track.removeLast();\n        used[i] = false;\n    }\n}\n    }\n</code></pre> C<pre><code>/*a generalization of preorder traversal*/\nvoid DFS(Vertex V)\n{   \n    visited[ V ] = true;  /*mark this vertex to avoid cycles*/\n    for ( each W adjacent to V )\n        if ( !visited[ W ] ) DFS( W );\n} /*T = O(|E|+|V|) as long as adjacency lists are used*/\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/","title":"midterm","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#midterm","title":"midterm","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#1","title":"1.\u6613\u9519\u590d\u6742\u5ea6\u5206\u6790","text":"<ol> <li>\u5efa\u5806\uff08\u4e0d\u662f\u4e00\u4e2a\u4e2a\u63d2\u5165\uff09\u7684\u7b97\u6cd5\uff1a\\(O(N)\\)\uff1a\u5bf9i=n/2\u52301\u7684\u6240\u6709\u8282\u70b9\u90fdpecolate down</li> </ol> <p>\u539f\u56e0\uff1a\u5bf9\u4e8e\u9ad8\u5ea6\u4e3ah\uff0c\u6709\\(2^{h+1}-1\\)\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u8282\u70b9\u7684\u9ad8\u5ea6\u4e4b\u548c\u4e3a\\(2^{h+1}-h-1\\)</p> <ol> <li> <p>N union + M find \\(O(N+Mlog_2N)\\)  union by size,\u56e0\u4e3afind\u5927\u4e8e\u7b49\u4e8eunion</p> </li> <li> <p>\u5faa\u73af\u94fe\u8868  To delete <code>p</code> from a doubly linked list, we must do: </p> </li> </ol> <p><code>p-&gt;prior-&gt;next = p-&gt;next;p-&gt;next-&gt;prior=p-&gt;prior</code></p> <ol> <li>\u94fe\u8868 \u589e\u3001\u5220\\(O(1)\\),\u67e5\\(O(N)\\)  \uff08\u6709\u5e8f\uff09\u6570\u7ec4\u589e\u3001\u5220\\(O(N)\\),\u67e5\\(O(1)\\)</li> </ol> <p>\u6307\u9488\u6bd4\u8f83\u591a\uff0c\u6ce8\u610f\u8c03\u8bd5\u4e0d\u8981\u6253\u5370\u6216\u8005\u8bbf\u95eeNULL\u7684\u67d0\u4e2a\u5c5e\u6027\uff0c\u907f\u514d\u8d8a\u754c\u7b49\u6bb5\u9519\u8bef</p> <p>\u56e0\u6b64\u6240\u6709\u7684find percolate insert\u90fd\u5148\u5224\u65ad\u662f\u5426\u4e3aNULL\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u8282\u70b9\u7684left/right</p> <p>\u5806\u4e0b\u6807\u4ece1\u5f00\u59cb</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#2","title":"2.\u5806","text":"<p>\u4ece\u4e8c\u53c9\u6811\u4e2d\u5220\u9664\u8282\u70b9\uff1a</p> <p>\u5148\u627e\u5230\u5143\u7d20\uff0c\u627e\u5230NULL\u5219\u8bf4\u660e\u8981\u5220\u9664\u7684\u5143\u7d20\u4e0d\u5b58\u5728</p> <p>\u518d\u770b\u6709\u51e0\u4e2a\u5b50\u8282\u70b9\uff0c\u82e50\u62161\u4e2a\u5219\u76f4\u63a5\u66ff\u6362\uff08\u7528Null\uff09\u66ff\u6362\u4e5f\u53ef</p> <p>\u82e5\u6709\u4e24\u4e2a\u5219\u7528\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u8282\u70b9\u6216\u53f3\u5b50\u6811\u4e2d\u6700\u5c0f\u7684\u8282\u70b9\u66ff\u6362\uff0c\u66ff\u6362\u8fc7\u7a0b\u4e2d\u53ea\u5148\u6539\u53d8\u6839\u8282\u70b9\u7684\u6570\u503c\uff0c\u518d\u6267\u884cdelete\u90a3\u4e2a\u5e95\u4e0b\u7684\u91cd\u590d\u8282\u70b9</p> <p>\u63d2\u5165\u65b0\u5143\u7d20</p> <p>\u63d2\u5728\u6700\u540e\uff0c\u5411\u4e0apercolate,\u6ce8\u610fpercolate up\u81ea\u7136\u662f\u4e0d\u7528\u6bd4\u8f83\u5927\u5c0f\u7684\uff0cdown\u9700\u8981\u6bd4\u8f83\u5927\u5c0f</p> <p>Percolate</p> C<pre><code>void PercolateUp(int p, PriorityQueue H)\n{\n    int i;\n    for (i = p; i &gt; 1;){\n        if( H-&gt;Elements[i / 2] &gt; H-&gt;Elements[i]){\n             ElementType temp = H-&gt;Elements[i/2];\n             H-&gt;Elements[i/2] = H-&gt;Elements[i];\n             H-&gt;Elements[i] = temp;\n              i = i/2;\n        }\n        else break;\n    }\n}\nvoid PercolateDown(int p, PriorityQueue H)\n{\n    int i, Child;\n    for (i = p; i * 2 &lt;= H-&gt;Size; i = Child)\n    {\n        Child = i * 2;\n        if (Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child + 1] &lt; H-&gt;Elements[Child])\n            Child++;\n        if (H-&gt;Elements[i] &gt; H-&gt;Elements[Child]){\n             ElementType temp = H-&gt;Elements[Child];\n             H-&gt;Elements[Child] = H-&gt;Elements[i];\n             H-&gt;Elements[i] = temp;\n        }\n    }\n}\n</code></pre> <p>\u5f39\u51fa\u6700\u5c0f\u503c\uff08DeleteMin\uff09\u5e76\u7ef4\u62a4\u5806\u7684\u6027\u8d28\uff1a</p> <p>\u7528\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u66ff\u6362\u5806\u9876\u5143\u7d20\uff0c\u5e76\u8fdb\u884cminHeapify</p> <p>minHeapify\u8fc7\u7a0b\uff0c\u5c31\u662fpercolate down\u7684\u8fc7\u7a0b</p> <p>\u9012\u5f52\u4f20\u9012\u7684\u53c2\u6570\u4e3a\u5806\u6307\u9488\u548c\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u6807i\uff0c\u9996\u5148\u8ba1\u7b97\u51fa\u5de6\u53f3\u8282\u70b9\u4e0b\u6807\uff082i\uff0c2i+1\uff09\uff0c\u6bd4\u8f83\u5de6\u53f3\u8282\u70b9\u9009\u51fa\u8f83\u5c0f\u503c\u4e0e\u6839\u8282\u70b9\u4ea4\u6362\uff0c\u9012\u5f52\u6301\u7eed\u8fdb\u884c\u5230\u8d8a\u754c\u6216\u6700\u5c0f\u503c\u5c31\u662fi\u7ed3\u675f\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#3","title":"3.\u6808\u3001\u961f\u5217","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#_1","title":"midterm","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#4","title":"4.\u94fe\u8868","text":"C<pre><code>List Reverse( List L ){\n    //\u539f\u5730\u7ffb\u8f6c\u94fe\u8868\uff0c\u4e0d\u7533\u8bf7\u65b0\u7684\u7a7a\u95f4\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u4e00\u4e2a\u6307\u9488\n    Position p = L-&gt;Next; //p\u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u8282\u70b9\n    if(p==NULL)return L; //\u5982\u679c\u94fe\u8868\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\n    Position q = p-&gt;Next; //q\u7528\u4e8e\u4fdd\u5b58p\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u9632\u6b62\u65ad\u94fe\n    Position temp; //temp\u7528\u4e8e\u4fdd\u5b58q\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u9632\u6b62\u65ad\u94fe\n    p-&gt;Next = NULL; //\u5c06\u5934\u8282\u70b9\u7684next\u7f6e\u7a7a\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5faa\u73af\u94fe\u8868\n    while(q!=NULL){\n        temp = q-&gt;Next;\n        q-&gt;Next = p;\n        p = q;\n        q = temp;\n    }\n    L-&gt;Next = p;\n    return L;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#5","title":"5.\u5e76\u67e5\u96c6\uff1a","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#naive-implementaion","title":"naive implementaion:","text":"C<pre><code>union(r1,r2):\n    S[r2]=r1  //\u5c06r2\u6307\u5411r1\n//\u95ee\u9898\uff1ar1,r2\u5fc5\u987b\u90fd\u662froot,\u56e0\u6b64\u5728\u6267\u884c\u4e0a\u9762\u4e4b\u524d\u8981\u5148find\n=&gt; union(find(node1),find(node2))\n</code></pre> <p>\u6700\u574f\u60c5\u51b5\u590d\u6742\u5ea6\u8fbe\u5230\\(O(N^2)\\)!!!!</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#union-by-size","title":"union-by-size:\u603b\u662f\u4f7f\u8f83\u5c0f\u7684\u6811\u6210\u4e3a\u8f83\u5927\u7684\u6811\u7684\u5b50\u6811","text":"<ul> <li>[Lemma] Let T be a tree created by union-by-size with N nodes, then \\(height(T)\\leq\\lfloor\\log_2N\\rfloor+1\\).</li> </ul> <p>Proved by induction. Each element can have its set name changed at most \\(\\log_2N\\) times.</p> <ul> <li> <p>Time complexity of \\(N\\) Union and \\(M\\) Find operations is now \\(O(N+M\\log_2N)\\).</p> </li> <li> <p>\u539f\u56e0\uff1a\u88ab\u94fe\u63a5\u7684\u6811\u7684\u5927\u5c0f\u81f3\u5c11\u7ffb\u500d</p> </li> </ul> C<pre><code>/* Assumes Rootl and Root2 are roots*/\nvoid SetUnion(DisjSet S, SetType Root1, SetType Root2)\n{\n    if (S[Root1] &lt;= S[Root2])\n    {\n        S[Root1] += S[Root2];\n        S[Root2] = Root1;\n    }\n    else\n    {\n        S[Root2] += S[Root1];\n        S[Root1] = Root2;\n    }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#union-by-height","title":"union-by-height\uff1a\u53ea\u6709\u5f53\u4e24\u9897\u76f8\u540c\u6df1\u5ea6\u7684\u6811\u5408\u5e76\u65f6\u624d\u8981\u6c42\u589e\u52a0\u6811\u7684\u6df1\u5ea6?","text":"<ul> <li>Always change the shallow tree</li> <li>\u4fdd\u8bc1\u6240\u6709\u7684\u6811\u7684\u6df1\u5ea6\u6700\u591a\u662f\\(O(logN)\\)</li> </ul> <p>\u4f7f\u7528S[root]\u4fdd\u5b58\u6811\u7684\u6df1\u5ea6\u7684\u76f8\u53cd\u6570\uff0c\u90fd\u662f\u8d1f\u6570\uff0c\u7edd\u5bf9\u503c\u8d8a\u5927\u8d8a\u6df1</p> C<pre><code>/* Assumes Rootl and Root2 are roots*/\nvoid SetUnion(DisjSet S, SetType Root1, SetType Root2)\n{\n    if ( S[Root2] &lt; S[Root1])  /*Root2 is deeper set*/\n        S[Root1] = Root2;      /*Make Root2 new root*/\n    else\n    {\n        if (S[Root1] == S[Root2])  /*Same height*/\n            S[Root1]--;\n        S[Root2] = Root1;\n    }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#find-with-path-compression-akamen-algorithm","title":"find with path-compression akamen-algorithm","text":"<p>\u666e\u901a\u7684find</p> C<pre><code>SetType Find(ElementType X, DisjSet S)\n{\n    for ( ; S[X]&gt;0; X=S[X]);\n    return X;\n}\n</code></pre> <p>\u5e26\u8def\u5f84\u538b\u7f29\u7684find\uff1a</p> C<pre><code>SetType Find( ElementType X, DisjSet S )\n{\n    if ( S[ X ] &lt;= 0 )    \n        return X;\n    else \n        return S[ X ] = Find( S[ X ], S );\n}\n</code></pre> <p>\u8fd9\u4e24\u79cd\u662f\u4e00\u6837\u7684</p> C<pre><code>int find_parent(ptr_disjset S, int x)\n{\n    // find with path compression\n    if (x == S-&gt;parent[x])\n        return x;\n    else\n    {\n        S-&gt;parent[x] = find_parent(S, S-&gt;parent[x]);\n        return S-&gt;parent[x];\n    }\n}\n</code></pre> <p>\u9012\u5f52\u6539\u5199\u4e3a\u8fed\u4ee3\u5f62\u5f0f\u7684find\uff0c\u76f8\u5f53\u4e8e\u904d\u5386\u4e24\u904d</p> C<pre><code>SetType Find( ElementType X, DisjSet S )\n{   \n    ElementType root, trail, lead;\n    for ( root = X; S[ root ] &gt; 0; root = S[ root ] );  /* find the root */\n    for ( trail = X; trail != root; trail = lead )\n    {\n        lead = S[ trail ];   \n        S[ trail ] = root;   \n    }  /* collapsing */\n    return root;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#6","title":"6.\u6811\uff1a\u4e8c\u53c9\u6811\uff0c\u641c\u7d22\u6811","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#zigzagging-on-a-tree","title":"zigzagging on a tree","text":"C<pre><code>sample input:\n8\n12 11 20 17 1 15 8 5  \u5de6\u4e2d\u53f3 \u4e2d\u5e8f  \n12 20 17 11 15 8 5 1  \u5de6\u53f3\u4e2d \u540e\u5e8f  \u540e\u5e8f\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\n</code></pre> C<pre><code>sample output:\n1 11 5 8 17 12 20 15\n</code></pre> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#define MAX_NODE_NUM 60\n\ntypedef struct tree_node\n{\n    int data;\n    struct tree_node *left;\n    struct tree_node *right;\n} tree_node;\ntypedef tree_node *tree_ptr;\n\ntypedef struct\n{\n    int front;\n    int rear;\n    tree_ptr list[MAX_NODE_NUM];\n} tree_queue;\ntypedef tree_queue *queue_ptr;\n\nvoid enqueue(tree_ptr tree, queue_ptr queue)\n{\n    if (tree == NULL)\n        return; // \u7a7a\u6811\u4e0d\u5165\u961f\n    queue-&gt;list[queue-&gt;rear++] = tree;\n}\n\ntree_ptr dequeue(queue_ptr queue)\n{\n    if (queue-&gt;front == queue-&gt;rear)\n        return NULL; // \u961f\u5217\u4e3a\u7a7a\u65f6\u8fd4\u56deNULL\n    tree_ptr tree_node = queue-&gt;list[queue-&gt;front++];\n    return tree_node;\n}\n\ntree_ptr build_tree(int *in_order, int *post_order, int n)\n{\n    if (n &lt;= 0 || in_order == NULL || post_order == NULL || n &gt; MAX_NODE_NUM)\n        return NULL;\n    tree_ptr root = (tree_ptr)malloc(sizeof(tree_node));\n    root-&gt;data = post_order[n - 1];\n    int index = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (in_order[i] == post_order[n - 1])\n            index = i;\n    }\n    // \u628a\u4e2d\u5e8f\u5e8f\u5217\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5de6\u8fb9\u7684\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u7684\u662f\u53f3\u5b50\u6811\n    // \u6b64\u5904 in_order + index + 1 \u5fd8\u8bb0+1\uff0c\u5bfc\u81f4\u53ea\u6709\u5de6\u679d\u7684\u5de6\u5b50\u6811\u5efa\u6210\u4e86\u53f3\u5b50\u6811\n    root-&gt;left = build_tree(in_order, post_order, index);\n    root-&gt;right = build_tree(in_order + index + 1, post_order + index, n - index - 1);\n    return root;    //build_tree\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u5de6\u5b50\u6811\u662f0~index-1\u5171index\u4e2a\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u662fn-index-1\u4e2a\u8282\u70b9\uff0c\u4eceindex\u5f00\u59cb\u5230n-1\u5171(n-1)-index+1-1(\u9664\u53bb\u6839\u8282\u70b9)=n-index-1\u4e2a\u8282\u70b9\n\n    \u4e2d\u5e8f \uff08\u5de6\u5b50\u6811\uff1a12 11 20 17 \uff09\u30101\u3011 \uff08\u53f3\u5b50\u6811\uff1a15 8 5\uff09\n    \u540e\u5e8f \uff0812 20 17 11\uff09\uff08 15 8 5\uff09\u30101\u3011\n        i+5\uff0cpost_order+4,n-index-1\n}\n\nint is_empty(queue_ptr queue)\n{\n    if (queue-&gt;front == queue-&gt;rear)\n        return 1;\n    else\n        return 0;\n}\n/*\nvoid print_tree(tree_ptr tree){\n    //\u6253\u5370\u987a\u5e8f\u4e3a\u6839\u5de6\u53f3\n    if(tree == NULL)return;\n    printf(\"%d \", tree-&gt;data);\n    if(tree-&gt;left != NULL)print_tree(tree-&gt;left);\n    if(tree-&gt;right != NULL)print_tree(tree-&gt;right);  \n}\n*/\ntypedef struct\n{\n    int data[MAX_NODE_NUM];\n    int pointer;\n} sequence;\ntypedef sequence *sequence_ptr;\n\nint zigzag_levelorder(tree_ptr tree, queue_ptr queue)\n{\n    // zigzag\u7684\u5c42\u5e8f\u904d\u5386\n    int level = 0;\n    enqueue(tree, queue);\n    while (is_empty(queue) == 0)\n    {\n        int len = queue-&gt;rear - queue-&gt;front;\n        if (level % 2)\n        {\n            for (int i = queue-&gt;front; i &lt; queue-&gt;front + len; i++)\n            {\n                printf(\" %d\", queue-&gt;list[i]-&gt;data);\n            }\n        }\n        else\n        {\n            for (int i = queue-&gt;front + len - 1; i &gt;= queue-&gt;front; i--)\n            {\n                if (level == 0)\n                    printf(\"%d\", queue-&gt;list[i]-&gt;data);\n                else\n                    printf(\" %d\", queue-&gt;list[i]-&gt;data);\n            }\n        }\n        for (int i = queue-&gt;front; i &lt; queue-&gt;front + len; i++)\n        {\n            if (queue-&gt;list[i]-&gt;left != NULL)\n                enqueue(queue-&gt;list[i]-&gt;left, queue);\n            if (queue-&gt;list[i]-&gt;right != NULL)\n                enqueue(queue-&gt;list[i]-&gt;right, queue);\n        }\n        queue-&gt;front = queue-&gt;front + len;\n        level++;\n    }\n}\n\nint main()\n{\n    // zigzag \u5c42\u5e8f\u904d\u5386\uff0c\u5728\u6bcf\u4e00\u884c\u8f93\u51fa\u65f6\u6253\u5370\u51fa\u9006\u5e8f\u7684\n    int n;\n    scanf(\"%d\", &amp;n);\n    // The second line gives the inorder sequence\n    // and the third line gives the postorder sequence\n    /*  1. \u6839\u636e\u540e\u5e8f\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5efa\u7acb\u6839\u7ed3\u70b9\uff1b\n        2. \u5728\u4e2d\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230\u8be5\u5143\u7d20\uff0c\u786e\u5b9a\u6839\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u5e8f\u5217\uff1b\n        3. \u5728\u540e\u5e8f\u5e8f\u5217\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u540e\u5e8f\u5e8f\u5217\uff1b\n        4. \u7531\u5de6\u5b50\u6811\u7684\u540e\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u5efa\u7acb\u5de6\u5b50\u6811\uff1b\n        5. \u7531\u53f3\u5b50\u6811\u7684\u540e\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u5efa\u7acb\u53f3\u5b50\u6811\u3002*/\n    int in_order[MAX_NODE_NUM] = {0};\n    int post_order[MAX_NODE_NUM] = {0};\n    for (int i = 0; i &lt; n; i++)\n        scanf(\"%d\", &amp;in_order[i]);\n    for (int i = 0; i &lt; n; i++)\n        scanf(\"%d\", &amp;post_order[i]);\n\n    tree_ptr tree = build_tree(in_order, post_order, n);\n    // \u628a\u6811\u6253\u5370\u51fa\u6765\u770b\u770b\n    // print_tree(tree);\n\n    queue_ptr queue = (queue_ptr)malloc(sizeof(tree_queue));\n    queue-&gt;front = 0;\n    queue-&gt;rear = 0;\n    zigzag_levelorder(tree, queue);\n}\n</code></pre> C<pre><code>int Isomorphic( Tree T1, Tree T2 ){\n    //\u5de6\u53f3\u5b50\u6811\u4e92\u6362\uff0c\u6bcf\u5c42\u7684\u4e1c\u897f\u5e94\u8be5\u662f\u76f8\u540c\u7684\n    //\u5c42\u5e8f\u904d\u5386\uff1f\u53ea\u8981\u9012\u5f52\u5b9e\u73b0\u4e00\u4e0b\u5373\u53ef\n    if(!T1&amp;&amp;!T2)return 1;\n    else if(!T1&amp;&amp;T2||!T2&amp;&amp;T1)return 0;\n    if(T1-&gt;Element!=T2-&gt;Element)return 0;\n    int ans1 = Isomorphic(T1-&gt;Left,T2-&gt;Left);\n    int ans2 = Isomorphic(T1-&gt;Right,T2-&gt;Left);\n    int ans3 = Isomorphic(T1-&gt;Left,T2-&gt;Right);\n    int ans4 = Isomorphic(T1-&gt;Right,T2-&gt;Right);\n    return ans1&amp;&amp;ans4||ans2&amp;&amp;ans3;\n\n\n}\n</code></pre> <p>insertion sequence\u5e8f\u5217\u4e0d\u540c\uff0c\u6784\u5efa\u51fa\u7684\u4e8c\u53c9\u6811\u5f62\u72b6\u53ef\u80fd\u6709\u591a\u79cd</p> <p></p> <p>\u5efa\u7acb\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u987a\u5e8f</p> <p>\u5148\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3aNULL\uff0c\u82e5\u662f\uff0c\u5219\u5efa\u7acb\u65b0\u8282\u70b9\uff08data = x\uff0cleft=right=NULL\uff09</p> <p>\u82e5\u4e0d\u662f\uff0c\u5219\u9012\u5f52\u5411\u4e0b\uff0c\u82e5\u5927\u4e8e\u5f53\u524d\uff0c\u5219Insert(x,tree-&gt;left),\u5c0f\u4e8e\u524d\uff0c\u5219Insert(x,tree-&gt;right)</p> C<pre><code>SearchTree Insert( ElementType X, SearchTree T ) \n{ \n    if ( T == NULL ) /* Create and return a one-node tree */ \n    { \n        T = malloc( sizeof( struct TreeNode ) ); \n        if ( T == NULL ) \n            FatalError( \"Out of space!!!\" ); \n        else \n        { \n            T-&gt;Element = X; \n            T-&gt;Left = T-&gt;Right = NULL; \n        } \n    }  /* End creating a one-node tree */\n    else  /* If there is a tree */\n        if ( X &lt; T-&gt;Element ) \n            T-&gt;Left = Insert( X, T-&gt;Left ); \n        else \n            if ( X &gt; T-&gt;Element ) \n                T-&gt;Right = Insert( X, T-&gt;Right ); \n        /* Else X is in the tree already; we'll do nothing */ \n    return  T;   /* Do not forget this line!! */ \n}\n</code></pre> <p>\u4f5c\u4e1a\u9519\u9898</p> <p>\u73af\u5f62\u961f\u5217 \u6570\u7ec4\u5b9e\u73b0</p> <p>Suppose that an array of size <code>m</code> is used to store a circular queue. If the front position is <code>front</code> and the current size is <code>size</code>, then the rear element must be at:</p> Text Only<pre><code>A.front+size\n</code></pre> Text Only<pre><code>B.(front+size)%m\n</code></pre> Text Only<pre><code>C.(front+size-1)%m  this one\n</code></pre> Text Only<pre><code>D.front+size-1\n</code></pre> <p></p> <p></p> <p>disjoint sets</p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#hw3-m1n","title":"HW3: \u6808\u6700\u591a\u5bb9\u7eb3M\u4e2a\u6570\uff0c\u6570\u5b571~N\u4f9d\u6b21\u5165\u6808\uff0c\u800c\u51fa\u6808\u987a\u5e8f\u4efb\u610f\uff0c\u9a8c\u8bc1\u7ed9\u5b9a\u7684\u5e8f\u5217\u662f\u5426\u4e3a\u51fa\u6808\u5e8f\u5217","text":"<p>\u5bf9\u4e8e\u67d0\u4e2a\u5e8f\u5217\uff0c\u59823\uff0c2\uff0c1\uff0c7\uff0c5\uff0c6\uff0c4\uff0c\u6808\u7684\u5927\u5c0f\u4e3a5</p> <p>\u9884\u8bbeflag=1\uff0c\u5047\u8bbe\u662f\u5408\u6cd5\u51fa\u6808\u5e8f\u5217 </p> <p>\u521d\u59cb\u5316\u6808\u9876\u6307\u9488\u4e3a-1\uff0c\u5148\u5c061\u5165\u6808\uff0c\u56e0\u4e3a1\u4e00\u5b9a\u662f\u7b2c\u4e00\u4e2a\u5165\u6808\uff0c\u4f7f\u7528i\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u5c06\u8981\u5165\u6808\u7684\u5143\u7d20</p> <p>\u6808\u9876\u4e0d\u80fd\u8d85\u8fc7M\uff0c\u4e14\u8fd8\u672a\u904d\u5386\u5b8c\uff08\u4f7f\u7528\\(num[j]\\)\u4fdd\u5b58\u5982\u679c\u662f\u5408\u6cd5\u51fa\u6808\u5e8f\u5217\u5373\u5c06\u51fa\u6808\u7684\u5143\u7d20\uff09</p> <p>\u82e5\\(\u6808\u9876\u5143\u7d20==num[j]\\)\u5219\u5f39\u51fa\uff0c\\(j\\)\u5411\u540e\u904d\u5386</p> <p>\u82e5\u5230\u6700\u540e\u6808\u4e0d\u4e3a\u7a7a\u5219error</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n#define MAXSIZE 1000\n\nint main()\n{\n    int M, N, K;\n    scanf(\"%d %d %d\", &amp;M, &amp;N, &amp;K);\n    // M\u4e3a\u6808\u7684\u6700\u5927\u5bb9\u91cf\uff0cN\u4e3a\u5165\u6808\u7684\u6570\u5b57\u4e2a\u6570\uff0cK\u4e3a\u9700\u8981\u5224\u65ad\u7684\u51fa\u6808\u5e8f\u5217\u7684\u4e2a\u6570\n    int i, j, k;\n    int num[MAXSIZE];\n    int flag, current;\n    // \u679a\u4e3e\u51fa\u6808\u987a\u5e8f\uff0c\u7136\u540e\u6a21\u62df\u51fa\u6808\u8fc7\u7a0b\uff0c\u5982\u679c\u51fa\u73b0\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\uff0c\u8f93\u51faNO\n    for (i = 0; i &lt; K; i++)\n    {\n        for (j = 0; j &lt; N; j++)\n        {\n            scanf(\"%d\", &amp;num[j]);\n        }\n        flag = test(num, M, N); // \u4f20\u5165\u51fa\u6808\u5e8f\u5217\uff0c\u6808\u7684\u6700\u5927\u5bb9\u91cf\uff0c\u5165\u6808\u6570\u5b57\u7684\u4e2a\u6570\n        if (flag == 0)\n            printf(\"NO\\n\");\n        else\n            printf(\"YES\\n\");\n    }\n}\n\nint test(int *num, int M, int N)\n{\n    int stack[MAXSIZE] = {0};\n    int flag = 1;\n    int top = -1;\n    int i = 0, j = 0;   // i\u4e3a\u5165\u6808\u5e8f\u5217\uff0cj\u4e3a\u51fa\u6808\u5e8f\u5217\u7684\u4e0b\u6807\n    stack[++top] = ++i; // \u5148\u5c061\u5165\u6808\n    while (top &lt; M &amp;&amp; j &lt; N)\n    // \u6808\u4e0d\u6ee1\u4e14\u51fa\u6808\u5e8f\u5217\u8fd8\u672a\u904d\u5386\u5b8c\n    {\n        if (top != -1 &amp;&amp; stack[top] == num[j])\n        // \u6808\u4e0d\u4e3a\u7a7a\u4e14\u6808\u9876\u5143\u7d20\u7b49\u4e8e\u51fa\u6808\u5e8f\u5217\u7684\u5f53\u524d\u5143\u7d20\uff0c\u5219\u51fa\u6808\uff0c\u4e14j\u5411\u540e\u904d\u5386\n        {\n            top--;\n            j++;\n        }\n        else\n        {\n            stack[++top] = ++i;\n        }\n    }\n    if (top != -1)\n        flag = 0; // \u6808\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e\u51fa\u6808\u5e8f\u5217\u4e0d\u5408\u6cd5\n    return flag;\n}\n</code></pre> <p>polish</p> <p>infix\u64cd\u4f5c</p> <p></p> <p>C</p> <p>\u8ba1\u7b97\u673a\u53ea\u80fd\u5728\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u524d\u7f00\u6216\u540e\u7f00\u8868\u8fbe\u5f0f\u540e\u624d\u80fd\u8fdb\u884c\u8fd0\u7b97</p> <p>\u8ba1\u7b97\u673a\u5728\u8ba1\u7b97\u540e\u7f00\u8868\u8fbe\u5f0f\u65f6\u53ea\u9700\u4ece\u5de6\u5230\u53f3\u7ebf\u6027\u626b\u63cf\uff0c\u9047\u5230\u64cd\u4f5c\u6570\u538b\u5165\u6808\uff0c\u9047\u5230\u8fd0\u7b97\u7b26\u5219\u4f9d\u6b21\u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u64cd\u4f5c\u6570\u8ba1\u7b97\u540e\u5c06\u7ed3\u679c\u91cd\u65b0\u538b\u56de\u6808\u4e2d\u3002</p> <p>\u56e0\u6b64\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u524d\u7f00\u6216\u540e\u7f00\u8868\u8fbe\u5f0f\u6bd4\u8f83\u5173\u952e</p> <p>\u4e00\u822c\u4f7f\u7528\u4e24\u4e2a\u6808\u8fdb\u884c\u6b64\u64cd\u4f5c\uff0c\u5728\u8f6c\u6362\u65f6\u4e0d\u8fdb\u884c\u8fd0\u7b97\uff0c\u53ea\u662f\u5c06\u8fd0\u7b97\u7b26\u548c\u64cd\u4f5c\u6570\u91cd\u65b0\u6392\u5217</p> <p>\u6700\u540e\u8f93\u51fa\u65f6\u4e00\u822c\u662f\u5012\u5e8f\u8f93\u51fa</p> <p>\u6ce8\u610f\uff0c\u53ea\u6709S1\u6808\u9876\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u65f6\uff0c\u624d\u5c06\u5f53\u524d\u8fd0\u7b97\u7b26\u538b\u5165S1\uff0c\u5426\u5219\u76f4\u63a5\u538b\u5165\u4e2d\u95f4\u7ed3\u679c\u6808S2</p> <p>S2\u4e0d\u53eb\u64cd\u4f5c\u6570\u6808\uff0c\u56e0\u4e3a\u6700\u540e\u7ed3\u679c\u4eceS2\u4e2d\u9006\u5e8f\u8f93\u51fa\u5f97\u5230</p> <p></p> <p></p> <p>\u5012\u5e8f\u8f93\u51fa\u4e3aABC+*DEF+/-</p> <p>\u64cd\u4f5c\u6570\u987a\u5e8f\u4e0d\u4f1a\u53d8\u5316\uff0c\u4e00\u5b9a\u662f\u53f6\u5b50\u8282\u70b9</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#1-1","title":"\u4e8c\u5206\u67e5\u627e+1-1\u95ee\u9898\u5904\u7406","text":"<ul> <li>\u5de6\u3001\u4e2d\u3001\u53f3\u7d22\u5f15\u7684\u5206\u914d\u3002</li> <li>\u5faa\u73af\u6216\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u3002</li> <li>\u540e\u5904\u7406\u7684\u5fc5\u8981\u6027</li> </ul> <p>\u6a21\u677f1\u76f8\u5f53\u4e8e \u5de6\u95ed\u53f3\u95ed\u533a\u95f4 left=0\uff0cright=length-1\uff0c</p> <p>\u6a21\u677f2\u76f8\u5f53\u4e8e \u5de6\u95ed\u53f3\u5f00\u533a\u95f4 left=0\uff0cright=length\uff0c</p> <p>\u6a21\u677f3\u76f8\u5f53\u4e8e \u5de6\u5f00\u53f3\u5f00\u533a\u95f4 left=-1\uff0cright=length/ left=0\uff0cright=length-1\uff0c</p> <p>2\u548c3\u627e\u7684\u662f\\(&gt;=\\)target\u7684\u7b2c\u4e00\u4e2a\u6570</p> <p>\u6a21\u677f #1 <code>(left &lt;= right)\uff1a</code></p> <ul> <li>\u4e8c\u5206\u67e5\u627e\u7684\u6700\u57fa\u7840\u548c\u6700\u57fa\u672c\u7684\u5f62\u5f0f\u3002</li> <li>\u67e5\u627e\u6761\u4ef6\u53ef\u4ee5\u5728\u4e0d\u4e0e\u5143\u7d20\u7684\u4e24\u4fa7\u8fdb\u884c\u6bd4\u8f83\u7684\u60c5\u51b5\u4e0b\u786e\u5b9a\uff08\u6216\u4f7f\u7528\u5b83\u5468\u56f4\u7684\u7279\u5b9a\u5143\u7d20\uff09\u3002</li> <li>\u4e0d\u9700\u8981\u540e\u5904\u7406\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b65\u4e2d\uff0c\u4f60\u90fd\u5728\u68c0\u67e5\u662f\u5426\u627e\u5230\u4e86\u5143\u7d20\u3002\u5982\u679c\u5230\u8fbe\u672b\u5c3e\uff0c\u5219\u77e5\u9053\u672a\u627e\u5230\u8be5\u5143\u7d20\u3002</li> </ul> <p>\u6a21\u677f #2 <code>(left &lt; right)\uff1a</code></p> <ul> <li>\u4e00\u79cd\u5b9e\u73b0\u4e8c\u5206\u67e5\u627e\u7684\u9ad8\u7ea7\u65b9\u6cd5\u3002</li> <li>\u67e5\u627e\u6761\u4ef6\u9700\u8981\u8bbf\u95ee\u5143\u7d20\u7684\u76f4\u63a5\u53f3\u90bb\u5c45\u3002</li> <li>\u4f7f\u7528\u5143\u7d20\u7684\u53f3\u90bb\u5c45\u6765\u786e\u5b9a\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5e76\u51b3\u5b9a\u662f\u5411\u5de6\u8fd8\u662f\u5411\u53f3\u3002</li> <li>\u4fdd\u8bc1\u67e5\u627e\u7a7a\u95f4\u5728\u6bcf\u4e00\u6b65\u4e2d\u81f3\u5c11\u6709 2 \u4e2a\u5143\u7d20\u3002</li> <li>\u9700\u8981\u8fdb\u884c\u540e\u5904\u7406\u3002 \u5f53\u4f60\u5269\u4e0b 1 \u4e2a\u5143\u7d20\u65f6\uff0c\u5faa\u73af / \u9012\u5f52\u7ed3\u675f\u3002 \u9700\u8981\u8bc4\u4f30\u5269\u4f59\u5143\u7d20\u662f\u5426\u7b26\u5408\u6761\u4ef6\u3002</li> </ul> <p>\u6a21\u677f #3 <code>(left + 1 &lt; right)\uff1a</code></p> <ul> <li>\u5b9e\u73b0\u4e8c\u5206\u67e5\u627e\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002</li> <li>\u641c\u7d22\u6761\u4ef6\u9700\u8981\u8bbf\u95ee\u5143\u7d20\u7684\u76f4\u63a5\u5de6\u53f3\u90bb\u5c45\u3002</li> <li>\u4f7f\u7528\u5143\u7d20\u7684\u90bb\u5c45\u6765\u786e\u5b9a\u5b83\u662f\u5411\u53f3\u8fd8\u662f\u5411\u5de6\u3002</li> <li>\u4fdd\u8bc1\u67e5\u627e\u7a7a\u95f4\u5728\u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u81f3\u5c11\u6709 3 \u4e2a\u5143\u7d20\u3002</li> <li>\u9700\u8981\u8fdb\u884c\u540e\u5904\u7406\u3002 \u5f53\u5269\u4e0b 2 \u4e2a\u5143\u7d20\u65f6\uff0c\u5faa\u73af / \u9012\u5f52\u7ed3\u675f\u3002 \u9700\u8981\u8bc4\u4f30\u5176\u4f59\u5143\u7d20\u662f\u5426\u7b26\u5408\u6761\u4ef6\u3002</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#k-th-largest-num","title":"K-th largest Num","text":"<p>\u5728N\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e2d\u627e\u7b2cK\u5927\u7684\u6570\uff1a</p> <p>N\u4e2a\u5143\u7d20\u7684\u524dK\u4e2a\u5148\u505aminHeapify\uff0c\u540e\u9762\u7684\u5143\u7d20\u4f9d\u6b21\u63d2\u5165\u5806\u7684\u5bf9\u5e94\u4f4d\u7f6e\uff1a</p> <p>\u65b9\u6cd5\uff1ainsert\uff0c\u5982\u679c\u6bd4H[1]\uff08\u5806\u9876\u5143\u7d20\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\uff09\u5c0f\uff0c\u5219\u4e0d\u63d2\u5165\u5806\u4e2d\uff0c\u56e0\u4e3a\u5806\u9876\u5c31\u662f\u7b2cK\u4e2a\u5927\u7684\u6570</p> <p>\u82e5\u6bd4H[1]\u5927\uff0c\u5219percolate down\uff0c\u6cbf\u9014\u5b50\u8282\u70b9\u5411\u4e0a\u66ff\u6362\u7236\u8282\u70b9\uff0c\u4e5f\u5c31\u662fH[1]\u88ab\u66ff\u6362</p> <p>\u5c06\u4f59\u4e0b\u7684K+1~N\u4e2a\u5143\u7d20\u5168\u90e8\u5224\u65ad\u5e76\u63d2\u5165\u540e\uff0c\u6700\u7ec8\u5806\u9876\u5143\u7d20\u5c31\u662fN\u4e2a\u6570\u4e2d\u7b2cK\u5927\u7684\u6570</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#_2","title":"\u671f\u4e2d\u8003\u8bd5\u5237\u9898","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#15-16","title":"15-16","text":"<p>No Greater Than X in BST</p> <p>(20\u5206)</p> <p>You are supposed to output, in decreasing order, all the elements no greater than <code>X</code> in a binary search tree <code>T</code>.</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct TreeNode *Tree;\nstruct TreeNode {\n    int Element;\n    Tree  Left;\n    Tree  Right;\n};\n\nTree BuildTree(); /* details omitted */\nvoid Output( int X ); /* details omitted */\n\nvoid Print_NGT( Tree T,  int X );\n\nint main()\n{\n    Tree T;\n    int X;\n\n    T = BuildTree();\n    scanf(\"%d\", &amp;X);\n    Print_NGT( T, X );\n    printf(\"End\\n\");\n\n    return 0;\n}\n\n/* Your function will be put here */\nvoid Print_NGT( Tree T,  int X ){\n\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/midterm/#midterm-correction","title":"midterm correction","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/recite/","title":"\u8bb0\u5fc6\u90e8\u5206","text":"<p>\u9ed8\u5199\u5185\u5bb9</p> <p>\u6811\uff1adelete\uff08BST\uff09\uff0cinsert\uff08BST)</p> <p>\u5806\uff1adeletemin\uff0cminheapify\uff0cpercolate\uff08up/down), </p> <p>\u6808\uff1ainfix-&gt;prefix/postfix, evaluate postfix</p> C<pre><code>char* in_to_pre(){\n    char *s1 = (char*)malloc(sizeof(char)*MAX_N);\n    char *s2 = (char*)malloc(sizeof(char)*MAX_N);\n    int top1 = -1; int top2 = -1;\n    s1[top1++] = in_fix[0];\n    for(int i=1;i&lt;num;i++){\n        if()\n    }\n}\n</code></pre> C<pre><code>void PercolateDown(int p, PriorityQueue H){\n    //p\u5e94\u8be5\u662f\u4ec0\u4e48\n}\nvoid PercolateUp(int p, PriorityQueue H){\n    for(int i=p;H-&gt;elements[i]&lt;H-&gt;elements[i/2];i=i/2)\n}\n</code></pre> C<pre><code>minHeapify\n</code></pre> C<pre><code>void Unweighted( Table T )\n{   \n    /* T is initialized with the source vertex S given */\n    Queue Q;\n    Vertex V, W;\n    Q = CreateQueue( NumVertex );\n    MakeEmpty( Q );\n    Enqueue( S, Q ); /* Enqueue the source vertex */\n    while ( !IsEmpty( Q ) ) \n    {\n        V = Dequeue( Q );\n        T[ V ].Known = true; /* not really necessary */\n        for ( each W adjacent to V )\n            if ( T[ W ].Dist == Infinity ) \n            {\n                T[ W ].Dist = T[ V ].Dist + 1;\n                T[ W ].Path = V;\n                Enqueue( W, Q );\n            } /* end-if Dist == Infinity */\n    } /* end-while */\n    DisposeQueue( Q ); /* free memory */\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/","title":"\u4e8c\u53c9\u6811","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/#_1","title":"\u4e8c\u53c9\u6811","text":"C<pre><code>public int countNodes(TreeNode root) {\n    TreeNode l = root, r = root;\n    // \u8bb0\u5f55\u5de6\u3001\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\n    int hl = 0, hr = 0;\n    while (l != null) {\n        l = l.left;\n        hl++;\n    }\n    while (r != null) {\n        r = r.right;\n        hr++;\n    }\n    // \u5982\u679c\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u76f8\u540c\uff0c\u5219\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\n    if (hl == hr) {\n        return (int)Math.pow(2, hl) - 1;\n    }\n    // \u5982\u679c\u5de6\u53f3\u9ad8\u5ea6\u4e0d\u540c\uff0c\u5219\u6309\u7167\u666e\u901a\u4e8c\u53c9\u6811\u7684\u903b\u8f91\u8ba1\u7b97\n    return 1 + countNodes(root.left) + countNodes(root.right);\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/","title":"MST-uniqueness","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#uniqueness-of-mst","title":"Uniqueness of MST","text":"<p>Given any weighted undirected graph, there exists at least one minimum spanning tree (MST) if the graph is connected. Sometimes the MST may not be unique though. Here you are supposed to calculate the minimum total weight of the MST, and also tell if it is unique or not.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#input-specification","title":"Input Specification:","text":"<p>Each input file contains one test case. Each case starts with a line containing 2 numbers N (\u2264 500), and M, which are the total number of vertices, and the number of edges, respectively. Then M lines follow, each describes an edge by 3 integers:</p> Text Only<pre><code>V1 V2 Weight\n</code></pre> <p>where <code>V1</code> and <code>V2</code> are the two ends of the edge (the vertices are numbered from 1 to N), and <code>Weight</code> is the positive weight on that edge. It is guaranteed that the total weight of the graph will not exceed 230.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#output-specification","title":"Output Specification:","text":"<p>For each test case, first print in a line the total weight of the minimum spanning tree if there exists one, or else print <code>No MST</code> instead. Then if the MST exists, print in the next line <code>Yes</code> if the tree is unique, or <code>No</code> otherwise. There there is no MST, print the number of connected components instead.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#sample-input-1","title":"Sample Input 1:","text":"Text Only<pre><code>5 7\n1 2 6\n5 1 1\n2 3 4\n3 4 3\n4 1 7\n2 4 2\n4 5 5\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#sample-output-1","title":"Sample Output 1:","text":"Text Only<pre><code>11\nYes\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#sample-input-2","title":"Sample Input 2:","text":"Text Only<pre><code>4 5\n1 2 1\n2 3 1\n3 4 2\n4 1 2\n3 1 3\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#sample-output-2","title":"Sample Output 2:","text":"Text Only<pre><code>4\nNo\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#sample-input-3","title":"Sample Input 3:","text":"Text Only<pre><code>5 5\n1 2 1\n2 3 1\n3 4 2\n4 1 2\n3 1 3\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E5%AE%9A%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%98%AF%E5%90%A6%E5%94%AF%E4%B8%80/#sample-output-3","title":"Sample Output 3:","text":"Text Only<pre><code>No MST\n2\n</code></pre> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#define MAX_EDGE_NUM 200000\n#define MAX_NODE_NUM 1000\ntypedef struct\n{\n    int start, end, weight;\n    int isTreeEdge; //\u5224\u65ad\u662f\u5426\u662f\u751f\u6210\u6811\u7684\u4e00\u90e8\u5206\n} Edge;\n\nEdge edges[MAX_EDGE_NUM];//\u5012\u6570\u7b2c\u4e8c\u4e2a\u6d4b\u8bd5\u70b9\u4e00\u76f4\u4e0d\u884c\nint n, m, father[MAX_NODE_NUM];\n\nint find_parent(int x)\n{\n    if (x == father[x]) //\u5982\u679c\u627e\u5230\u4e86\u7236\u8282\u70b9(\u8282\u70b9\u6307\u5411\u81ea\u8eab)\n        return x;\n    int a = find_parent(father[x]);\n    father[x] = a; //\u627e\u5230\u4e4b\u540e\u5c31\u76f4\u63a5\u6307\u5411\u7236\u8282\u70b9\u3001\n    return a;\n}\n\nint compareEdges(const void *a, const void *b)\n{\n    return ((Edge *)a)-&gt;weight - ((Edge *)b)-&gt;weight;\n}\n\nint main()\n{\n    scanf(\"%d %d\", &amp;n, &amp;m);//n\u4e3a\u603b\u8282\u70b9\u6570\uff0cm\u4e3a\u603b\u8fb9\u6570\n\n    for (int i = 0; i &lt; m; ++i)\n    {\n        scanf(\"%d %d %d\", &amp;edges[i].start, &amp;edges[i].end, &amp;edges[i].weight);\n        edges[i].isTreeEdge = 0;\n    }\n    qsort(edges, m, sizeof(Edge), compareEdges);//\u4f7f\u7528\u5feb\u6392\n\n    for (int i = 1; i &lt;= n; ++i)\n        father[i] = i; //\u521d\u59cb\u5316\u4e3a\u81ea\u8eab\n\n    int total_MST_weight = 0, k_edges = 0, j = 0;\n    int flag = 1;\n\n    for (int i = 0; i &lt; m; i = j)\n    {\n        for (j = i; j &lt; m &amp;&amp; edges[j].weight == edges[i].weight; ++j)\n            if (find_parent(edges[j].start) != find_parent(edges[j].end))\n                edges[j].isTreeEdge = 1;//\u76f4\u63a5\u4e00\u6b21\u6027\u5c06\u6240\u6709\u8fb9\u957f\u76f8\u7b49\u7684\u8fb9\u90fd\u627e\u51fa\u6765\u4e86\n\n        for (int k = i; k &lt; j; ++k)\n        {\n            int start = find_parent(edges[k].start), end = find_parent(edges[k].end);\n            if (start != end) //\u82e5\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\n            {\n                total_MST_weight += edges[k].weight;\n                father[start] = end;\n                ++k_edges;\n            }\n            else if (edges[k].isTreeEdge)//start\u548cend\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u4e14\u8fd9\u6761\u8fb9\u662f\u5c06\u8981\u52a0\u5165\u7684\u8fb9\u4e2d\u6743\u91cd\u76f8\u540c\u5c0f\u7684\u90a3\u7ec4\n            //\u6240\u4ee5\u6709\u591a\u79cd\u9009\u62e9\uff0c\u751f\u6210\u6811\u4e0d\u552f\u4e00\n                flag = 0; \n        }\n    }\n\n    if (k_edges == n - 1)\n        printf(\"%d\\n%s\", total_MST_weight, flag ? \"Yes\" : \"No\");\n    else\n        printf(\"No MST\\n%d\", n - k_edges); //\u6253\u5370\u8054\u901a\u5206\u91cf\u7684\u4e2a\u6570\n\n    return 0;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89Euler%20Circuit/","title":"euler circuit","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89Euler%20Circuit/#euler-circuit","title":"\u5224\u65ad\u662f\u5426\u6709Euler Circuit\uff0c\u6253\u5370\u4e00\u6761\u8def\u5f84","text":"<p>\u6ce8\u610fcircuit\u662f\u56de\u8def\uff0c\u8981\u56de\u53bb\u5230\u8d77\u70b9\u7684\uff0ceuler tour\u53ef\u4ee5\u4e0d\u7528\u56de\u5230\u8d77\u70b9\uff0c\u4f46\u7ecf\u8fc7\u6bcf\u6761\u8fb9</p> <p>\u5224\u65ad\u662f\u5426\u5b58\u5728\u6b27\u62c9\u56de\u8def\u4e3b\u8981\u5c31\u662f\u770b\u6709\u6ca1\u6709\u5ea6\u4e3a\u5947\u6570\u7684\u8fb9</p> <p>A.\u5224\u65ad\u6b27\u62c9\u901a\u8def\u662f\u5426\u5b58\u5728\u7684\u65b9\u6cd5</p> <p>\u6709\u5411\u56fe\uff1a\u56fe\u8fde\u901a\uff0c\u6709\u4e00\u4e2a\u9876\u70b9\u51fa\u5ea6\u5927\u5165\u5ea61\uff0c\u6709\u4e00\u4e2a\u9876\u70b9\u5165\u5ea6\u5927\u51fa\u5ea61\uff0c\u5176\u4f59\u90fd\u662f\u51fa\u5ea6=\u5165\u5ea6\u3002</p> <p>\u65e0\u5411\u56fe\uff1a\u56fe\u8fde\u901a\uff0c\u53ea\u6709\u4e24\u4e2a\u9876\u70b9\u662f\u5947\u6570\u5ea6\uff0c\u5176\u4f59\u90fd\u662f\u5076\u6570\u5ea6\u7684\u3002</p> <p>B.\u5224\u65ad\u6b27\u62c9\u56de\u8def\u662f\u5426\u5b58\u5728\u7684\u65b9\u6cd5</p> <p>\u6709\u5411\u56fe\uff1a\u56fe\u8fde\u901a\uff0c\u6240\u6709\u7684\u9876\u70b9\u51fa\u5ea6=\u5165\u5ea6\u3002</p> <p>\u65e0\u5411\u56fe\uff1a\u56fe\u8fde\u901a\uff0c\u6240\u6709\u9876\u70b9\u90fd\u662f\u5076\u6570\u5ea6\u3002</p> C<pre><code>int isEulerCircuit(Graph *graph) {\n    visited[i]=0;//\u8bbe\u7f6evisited\u6570\u7ec4\u4e3a\u51680\n\n    int oddDegreeCount = 0;\n\n    for (int i = 0; i &lt; graph-&gt;vertices; i++) {\n        if ((i == 0 &amp;&amp; isValidEdge(graph, i, i + 1)) || (i &gt; 0 &amp;&amp; isValidEdge(graph, i, i - 1)))\n            eulerDFS(graph, i, visited);\n\n        for (int j = 0; j &lt; graph-&gt;vertices; j++) {\n            if (!visited[j] &amp;&amp; isValidEdge(graph, i, j)) {\n                oddDegreeCount++;\n                eulerDFS(graph, j, visited);\n            }\n        }\n    }\n\n    free(visited);\n\n    return oddDegreeCount == 0;\n}\nvoid eulerDFS(Graph *graph, int vertex, int *visited) {\n    visited[vertex] = 1;\n\n    for (int i = 0; i &lt; graph-&gt;vertices; i++) {\n        if (graph-&gt;adjacencyMatrix[vertex][i] &amp;&amp; !visited[i]) {\n            printf(\"%d -&gt; %d\\n\", vertex, i);\n            eulerDFS(graph, i, visited);\n        }\n    }\n}\nint isValidEdge(Graph *graph, int u, int v) {\n    int countU = 0, countV = 0;\n\n    for (int i = 0; i &lt; graph-&gt;vertices; i++) {\n        if (graph-&gt;adjacencyMatrix[u][i])\n            countU++;\n        if (graph-&gt;adjacencyMatrix[v][i])\n            countV++;\n    }\n\n    if (countU == 1)\n        return 1;\n    if (countV == 1)\n        return 1;\n\n    return 0;\n}\n</code></pre> C<pre><code>#include&lt;cstdio&gt;\n#include&lt;stdio.h&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\n#define MAX 2010\nusing namespace std;\nint maps[MAX][MAX];\nint in[MAX];\nint t[MAX];\nint flag;\nint k;\nint Max,Min;\nint DFS(int x)\n{\n    int i;\n    for(i=Min;i&lt;=Max;i++)\n    {\n        if(maps[x][i])///\u4ece\u4efb\u610f\u4e00\u4e2a\u4e0e\u5b83\u76f8\u8fde\u7684\u70b9\u51fa\u53d1\n        {\n            maps[x][i]--;///\u5220\u53bb\u904d\u5386\u5b8c\u7684\u8fb9\n            maps[i][x]--;\n            DFS(i);\n        }\n    }\n    t[++k]=x;///\u8bb0\u5f55\u8def\u5f84\uff0c\u56e0\u4e3a\u662f\u9012\u5f52\u6240\u6709\u5012\u7740\u8bb0\n}\nint main()\n{\n    int n,i,x,y;\n    Max=-9999;\n    Min=9999;\n    flag=0;\n    scanf(\"%d\",&amp;n);\n    for(i=1;i&lt;=n;i++)\n    {\n        scanf(\"%d%d\",&amp;x,&amp;y);\n        maps[x][y]++;\n        maps[y][x]++;\n        Max=max(x,max(y,Max));\n        Min=min(x,min(y,Min));\n        in[x]++;\n        in[y]++;\n    }\n    for(i=Min;i&lt;=Max;i++)\n    {\n        if(in[i]%2)///\u5b58\u5728\u5947\u5ea6\u70b9\uff0c\u8bf4\u660e\u662f\u6b27\u62c9\u901a\u8def\n        {\n            flag=1;\n            DFS(i);\n            break;\n        }\n    }\n    if(!flag)///\u5168\u4e3a\u5076\u5ea6\u70b9\uff0c\u4ece\u6807\u53f7\u6700\u5c0f\u7684\u5f00\u59cb\u627e\n    {\n        DFS(Min);\n    }\n    for(i=k;i&gt;=1;i--)\n    {\n        printf(\"%d\\n\",t[i]);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E6%A3%80%E6%B5%8B%E8%B4%9F%E6%9D%83%E7%8E%AF-%E6%B1%82%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84/","title":"\u8d1f\u6743\u73af\u68c0\u6d4b","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E6%A3%80%E6%B5%8B%E8%B4%9F%E6%9D%83%E7%8E%AF-%E6%B1%82%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84/#_1","title":"\u6c42\u6709\u8d1f\u503c\u8fb9\u7684\u56fe\u7684\u6700\u77ed\u8def","text":"<p>\u82e5\u56fe\u4e2d\u6709\u8d1f\u6743\u73af\u8def\uff0c\u5219\u4f1a\u4ea7\u751f\u65e0\u7a77\u5faa\u73af\uff0c\u6700\u77ed\u8def\u4e0d\u5b58\u5728</p> C<pre><code>void bellmanFord(struct Graph* graph, int src) {\n    int V = graph-&gt;V;\n    int E = graph-&gt;E;\n    int* dist = (int*)malloc(V * sizeof(int));\n\n    // \u521d\u59cb\u5316\u8ddd\u79bb\u6570\u7ec4\n    for (int i = 0; i &lt; V; i++) {\n        dist[i] = INT_MAX;\n    }\n    dist[src] = 0;\n\n    // \u677e\u5f1b\u64cd\u4f5c\n    for (int i = 1; i &lt;= V - 1; i++) {\n        //V-1\u8f6e\u5bf9\u4e8e\u904d\u5386\u6bcf\u6761\u8fb9\u66f4\u65b0\u662f\u80af\u5b9a\u591f\u7684\uff0c\u5c31\u7b97\u662f\u8003\u8651\u9000\u5316\u4e3a\u4e00\u6761\u5355\u94fe\u8868\uff0c\u4e5f\u53ea\u9700\u8981V-1\u6b21\n        for (int j = 0; j &lt; E; j++) {\n            int u = graph-&gt;edge[j].src;\n            int v = graph-&gt;edge[j].dest;\n            int weight = graph-&gt;edge[j].weight;\n            if (dist[u] != INT_MAX &amp;&amp; dist[u] + weight &lt; dist[v]) {\n                dist[v] = dist[u] + weight;\n            }\n        }\n    }\n\n    // \u68c0\u6d4b\u8d1f\u6743\u73af\n    for (int i = 0; i &lt; E; i++) {\n        int u = graph-&gt;edge[i].src;\n        int v = graph-&gt;edge[i].dest;\n        int weight = graph-&gt;edge[i].weight;\n        if (dist[u] != INT_MAX &amp;&amp; dist[u] + weight &lt; dist[v]) {\n            //\u5224\u65ad\u6709\u8d1f\u6743\u73af\u7684\u6761\u4ef6\u662f\uff0c\u5982\u679c\u5728\u7b2cV-1\u6b21\u8fed\u4ee3\u540e\uff0c\u8fd8\u80fd\u7ee7\u7eed\u677e\u5f1b\uff0c\u5219\u8bf4\u660e\u6709\u8d1f\u6743\u73af\n            //\u56e0\u4e3a\u6700\u77ed\u8def\u6700\u591a\u6709E-1\u6761\u8fb9\n            printf(\"\u56fe\u4e2d\u5305\u542b\u8d1f\u6743\u73af\uff0c\u65e0\u6cd5\u6c42\u89e3\u6700\u77ed\u8def\u5f84\u3002\\n\");\n            free(dist);\n            return;\n        }\n    }\n\n    // \u6253\u5370\u6700\u77ed\u8def\u5f84\n    printf(\"\u9876\u70b9\\t\u8ddd\u79bb\u6e90\u70b9\u7684\u6700\u77ed\u8def\u5f84\\n\");\n    for (int i = 0; i &lt; V; i++) {\n        printf(\"%d\\t%d\\n\", i, dist[i]);\n    }\n\n    free(dist);\n}\n</code></pre> C<pre><code>void WeightedNegative( Table T )\n{\n    Queue Q;\n    Vertex V, W;\n    Q = CreateQueue (NumVertex );  \n    MakeEmpty( Q );\n    Enqueue( S, Q ); /*Enqueue the source vertex*/\n    while ( !IsEmpty( Q ) ) \n    {\n        V = Dequeue( Q );\n        for ( each W adjacent to V )\n        if ( T[ V ].Dist + Cvw &lt; T[ W ].Dist ) \n        {\n            T[ W ].Dist = T[ V ].Dist + Cvw;\n            T[ W ].Path = V;\n            if ( W is not already in Q )\n                Enqueue( W, Q );\n        } /*end-if update*/\n    } /*end-while */\n    DisposeQueue( Q ); /*free memory*/\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E6%B1%82%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%E7%9A%84Tarjan%E7%AE%97%E6%B3%95/","title":"tarjan","text":"<p>\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684Tarjan\u7b97\u6cd5</p> C<pre><code>tarjan(u)\n{\n    dfn[u]=low[u]=++Index                      \n    stack.push(u)                              \n    for each (u, v) in E                       \n        if (v is not visted)              \n            tarjan(v)                  \n            low[u] = min(low[u], low[v])\n        else if (v in S)                   \n            low[u] = min(low[u], dfn[v])\n    if (dfn[u] == low[u])                     \n        repeat\n            v = stack.pop                \n            print v\n        until (u== v)\n}\n</code></pre> <p></p> <p></p> C<pre><code>1 tarjan(u)\n2 {\n3    dfn[u]=low[u]=++Index                      \n4    stack.push(u)                              \n5    for each (u, v) in E                       \n6        if (v is not visted)              \n7            tarjan(v)     //\u8282\u70b97\u6267\u884ctarjan\u65f6\uff0c \u6267\u884c\u4e86\u7b2c10\u884c\uff0c\u5c06low\u66f4\u65b0\u4e3a4        \n8            low[u] = min(low[u], low[v]) //\u7136\u540e\u8fd4\u56de\u8282\u70b96\uff0c\u8fd8\u662f\u6267\u884c\u7b2c10\u884c\uff08\u6b64\u65f67\u5df2\u7ecfvisited\uff09\n9        else if (v in S)                   \n10            low[u] = min(low[u], dfn[v]) //\u56e0\u6b646\u7684low\u4e5f\u53d8\u6210\u4e864\n11    if (dfn[u] == low[u])             //6\u7684\u9012\u5f52\u7236\u4eb2\u662f5\uff0c\u76f4\u5230\u6267\u884c\u52305\u624d\u5c06\u6808\u4e2d\u6240\u6709\u8fd9\u4e2a\u5f3a\u8054\u901a\u5206\u91cf   \n12        repeat                        //\u7684\u6240\u6709\u5143\u7d20\u5f39\u51fa\n13            v = stack.pop                \n14            print v\n15        until (u== v) \n16}\n</code></pre> <p></p> C<pre><code>int instack[MaxVertices];\nint stack[MaxVertices];\nint dfn[MaxVertices],low[MaxVertices];\nint stackLen;\nint index;\n\nint min(int a,int b)\n{\n    return a&lt;b?a:b;\n}\n\nvoid tarjan(Graph G,Vertex vert, void (*visit)(Vertex V))\n{\n    dfn[vert] = low[vert] = ++index;\n    stack[stackLen++] = vert;\n    instack[vert] = 1;\n    for(PtrToVNode vnode = G-&gt;Array[vert];vnode;vnode=vnode-&gt;Next)\n    {\n        Vertex other = vnode-&gt;Vert;\n        if(dfn[other] == 0)\n        {\n            tarjan(G,other,visit);\n            low[vert] = min(low[vert],low[other]);\n        }\n        else if(instack[other])\n        {\n            low[vert] = min(low[vert],dfn[other]);\n        }\n    }\n\n    if(dfn[vert] == low[vert])\n    {\n        while(stack[stackLen-1]!=vert)//why while(dfn[Vert]!=low[vert]) does not work?\n        {\n            Vertex top = stack[stackLen-1];\n            stackLen--;\n            instack[top]=0;\n            visit(top);\n        }\n        stackLen--;\n        instack[vert]=0;\n        visit(vert);\n        printf(\"\\n\");\n    }\n}\n\nvoid StronglyConnectedComponents( Graph G, void (*visit)(Vertex V) )\n{\n    for(int i=0;i&lt;G-&gt;NumOfVertices;i++)\n    {\n        if(dfn[i] == 0)\n            tarjan(G,i,visit);\n    }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/mynotes/%E9%82%BB%E6%8E%A5%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/","title":"\u90bb\u63a5\u8868\u904d\u5386","text":"C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef enum {false, true} bool;\n#define MaxVertexNum 10  /* maximum number of vertices */\ntypedef int Vertex;      /* vertices are numbered from 0 to MaxVertexNum-1 */\n\ntypedef struct AdjVNode *PtrToAdjVNode; \nstruct AdjVNode{\n    Vertex AdjV;\n    PtrToAdjVNode Next;\n};\n\ntypedef struct Vnode{\n    PtrToAdjVNode FirstEdge; // AdjList[i] \u662f\u8282\u70b9i\u5f00\u59cb\u7684\u90bb\u63a5\u8868\uff0cfirstedge\u662f\u6307\u5411AdjVNode\u7684\u6307\u9488\n} AdjList[MaxVertexNum];  //AdjList: adjacency list \u90bb\u63a5\u8868\n\ntypedef struct GNode *PtrToGNode;\nstruct GNode{  \n    int Nv;\n    int Ne;\n    AdjList G;\n};\ntypedef PtrToGNode LGraph;\n\nLGraph ReadG(); /* details omitted */\n\nvoid ShortestDist( LGraph Graph, int dist[], Vertex S );\n\nint main()\n{\n    int dist[MaxVertexNum];\n    Vertex S, V;\n    LGraph G = ReadG();\n\n    scanf(\"%d\", &amp;S);\n    ShortestDist( G, dist, S );\n\n    for ( V=0; V&lt;G-&gt;Nv; V++ )\n        printf(\"%d \", dist[V]);\n\n    return 0;\n}\n\n/* Your function will be put here */\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/","title":"\u5199\u5728\u524d\u9762","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/#notes-for-data-structure","title":"Notes for Data Structure","text":"<p>This is my personal notes for The Foundation of Data Structure course in Zhejiang University.</p> <p>Since it\u2019s the first time I\u2019ve learned data structure systematically, I wish I could detail the information which will make it easier for me to review in the future. </p> <p>Also hope that my notes can help someone else a little bit.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/","title":"\u8bfe\u7a0b\u5b9a\u4f4d","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#week-1","title":"WEEK 1","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#1-algorithm-analysis","title":"1 Algorithm Analysis","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#definition-an-algorithm-is-a-finite-set-of-instructions-that-if-followed-accomplishes-a-particular-task-in-addition-all-algorithms-must-satisfy-the-following-criteria","title":"[Definition] An algorithm is a finite set of instructions that, if followed, accomplishes a particular task. In addition, all algorithms must satisfy the following criteria.","text":"<ol> <li> <p>Input : There are zero or more quantities that are externally supplied.</p> </li> <li> <p>Output : At least one quantity is produced.</p> </li> <li> <p>Definiteness : Each instruction is clear and unambiguous.</p> </li> <li> <p>Finiteness : the algorithm terminates after finite number of steps</p> </li> <li> <p>Effectiveness : basic enough to be carried out ; feasible</p> </li> <li> <p>A program does not have to be finite. (eg. an operation system)</p> </li> <li> <p>An algorithm can be described by human languages, flow charts, some programming languages, or pseudocode.</p> </li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#example-selection-sort-sort-a-set-of-ngeq1-integers-in-increasing-order","title":"[Example] Selection Sort : Sort a set of \\(n\\geq1\\) integers in increasing order","text":"Text Only<pre><code>for (i = 0; i &lt; n; i++){\n    Examine list[i] to list[n-1] and suppose that the smallest integer is at list[min];\n    Interchange list[i] and list[min];\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#11-what-to-analyze","title":"1.1 What to Analyze","text":"<ul> <li> <p>Machine and compiler-dependent run times.</p> </li> <li> <p>Time and space complexities : machine and compiler independent.</p> </li> <li> <p>Assumptions:</p> </li> </ul> <ol> <li> <p>instructions are executed sequentially \u987a\u5e8f\u6267\u884c</p> </li> <li> <p>each instruction is simple, and takes exactly one time unit</p> </li> <li>integer size is fixed and we have infinite memory</li> </ol> <ul> <li>\\(T_{avg}(N)\\, and\\, T_{worst}(N)\\) : the average and worst case time complexities as functions of input size \\(N\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#example-matrix-addition","title":"[Example] Matrix addition","text":"C<pre><code>void add(int a[][MAX_SIZE],\n         int b[][MAX_SIZE],\n         int c[][MAX_SIZE],\n         int rows, int cols) \n{\n    int i, j;\n    for (i=0; i&lt;rows; i++)/*rows+1*/\n        for (j=0;j&lt;cols;j++)/*rows(cols+1)*/\n            c[i][j] = a[i][j]+b[i][j];/*rows*cols*/\n}\n</code></pre> \\[ T(rows, cols) = 2rows\\times cols + 2rows+1 \\] <ul> <li>\u975e\u5bf9\u79f0</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#example-iterative-function-for-summing-a-list-of-numbers","title":"[Example] Iterative function for summing a list of numbers","text":"C<pre><code>float sum (float list[], int n)\n{  /*add a list of numbers*/\n    float tempsum = 0; /*count = 1*/\n    int i;\n    for (i=0; i&lt;n; i++)\n        /*count++*/\n        tempsum  += list[i]; /*count++*/\n    /*count++ for last excutaion of for*/\n   return tempsum; /*count++*/\n}\n</code></pre> \\[ T_{sum}(n)=2n+3 \\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#example-recursive-function-for-summing-a-list-of-numbers","title":"[Example] Recursive function for summing a list of numbers","text":"C<pre><code>float rsum (float list[], int n)\n{/*add a list of numbers*/\n    if (n) /*count++*/\n        return rsum(list, n-1) + list[n-1];\n        /*count++*/\n    return 0; /*count++*/\n}\n</code></pre> \\[ T_{rsum}(n)=2n+2 \\] <p>But it takes more time to compute each step.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#12-asymptotic-notationoomegathetao","title":"1.2 Asymptotic Notation(\\(O,\\Omega,\\Theta,o\\))","text":"<ul> <li>predict the growth ; compare the time complexities of two programs ; asymptotic(\u6e10\u8fdb\u7684) behavior</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#definition-tnofn-if-there-are-positive-constants-c-and-n_0-such-that-tnleq-ccdot-fn-for-all-ngeq-n_0upper-bound","title":"[Definition] \\(T(N)=O(f(N))\\) if there are positive constants \\(c\\) and \\(n_0\\) such that \\(T(N)\\leq c\\cdot f(N)\\) for all \\(N\\geq n_0\\).(upper bound)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#definition-tnomegagn-if-there-are-positive-constants-c-and-n_0-such-that-tngeq-ccdot-fn-for-all-ngeq-n_0lower-bound","title":"[Definition] \\(T(N)=\\Omega(g(N))\\) if there are positive constants \\(c\\) and \\(n_0\\) such that \\(T(N)\\geq c\\cdot f(N)\\) for all \\(N\\geq n_0\\).(lower bound)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#definition-tnthetahn-if-and-only-if-tnohn-and-tnomegahn","title":"[Definition] \\(T(N)=\\Theta(h(N))\\) if and only if \\(T(N)=O(h(N))\\) and \\(T(N)=\\Omega(h(N))\\).","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#definition-tnopn-if-tnopn-and-tnneqthetapn","title":"[Definition] \\(T(N)=o(p(N))\\) if \\(T(n)=O(p(N))\\) and \\(T(N)\\neq\\Theta(p(N))\\).","text":"<ul> <li> <p>\\(2N+3=O(N)=O(N^{k\\geq1})=O(2^N)=\\ldots\\) take the smallest \\(f(N)\\)</p> </li> <li> <p>\\(2^N+N^2=\\Omega(2^N)=\\Omega(N^2)=\\Omega(N)=\\Omega(1)=\\ldots\\) take the largest \\(g(N)\\)</p> </li> <li> <p>Rules of Asymptotic Notation</p> </li> </ul> <ol> <li>If \\(T_1(N)=O(f(N))\\) and \\(T_2=O(g(N))\\), then</li> </ol> <p>(1) \\(T_1(N)+T_2(N)=max(O(f(N)),O(g(N)))\\)</p> <p>(2) \\(T_1(N)*T_2(N)=O(f(N)*g(N))\\)</p> <ol> <li> <p>\u82e5\\(T(N)\\)\u662f\u4e00\u4e2a\\(k\\)\u6b21\u591a\u9879\u5f0f\uff0c\u5219\\(T(N)=\\Theta(N^k)\\)</p> </li> <li> <p>\\(log_kN=O(N)\\) for any constant \\(k\\) (logarithms grow very slowly)</p> </li> </ol> <p></p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#example-matrix-addition_1","title":"[Example] Matrix addition","text":"C<pre><code>void add(int a[][MAX_SIZE],\n         int b[][MAX_SIZE],\n         int c[][MAX_SIZE],\n         int rows, int cols) \n{\n    int i, j;\n    for (i=0; i&lt;rows; i++)\n        for (j=0;j&lt;cols;j++)\n            c[i][j] = a[i][j]+b[i][j];\n}\n</code></pre> \\[ T(rows,cols)=\\Theta(rows\\cdot cols) \\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK01/#general-rules","title":"General Rules","text":"<ul> <li> <p>For loops : The running time of a for loop is at most the running time of the statements inside the for loop (including tests) times the number of iterations.</p> </li> <li> <p>Nested for loops : The total running time of a statement inside a group of nested loops is the running time of the statements multiplied by the product of the sizes of all the for loops.</p> </li> <li> <p>Consecutive statements : These just add (which means that the maximum is the one that counts).</p> </li> <li> <p>If/else : For the fragment           if ( Condition )  S1;           else  S2;</p> </li> </ul> <p>The running time is never more than the running time of the test plus the larger of the running time of S1 and S2.</p> <p></p> <ul> <li>Recursions : </li> </ul> <p>[Example] Fibonacci number   $$   Fib(0)=Fib(1)=1, Fib(n)=Fib(n-1)+Fib(n-2)   $$</p> C<pre><code>lont int Fib (int N) /*T(N)*/\n{\n    if (N&lt;=1) /*O(1)*/\n        return 1; /*O(1)*/\n    else\n        return Fib(N-1)+Fib(N-2);\n}      /*O(1)*//*T(N-1)*//*T(N-2)*/\n</code></pre> <p>$$   T(N)=T(N-1)+T(N-2)+2\\geq Fib(N)\\   \\left(\\frac{3}{2} \\right)^n\\leq Fib(N)\\leq\\left(\\frac{5}{3}\\right)^n   $$</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(2^N)\\) \\(T(N)\\) grows exponentially</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N)\\)</p> <p>\\(O(N)\\)</p> <p>\\(O(N)\\)</p> \\[T(N)\\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/","title":"\u590d\u6742\u5ea6\u5206\u6790","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#week-2","title":"WEEK 2","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#13-compare-the-algorithms","title":"1.3 Compare the Algorithms","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#example","title":"[Example] \u6700\u5927\u5b50\u5e8f\u5217\u548c","text":"<p>Algorithm 1</p> C<pre><code>int  MaxSubsequenceSum ( const int A[ ],  int  N ) \n{ \n    int ThisSum, MaxSum, i, j, k; \n    MaxSum = 0;   /* initialize the maximum sum */\n    for( i = 0; i &lt; N; i++ )  /* start from A[ i ] */\n        for( j = i; j &lt; N; j++ ) {   /* end at A[ j ] */\n            ThisSum = 0; \n            for( k = i; k &lt;= j; k++ ) \n                ThisSum += A[ k ];  /* sum from A[ i ] to A[ j ] */\n            if ( ThisSum &gt; MaxSum ) \n                MaxSum = ThisSum;  /* update max sum */\n        }  /* end for-j and for-i */\n    return MaxSum; \n}\n</code></pre> \\[ T(N)=O(N^3) \\] <p>Algotithm 2</p> C<pre><code>int  MaxSubsequenceSum ( const int A[ ],  int  N ) \n{ \n    int ThisSum, MaxSum, i, j; \n    MaxSum = 0;   /* initialize the maximum sum */\n    for( i = 0; i &lt; N; i++ ) {   /* start from A[ i ] */\n        ThisSum = 0; \n        for( j = i; j &lt; N; j++ ) {   /* end at A[ j ] */\n            ThisSum += A[ j ];  /* sum from A[ i ] to A[ j ] */\n            if ( ThisSum &gt; MaxSum ) \n                MaxSum = ThisSum;  /* update max sum */\n        }  /* end for-j */\n    }  /* end for-i */\n    return MaxSum; \n} \n</code></pre> \\[ T(N)=O(N^2) \\] <p>Algorithm 3 Divide and Conquer  \u5206\u6cbb\u6cd5</p> C<pre><code>static int MaxSubSum(const int A[ ], int Left, int Right)\n{\n    int MaxLeftSum, MaxRightSum;\n    int MaxLeftBorderSum, MaxRightBorderSum;\n    int LeftBorderSum, RightBorderSum;\n    int Center, i;\n\n    if (Left == Right)\n        if (A[Left] &gt; 0)\n            return A[Left];\n        else\n            return 0;\n\n    Center = (Left + Right) / 2;\n    MaxLeftSum = MaxSubSum(A, Left, Center);\n    MaxRightSum = MaxSubSum(A, Center + 1, Right);\n\n    MaxLeftBorderSum = 0;\n    LeftBorderSum = 0;\n    for (i = Center; i &gt;= Left; i--)\n    {\n        LeftBorderSum += A[i];\n        if (LeftBorderSum &gt; MaxLeftBorderSum)\n            MaxLeftBorderSum = LeftBorderSum;\n    }\n\n    MaxRightBorderSum = 0;\n    RightBorderSum = 0;\n    for (i = Center+1; i &lt;= Right; i++)\n    {\n        RightBorderSum += A[i];\n        if (RightBorderSum &gt; MaxRightBorderSum)\n            MaxRightBorderSum = RightBorderSum;\n    }\n\n    return Max3(MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum);\n}\n\nint MaxSubsequenceSum(const int A[ ], int N)\n{\n    return MaxSubSum(A, 0, N - 1);\n}\n</code></pre> <p>$$ \\because T(N)=2T(\\frac N2)+cN\\quad T(1)=O(1)\\ T(\\frac N2)=2T(\\frac N {2^2})+c\\frac N2\\ \\cdots\\ T(1)=2T(\\frac N{2^k})+c\\frac N{2^{k-1}}\\ \\therefore T(N)=2^kT(\\frac N{2^k})+kcN=N\\cdot O(1)+cN\\log N $$ Algorithm 4 On-line Algorithm  \u5728\u7ebf\u7b97\u6cd5</p> C<pre><code>int MaxSubsequenceSum( const int  A[ ],  int  N ) \n{ \n    int ThisSum, MaxSum, j; \n    ThisSum = MaxSum = 0; \n    for ( j = 0; j &lt; N; j++ ) { \n        ThisSum += A[ j ]; \n        if ( ThisSum &gt; MaxSum ) \n            MaxSum = ThisSum; \n        else if ( ThisSum &lt; 0 ) \n            ThisSum = 0;\n    }  /* end for-j */\n    return MaxSum; \n} \n</code></pre> \\[ T(N)=O(N) \\] <ul> <li>A[ ] is scanned once only. \u626b\u63cf\u4e00\u6b21\uff0c\u65e0\u9700\u5b58\u50a8\uff08\u5904\u7406streaming data\uff09</li> <li>\u5728\u4efb\u610f\u65f6\u523b\uff0c\u7b97\u6cd5\u90fd\u80fd\u5bf9\u5b83\u5df2\u7ecf\u8bfb\u5165\u7684\u6570\u636e\u7ed9\u51fa\u5b50\u5e8f\u5217\u95ee\u9898\u7684\u6b63\u786e\u7b54\u6848(\u5176\u4ed6\u7b97\u6cd5\u4e0d\u5177\u6709\u8fd9\u4e2a\u7279\u6027)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#14-logrithms-in-the-running-time","title":"1.4 Logrithms in the Running Time","text":"<ul> <li>\u5982\u679c\u4e00\u4e2a\u7b97\u6cd5\u7528\u5e38\u6570\u65f6\u95f4\u5c06\u95ee\u9898\u7684\u5927\u5c0f\u524a\u51cf\u4e3a\u5176\u4e00\u90e8\u5206(\u901a\u5e38\u662f1/2)\uff0c\u90a3\u4e48\u8be5\u7b97\u6cd5\u5c31\u662f\\(O(logN)\\)\u7684</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#example-binary-search","title":"[Example] Binary Search","text":"C<pre><code>int BinarySearch ( const ElementType A[ ], ElementType X, int N ) \n{ \n    int  Low, Mid, High; \n    Low = 0;  High = N - 1; \n    while ( Low &lt;= High ) { \n        Mid = ( Low + High ) / 2; \n        if ( A[ Mid ] &lt; X ) \n            Low = Mid + 1; \n        else \n            if ( A[ Mid ] &gt; X ) \n                High = Mid - 1; \n            else \n                return  Mid; /* Found */ \n    }  /* end while */\n    return  NotFound; /* NotFound is defined as -1 */ \n} \n</code></pre> \\[ T_{worst}(N)=O(\\log N) \\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#example-euclids-algorithm","title":"[Example] Euclid\u2019s Algorithm","text":"C<pre><code>int Gcd(int M, int N)\n{\n    int Rem;\n\n    while (N &gt; 0)\n    {\n        Rem = M % N;\n        M = N;\n        N = Rem;\n    }\n    return M;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#example-efficient-exponentiation","title":"[Example] Efficient exponentiation","text":"C<pre><code>long int Pow(long int X, int N)\n{\n    if (N == 0) return 1;\n    if (N == 1) return X;\n    if (IsEven(N)) return Pow(X*X, N/2);/*return Pow(X, N/2)*Pow(X, N/2) affects the efficiency*/\n    else return Pow(X*X, N/2)*X; /*return Pow(X, N-1)*X is the same*/\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#15-checking-your-analysis","title":"1.5 Checking Your Analysis","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#method-1","title":"Method 1","text":"<p>When \\(T(N)=O(N)\\), check if \\(T(2N)/T(N)\\approx2\\)</p> <p>When \\(T(N)=O(N^2)\\), check if \\(T(2N)/T(N)\\approx4\\)</p> <p>When \\(T(N)=O(N^3)\\), check if \\(T(2N)/T(N)\\approx8\\)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#method-2","title":"Method 2","text":"<p>When \\(T(N)=O(f(N))\\), check if $\\lim\\limits_{N\\rightarrow\\infty}\\frac{T(N)}{f(N)}\\approx C $</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#2-list-stacks-and-queues","title":"2 LIst, Stacks and Queues","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#21-abstract-data-typeadt","title":"2.1 Abstract Data Type(ADT)  \u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#definition-data-type-objects-and-operations","title":"[Definition] Data Type = {Objects} and {Operations}","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#definition-an-abstract-data-typeadt-is-a-data-type-that-is-organized-in-such-a-way-that-the-specification-on-the-objects-and-specification-of-the-operations-on-the-objects-are-separated-from-the-representation-of-the-objects-and-the-implementation-on-the-operations","title":"[Definition] An Abstract Data Type(ADT) is a data type that is organized in such a way that the specification on the objects and specification of the operations on the objects are separated from the representation of the objects and the implementation on the operations.","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#22-the-list-adt","title":"2.2 The List ADT","text":"<ul> <li>Objects : N items</li> <li>Operations</li> <li>Finding the length</li> <li>Printing</li> <li>Making an empty</li> <li>Finding</li> <li>Inserting</li> <li>Deleting</li> <li>Finding next</li> <li>Finding previous</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#simple-array-implementation-of-lists","title":"Simple Array implementation of Lists","text":"<ul> <li> <p>Sequential mapping \u8fde\u7eed\u5b58\u50a8\uff0c\u8bbf\u95ee\u5feb</p> </li> <li> <p>Find_Kth take \\(O(1)\\) time.</p> </li> <li> <p>MaxSize has to be estimated.</p> </li> <li> <p>Insertion and Deletion not only take \\(O(N)\\) times, but also involve a lot of data movements which takes time.</p> </li> </ul> <p></p> <p>Query \u67e5\u8be2</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#linked-lists","title":"Linked Lists","text":"<ul> <li> <p>Location of nodes may change on differrent runs.</p> </li> <li> <p>Insertion \u5148\u8fde\u540e\u65ad</p> </li> <li> <p>Deletion \u5148\u8fde\u540e\u91ca\u653e</p> </li> <li> <p>\u9891\u7e41malloc\u548cfree\u7cfb\u7edf\u5f00\u9500\u8f83\u5927</p> </li> <li> <p>Finding take \\(O(N)\\) times.</p> </li> </ul> C<pre><code>/*Return true if L is empty*/\nint IsEmpty(List L)\n{\n  return L-&gt;Next == NULL;\n}\n</code></pre> C<pre><code>/*Return true if P is the last position in list L*/\n/*Parameter L is unused in this implementation*/\nint IsLast(Position P, List L)\n{\n  return P-&gt;Next == NULL;\n}\n</code></pre> C<pre><code>/*Return Position of X in L; NULL if not found*/\nPosition Find(Element X, List L)\n{\n  Position P;\n\n  P = L-&gt;Next;\n  while (P != NULL &amp;&amp; P-&gt;Element != X) P = P-&gt;Next;\n\n  return P;\n}\n</code></pre> C<pre><code>/*Delete first occurence of X from a list*/\n/*Assume use of a header node*/\nvoid Delete(ElementType X, List L)\n{\n  Position P, TmpCell;\n\n  P = FindPrevious(X, L);\n\n  if (!IsLast(P, L))\n  {\n      TmpCell = P-&gt;Next;\n      P-&gt;Next = TmpCell-&gt;Next;\n      free(TmpCell);\n  }\n}\n</code></pre> C<pre><code>/*If X is not found, then Next field of returned*/\n/*Assumes a header*/\nPosition FindPrevious(ElementType X, List L)\n{\n  Position P;\n\n  P = L;\n  while (P-&gt;Next != NULL &amp;&amp; P-&gt;Next-&gt;Element != X) P = P-&gt;Next;\n\n  return P;\n}\n</code></pre> C<pre><code>/*Insert (after legal position P)*/\n/*Header implementation assumed*/\n/*Parameter L is unused in this implementation*/\nvoid Insert(ElementType X, List L, Position P)\n{\n  Position TmpCell;\n\n  TmpCell = malloc(sizeof(struct Node));\n  if (TmpCell == NULL) FatalError(\"Out of space!\")\n\n  TmpCell-&gt;Element = X;\n  TmpeCell-&gt;Next = P-&gt;Next;\n  P-&gt;Next = TmpCell;\n}\n</code></pre> C<pre><code>void DeleteList(List L)\n{\n  Position P, Tmp;\n\n  P = L-&gt;Next;\n  L-&gt;Next = NULL;\n  while (P != NULL)\n  {\n      Tmp = P-&gt;Next;\n      free(P);\n      P = Tmp;\n  }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#doubly-linked-circular-lists","title":"Doubly Linked Circular Lists","text":"<ul> <li>Finding take \\(O(\\frac N 2)\\) times.</li> </ul> <p>The correct answer is D.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#two-applications","title":"Two Applications","text":"<ol> <li> <p>The Polynomial ADT</p> </li> <li> <p>Objects : </p> </li> <li> <p>Operations : </p> </li> <li>Finding degree</li> <li>Addition</li> <li>Subtraction</li> <li> <p>Multiplication</p> </li> <li> <p>Differentiation</p> </li> <li> <p>[Representation 1]</p> </li> </ol> C<pre><code>typedef struct {\n  int CoeffArray [ MaxDegree + 1 ] ;\n  int HighPower;\n}  *Polynomial ; \n</code></pre> C<pre><code>/*\u5c06\u591a\u9879\u5f0f\u521d\u59cb\u5316\u4e3a\u96f6*/\nvoid ZeroPolynomial(Polynomial Poly)\n{\n  int i;\n  for(i = O; i &lt;= MaxDegree; i++)\n      Poly-&gt;CoeffArray[ i ] = O;\n  Poly-&gt;HighPower = O;\n}\n</code></pre> C<pre><code>/*\u4e24\u4e2a\u591a\u9879\u5f0f\u76f8\u52a0*/\nvoid AddPolynomial(const Polynomial Poly1, const Polynomial Poly2, Polynomial PolySum)\n{\n    int i;\n\n    ZeroPolynomial(PolySum);\n  PolySum-&gt;HighPower = Max(Poly1-&gt;HighPower, Poly2-&gt;HighPower);\n\n    for (i = PolySum-&gt;HighPower; i &gt;= O; i--)\n      PolySum-&gt;CoeffArray[ i ] = Poly1-&gt;CoeffArray[ i ] + Poly2-&gt;CoeffArray[ i ];\n}\n</code></pre> C<pre><code>void MultPolynomial(const Polynomial Poly1, const Polynomial Poly2, Polynomial PolyProd)\n{\n    int i, j;\n\n    ZeroPolynomial (PolyProd);\n  PolyProd-&gt;HighPower = Poly1-&gt;HighPower + Poly2-&gt;HighPower;\n\n    if(PolyProd-&gt;HighPower &gt; MaxDegree)\n      Error(\"Exceeded array size\");\n  else\n      for(i = O; i &lt;= Poly1-&gt;HighPower; i++)\n          for(j = O; j &lt;= Poly2-&gt;HighPower; j++)\n              PolyProd-&gt;CoeffArray[ i + j ] += Poly1-&gt;CoeffArray[ i ] * Poly2-&gt;CoeffArray[ j ];\n}\n</code></pre> <ul> <li>[Representation 2]</li> </ul> C<pre><code>typedef struct poly_node *poly_ptr;\nstruct poly_node{\n    int Coefficient;  /* assume coefficients are integers */\n    int Exponent;\n    poly_ptr Next;\n};\ntypedef poly_ptr a;    /* nodes sorted by exponent */\n</code></pre> <ul> <li> <p>\u53ea\u5b58\u50a8\u975e\u96f6\u9879</p> </li> <li> <p>Multilists</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK02/#cursor-implementation-of-linked-listsno-pointer","title":"Cursor Implementation of Linked Lists(no pointer)","text":"<p>#blender \u30a8\u30a4\u30b5\u30fc\u30fb\u30d1\u30eb\u30de\u30bf\u30e0 || Acer Palmatum - selescha.arts\u7684\u63d2\u753b - pixiv</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK03/","title":"\u94fe\u8868/\u6808/\u961f\u5217","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK03/#week-3","title":"WEEK 3","text":"<p>1\u3001\u6808\u7684\u94fe\u8868\u5b9e\u73b0\uff0cpush\uff0cpop\u548ctop\u8bed\u53e5</p> <p>2\u3001 </p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK03/#23-the-stack-adt","title":"2.3 The Stack ADT","text":"<ul> <li>Last-In-First-Out (LIFO)</li> <li>Objects : A finite ordered list with zero or more elements.</li> <li>Operations :</li> <li>IsEmpty</li> <li>CreatStack</li> <li>DisposeStack</li> <li>MakeEmpty</li> <li>Push</li> <li>Top</li> <li>Pop</li> <li>A Pop(or Top) on an empty stack in an error in the stack ADT.</li> <li>Push on a full stack is an implementation error but not an ADT error.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK03/#linked-list-implementation-with-a-header-node","title":"Linked List Implementation (with a header node)","text":"<ul> <li>The calls to malloc and free are expensive. Simply keep another stack as a recycle bin.</li> </ul> C<pre><code>int IsEmpty(Stack S)\n{\n  return S-&gt;Next == NULL;\n}\n</code></pre> C<pre><code>Stack CreateStack(void)\n{\n  Stack S;\n  S = malloc(sizeof(struct Node));\n  if (S == NULL)\n      Fatal Error(\"Out of space!\");\n  S-&gt;Next == NULL;\n  MakeEmpty(S);\n  return S;\n}\n\nvoid MakeEmpty(Stack S)\n{\n  if (S == NULL)\n      Error(\"Must use CreateStack first\");\n  else\n      while(!IsEmpty(S)) Pop(S);\n}\n</code></pre> C<pre><code>void Push(ElementType X, Stack S)\n{\n  PtrToNode TmpCell;\n  TmpCell = malloc(sizeof(struct Node));\n  if (TmpCell == NULL)\n      Fatal Error(\"Out of space!\") ;\n  else\n  {\n      TmpCell-&gt;Element = X;\n      TmpCe11-&gt;Next = S-&gt;Next;\n      S-&gt;Next = TmpCell;\n  }\n}\n</code></pre> C<pre><code>ElementType Top(Stack S)\n{\n  if(!IsEmpty(S))\n      return S-&gt;Next-&gt;Element;\n  Error(\"Empty stack\") ;\n  return O; /* Return value used to avoid warning*/\n}\n</code></pre> C<pre><code>void Pop(Stack s)\n{\n  PtrToNode FirstCell;\n  if(IsEmpty(S))\n      Error(\"Empty stack\") ;\n  else\n  {\n      FirstCe11 = S-&gt;Next;\n      S-&gt;Next = S-&gt;Next-&gt;Next;\n      free(FirstCe11);\n  }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK03/#array-implementation-of-stacks","title":"Array Implementation of Stacks","text":"C<pre><code>struct StackRecord {\n    int Capacity;          /* size of stack */\n    int TopOfStack;        /* the top pointer */\n    /* ++ for push, -- for pop, -1 for empty stack */\n    ElementType *Array;    /* array for stack elements */\n}; \n</code></pre> <ul> <li> <p>The stack model must be well encapsulated(\u5c01\u88c5).  That is, no part of your code, except for the stack routines, can attempt to access the Array or TopOfStack variable.</p> </li> <li> <p>Error check must be done before Push or Pop (Top).</p> </li> </ul> C<pre><code>Stack CreateStack(int MaxElements)\n{\n  Stack S;\n  if(MaxElements &lt; MinStackSize)\n  Error(\"Stack size is too small\") ;\n  S = malloc(sizeof(struct StackRecord));\n  if (S == NULL)\n      Fatal Error(\"Out of space!!!\") ;\n\n  S-&gt;Array = malloc(sizeof(ElementType) * MaxElements) ;\n  if(S-&gt;Array = NULL)\n      Fatal Error(\"Out of space!!!\");\n  S-&gt;Capacity = MaxElements;\n  MakeEmpty(S) ;\n  return S;\n}\n</code></pre> C<pre><code>void DisposeStack(Stack S)\n{\n  if(S != NULL)\n  {\n      free(S-&gt;Array);\n      free(S);\n  }\n}\n</code></pre> C<pre><code>int IsEmpty(Stack S)\n{\n  return S-&gt;TopOfStack == EmptyTOS;\n}\n</code></pre> C<pre><code>void MakeEmpty(Stack S)\n{\n  S-&gt;TopOfStack = EmptyTOS;\n}\n</code></pre> C<pre><code>void Push(ElementType X, Stack S)\n{\n  if (IsFull(S))\n      Error(\"Full stack\");\n  else\n      S-&gt;Array[ ++S-&gt;TopOfStack ] = X;\n}\n</code></pre> C<pre><code>ElementType Top(Stack S)\n{\n  if(! IsEmpty(S))\n      return S-&gt;Array[ S-&gt;TopOfStack ];\n  Error(\"Empty stack\") ;\n  return O; /* Return value used to avoid warning*/\n}\n</code></pre> C<pre><code>void Pop(Stack S)\n{\n  if(IsEmpty(S))\n      Error(\"Empty stack\") ;\n  else\n      S-&gt;TopOfStack--;\n}\n</code></pre> C<pre><code>ElementType TopAndPop(Stack S)\n{\n  if(!Is Empty(S))\n      return S-&gt;Array[ S-&gt;TopOfStack-- ];\n  Error(\"Empty stack\");\n  return O; /* Return value used to avoid warnin */\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK03/#application","title":"Application","text":"<ol> <li>Balancing Symbols</li> </ol> <p>\u68c0\u67e5\u62ec\u53f7\u662f\u5426\u5e73\u8861</p> Text Only<pre><code>Algorithm  {\n    Make an empty stack S;\n    while (read in a character c) {\n        if (c is an opening symbol)\n            Push(c, S);\n        else if (c is a closing symbol) {\n            if (S is empty)  { ERROR; exit; }\n            else  {  /* stack is okay */\n                if  (Top(S) doesn\u2019t match c)  { ERROR, exit; }\n                else  Pop(S);\n            }  /* end else-stack is okay */\n        }  /* end else-if-closing symbol */\n    } /* end while-loop */ \n    if (S is not empty)  ERROR;\n}\n</code></pre> <ol> <li> <p>Postfix Evaluation \u540e\u7f00\u8868\u8fbe\u5f0f</p> </li> <li> <p>Infix to Postfix Conversion</p> </li> <li> <p>\u8bfb\u5230\u4e00\u4e2a\u64cd\u4f5c\u6570\u65f6\u7acb\u5373\u628a\u5b83\u653e\u5230\u8f93\u51fa\u4e2d</p> </li> <li>\u8bfb\u5230\u4e00\u4e2a\u64cd\u4f5c\u7b26\u65f6\u4ece\u6808\u4e2d\u5f39\u51fa\u6808\u5143\u7d20\u76f4\u5230\u53d1\u73b0\u4f18\u5148\u7ea7\u66f4\u4f4e\u7684\u5143\u7d20\u4e3a\u6b62\uff0c\u518d\u5c06\u64cd\u4f5c\u7b26\u538b\u5165\u6808\u4e2d</li> <li>The order of operands is the same in infix and postfix.</li> <li>Operators with higher precedence appear before those with lower precedence.</li> <li>Never pop a \u2019(\u2018 from the stack except when processing a \u2018)\u2019.</li> <li>When \u2018(\u2019 is not in the stack, its precedence is the highest; but when it is in the stack, its precedence is the lowest. </li> <li> <p>Exponentiation associates right to left.</p> </li> <li> <p>Function Calls (System Stack)</p> <p></p> <p>Note : Recursion can always be completely removed. Non recursive programs are generally faster than equivalent recursive programs. However, recursive programs are in general much simpler and easier to understand.</p> </li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK03/#24-the-queue-adt","title":"2.4 The Queue ADT","text":"<ul> <li>First-In-First-Out (FIFO)</li> <li>Objects : A finite ordered list with zero or more elements.</li> <li>Operations : </li> <li>IsEmpty</li> <li>CreatQueue</li> <li>DisposeQueue</li> <li>MakeEmpty</li> <li>Enqueue</li> <li>Front</li> <li>Dequeue</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK03/#array-implementation-of-queues","title":"Array Implementation of Queues","text":"C<pre><code>struct QueueRecord {\n    int Capacity ;       /* max size of queue */\n    int Front;           /* the front pointer */\n    int Rear;            /* the rear pointer */\n    int Size;            /* Optional - the current size of queue */\n    ElementType *Array;  /* array for queue elements */\n }; \n</code></pre> <p>Circular Queue :</p> <p></p> <ul> <li>The maximum capacity of this queue is 5.</li> </ul> <p>Note : Adding a Size field can avoid wasting one empty space to distinguish \u201cfull\u201d from \u201cempty\u201d.  </p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/","title":"\u6811\u7684\u5b9a\u4e49\u4e0e\u904d\u5386","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#week-4","title":"WEEK 4","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#3-trees","title":"3 Trees","text":"<p>\u5927\u7eb2\uff1a</p> <p>\u6811\u7684\u5b9a\u4e49\u662f\u9012\u5f52\u7684\uff0c\u6709\u6839\u8282\u70b9\u548c\u4ece\u5176\u51fa\u53d1\u7684\u6709\u5411\u8fb9\uff0c\u8fde\u5411\u6240\u6709\u7684\u5b50\u6811</p> <p>\u6811\u7684\u6027\u8d28\uff0cn\u4e2a\u8282\u70b9n-1\u6761\u8fb9\u6709\u6839\u8282\u70b9</p> <p>\u4e8c\u53c9\u6811\uff1a</p> <p>\u6811\u7684\u904d\u5386 \u56db\u79cd\u904d\u5386\u987a\u5e8f\uff0c\u5c42\u5e8f\u904d\u5386</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#31-preliminaries","title":"3.1 Preliminaries","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#definition-a-tree-is-a-collection-of-nodes-the-collection-can-be-empty-otherwise-a-tree-consists-of-1-a-distinguished-node-r-called-the-root-2-and-zero-or-more-nonempty-subtrees-each-of-whose-roots-are-connected-by-a-directed-edge-from-r","title":"[Definition] A tree is a  collection of nodes. The collection can be empty; otherwise, a tree consists of (1)  a distinguished node r, called the root; (2) and zero or more nonempty (sub)trees, each of whose roots are connected by a directed edge from r.","text":"<ul> <li> <p>Subtrees must not connect together.  Therefore every node in the tree is the root of some subtree.</p> </li> <li> <p>There are N-1 edges in a tree with N nodes</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#terminologies","title":"Terminologies","text":"<ul> <li>degree of a node : \u7ed3\u70b9\u7684\u5b50\u6811\u4e2a\u6570</li> <li>degree of a tree : \u7ed3\u70b9\u7684\u5ea6\u7684\u6700\u5927\u503c</li> <li>parent : \u6709\u5b50\u6811\u7684\u7ed3\u70b9</li> <li>children : the roots of the subtrees of a parent</li> <li>siblings : children of the same parent</li> <li>leaf(terminal node) : a node with degree 0(no children)</li> <li>path from \\(n_1\\) to \\(n_k\\) : a unique sequence of nodes \\(n_1,n_2,\\cdots,n_k\\) such that \\(n_i\\) is the parent of \\(n_{i+1}\\) for \\(1\\leq i&lt;k\\) </li> <li>length of path : \u8def\u5f84\u4e0a\u8fb9\u7684\u6761\u6570</li> <li>depth of \\(n_i\\) : \u4ece\u6839\u7ed3\u70b9\u5230\\(n_i\\)\u7ed3\u70b9\u7684\u8def\u5f84\u7684\u957f\u5ea6(\\(Depth(root)=0\\))</li> <li>height of \\(n_i\\) : \u4ece\\(n_i\\)\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6(\\(Height(leaf)=0\\))</li> <li>height/depth of a tree : \u6839\u7ed3\u70b9\u7684\u9ad8\u5ea6/\u6700\u6df1\u7684\u53f6\u7ed3\u70b9\u7684\u6df1\u5ea6</li> <li>ancestors of a node : \u4ece\u6b64\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9</li> <li>descendants of a node : \u6b64\u7ed3\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u7ed3\u70b9</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#list-representation","title":"List Representation","text":"<ul> <li>The size of each node depends on the number of branches.</li> </ul> <p>The correct answer is T.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#firstchild-nextsibling-representation","title":"FirstChild-NextSibling Representation","text":"<ul> <li>The representation is not unique since the children in a tree can be of any order.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#32-binary-trees","title":"3.2 Binary Trees","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#definition-a-binary-tree-is-a-tree-in-which-no-node-can-have-more-than-two-children","title":"[Definition] A binary tree is a tree in which no node can have more than two children.","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#tree-traversals-visit-each-node-exactly-once","title":"Tree Traversals (visit each node exactly once)","text":"<p>\u7ebf\u6027\u590d\u6742\u5ea6\\(O(n)\\)\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u53ea\u8bbf\u95ee\u4e00\u6b21</p> <p>\u904d\u5386\u4e0d\u6539\u53d8\u64cd\u4f5c\u6570\u7684\u987a\u5e8f</p> <p>visit\uff08\u53ef\u4ee5\u662fprint\uff09</p> <ol> <li>Preorder Traversal \u5148\u5904\u7406\u6839\u8282\u70b9\uff0c\u518d\u5904\u7406\u5de6\u53f3\u8282\u70b9\uff0c\u56e0\u6b64preorder\u4e2d\u7b2c\u4e00\u4e2a\u904d\u5386\u5230\u7684\u4e3a\u6839\u8282\u70b9</li> </ol> Text Only<pre><code>void preorder( tree_ptr tree )\n{ \n    if( tree )   \n    {\n        visit ( tree );\n        for (each child C of tree )\n            preorder ( C );\n    }\n}\n</code></pre> <ol> <li>Postorder Traversal\u5148\u5904\u7406\u5de6\u53f3\u5b50\u6811\uff0c\u6839\u8282\u70b9\u6700\u540e\u8fd4\u56de\uff0c\u56e0\u6b64postorder\u4e2d\u6839\u8282\u70b9\u6700\u540e\u8fd4\u56de</li> </ol> Text Only<pre><code>void postorder( tree_ptr tree )\n{  \n if( tree )   \n {\n        for (each child C of tree )\n         postorder ( C );\n        visit ( tree );\n    }\n}\n</code></pre> <ol> <li>Levelorder Traversal \u5c42\u5e8f\u904d\u5386\uff0c\u4f7f\u7528\u4e00\u4e2aqueue</li> </ol> Text Only<pre><code>void levelorder( tree_ptr tree )\n{   \n enqueue ( tree );\n    while (queue is not empty) \n    {\n        visit ( T = dequeue ( ) );\n        for (each child C of T )\n            enqueue ( C );\n    }\n}\n</code></pre> <ol> <li>Inorder Traversal \u8fd4\u56de\u987a\u5e8f\u4e3a\u5de6\u3001\u6839\u3001\u53f3\uff0c\u4e2d\u5e8f\u904d\u5386\u6700\u4e3a\u5173\u952e</li> </ol> Text Only<pre><code>void inorder( tree_ptr  tree )\n{  \n     if( tree )   \n {\n     inorder ( tree-&gt;Left );\n         visit ( tree-&gt;Element );\n         inorder ( tree-&gt;Right );\n   }\n}\n</code></pre> <p>Iterative Program : \u4f7f\u7528\u81ea\u5df1\u5b9a\u4e49\u7684\u6808\u66ff\u6362\u7cfb\u7edf\u7684\u6808\uff0c\u5b9e\u73b0\u4e2d\u5e8f\u904d\u5386</p> <p>leftmost \u7684\u5de6\u8282\u70b9\u548crightmost\u7684\u53f3\u8282\u70b9\u90fd\u662fNULL</p> Text Only<pre><code>void iter_inorder( tree_ptr tree )\n{ \n Stack  S = CreateStack( MAX_SIZE );\n for ( ; ; )  \n {\n     for ( ; tree; tree = tree-&gt;Left )\n         Push ( tree, S );\n         tree = Top ( S );  \n         Pop( S );\n         if ( !tree ) break;\n         visit ( tree-&gt;Element );\n         tree = tree-&gt;Right; \n    }\n}\n</code></pre> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK04/#threaded-binary-trees","title":"Threaded Binary Trees","text":"<ul> <li> <p>A full binary tree with \\(n\\) nodes has \\(2n\\) links, and \\(n+1\\) of them are NULL.</p> </li> <li> <p>Replace the NULL links by \u201cthreads\u201d which will make traversals easier.</p> </li> </ul> <p>Rules :</p> <ul> <li>If Tree-&gt;Left is null, replace it with a pointer to the inorder predecessor(\u4e2d\u5e8f\u524d\u9a71) of Tree.</li> <li>leftmost\u7684left\u6307\u9488\u7531\u4e8e\u6ca1\u6709\u4e2d\u5e8f\u524d\u9a71\uff08\u4e2d\u5e8f\u904d\u5386\u4e2d\u6700\u5148\u8fd4\u56de\u7684\u8282\u70b9\uff09\uff0c\u6240\u4ee5\u6307\u5411head node</li> <li>If Tree-&gt;Right is null, replace it with a pointer to the inorder successor(\u4e2d\u5e8f\u540e\u7ee7) of Tree.</li> <li>\u540c\u7406\uff0crightmost\u7684right\u7531\u4e8e\u6ca1\u6709\u4e2d\u5e8f\u540e\u7ee7\uff08\u4e2d\u5e8f\u904d\u5386\u4e2d\u6700\u540e\u8fd4\u56de\u7684\u8282\u70b9\uff09\uff0c\u6240\u4ee5\u4e5f\u6307\u5411head node</li> <li>There must not be any loose threads.  Therefore a threaded binary tree must have a head node of which the left child points to the first node.\uff08\u53f3\u8282\u70b9\u6307\u9488\u6307\u5411\u81ea\u8eab\uff09</li> </ul> C<pre><code>typedef struct ThreadedTreeNode *PtrToThreadedNode;\ntypedef struct PtrToThreadedNode ThreadedTree;\ntypedef struct ThreadedTreeNode \n{\n    int LeftThread;        /* if it is TRUE, then Left */\n    ThreadedTree Left;     /* is a thread, not a child ptr.*/\n    ElementType Element;\n    int RightThread;       /* if it is TRUE, then Right */\n    ThreadedTree Right;    /* is a thread, not a child ptr.*/\n}\n</code></pre> <ul> <li>\u7ebf\u7d22\u5316\u7684\u5b9e\u8d28\u5c31\u662f\u5c06\u4e8c\u53c9\u94fe\u8868\u4e2d\u7684\u7a7a\u6307\u9488\u6539\u4e3a\u6307\u5411\u524d\u9a71\u6216\u540e\u7ee7\u7684\u7ebf\u7d22\u3002\u7531\u4e8e\u524d\u9a71\u548c\u540e\u7ee7\u4fe1\u606f\u53ea\u6709\u5728\u904d\u5386\u8be5\u4e8c\u53c9\u6811\u65f6\u624d\u80fd\u5f97\u5230\uff0c\u6240\u4ee5\uff0c\u7ebf\u7d22\u5316\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u4fee\u6539\u7a7a\u6307\u9488\u7684\u8fc7\u7a0b\u3002</li> </ul> <p></p> C<pre><code>int maxDepth(struct TreeNode* root) {\n    // \u7a7a\u6811\u7684\u6df1\u5ea6\u4e3a0\n    if (root == NULL) {\n        return 0;\n    }\n\n    // \u5206\u522b\u8ba1\u7b97\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\n    int leftDepth = maxDepth(root-&gt;left);\n    int rightDepth = maxDepth(root-&gt;right);\n\n    // \u8fd4\u56de\u5de6\u53f3\u5b50\u6811\u6df1\u5ea6\u7684\u8f83\u5927\u503c\u52a01\n    return (leftDepth &gt; rightDepth ? leftDepth : rightDepth) + 1;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK05/","title":"\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK05/#week-5","title":"WEEK 5","text":"<ul> <li>In a tree, the order of children does not matter. But in a binary tree, left child and right child are different.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK05/#properties-of-binary-trees","title":"Properties of Binary Trees","text":"<ul> <li>The maximum number of nodes on level \\(i\\) is \\(2^{i-1},i\\geq1\\).</li> <li>The maximum number of nodes in a binary tree of depth \\(k\\) is \\(2^k-1,k\\geq1\\).</li> <li>For any nonempty binary tree, \\(n_0 = n_2 + 1\\) where \\(n_0\\) is the number of leaf nodes and \\(n_2\\) is the number of nodes of degree 2.</li> </ul> <p>proof:   \u5047\u8bbe\u8be5\u4e8c\u53c9\u6811\u603b\u5171\u6709n\u4e2a\u7ed3\u70b9(\\(n =n_0+n_1+n_2\\))\uff0c\u5219\u8be5\u4e8c\u53c9\u6811\u603b\u5171\u4f1a\u6709n-1\u6761\u8fb9\uff0c\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u4f1a\u5ef6\u4f38\u51fa\u4e24\u6761\u8fb9\uff0c</p> <p>\u540c\u7406\uff0c\u5ea6\u4e3a1\u7684\u7ed3\u70b9\u4f1a\u5ef6\u4f38\u51fa\u4e00\u6761\u8fb9\uff0c\u5219\u53ef\u5217\u516c\u5f0f\uff1a$n-1 = 2n_2 + n_1 $\uff0c</p> <p>\u5408\u5e76\u4e24\u4e2a\u5f0f\u5b50\u53ef\u5f97\uff1a\\(2n_2 + n_1 +1 =n_0 + n_1 + n_2\\) \uff0c\u5219\u8ba1\u7b97\u53ef\u77e5 \\(n_0=n_2+1\\)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK05/#33-binary-search-trees","title":"3.3 Binary Search Trees","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK05/#definition-a-binary-search-tree-is-a-binary-tree-it-may-be-empty-if-it-is-not-empty-it-satisfies-the-following-properties","title":"[Definition] A binary search tree is a binary tree.  It may be empty.  If it is not empty, it satisfies the following properties:","text":"<ul> <li>\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e00\u4e2a\u4e92\u4e0d\u4e0d\u540c\u7684\u503c</li> <li>\u82e5\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u6839\u7ed3\u70b9\u7684\u503c</li> <li>\u82e5\u53f3\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u6839\u7ed3\u70b9\u7684\u503c</li> <li>\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u662f\u662f\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK05/#adt","title":"ADT","text":"<ul> <li>Objects : A finite ordered list with zero or more elements.</li> <li>Operations :</li> <li>SearchTree  MakeEmpty( SearchTree T )</li> <li>Position  Find( ElementType X, SearchTree T )</li> <li>Position  FindMin( SearchTree T )</li> <li>Position  FindMax( SearchTree T )</li> <li>SearchTree  Insert( ElementType X, SearchTree T )</li> <li>SearchTree  Delete( ElementType X, SearchTree T )</li> <li>ElementType  Retrieve( Position P )</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK05/#implementations","title":"Implementations","text":"<ol> <li>Find</li> </ol> Text Only<pre><code>Position Find( ElementType X, SearchTree T ) \n{ \n if ( T == NULL ) \n     return NULL;  /* not found in an empty tree */\n    if ( X &lt; T-&gt;Element )  /* if smaller than root */\n        return Find( X, T-&gt;Left );  /* search left subtree */\n    else \n     if ( X &gt; T-&gt;Element )  /* if larger than root */\n         return  Find( X, T-&gt;Right );  /* search right subtree */\n        else   /* if X == root */\n         return  T;  /* found */\n} \n</code></pre> <ul> <li>\\(T(N)=S(N)=O(d)\\) where \\(d\\) is the depth of X</li> </ul> <p>Iterative program :</p> Text Only<pre><code>Position Iter_Find( ElementType X, SearchTree T ) \n{ \n while ( T )\n {\n     if ( X == T-&gt;Element )  \n         return T;  /* found */\n        if ( X &lt; T-&gt;Element )\n            T = T-&gt;Left; /*move down along left path */\n        else\n             T = T-&gt; Right; /* move down along right path */\n    }  /* end while-loop */\n    return NULL;   /* not found */\n} \n</code></pre> <ol> <li>FindMin</li> </ol> Text Only<pre><code>Position FindMin( SearchTree T ) \n{ \n if ( T == NULL )   \n     return NULL; /* not found in an empty tree */\n    else \n        if ( T-&gt;Left == NULL ) return T;  /* found left most */\n        else return FindMin( T-&gt;Left );   /* keep moving to left */\n} \n</code></pre> <ol> <li>FindMax</li> </ol> Text Only<pre><code>Position FindMax( SearchTree T ) \n{ \n if ( T != NULL ) \n     while ( T-&gt;Right != NULL )   \n         T = T-&gt;Right;   /* keep moving to find right most */\n    return T;  /* return NULL or the right most */\n} \n</code></pre> <ol> <li>Insert</li> </ol> Text Only<pre><code>SearchTree Insert( ElementType X, SearchTree T ) \n{ \n    if ( T == NULL ) /* Create and return a one-node tree */ \n    { \n     T = malloc( sizeof( struct TreeNode ) ); \n     if ( T == NULL ) \n         FatalError( \"Out of space!!!\" ); \n     else \n     { \n         T-&gt;Element = X; \n         T-&gt;Left = T-&gt;Right = NULL; \n     } \n    }  /* End creating a one-node tree */\n    else  /* If there is a tree */\n         if ( X &lt; T-&gt;Element ) \n         T-&gt;Left = Insert( X, T-&gt;Left ); \n     else \n         if ( X &gt; T-&gt;Element ) \n             T-&gt;Right = Insert( X, T-&gt;Right ); \n     /* Else X is in the tree already; we'll do nothing */ \n    return  T;   /* Do not forget this line!! */ \n}\n</code></pre> <ul> <li>\u5185\u5b58\u8d8a\u754c\u540e\u4e0d\u4f1a\u9a6c\u4e0a\u62a5\u9519\uff0c\u5728\u4e0b\u4e00\u6b21free\u6216malloc\u65f6\u4f1a\u5931\u8d25</li> <li>Handle duplicated keys</li> <li> <p>\\(T(N)=O(d)\\)</p> </li> <li> <p>Delete</p> </li> <li> <p>Delete a leaf node : Reset its parent link to NULL</p> </li> <li>Delete a degree 1 node : Replace the node by its single child</li> <li>Delete a degree 2 node : \u7528\u5de6\u5b50\u6811\u6700\u5927\u503c\u7ed3\u70b9\u6216\u53f3\u5b50\u6811\u6700\u5c0f\u503c\u7ed3\u70b9\u66ff\u6362</li> </ul> Text Only<pre><code>SearchTree Delete( ElementType X, SearchTree T ) \n{    \n Position TmpCell; \n    if ( T == NULL ) Error( \"Element not found\" ); \n    else if ( X &lt; T-&gt;Element )  /* Go left */ \n     T-&gt;Left = Delete( X, T-&gt;Left ); \n    else if ( X &gt; T-&gt;Element )  /* Go right */ \n     T-&gt;Right = Delete( X, T-&gt;Right ); \n else  /* Found element to be deleted */ \n     if ( T-&gt;Left &amp;&amp; T-&gt;Right ) {  /* Two children */ \n     /* Replace with smallest in right subtree */ \n         TmpCell = FindMin( T-&gt;Right ); \n         T-&gt;Element = TmpCell-&gt;Element; \n         T-&gt;Right = Delete( T-&gt;Element, T-&gt;Right );  } /* End if */\n     else \n     {  /* One or zero child */ \n         TmpCell = T; \n         if ( T-&gt;Left == NULL ) /* Also handles 0 child */ \n             T = T-&gt;Right; \n         else if ( T-&gt;Right == NULL )  \n             T = T-&gt;Left; \n         free( TmpCell );  \n      }  /* End else 1 or 0 child */\n      return  T; \n}\n</code></pre> <ul> <li>\\(T(N)=O(d)\\)</li> </ul> <p>Note : If there are not many deletions, then lazy deletion may be employed: add a flag field to each node, to mark if a node is active or is deleted.  Therefore we can delete a node without actually freeing the space of that node.  If a deleted key is reinserted, we won\u2019t have to call malloc again.</p> <ol> <li> <p>Average-Case Analysis</p> </li> <li> <p>The average depth over all nodes in a tree is \\(O(logN)\\) on the assumption that all trees are equally likely.</p> </li> <li>\u5c06\\(n\\)\u4e2a\u5143\u7d20\u5b58\u5165\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6811\u7684\u9ad8\u5ea6\u5c06\u7531\u63d2\u5165\u5e8f\u5217\u51b3\u5b9a</li> </ol> <p></p> <p>The correct answer is A.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/","title":"\u4f18\u5148\u961f\u5217(heap)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#week-6","title":"WEEK 6","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#4-priority-queues-heaps","title":"4 \u5806  Priority Queues (Heaps)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#41-adt-model","title":"4.1 ADT Model","text":"<ul> <li>Objects :A finite ordered list with zero or more elements.</li> <li>Operations :</li> <li>PriorityQueue  Initialize( int MaxElements ); </li> <li>void  Insert( ElementType X, PriorityQueue H ); </li> <li>ElementType  DeleteMin( PriorityQueue H ); </li> <li>ElementType  FindMin( PriorityQueue H ); </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#42-implementations","title":"4.2 Implementations","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#array","title":"Array","text":"<ul> <li> <p>Insertion \u2014 add one item at the end ~\\(\\Theta(1)\\)</p> </li> <li> <p>Deletion \u2014 find the largest / smallest key ~\\(\\Theta(n)\\)</p> </li> </ul> <p>\u200b                     remove the item and shift array ~\\(O(n)\\)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#linked-list","title":"Linked List","text":"<ul> <li> <p>Insertion \u2014 add to the front of the chain ~\\(\\Theta(1)\\)</p> </li> <li> <p>Deletion \u2014 find the largest / smallest key ~\\(\\Theta(n)\\)</p> </li> </ul> <p>\u200b                      remove the item ~\\(\\Theta(1)\\)</p> <ul> <li>Never more deletions than insertions</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#ordered-array","title":"Ordered Array","text":"<ul> <li>Insertion \u2014 find the proper position ~\\(O(\\log n)\\)</li> </ul> <p>\u200b                      shift array and add the item  ~\\(O(n)\\)</p> <ul> <li>Deletion \u2014 remove the first / last item ~\\(\\Theta(1)\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#ordered-linked-list","title":"Ordered Linked List","text":"<ul> <li>Insertion \u2014 find the proper position ~\\(O(n)\\)</li> </ul> <p>\u200b                      add the item  ~\\(\\Theta(1)\\)</p> <ul> <li>Deletion \u2014 remove the first / last item ~\\(\\Theta(1)\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#binary-search-tree","title":"Binary Search Tree","text":"<ul> <li>Both insertion and deletion will take \\(O(\\log N)\\) only.</li> <li>Only delete the the minimum element, always delete from the left subtrees.</li> <li>Keep a balanced tree </li> <li>But there are many operations related to AVL tree that we don't really need for a priority queue.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#43-binary-heap","title":"4.3 Binary Heap","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#structure-property","title":"Structure Property","text":"<p>[Definition] A binary tree with \\(n\\) nodes and height \\(h\\) is complete  if  its nodes correspond to the nodes numbered from \\(1\\) to \\(n\\) in the perfect binary tree of height \\(h\\).</p> <ul> <li> <p>A complete binary tree of height \\(h\\) has between \\(2^h\\) and \\(2^{h+1}-1\\) nodes.</p> </li> <li> <p>\\(h=\\lfloor\\log N\\rfloor\\)</p> </li> <li> <p>Array Representation : BT[n + 1]  ( BT[0] is not used)</p> </li> </ul> <p></p> <p>[Lemma] </p> <ol> <li>\\(index\\,of\\,parent(i)=\\left\\{    \\begin{array}{rcl}    \\lfloor i/2\\rfloor &amp;&amp; {i\\neq1}\\\\    None &amp;&amp; {i=1}\\\\    \\end{array} \\right.\\)</li> <li>\\(index\\,of\\,left\\_child(i)=\\left\\{    \\begin{array}{rcl}    2i &amp;&amp; {2i\\leq n}\\\\    None &amp;&amp; {2i&gt;n}\\\\    \\end{array} \\right.\\)</li> <li>\\(index\\,of\\,right\\_child(i)=\\left\\{    \\begin{array}{rcl}    2i+1 &amp;&amp; {2i+1\\leq n}\\\\    None &amp;&amp; {2i+1&gt;n}\\\\    \\end{array} \\right.\\)</li> </ol> C<pre><code>PriorityQueue Initialize( int MaxElements ) \n{ \n    PriorityQueue H; \n    if ( MaxElements &lt; MinPQSize ) \n        return Error( \"Priority queue size is too small\" ); \n    H = malloc(sizeof( struct HeapStruct )); \n    if ( H == NULL ) \n        return FatalError( \"Out of space!!!\" ); \n    /* Allocate the array plus one extra for sentinel */ \n    H-&gt;Elements = malloc(( MaxElements + 1 ) * sizeof( ElementType )); \n    if ( H-&gt;Elements == NULL ) \n        return FatalError( \"Out of space!!!\" ); \n    H-&gt;Capacity = MaxElements; \n    H-&gt;Size = 0; \n    H-&gt;Elements[0] = MinData;  /* set the sentinel */\n    return H; \n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#heap-order-property","title":"Heap Order Property","text":"<p>[Definition] A min tree is a tree in which the key value in each node is no larger than the key values in its children (if any).  A min heap is a complete binary tree that is also a min tree.</p> <ul> <li>We can declare a max heap by changing the heap order property.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#basic-heap-operations","title":"Basic Heap Operations","text":"<ol> <li>Insertion</li> </ol> C<pre><code>/*H-&gt;Element[ 0 ] is a sentinel that is no larger than the minimum element in the heap.*/ \nvoid Insert( ElementType X, PriorityQueue H ) \n{ \n int i; \n    if ( IsFull( H )) \n    { \n     Error( \"Priority queue is full\" ); \n     return; \n    } \n    for ( i = ++H-&gt;Size; H-&gt;Elements[ i/2 ] &gt; X; i /= 2 ) \n     H-&gt;Elements[ i ] = H-&gt;Elements[ i/2 ]; /*Percolate up, faster than swap*/\n    H-&gt;Elements[ i ] = X; \n}\n</code></pre> <p>$$    T(N)=O(\\log N)    $$</p> <ol> <li>DeleteMin</li> </ol> <p></p>C<pre><code>ElementType DeleteMin( PriorityQueue H ) \n{ \n    int i, Child; \n    ElementType MinElement, LastElement; \n    if ( IsEmpty( H ) ) \n    { \n        Error( \"Priority queue is empty\" ); \n        return H-&gt;Elements[ 0 ];   \n    } \n    MinElement = H-&gt;Elements[ 1 ];  /*Save the min element*/\n    LastElement = H-&gt;Elements[ H-&gt;Size-- ];  /*Take last and reset size*/\n    for ( i = 1; i * 2 &lt;= H-&gt;Size; i = Child )  /*Find smaller child*/ \n    {\n        Child = i * 2; \n        if (Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child+1] &lt; H-&gt;Elements[Child]) \n             Child++;     \n        if ( LastElement &gt; H-&gt;Elements[ Child ] )   /*Percolate one level*/ \n             H-&gt;Elements[ i ] = H-&gt;Elements[ Child ]; \n        else     \n         break;   /*Find the proper position*/\n    } \n    H-&gt;Elements[ i ] = LastElement; \n    return MinElement; \n}\n</code></pre> $$ T(N)=O(\\log N) $$"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#other-heap-operations","title":"Other Heap Operations","text":"<ul> <li> <p>\u67e5\u627e\u9664\u6700\u5c0f\u503c\u4e4b\u5916\u7684\u503c\u9700\u8981\u5bf9\u6574\u4e2a\u5806\u8fdb\u884c\u7ebf\u6027\u626b\u63cf</p> </li> <li> <p>DecreaseKey \u2014 Percolate up</p> </li> <li> <p>IncreaseKey \u2014 Percolate down</p> </li> <li> <p>Delete</p> </li> <li> <p>BuildHeap</p> </li> </ul> <p>\u5c06N \u4e2a\u5173\u952e\u5b57\u4ee5\u4efb\u610f\u987a\u5e8f\u653e\u5165\u6811\u4e2d\uff0c\u4fdd\u6301\u7ed3\u6784\u7279\u6027\uff0c\u518d\u6267\u884c\u4e0b\u6ee4</p> C<pre><code>for (i = N/2; i &gt; 0; i--)\n PercolateDown(i);\n</code></pre> <p>$$    T(N)=O(N)    $$</p> <p>[Theorem] For the perfect binary tree of height \\(h\\) containing \\(2^{h+1}-1\\) nodes, the sum of the heights of the nodes is \\(2^{h+1}-1-(h+1)\\).</p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#44-applications-of-priority-queues","title":"4.4 Applications of Priority Queues","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#heap-sort","title":"Heap Sort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#k","title":"\u67e5\u627e\u4e00\u4e2a\u5e8f\u5217\u4e2d\u7b2ck\u5c0f\u7684\u5143\u7d20","text":"<p>The function is to find the <code>K</code>-th smallest element in a list <code>A</code> of <code>N</code> elements.  The function <code>BuildMaxHeap(H, K)</code> is to arrange elements <code>H[1]</code> ... <code>H[K]</code> into a max-heap.  </p> C<pre><code>ElementType FindKthSmallest ( int A[], int N, int K )\n{   /* it is assumed that K&lt;=N */\n    ElementType *H;\n    int i, next, child;\n\n    H = (ElementType*)malloc((K+1)*sizeof(ElementType));\n    for ( i = 1; i &lt;= K; i++ ) H[i] = A[i-1];\n    BuildMaxHeap(H, K);\n\n    for ( next = K; next &lt; N; next++ ) {\n        H[0] = A[next];\n        if ( H[0] &lt; H[1] ) {\n            for ( i = 1; i*2 &lt;= K; i = child ) {\n                child = i*2;\n                if ( child != K &amp;&amp; H[child+1] &gt; H[child] ) child++;\n                if ( H[0] &lt; H[child] )\n                    H[i] = H[child];\n                else break;\n            }\n            H[i] = H[0];\n        }\n    }\n    return H[1];\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK06/#45-d-heaps-all-nodes-have-d-children","title":"4.5 \\(d\\)-Heaps \u2014 All nodes have \\(d\\) children","text":"<p>Note :</p> <ul> <li>DeleteMin will take \\(d-1\\) comparisons to find the smallest child. Hence the total time complexity would be \\(O(d \\log_d N)\\).</li> <li>2 or /2 is merely *a bit shift**, but *d or /d is not.</li> <li>When the priority queue is too large to fit entirely in main memory, a d-heap will become interesting.</li> </ul> <p></p> <p></p> <p>\u6b63\u786e\u7b54\u6848\u662f4\uff0c\u6ce8\u610f\u201cin the process\u201d</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/","title":"\u5e76\u67e5\u96c6","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#week-7","title":"WEEK 7","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#5-the-disjoint-set","title":"5 The Disjoint Set","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#51-equivalence-relations","title":"5.1 Equivalence Relations","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#definition-a-relation-r-is-defined-on-a-set-s-if-for-every-pair-of-elements-a-b-a-b-in-s-a-r-b-is-either-true-or-false-if-a-r-b-is-true-then-we-say-that-a-is-related-to-b","title":"[Definition] A relation R is defined on a set S if for every pair of elements (a, b), a, b \\(\\in\\) S, a R b is either true or false.  If a R b is true, then we say that a is related to b.","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#definition-a-relation-over-a-set-s-is-said-to-be-an-equivalence-relation-over-s-if-it-is-symmetric-reflexive-and-transitive-over-s","title":"[Definition] A relation, ~, over a set, S, is said to be an equivalence relation over S if it is symmetric, reflexive, and transitive over S.","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#definition-two-members-x-and-y-of-a-set-s-are-said-to-be-in-the-same-equivalence-class-if-x-y","title":"[Definition] Two members x and y of a set S are said to be in the same equivalence class if x ~ y.","text":"<p>\u5173\u7cfb\u7684\u51e0\u79cd\u7c7b\u578b \u81ea\u53cd\u5173\u7cfb\uff08reflexive\uff09 \u8bbe R\u662f A\u4e0a\u7684\u4e00\u4e2a\u4e8c\u5143\u5173\u7cfb\uff0c\u82e5\u5bf9\u4e8e A\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20 a\uff0c (a,a)\u90fd\u5c5e\u4e8e R\uff0c\u5219\u79f0 R\u4e3a\u81ea\u53cd\u5173\u7cfb\u3002</p> <p>\u975e\u81ea\u53cd\u5173\u7cfb\uff08irreflexive\uff09 \u8bbeR\u662fA\u4e0a\u7684\u5173\u7cfb\u3002\u82e5\u5bf9\u6240\u6709a\u2208A\uff0c\u5747\u6709(a\uff0ca)\u2208 R\uff0c\u5219\u79f0R\u662fA\u4e0a\u7684\u4e00\u4e2a\u81ea\u53cd\u5173\u7cfb</p> <p>\u5bf9\u79f0\u5173\u7cfb\uff08symmetric\uff09 \u96c6\u5408A\u4e0a\u7684\u4e8c\u5143\u5173\u7cfbR\uff0c\u5bf9\u4efb\u4f55a\uff0cb\u2208A\uff0c\u5f53aRb\u65f6\u6709bRa</p> <p>\u975e\u5bf9\u79f0\u5173\u7cfb\uff08asymmetric\uff09 \u96c6\u5408A\u4e0a\u7684\u4e8c\u5143\u5173\u7cfbR\uff0c\u5bf9\u4efb\u4f55a\uff0cb\u2208A\uff0c\u5f53aRb\u65f6\u6709bR a</p> <p>\u53cd\u5bf9\u79f0\u5173\u7cfb\uff08antisymmetric\uff09</p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#52-the-dynamic-equivalence-problem","title":"5.2 The Dynamic Equivalence Problem","text":"<ul> <li>Given an equivalence relation ~, decide for any a and b if a ~ b</li> </ul> Text Only<pre><code>Algorithm: (Union/Find)\n{\n  /* step 1: read the relations in */\n    Initialize N disjoint sets;\n    while ( read in a ~ b )\n    {\n      if ( !(Find(a) == Find(b)) )  /*Dynamic(on-line)*/\n          Union the two sets;\n    } /* end-while */\n    /* step 2: decide if a ~ b */\n    while ( read in a and b )\n        if ( Find(a) == Find(b) )\n          output( true );\n        else   \n          output( false );\n}\n</code></pre> <ul> <li>Elements of the sets : \\(1,2,3,\\cdots,N\\)</li> <li>Sets : \\(S_1,S_2,\\cdots\\,and\\,S_i\\bigcap S_j=\\emptyset\\,(if\\quad i\\neq j)\\)</li> <li> <p>Operations :</p> </li> <li> <p>Union( \\(i, j\\) ) = Replace \\(S_i\\) and \\(S_j\\) by \\(S=S_i\\bigcup S_j\\)</p> </li> <li>Find( \\(i\\) ) = Find the set \\(S_k\\) which contains the element \\(i\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#53-basic-data-structure","title":"5.3 Basic Data Structure","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#union-i-j","title":"Union( \\(i, j\\) )","text":"<ul> <li> <p>Make \\(S_i\\) a subtree of \\(S_j\\), or vice versa, that is to set the parent pointer of one of the roots to the other root.</p> </li> <li> <p>Implementation 1 :</p> </li> </ul> <p></p> <ul> <li> <p>Implementation 2 :</p> </li> <li> <p>The elements are numbered from 1 to N, hence they can be used as indices of an array.</p> </li> <li> <p>S[ element ] = the element\u2019s parent</p> </li> <li> <p>Note : S[ root ] = 0 and set name = root index</p> </li> <li>\u6570\u7ec4\u521d\u59cb\u5316\u5168\u90e8\u4e3a0</li> </ul> C<pre><code>void SetUnion(DisjSet S, SetType Rt1, SetType Rt2)\n{\n  S[Rt2] = Rt1;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#find-i","title":"Find( \\(i\\) )","text":"<ul> <li>Implementation 1 :</li> </ul> <ul> <li>Implementation 2 :</li> </ul> C<pre><code>SetType Find(ElementType X, DisjSet S)\n{\n  for ( ; S[X]&gt;0; X=S[X]);\n  return X;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#analysis","title":"Analysis","text":"<ul> <li>Union and find are always paired. Thus we consider the performance of a sequence of union-find operations.</li> </ul> Text Only<pre><code>Algorithm using union-find operations:\n{  \n    Initialize Si = { i }  for  i = 1, ..., 12 ;\n    for ( k = 1; k &lt;= 9; k++ )  /* for each pair i R j */\n    {\n        if ( Find( i ) != Find( j ) )\n            SetUnion( Find( i ), Find( j ) );\n    }\n}\n</code></pre> <ul> <li>Worst case : \\(T(N)=\\Theta(N^2)\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#54-smart-union-algorithms","title":"5.4 Smart Union Algorithms","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#union-by-size","title":"Union-by-Size","text":"<ul> <li> <p>Always change the smaller tree</p> </li> <li> <p>S[Root] = -size, initialized to be -1</p> </li> <li> <p>[Lemma] Let T be a tree created by union-by-size with N nodes, then \\(height(T)\\leq\\lfloor\\log_2N\\rfloor+1\\).</p> </li> </ul> <p>Proved by induction. Each element can have its set name changed at most \\(\\log_2N\\) times.</p> <ul> <li>Time complexity of \\(N\\) Union and \\(M\\) Find operations is now \\(O(N+M\\log_2N)\\).</li> </ul> C<pre><code>/* Assumes Rootl and Root2 are roots*/\nvoid SetUnion(DisjSet S, SetType Root1, SetType Root2)\n{\n    if (S[Root1] &lt;= S[Root2])\n    {\n        S[Root1] += S[Root2];\n        S[Root2] = Root1;\n    }\n    else\n    {\n        S[Root2] += S[Root1];\n        S[Root1] = Root2;\n    }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#union-by-height","title":"Union-by-Height","text":"<ul> <li>Always change the shallow tree</li> <li>\u4fdd\u8bc1\u6240\u6709\u7684\u6811\u7684\u6df1\u5ea6\u6700\u591a\u662f\\(O(logN)\\)</li> </ul> C<pre><code>/* Assumes Rootl and Root2 are roots*/\nvoid SetUnion(DisjSet S, SetType Root1, SetType Root2)\n{\n    if ( S[Root2] &lt; S[Root1])  /*Root2 is deeper set*/\n        S[Root1] = Root2;      /*Make Root2 new root*/\n    else\n    {\n        if (S[Root1] == S[Root2])  /*Same height*/\n            S[Root1]--;\n        S[Root2] = Root1;\n    }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#55-path-compression","title":"5.5 Path Compression","text":"<ul> <li>\u4eceX\u5230Root\u7684\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u4f7f\u5b83\u7684\u7236\u7ed3\u70b9\u53d8\u6210Root</li> </ul> C<pre><code>SetType Find( ElementType X, DisjSet S )\n{\n    if ( S[ X ] &lt;= 0 )    \n        return X;\n    else \n        return S[ X ] = Find( S[ X ], S );\n}\n</code></pre> C<pre><code>SetType Find( ElementType X, DisjSet S )\n{   \n    ElementType root, trail, lead;\n    for ( root = X; S[ root ] &gt; 0; root = S[ root ] );  /* find the root */\n    for ( trail = X; trail != root; trail = lead )\n    {\n        lead = S[ trail ];   \n        S[ trail ] = root;   \n    }  /* collapsing */\n    return root;\n}\n</code></pre> <ul> <li>Note : Not compatible with union-by-height since it changes the heights.  Just take \u201cheight\u201d as an estimated rank.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#56-worst-case-for-union-by-rank-and-path-compression","title":"5.6 Worst Case for Union-by-Rank and Path Compression","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#lemma-let-tmn-be-the-maximum-time-required-to-process-an-intermixed-sequence-of-mgeq-n-finds-and-n-1-unions-then-k_1malphamnleq-tmnleq-k_2malphamn-for-some-positive-constants-k_1-and-k_2","title":"[Lemma] Let \\(T(M,N)\\) be the maximum time required to process an intermixed sequence of \\(M\\geq N\\) finds and \\(N-1\\) unions, then \\(k_1M\\alpha(M,N)\\leq T(M,N)\\leq k_2M\\alpha(M,N)\\) for some positive constants \\(k_1\\) and \\(k_2\\).","text":"<ul> <li>Ackermann\u2019s Function   $$   A(i,j)=\\left{   \\begin{array}{rcl}   2^j &amp;&amp; {i=1,j\\geq1}\\   A(i-1,2) &amp;&amp; {i\\geq2,j=1}\\   A(i-1,A(i,j-1)) &amp;&amp; {i\\geq2,j\\geq2}\\   \\end{array} \\right.   $$</li> </ul> <p>$$   A(2,4)=2^{2^{2^{2^2}}}=2^{65536}   $$</p> <ul> <li>\\(\\alpha(M,N)=min\\{i\\geq1|A(i,\\lfloor M/N\\rfloor)&gt;\\log N\\}\\leq O(\\log^*N)\\leq4\\)</li> </ul> <p>\\(\\log^*N\\) (inverse Ackermann function) = number of times the logarithm is applied to \\(N\\) until the result \\(\\leq1\\).</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#_1","title":"\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK07/#57-conclusion","title":"5.7 Conclusion","text":"<p>\u4e00\u5171\u6709\u4e94\u79cd\u7b97\u6cd5\uff0c\u6ce8\u610f\u770b\u6e05\u9898\u8bbe</p> <ul> <li> <p>No smart union</p> </li> <li> <p>Union-by-size</p> </li> <li> <p>Union-by-height</p> </li> <li> <p>Union-by-size + Path Compression</p> </li> <li> <p>Union-by-height + Path Compression</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/","title":"\u56fe\u8868\u793a\u4e0e\u62d3\u6251\u6392\u5e8f","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#week-8","title":"WEEK 8","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#6-graph-algorithms","title":"6 Graph Algorithms","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#61-definitions","title":"6.1 Definitions","text":"<ul> <li>\\(G( V, E )\\) where \\(G\\) = graph, \\(V = V( G )\\) = finite nonempty set of vertices, and \\(E = E( G )\\) = finite set of edges.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#undirected-graph","title":"Undirected graph","text":"<ul> <li>\\(( v_i , v_j ) = ( v_j , v_i )\\) = the same edge.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#directed-graphdiagraph","title":"Directed graph(diagraph)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#restrictions","title":"Restrictions","text":"<ul> <li>Self loop is illegal.</li> <li>Multigraph is not considered.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#complete-graph","title":"Complete graph","text":"<ul> <li>A graph that has the maximum number of edges.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#adjacent","title":"Adjacent","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#subgraph","title":"Subgraph","text":"\\[ G'\\subset G=V(G')\\subseteq V(G) \\&amp;\\&amp; E(G')\\subseteq E(G) \\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#path","title":"Path","text":"<ul> <li>Path(\\(\\subset G\\)) from \\(v_p\\) to \\(v_q\\) = \\(\\{v_p,v_{i1},v_{i2},\\cdots,v_{in},v_q\\}\\) such that \\((v_p,v_{i1}),(v_{i1},v_{i2}),\\cdots,(v_{in},v_q)\\) belong to \\(E(G)\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#length-of-a-path","title":"Length of a path","text":"<ul> <li>number of edges on the path</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#simple-path","title":"Simple path","text":"<ul> <li>\\(v_{i1},v_{i2},\\cdots,v_{in}\\) are distinct.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#cycle","title":"Cycle","text":"<ul> <li>simple path with \\(v_p=v_q\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#connected","title":"Connected","text":"<ul> <li>\\(v_i\\) and \\(v_j\\) in an undirected \\(G\\) are connected if there is a path from \\(v_i\\) to \\(v_j\\) (and hence there is also a path from \\(v_j\\) to \\(v_i\\))</li> <li>An undirected graph \\(G\\) is connected if every pair of distinct \\(v_i\\) and \\(v_j\\) are connected</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#connected-component-of-an-undirected-g","title":"(Connected) Component of an undirected G","text":"<ul> <li>the maximal connected subgraph</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#tree","title":"Tree","text":"<ul> <li>a graph that is connected and acyclic(\u975e\u5faa\u73af\u7684)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#dag","title":"DAG","text":"<ul> <li>a directed acyclic graph</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#strongly-connected-directed-graph-g","title":"Strongly connected directed graph G","text":"<ul> <li>For every pair of \\(v_i\\) and \\(v_j\\) in \\(V( G )\\), there exist directed paths from \\(v_i\\) to \\(v_j\\) and from \\(v_j\\) to \\(v_i\\).  </li> <li>If the graph is connected without direction to the edges, then it is said to be weakly connected</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#strongly-connected-component","title":"Strongly connected component","text":"<ul> <li>the maximal subgraph that is strongly connected</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#degree","title":"Degree","text":"<ul> <li> <p>number of edges incident to v</p> </li> <li> <p>For a directed G, we have in-degree and out-degree.</p> </li> <li> <p>Given G with \\(n\\) vertices and \\(e\\) edges, then   $$   e=(\\sum_{i=0}^{n-1}d_i)/2\\quad where\\quad d_i=degree(v_i)   $$</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#62-representation-of-graphs","title":"6.2 Representation of Graphs","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#adjacency-matrix","title":"Adjacency Matrix","text":"<p>Note : If G is undirected, then adj_mat[][] is symmetric. Thus we can save space by storing only half of the matrix.</p> <p></p> <ul> <li> <p>This representation wastes space if the graph has a lot of vertices but very few edges.</p> </li> <li> <p>To find out whether or not \\(G\\) is connected, we\u2019ll have to examine all edges. In this case \\(T\\) and \\(S\\) are both \\(O( n^2 )\\).</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#adjacency-lists","title":"Adjacency Lists","text":"<ul> <li>Replace each row by a linked list</li> </ul> <p>Note : The order of nodes in each list does not matter.</p> <ul> <li>For undirected \\(G\\), \\(S\\) = \\(n\\) heads + \\(2e\\) nodes  = \\((n+2e)\\) ptrs + \\(2e\\) ints</li> <li>Degree(i) = number of nodes in graph[i](if \\(G\\) is undirected)</li> <li>\\(T\\) of examine \\(E(G)\\) = \\(O(n+e)\\)</li> </ul> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#adjacency-multilists","title":"Adjacency Multilists","text":"<ul> <li>Sometimes we need to mark the edge after examine it, and then find the next edge.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#weighted-edges","title":"Weighted Edges","text":"<ul> <li>adj_mat [ i ] [ j ] = weight</li> <li>adjacency lists / multilists :  add a weight field to the node</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#63-topological-sort","title":"6.3 Topological Sort \u62d3\u6251\u6392\u5e8f \u4e0d\u662f\u4e00\u79cd\u4e25\u683c\u610f\u4e49\u7684\u6392\u5e8f\u7b97\u6cd5","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#aov-activity-on-vertices-network","title":"AOV  activity on vertices  Network \u6709\u5411\u65e0\u73af\u56fe","text":"<ul> <li>digraph \\(G\\) in which \\(V( G )\\) represents activities and \\(E( G )\\) represents precedence relations </li> <li>Feasible AOV network must be a directed acyclic graph\uff08DAG\uff09.</li> <li>\\(i\\)  is a predecessor of \\(j\\) = there is a path from \\(i\\)  to \\(j\\)</li> <li>\\(i\\)  is an immediate predecessor of  \\(j\\) = \\(&lt; i,  j &gt; \\in E( G )\\). Then \\(j\\) is called a successor(immediate successor) of \\(i\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#partial-order","title":"Partial order","text":"<ul> <li>a precedence relation which is both transitive and irreflexive </li> </ul> <p>Note : If the precedence relation is reflexive, then there must be an \\(i\\) such that \\(i\\) is a predecessor of \\(i\\).  That is, \\(i\\) must be done before \\(i\\) is started. Therefore if a project is feasible, it must be irreflexive.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK08/#definition-a-topological-order-is-a-linear-ordering-of-the-vertices-of-a-graph-such-that-for-any-two-vertices-i-j-if-i-is-a-predecessor-of-j-in-the-network-then-i-precedes-j-in-the-linear-ordering","title":"[Definition] A topological order is a linear ordering  of the vertices of a graph such that, for any two vertices, \\(i\\), \\(j\\), if \\(i\\) is a predecessor of \\(j\\) in the network then \\(i\\) precedes \\(j\\) in the linear ordering.","text":"<p>Note : The topological orders may not be unique for a network.</p> C<pre><code>/*Test an AOV for feasibility, and generate a topological order if possible*/\nvoid Topsort( Graph G )\n{   \n    int Counter;\n    Vertex V, W;\n    for ( Counter = 0; Counter &lt; NumVertex; Counter++ ) \n    {\n        V = FindNewVertexOfDegreeZero( );\n        if ( V == NotAVertex ) //\u786e\u8ba4\u56fe\u4e2d\u65e0\u73af\uff1f\n        {\n            Error ( \u201cGraph has a cycle\u201d );   \n            break;  \n        }\n        TopNum[ V ] = Counter; /* or output V */\n        for ( each W adjacent to V )\n            Indegree[ W ]\u2013\u2013; //\u5bf9\u6240\u6709\u524d\u7f6e\u9009\u8bfe\u8981\u6c42\u6709V\u7684\u8bfe\u7a0b\uff0c\u5728\u4fee\u4e4b\u524d\u5fc5\u987b\u4fee\u5b8c\u7684\u8bfe\u5c11\u4e86\u4e00\u95e8\n    }\n}\n</code></pre> \\[ T=O(|V|^2+|E|) = O(|V|^2) \\] C<pre><code>/*Improvment:Keep all the unassigned vertices of degree 0 in a special box (queue or stack)*/\nvoid Topsort( Graph G )\n{   \n    Queue Q;\n    int Counter = 0;\n    Vertex V, W;\n    Q = CreateQueue( NumVertex );  \n    MakeEmpty( Q );\n    for ( each vertex V )\n        if ( Indegree[ V ] == 0 ) Enqueue( V, Q );\n    while ( !IsEmpty( Q ) ) \n    {\n        V = Dequeue( Q );\n        TopNum[ V ] = ++Counter; /* assign next */\n        for ( each W adjacent to V )\n            if (\u2013\u2013Indegree[ W ] == 0 ) Enqueue( W, Q );\n    }  /* end-while */\n    if ( Counter != NumVertex )\n    Error( \u201cGraph has a cycle\u201d );\n    DisposeQueue( Q ); /* free memory */\n}\n</code></pre> \\[ T=O(|V|+|E|) \\] <p>\\(\u6ce8\u610fE\u7684\u8303\u56f4 \u6700\u5c0f V \u6700\u5927 |V|^2\\)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/","title":"\u6700\u77ed\u8def\u7b97\u6cd5/AOE","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#week-9","title":"WEEK 9","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#64-shortest-path-algorithms","title":"6.4 Shortest Path Algorithms","text":"<p>Given a digraph \\(G = ( V, E )\\), and a cost function \\(c( e )\\) for \\(e \\in E( G )\\). </p> <p>The length of a path \\(P\\) from source to destination is \\(\\sum_{e_i\\subset P} c(e_i)\\)(also called weighted path length).</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#single-source-shortest-path-problem","title":"Single-Source Shortest-Path Problem","text":"<p>Given as input a weighted graph, \\(G = ( V, E )\\), and a distinguished vertex \\(s\\), find the shortest weighted path from \\(s\\) to every other vertex in \\(G\\).</p> <p>Note: If there is no negative-cost cycle, the shortest path from \\(s\\) to \\(s\\) is defined to be zero.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#unweighted-shortest-path","title":"Unweighted Shortest Path","text":"<ul> <li>Breadth-first search \u5e7f\u5ea6\u4f18\u5148\u904d\u5386</li> </ul> <p>Implementation : </p> <ul> <li>Table[ i ].Dist ::= distance from \\(s\\) to \\(v_i\\)  /* initialized to be \\(\\infin\\) except for \\(s\\) */</li> <li>Table[ i ].Known ::= 1 if \\(v_i\\) is checked; or 0 if not</li> <li>Table[ i ].Path ::= for tracking the path   /* initialized to be 0 */</li> </ul> C<pre><code>void Unweighted( Table T )\n{   \n    int CurrDist;\n    Vertex V, W;\n    for ( CurrDist = 0; CurrDist &lt; NumVertex; CurrDist++ ) \n    {\n        for ( each vertex V )\n            if ( !T[ V ].Known &amp;&amp; T[ V ].Dist == CurrDist ) \n            {\n                T[ V ].Known = true;\n                for ( each W adjacent to V )\n                    if ( T[ W ].Dist == Infinity ) \n                    {\n                        T[ W ].Dist = CurrDist + 1;\n                        T[ W ].Path = V;\n                    } /* end-if Dist == Infinity */\n            } /* end-if !Known &amp;&amp; Dist == CurrDist */\n    }  /* end-for CurrDist */\n}\n</code></pre> <p>The worst case : </p> <p> $$ T(N)=O(|V|^2) $$ Improvement :</p> C<pre><code>void Unweighted( Table T )\n{   \n    /* T is initialized with the source vertex S given */\n    Queue Q;\n    Vertex V, W;\n    Q = CreateQueue( NumVertex );\n    MakeEmpty( Q );\n    Enqueue( S, Q ); /* Enqueue the source vertex */\n    while ( !IsEmpty( Q ) ) \n    {\n        V = Dequeue( Q );\n        T[ V ].Known = true; /* not really necessary */\n        for ( each W adjacent to V )\n            if ( T[ W ].Dist == Infinity ) \n            {\n                T[ W ].Dist = T[ V ].Dist + 1;\n                T[ W ].Path = V;\n                Enqueue( W, Q );\n            } /* end-if Dist == Infinity */\n    } /* end-while */\n    DisposeQueue( Q ); /* free memory */\n}\n</code></pre> \\[ T=O(|V|+|E|) \\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#weighted-shorted-path","title":"Weighted Shorted Path","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#dijkstras-algorithm","title":"Dijkstra\u2019s Algorithm","text":"<ul> <li>Let S = { \\(s\\) and \\(v_i\\)\u2019s whose shortest paths have been found }</li> <li>For any \\(u\\notin S\\),  define distance [ u ] = minimal length of path { \\(s\\rightarrow(v_i\\in S)\\rightarrow u\\) }.  If the paths are generated in non-decreasing order, then :</li> <li>the shortest path must go through only \\(v_i\\in S\\)</li> <li>Greedy Method : \\(u\\) is chosen so that distance[ u ] = min{ \\(w \\notin S\\) | distance[ w ] }  (If \\(u\\) is not unique, then we may select any of them)</li> <li>if distance[\\(u_1\\)] &lt; distance[\\(u_2\\)] and add \\(u_1\\) into \\(S\\), then distance [ \\(u_2\\) ] may change.  If so, a shorter path from \\(s\\) to \\(u_2\\) must go through \\(u_1\\) and distance [ \\(u_2\\) ] = distance [ \\(u_1\\) ] + length(&lt; \\(u_1\\), \\(u_2\\)&gt;).</li> </ul> C<pre><code>typedef int Vertex;\nstruct TableEntry\n{\n    List Header; /*Adjacency list*/\n    int Known;\n    DistType Dist;\n    Vertex Path;\n};\n/*Vertices are numbered from 0*/\n#define NotAVertex (-1)\ntypedef struct TableEntry Table[ NumVertex ];\n</code></pre> C<pre><code>void InitTable(Vertex Start, Graph G, Table T)\n{ \n    int i;\n    ReadGraph(G, T); /* Read graph somehow */\n    for(i = 0; i &lt; NumVertex; i++)\n    {\n        T[ i ].Known = False;\n        T[ i ].Dist = Infinity;\n        T[ i ].Path = NotAVertex;\n    }\n    T[ Start ].dist = O;\n}\n</code></pre> C<pre><code>/*Print shortest path to V after Dijkstra has run*/\n/*Assume that the path exists*/\nvoid PrintPath(Vertex V, Table T)\n{\n    if (T[ V ].Path != NotAVertex)\n    {\n        PrintPath(T[ V ].Path, T);\n        printf(\" to\") ;\n    }\n    printf(\"%v\", V) ; /* %v is pseudocode * /\n</code></pre> C<pre><code>void Dijkstra( Table T )\n{ \n    Vertex V, W;\n    for ( ; ; ) \n    {\n        V = smallest unknown distance vertex;\n        if ( V == NotAVertex ) break; \n        T[ V ].Known = true;\n        for ( each W adjacent to V )\n            if ( !T[ W ].Known ) \n                if ( T[ V ].Dist + Cvw &lt; T[ W ].Dist ) \n                {\n                    Decrease( T[ W ].Dist to T[ V ].Dist + Cvw );\n                    T[ W ].Path = V;\n                } /* end-if update W */\n    } /* end-for( ; ; ) */\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#implementation-1","title":"Implementation 1","text":"<ul> <li>Simply scan the table to find the smallest unknown distance vertex.\u2014\u2014\\(O(|V|)\\)</li> <li>Good if the graph is dense</li> </ul> \\[ T=O(|V|^2+|E|) \\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#implementation-2","title":"Implementation 2","text":"<ul> <li> <p>\u5806\u4f18\u5316</p> </li> <li> <p>Keep distances in a priority queue and call <code>DeleteMin</code> to find the smallest unknown distance vertex.\u2014\u2014\\(O(\\log|V|)\\)</p> </li> <li> <p>\u66f4\u65b0\u7684\u5904\u7406\u65b9\u6cd5</p> </li> <li> <p>Method 1 : <code>DecreaseKey</code>\u2014\u2014\\(O(\\log|V|)\\)</p> <p>\\(T=O(|V|\\log|V|+|E|\\log|V|)=O(|E|\\log|V|)\\)</p> </li> <li> <p>Method 2 : insert W with updated Dist into the priority queue</p> <p>Must keep doing <code>DeleteMin</code> until an unknown vertex emerges</p> <p>\\(T=O(|E|\\log|V|)\\) but requires \\(|E|\\) <code>DeleteMin</code> with <code>|E|</code> space</p> </li> <li> <p>Good if the graph is sparse</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#improvements","title":"Improvements","text":"<ul> <li>Pairing heap</li> <li>Fibonacci heap</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#graphs-with-negative-edge-costs","title":"Graphs with Negative Edge Costs","text":"C<pre><code>void WeightedNegative( Table T )\n{\n    Queue Q;\n    Vertex V, W;\n    Q = CreateQueue (NumVertex );  \n    MakeEmpty( Q );\n    Enqueue( S, Q ); /*Enqueue the source vertex*/\n    while ( !IsEmpty( Q ) ) \n    {\n        V = Dequeue( Q );\n        for ( each W adjacent to V )\n        if ( T[ V ].Dist + Cvw &lt; T[ W ].Dist ) \n        {\n            T[ W ].Dist = T[ V ].Dist + Cvw;\n            T[ W ].Path = V;\n            if ( W is not already in Q )\n                Enqueue( W, Q );\n        } /*end-if update*/\n    } /*end-while */\n    DisposeQueue( Q ); /*free memory*/\n}\n</code></pre> <p>Note : Negative-cost cycle will cause indefinite loop</p> \\[ T=O(|V|\\times|E|) \\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#acyclic-graphs","title":"Acyclic Graphs","text":"<ul> <li>If the graph is acyclic, vertices may be selected in topological order since when a vertex is selected, its distance can no longer be lowered without any incoming edges from unknown nodes.</li> <li>\\(T=O(|E|+|V|)\\) and no priority queue is needed.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#aoeactivity-on-edge-networks","title":"AOE(Activity on Edge) Networks","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#all-pairs-shortest-path-problem","title":"All-Pairs Shortest Path Problem","text":"<ul> <li>For all pairs of \\(v_i\\) and \\(v_j\\) ( \\(i\\neq j\\) ), find the shortest path between.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#method-1","title":"Method 1","text":"<ul> <li>Use single-source algorithm for \\(|V|\\) times.</li> <li>\\(T=O(|V|^3)\\), works fast on sparse graph.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK09/#method-2","title":"Method 2","text":"<ul> <li>\u52a8\u6001\u89c4\u5212</li> <li>\\(O(|V|^3)\\) algorithm given in Chapter 10, works faster on dense graphs.</li> </ul> <p>DS WEEK08.md </p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/","title":"\u7f51\u7edc\u6d41\u95ee\u9898/MST","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#week-10","title":"WEEK 10","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#65-network-flow-problems","title":"6.5 Network Flow Problems","text":"<ul> <li>Determine the maximum amount of flow that can pass from \\(s\\) to \\(t\\).</li> </ul> <p>Note : Total coming in (\\(v\\)) = Total going out (\\(v\\)) where \\(v \\notin \\{ s, t \\}\\)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#a-simple-algorithm","title":"A Simple Algorithm","text":"<ul> <li>\u6d41\u56fe\\(G_f\\)\u8868\u793a\u7b97\u6cd5\u7684\u4efb\u610f\u9636\u6bb5\u5df2\u7ecf\u8fbe\u5230\u7684\u6d41\uff0c\u5f00\u59cb\u65f6\\(G_f\\)\u7684\u6240\u6709\u8fb9\u90fd\u6ca1\u6709\u6d41\uff0c\u7b97\u6cd5\u7ec8\u6b62\u65f6\\(G_f\\)\u5305\u542b\u6700\u5927\u6d41</li> <li>\u6b8b\u4f59\u56fe(residual graph)\\(G_r\\)\u8868\u793a\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u8fd8\u80fd\u6dfb\u52a0\u4e0a\u591a\u5c11\u6d41\uff0c\\(G_r\\)\u7684\u8fb9\u53eb\u505a\u6b8b\u4f59\u8fb9(residual edge)</li> </ul> <p>Step 1 : Find any path from \\(s\\) to \\(t\\) in \\(G_r\\) , which is called augmenting path(\u589e\u957f\u901a\u8def).</p> <p>Step 2 : Take the minimum edge on this path as the amount of flow and add to \\(G_f\\).</p> <p>Step 3 : Update \\(G_r\\) and remove the 0 flow edges.</p> <p>Step 4 : If there is a path from \\(s\\) to \\(t\\) in \\(G_r\\) then go to Step 1, or end the algorithm.</p> <ul> <li>Step 1\u4e2d\u521d\u59cb\u9009\u62e9\u7684\u8def\u5f84\u53ef\u80fd\u4f7f\u7b97\u6cd5\u4e0d\u80fd\u627e\u5230\u6700\u4f18\u89e3\uff0c\u8d2a\u5fc3\u7b97\u6cd5\u884c\u4e0d\u901a</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#a-solution","title":"A solution","text":"<ul> <li>allow the algorithm to undo its decisions</li> <li>For each edge \\(( v, w )\\) with flow \\(f_{v, w}\\) in \\(G_f\\), add an edge \\(( w, v )\\) with flow \\(f_{v, w}\\) in \\(G_r\\) .</li> </ul> <p>Note : The algorithm works for \\(G\\) with cycles as well.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#proposition-if-the-edge-capabilities-are-rational-numbers-this-algorithm-always-terminate-with-a-maximum-flow","title":"[Proposition] If the edge capabilities are rational numbers, this algorithm always terminate with a maximum flow.","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#analysis","title":"Analysis","text":"<ul> <li> <p>An augmenting path can be found by an unweighted shortest path algorithm.</p> </li> <li> <p>\\(T=O(f|E|)\\) where \\(f\\) is the maximum flow.</p> </li> <li> <p>Always choose the augmenting path that allows the largest increase in flow</p> </li> <li> <p>\u5bf9Dijkstra\u7b97\u6cd5\u8fdb\u884c\u5355\u7ebf(single-line)\u4fee\u6539\u6765\u5bfb\u627e\u589e\u957f\u901a\u8def</p> </li> <li>\\(cap_{max}\\)\u4e3a\u6700\u5927\u8fb9\u5bb9\u91cf</li> <li>\\(O(|E|\\log cap_{max})\\)\u6761\u589e\u957f\u901a\u8def\u5c06\u8db3\u4ee5\u627e\u5230\u6700\u5927\u6d41\uff0c\u5bf9\u4e8e\u589e\u957f\u901a\u8def\u7684\u6bcf\u6b21\u8ba1\u7b97\u9700\u8981\\(O(|E|\\log|V|)\\)\u65f6\u95f4</li> </ul> <p>$$   T=T_{augmentation}\\times T_{find_a_path}\\   =O(|E|\\log cap_{max})\\times O(|E|\\log|V|)\\   =O(|E|^2\\log|V|\\log cap_{max})   $$</p> <ul> <li> <p>Always choose the augmenting path that has the least number of edges</p> </li> <li> <p>\u4f7f\u7528\u65e0\u6743\u6700\u77ed\u8def\u7b97\u6cd5\u6765\u5bfb\u627e\u589e\u957f\u8def\u5f84</p> </li> </ul> <p>$$   T=T_{augmentation}\\times T_{find_a_path}\\   =O(|E||V|)\\times O(|E|)\\   =O(|E|^2|V|)   $$</p> <p>Note : </p> <ul> <li>If every \\(v \\notin \\{ s, t \\}\\) has either a single incoming edge of capacity 1 or a single outgoing edge of capacity 1, then time bound is reduced to \\(O( |E| |V|^{1/2} )\\).</li> <li>The min-cost flow problem is to find, among all maximum flows, the one flow of minimum cost provided that each edge has a cost per unit of flow.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#66-minimum-spanning-tree","title":"6.6 Minimum Spanning Tree","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#definition-a-spanning-tree-of-a-graph-g-is-a-tree-which-consists-of-vg-and-a-subset-of-eg","title":"[Definition] A spanning tree of a graph \\(G\\) is a tree which consists of \\(V(G)\\) and a subset of \\(E(G)\\)","text":"<p>Note :</p> <ul> <li>The minimum spanning tree is a tree since it is acyclic, the number of edges is \\(|V|-1\\)</li> <li>It is minimum for the total cost of edges is minimized.</li> <li>It is spanning because it covers every vertex.</li> <li>A minimum spanning tree exists if \\(G\\) is connected.</li> <li>Adding a non-tree edge to a spanning tree, we obtain a cycle.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK10/#greedy-method","title":"Greedy Method","text":"<p>Make the best decision for each stage, under the following constrains :</p> <ul> <li>we must use only edges within the graph</li> <li>we must use exactly \\(|V|-1\\) edges</li> <li>we may not use edges that would produce a cycle</li> </ul> <ol> <li> <p>Prim\u2019s Algorithm</p> </li> <li> <p>\u5728\u7b97\u6cd5\u7684\u4efb\u4e00\u65f6\u523b\uff0c\u90fd\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5df2\u7ecf\u6dfb\u52a0\u5230\u6811\u4e0a\u7684\u9876\u70b9\u96c6\uff0c\u800c\u5176\u4f59\u9876\u70b9\u5c1a\u672a\u52a0\u5230\u8fd9\u68f5\u6811\u4e2d</p> </li> <li> <p>\u7b97\u6cd5\u5728\u6bcf\u4e00\u9636\u6bb5\u90fd\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u8fb9\\((u, v)\\)\uff0c\u4f7f\u5f97\\((u,v)\\)\u7684\u503c\u662f\u6240\u6709\\(u\\) \u5728\u6811\u4e0a\u4f46\\(v\\)\u4e0d\u5728\u6811\u4e0a\u7684\u8fb9\u7684\u503c\u4e2d\u7684\u6700\u5c0f\u8005\uff0c\u800c\u627e\u51fa\u4e00\u4e2a\u65b0\u7684\u9876\u70b9\u5e76\u628a\u5b83\u6dfb\u52a0\u5230\u8fd9\u68f5\u6811\u4e2d</p> </li> <li> <p>Kruskal\u2019s Algorithm</p> </li> <li> <p>\u8fde\u7eed\u5730\u6309\u7167\u6700\u5c0f\u7684\u6743\u9009\u62e9\u8fb9,\uff0c\u5e76\u4e14\u5f53\u6240\u9009\u7684\u8fb9\u4e0d\u4ea7\u751f\u73af\u65f6\u5c31\u628a\u5b83\u4f5c\u4e3a\u53d6\u5b9a\u7684\u8fb9</p> Text Only<pre><code>void Kruskal( Graph G )\n{   \n   T = { };\n    while ( T contains less than |V|-1 edges &amp;&amp; E is not empty ) \n    {\n        choose a least cost edge (v, w) from E;  /*DeleteMin*/\n        delete (v, w) from E;\n        if ( (v, w) does not create a cycle in T )     \n           add (v, w) to T;  /*Union/Find*/\n        else     \n           discard (v, w);\n    }\n    if ( T contains fewer than |V|-1 edges )\n       Error( \u201cNo spanning tree\u201d );\n}\n</code></pre> C<pre><code>void Kruskal(Graph G)\n{\n   int EdgesAccepted;\n   DisjSet S;\n   PriorityQueue H;\n   Vertex U, V;\n   SetType Uset, Vset;\n   Edge E;\n\n   Initialize(S);\n   ReadGraphIntoHeapArray(G, H);\n   BuildHeap(H);\n\n   EdgesAccepted = 0;\n   while(EdgesAccepted &lt; NumVertex-1)\n   {\n       E = DeleteMin(H); /*E = (U,V)*/\n       Uset = Find(U, S);\n       Vset = Find(V, S);\n       if(Uset != Vset)\n       {\n           /*Accept the edge*/\n           EdgesAccepted++;\n           SetUnion(S, USet, VSet);\n       }\n   }\n}\n</code></pre> <p>$$  T=O(|E|\\log|E|)  $$</p> <p></p> </li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/","title":"DFS/\u8054\u901a\u5206\u91cf/\u63d2\u6392/\u4ea4\u6362\u6392\u5e8f\u4e0b\u754c","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#week-11","title":"WEEK 11","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#67-applications-of-depth-first-search","title":"6.7 Applications of Depth-First Search","text":"C<pre><code>/*a generalization of preorder traversal*/\nvoid DFS(Vertex V)\n{   \n    visited[ V ] = true;  /*mark this vertex to avoid cycles*/\n    for ( each W adjacent to V )\n        if ( !visited[ W ] ) DFS( W );\n} /*T = O(|E|+|V|) as long as adjacency lists are used*/\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#undirected-graphs","title":"Undirected Graphs","text":"C<pre><code>void ListComponents(Graph G)\n{   \n    for ( each V in G ) \n        if ( !visited[ V ] ) \n        {\n            DFS( V );\n            printf(\"\\n\");\n        }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#backtrack","title":"\u4e0e\u56de\u6eaf(backtrack)\u6bd4\u8f83\uff1a","text":"C<pre><code>void backtrack(){\n    //terminal condition:\n    if(reached the end){\n        //\u89e6\u53d1\u4e86\u7ed3\u675f\u6761\u4ef6\uff0creturn\n        res.add(track);\n        return;\n    }\n    for(every neighbor next to this node){\n        if(!visited[i]){//\u6392\u9664\u4e0d\u5408\u6cd5\u7684\u9009\u62e9\n            visited[i]=true;\n            track.add(i);\n            backtrack(i);\n            track.remove(i);\n            visited[i]=false;\n        }\n    }\n}\n</code></pre> C<pre><code>int dfs[MaxVertexNum];\n\nvoid DFS(LGraph Graph, int cur){\n    dfs[cur]=1;\n    for(PtrToAdjVNode node=Graph-&gt;G[cur].FirstEdge;node;node=node-&gt;Next){\n        int w = node-&gt;AdjV;\n        if(!dfs[w])DFS(Graph,w);\n    }\n}\n\nint CountConnectedComponents( LGraph Graph ){\n    int count = 0;\n    for(int i=0;i&lt;Graph-&gt;Nv;i++)dfs[i]=0;\n    for(int i=0;i&lt;Graph-&gt;Nv;i++){\n        if(!dfs[i]){\n            DFS(Graph,i); count++;\n    }\n    }\n    return count;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#undirected-graphs_1","title":"Undirected Graphs","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#biconnectivity","title":"Biconnectivity","text":"<ul> <li>\\(v\\) is an articulation point if \\(G'=DeleteVertex(G, v)\\) has at least 2 connected components.</li> <li>\\(G\\) is a biconnected graph if \\(G\\) is connected and has no articulation points.</li> <li>A biconnected component is a maximal biconnected subgraph.</li> </ul> <p>Note : No edges can be shared by two or more biconnected components.  Hence \\(E(G)\\) is partitioned by the biconnected components of \\(G\\).</p> <p>Finding the biconnected components of a connected undirected \\(G\\) :</p> <ul> <li>Use depth first search to obtain a spanning tree of \\(G\\)</li> </ul> <p></p> <p></p> <ul> <li>Depth first number(\\(Num\\)) \u5148\u5e8f\u7f16\u53f7</li> <li>Back edges(\u80cc\u5411\u8fb9) = \\((u,v)\\notin\\) tree and \\(u\\) is an ancestor of \\(v\\).</li> </ul> <p>Note : If \\(u\\) is an ancestor of \\(v\\), then \\(Num(u)&lt;Num(v)\\).</p> <ul> <li>Find the articulation points in \\(G\\)</li> <li>The root is an articulation point if it has at least 2 children.</li> <li>Any other vertex \\(u\\) is an articulation point if \\(u\\) has at least 1 child, and it is impossible to move down at least 1 step and then jump up to \\(u\\)\u2018s ancestor</li> </ul> <ul> <li>\u5bf9\u4e8e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u751f\u6210\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\\(u\\)\uff0c\u8ba1\u7b97\u7f16\u53f7\u6700\u4f4e\u7684\u9876\u70b9\uff0c\u79f0\u4e4b\u4e3a\\(Low(u)\\)   $$   Low(u)=\\min{Num(u),\\min{Low(w)|w\\,is\\,a\\,child\\,of\\,u},\\min{Num(w)|(u,w)\\,is\\,a\\,back\\,edge}}   $$</li> </ul> Text Only<pre><code>/*Assign Num and compute Parents*/\nvoid AssignNum(Vertex V)\n{\n    Vertex W;\n    Num[V] = Counter++;\n    Visited[V] = True;\n    for each W adjacent to V\n        if(!Visited[W])\n        {\n            Parent[W] = V;\n            AssignNum(W);\n        }\n}\n</code></pre> Text Only<pre><code>/*Assign Low; also check for articulation points*/\nvoid AssignLow(Vertex V)\n{\n    Vertex W;\n    Low[V] = Num[V]; /*Rule 1*/\n    for each W adjacent to V\n    {\n        if(Num[W] &gt; Num[V]) /*Forward edge*/\n        {\n            Assignlow(W);\n            if(Low[W] &gt;= Num[V])\n                printf(\"%v is an articulation point\\n\", v);\n            Low[V] = Min(Low[V], Low[W]); /*Rule 3*/\n        }\n        else\n            if (Parent[V] != W) /*Back edge*/\n                Low[V] \uff1d Min(Low[V], Num[W]); /*Rule 2*/\n    }\n}\n</code></pre> Text Only<pre><code>void FindArt(Vertex V)\n{\n    Vertex W;\n    Visited[V] = True;\n    Low[V] = Num[V] = Counter++; /*Rule 1*/\n    for each W adjacent to V\n    {\n        if(!Visited[W]) /*Forward edge*/\n        {\n            Parent[W] = V;\n            FindArt(W);\n            if(Low[W] &gt;= Num[V])\n                printf(\"%v is an articulation point\\n\", v);\n            Low[V] = Min(Low[V], Low[W]); /*Rule 3*/\n        }\n        else\n            if(Parent[ V ] != W) /*Back edge*/\n                Low[V] = Min(Low[V], Num[W]); /*Rule 2*/\n    }\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#euler-circuits","title":"Euler Circuits","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#proposition-an-euler-circuit-is-possible-only-if-the-graph-is-connected-and-each-vertex-has-an-even-degree","title":"[Proposition] An Euler circuit is possible only if the graph is connected and each vertex has an even degree.","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#proposition-an-euler-tour-is-possible-if-there-are-exactly-two-vertices-having-odd-degree-one-must-start-at-one-of-the-odd-degree-vertices","title":"[Proposition] An Euler tour is possible if there are exactly two vertices having odd degree.  One must start at one of the odd-degree vertices.","text":"<p>Note:</p> <ul> <li>The path should be maintained as a linked list.</li> <li>For each adjacency list, maintain a pointer to the last edge scanned.</li> <li>\\(T=O(|E|+|V|)\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#7-sorting","title":"7 Sorting","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#71-preliminaries","title":"7.1 Preliminaries","text":"C<pre><code>void X_Sort (ElementType A[], int N)\n</code></pre> <ul> <li>N must be a legal integer.</li> <li>Assume integer array for the sake of simplicity.</li> <li>\u2018&gt;\u2019 and \u2018&lt;\u2019 operators exist and are the only operations allowed on the input data.</li> <li>Consider internal sorting only. The entire sort can be done in main memory.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#72-insertion-sort","title":"7.2 Insertion Sort","text":"C<pre><code>void Insertion(ElementType A[], int N)\n{ \n    int j, P; \n    ElementType Tmp; \n\n    for ( P = 1; P &lt; N; P++ ) \n    { \n        Tmp = A[ P ];  /*the next coming card*/\n        for ( j = P; j &gt; 0 &amp;&amp; A[ j - 1 ] &gt; Tmp; j-- ) \n            A[ j ] = A[ j - 1 ]; \n            /*shift sorted cards to provide a position for the new coming card*/\n        A[ j ] = Tmp;  /*place the new card at the proper position*/\n    }/*end for-P-loop*/\n}\n</code></pre> <ul> <li> <p>The worst case : Input A[ ] is in reverse order   $$   T(N)=O(N^2)   $$</p> </li> <li> <p>The best case : Input A[ ] is in sorted order   $$   T(N)=O(N)   $$</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#73-a-lower-bound-for-simple-sorting-algorithms","title":"7.3 A Lower Bound for Simple Sorting Algorithms","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#definition-an-inversion-in-an-array-of-numbers-is-any-ordered-pairij-having-the-property-that-ij-but-aiaj","title":"[Definition] An inversion in an array of numbers is any ordered pair\\((i,j)\\) having the property that \\(i&lt;j\\) but \\(A[i]&gt;A[j]\\)","text":"<ul> <li> <p>Swapping two adjacent elements that are out of place removes exactly one inversion.</p> </li> <li> <p>\\(T(N,I)=O(I+N)\\) where \\(I\\) is the number of inversions in the original array.</p> </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#theorem-the-average-number-of-inversions-in-an-array-of-n-distinct-numbers-is-nn-14","title":"[Theorem] The average number of inversions in an array of \\(N\\) distinct numbers is \\(N(N-1)/4\\)","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK11/#theorem-any-algorithm-that-sorts-by-exchanging-adjacent-elements-requires-omegan2-time-on-average","title":"[Theorem] Any algorithm that sorts by exchanging adjacent elements requires \\(\\Omega(N^2)\\) time on average","text":"C<pre><code>typedef struct node {\n    int data;\n    struct node* left;\n    struct node* right;\n} node;\ntypedef struct node* Tree;\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/","title":"shell/heap/merge sort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#week-12","title":"WEEK 12","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#74-shellsort","title":"7.4 Shellsort","text":"<ul> <li>Define an increment sequence \\(h_1 &lt; h_2 &lt; \\cdots &lt; h_t  ( h_1 = 1 )\\)</li> <li> <p>Define an \\(h_k\\)-sort at each phase for \\(k = t, t - 1,\\cdots, 1\\)</p> </li> <li> <p>\u6700\u540e\u4e00\u8f6e\u5c31\u662fInsertion Sort</p> </li> </ul> <p>Note : An \\(h_k\\)-sorted file that is then \\(h_{k-1}\\)-sorted remains \\(h_k\\)-sorted.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#shells-increment-sequence","title":"Shell\u2019s Increment Sequence","text":"\\[ h_t=\\lfloor N/2\\rfloor,h_k=\\lfloor h_{k+1}/2\\rfloor \\] C<pre><code>void Shellsort( ElementType A[ ], int N ) \n{ \n    int i, j, Increment; \n    ElementType Tmp; \n    for ( Increment = N / 2; Increment &gt; 0; Increment /= 2 )  /*h sequence */\n        for ( i = Increment; i &lt; N; i++ ) \n        { /* insertion sort */\n            Tmp = A[ i ]; \n            for ( j = i; j &gt;= Increment; j -= Increment ) \n                if( Tmp &lt; A[ j-Increment ] )\n                    A[ j ] = A[ j-Increment ]; \n                else \n                    break; \n            A[ j ] = Tmp;\n        } /* end for-I and for-Increment loops */\n}\n</code></pre> <ul> <li>[Theorem] The worst-case running time of Shellsort, using Shell\u2019s increments, is  \\(\\Theta( N^2 )\\).</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#hibbards-increment-sequence","title":"Hibbard's Increment Sequence","text":"\\[ h_k=2^k-1 \\] <ul> <li>[Theorem] The worst-case running time of Shellsort, using Hibbard's increments, is  \\(\\Theta( N^{3/2} )\\).</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#conjecture","title":"Conjecture","text":"<ul> <li>\\(T_{avg \u2013 Hibbard} ( N ) = O ( N^{5/4} )\\)</li> <li>Sedgewick\u2019s best sequence is \\(\\{1, 5, 19, 41, 109, \\cdots \\}\\) in which the terms are either of the form \\(9\\times4^i \u2013 9\\times2^i + 1\\) or    \\(4^i \u2013 3\\times2^i + 1\\).  \\(T_{avg} ( N ) = O ( N^{7/6} )\\) and \\(T_{worst}( N ) = O( N^{4/3} )\\).</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#conclusion","title":"Conclusion","text":"<ul> <li>Shellsort is a very simple algorithm, yet with an extremely complex analysis.  </li> <li>It is good for sorting up to moderately large input (tens of thousands).</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#75-heapsort","title":"7.5 Heapsort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#algorithm1","title":"Algorithm1","text":"C<pre><code>void Heapsort( int N ) \n{\n    BuildHeap( H );\n    for ( i = 0; i &lt; N; i++ ) \n        TmpH[ i ] = DeleteMin( H );\n    for ( i = 0; i &lt; N; i++ ) \n        H[ i ] = TmpH[ i ];\n}\n</code></pre> \\[ T(N)=O(N\\log N) \\] <ul> <li>The space requirement is doubled.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#algorithm2","title":"Algorithm2","text":"C<pre><code>void Heapsort( ElementType A[ ], int N ) \n{\n    int i; \n    for ( i = N / 2; i &gt;= 0; i-- ) /*BuildHeap*/ \n        PercDown( A, i, N );\n    for ( i = N - 1; i &gt; 0; i-- ) \n    { \n        Swap( &amp;A[ 0 ], &amp;A[ i ] ); /*DeleteMax*/ \n        PercDown( A, 0, i ); \n    } \n}\n</code></pre> <ul> <li>[Theorem] The average number of comparisons used to heapsort a random permutation of N distinct items is \\(2N\\log N-O(N\\log\\log N)\\).</li> </ul> <p>Note : Although Heapsort gives the best average time, in practice it is slower than a version of Shellsort that uses Sedgewick\u2019s increment sequence.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#76-mergesort","title":"7.6 Mergesort","text":"C<pre><code>void MSort( ElementType A[ ], ElementType TmpArray[ ], int Left, int Right ) \n{   \n    int Center; \n    if ( Left &lt; Right ) \n    {  /*if there are elements to be sort*/\n        Center = (Left+Right)/2; \n        MSort(A, TmpArray, Left, Center);   /*T(N/2)*/\n        MSort(A, TmpArray, Center+1, Right);    /*T(N/2)*/\n        Merge(A, TmpArray, Left, Center+1, Right);  /*O(N)*/\n    } \n} \n\nvoid Mergesort( ElementType A[ ], int N ) \n{   \n    ElementType *TmpArray;  /*need O(N) extra space*/\n    TmpArray = malloc(N*sizeof(ElementType)); \n    if (TmpArray != NULL) \n    { \n        MSort(A, TmpArray, 0, N-1); \n        free(TmpArray); \n    } \n    else FatalError(\"No space for tmp array!!!\"); \n}\n</code></pre> <ul> <li>If a TmpArray is declared locally for each call of Merge, then \\(S(N) = O(N\\log N)\\).</li> </ul> C<pre><code>/*Lpos = start of left half, Rpos = start of right half*/ \nvoid Merge( ElementType A[ ], ElementType TmpArray[ ], int Lpos, int Rpos, int RightEnd ) \n{   \n    int i, LeftEnd, NumElements, TmpPos; \n    LeftEnd = Rpos-1; \n    TmpPos = Lpos; \n    NumElements = RightEnd-Lpos+1; \n    while( Lpos &lt;= LeftEnd &amp;&amp; Rpos &lt;= RightEnd ) /*main loop*/ \n        if ( A[ Lpos ] &lt;= A[ Rpos ] ) \n            TmpArray[ TmpPos++ ] = A[ Lpos++ ]; \n        else \n            TmpArray[ TmpPos++ ] = A[ Rpos++ ]; \n    while( Lpos &lt;= LeftEnd ) /*Copy rest of first half*/ \n        TmpArray[ TmpPos++ ] = A[ Lpos++ ]; \n    while( Rpos &lt;= RightEnd ) /*Copy rest of second half*/ \n        TmpArray[ TmpPos++ ] = A[ Rpos++ ]; \n    for( i = 0; i &lt; NumElements; i++, RightEnd-- ) \n        /*Copy TmpArray back*/ \n        A[ RightEnd ] = TmpArray[ RightEnd ]; \n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK12/#analysis","title":"Analysis","text":"\\[ T(1)=O(1)\\\\ T(N)=2T(\\frac{N}{2})+O(N)\\\\ \\frac{T(N)}{N}=\\frac{T(\\frac{N}{2})}{\\frac{N}{2}}+1\\\\ \\cdots\\\\ \\frac{T(\\frac{N}{2^{k-1}})}{\\frac{N}{2^{k-1}}}=\\frac{T(1)}{1}+1\\\\ T(N)=O(N+N\\log N) \\] <p>Note : Mergesort requires linear extra memory, and copying an array is slow. It is hardly ever used for internal sorting, but is quite useful for external sorting.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/","title":"queue bucket radix sort","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#week-13","title":"WEEK 13","text":"<p>qsort\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\uff08ppt\u7b2c\u4e00\u9875\uff09\uff0cqsort\u7a0b\u5e8f\u586b\u7a7a</p> <p>\u4e0d\u8981\u53ea\u6ce8\u610fi++,j--</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#77-quicksort","title":"7.7 Quicksort","text":"<ul> <li>the fastest known sorting algorithm in practice</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#algorithm","title":"Algorithm","text":"Text Only<pre><code>void Quicksort( ElementType A[ ], int N )\n{\n    if (N &lt; 2) return;\n    pivot = pick any element in A[ ]; \n    Partition S = { A[ ] \\ pivot } into two disjoint sets:\n        A1 = { a in S | a &lt;= pivot } and A2 = { a in S | a &gt;= pivot };\n    A = Quicksort(A1, N1) and { pivot } and Quicksort(A2, N2);\n}\n</code></pre> <ul> <li>The pivot is placed at the right place once and for all.</li> <li>\u8981\u7814\u7a76\u7684\u95ee\u9898\u662f\u5982\u4f55\u9009\u53d6\u67a2\u7ebd\u5143\u548c\u5982\u4f55\u5212\u5206</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#picking-the-pivot","title":"Picking the Pivot","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#a-wrong-way","title":"A Wrong Way","text":"<ul> <li>Pivot = A[ 0 ]</li> <li>The worst case : A[ ] is presorted, quicksort will take \\(O(N^2)\\) time to do nothing</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#a-safe-maneuver","title":"A Safe Maneuver","text":"<ul> <li>Pivot = random select from A[ ]</li> <li>random number generation is expensive</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#median-of-three-partitioning","title":"Median-of-Three Partitioning","text":"<ul> <li>Pivot = median(left, center, right)</li> <li>Eliminates the bad case for sorted input and actually reduces the running time by about 5%.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#partitioning-strategy","title":"Partitioning Strategy","text":"<ul> <li>\u5f53\\(i\\)\u5728\\(j\\)\u7684\u5de6\u8fb9\u65f6\uff0c\u6211\u4eec\u5c06\\(i\\)\u53f3\u79fb\uff0c\u79fb\u8fc7\u90a3\u4e9b\u5c0f\u4e8e\u67a2\u7ebd\u5143\u7684\u5143\u7d20\uff0c\u5e76\u5c06\\(j\\)\u5de6\u79fb\uff0c\u79fb\u8fc7\u90a3\u4e9b\u5927\u4e8e\u67a2\u7ebd\u5143\u7684\u5143\u7d20</li> <li>\u5f53\\(i\\)\u548c\\(j\\)\u505c\u6b62\u65f6\uff0c\\(i\\)\u6307\u5411\u4e00\u4e2a\u5927\u5143\u7d20\u800c\\(j\\)\u6307\u5411\u4e00\u4e2a\u5c0f\u5143\u7d20\uff0c\u5982\u679c\\(i\\)\u5728\\(j\\)\u7684\u5de6\u8fb9\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e24\u4e2a\u5143\u7d20\u4e92\u6362</li> <li>\u91cd\u590d\u8be5\u8fc7\u7a0b\u76f4\u5230\\(i\\)\u548c\\(j\\)\u5f7c\u6b64\u4ea4\u9519\u4e3a\u6b62</li> <li>\u5212\u5206\u7684\u6700\u540e\u4e00\u6b65\u662f\u5c06\u67a2\u7ebd\u5143\u4e0e\\(i\\)\u6240\u6307\u5411\u7684\u5143\u7d20\u4ea4\u6362</li> <li>\u5982\u679c\\(i\\)\u548c\\(j\\)\u9047\u5230\u7b49\u4e8e\u67a2\u7ebd\u5143\u7684\u952e\u503c\uff0c\u5c31\u8ba9\\(i\\)\u548c\\(j\\)\u90fd\u505c\u6b62\uff0c\u56e0\u4e3a\u82e5\u90fd\u4e0d\u505c\u6b62\\(T(N)=O(N^2)\\)</li> <li>There will be many dummy swaps, but at least the sequence will be partitioned into two equal-sized subsequences.</li> <li>\u5143\u7d20\u4e0e\u67a2\u7ebd\u5143\u7d20\u76f8\u7b49\u65f6\u6307\u9488\u4e5f\u8981\u505c\u4e0b\u3002\u8fd9\u6837\u770b\u8d77\u6765\u505a\u4e86\u989d\u5916\u7684\u4ea4\u6362\uff0c\u4f46\u662f\u53ef\u4ee5\u4fdd\u8bc1\u5728\u8f93\u5165\u5143\u7d20\u5168\u90e8\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\u6bcf\u6b21\u4f1a\u5c06\u8f93\u5165\u6570\u7ec4\u5207\u5206\u6210\u4e00\u534a\u3002\u5982\u679c\u76f8\u7b49\u65f6\u6307\u9488\u4e0d\u505c\u4e0b\uff0c\u5feb\u901f\u6392\u5e8f\u5c31\u4f1a\u5728\u6709\u5927\u91cf\u91cd\u590d\u5143\u7d20\u7684\u8f93\u5165\u65f6\u590d\u6742\u5ea6\u9000\u5316\u4e3aO(n^2)(i\u76f4\u63a5\u5230\u4e86\u6700\u540e)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#small-arrays","title":"Small Arrays","text":"<ul> <li>Quicksort is slower than insertion sort for small \\(N(\\leq 20)\\).</li> <li>Cutoff when \\(N\\) gets small and use other efficient algorithms (such as insertion sort).</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#implementation","title":"Implementation","text":"C<pre><code>void Quicksort( ElementType A[ ], int N ) \n{ \n    Qsort( A, 0, N-1 ); \n    /*A:the array*/\n    /*0:Left index*/\n    /*N\u20131:Right index*/\n}\n</code></pre> C<pre><code>/* Return median of Left, Center, and Right */ \n/* Order these and hide the pivot */ \nElementType Median3( ElementType A[ ], int Left, int Right ) \n{\n    int Center = ( Left+Right )/2; \n    if ( A[ Left ] &gt; A[ Center ] ) \n        Swap( &amp;A[ Left ], &amp;A[ Center ] ); \n    if ( A[ Left ] &gt; A[ Right ] ) \n        Swap( &amp;A[ Left ], &amp;A[ Right ] ); \n    if ( A[ Center ] &gt; A[ Right ] ) \n        Swap( &amp;A[ Center ], &amp;A[ Right ] ); \n    /*Invariant: A[ Left ] &lt;= A[ Center ] &lt;= A[ Right ]*/ \n    Swap( &amp;A[ Center ], &amp;A[ Right-1 ] ); /*Hide pivot*/ \n    /*only need to sort A[ Left+1 ] \u2026 A[ Right\u20132 ]*/\n    return A[ Right-1 ];  /*Return pivot*/ \n}\n</code></pre> C<pre><code>void Qsort( ElementType A[ ], int Left, int Right ) \n{\n    int i, j; \n    ElementType Pivot; \n    if ( Left + Cutoff &lt;= Right ) \n    {   /*if the sequence is not too short*/\n        Pivot = Median3( A, Left, Right );  /*select pivot*/\n        i = Left;     \n        j = Right \u2013 1;  /*why not set Left+1 and Right-2?*/\n        for( ; ; ) \n        { \n            while ( A[ ++i ] &lt; Pivot ) { }  /*scan from left,\u4e0d\u80fd\u662f=\u53f7\uff0c\u5982\u679c\u662f&lt;=\u5728\u6240\u6709\u5143\u7d20\u76f8\u7b49\u65f6\u5c31\u76f4\u63a5\u626b\u63cf\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e86\uff0c\u76f8\u5f53\u4e8eN^2*/\n            while ( A[ --j ] &gt; Pivot ) { }  /*scan from right*/\n            if ( i &lt; j ) \n                Swap( &amp;A[ i ], &amp;A[ j ] );  /*adjust partition*/\n            else break;  /*partition done*/\n        } \n        Swap( &amp;A[ i ], &amp;A[ Right-1 ] ); /*restore pivot */ \n        Qsort( A, Left, i-1 );    /*recursively sort left part*/\n        Qsort( A, i+1, Right );   /*recursively sort right part*/\n    }  /*end if - the sequence is long*/\n    else /*do an insertion sort on the short subarray*/ \n        InsertionSort( A+Left, Right-Left+1 );\n}\n</code></pre> <p>Note : If set i = Left+1 and j = Right-2, there will be an infinite loop if A[i] = A[j] = pivot.</p> <p>\u5982\u679c\u51fa\u73b0arr[i]=arr[j]=pivot\u60c5\u51b5\uff0cfor\u5faa\u73af\u5c06\u8fdb\u5165\u6b7b\u5faa\u73af\uff0c\u56e0\u4e3a\u6bcf\u6b21\u68c0\u67e5\u5230arr[i]=pivot\u548carr[j]=pivot\u5c31\u4f1a\u7ec8\u6b62\u5faa\u73af\uff0c\u5e76\u4e14i&lt;j\uff0c\u76f8\u4e92\u4ea4\u6362\uff0c\u8fd8\u90fd\u662fpivot\uff0c\u65e0\u6cd5\u7ec8\u6b62\u3002</p> <p>\u200b     \u4e00\u4e2a\u6539\u8fdb\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u6211\u4eec\u5728\u6bcf\u6b21swap\u4e4b\u540e\uff0c\u4fee\u6539i\u548cj\u7684\u503c\uff0c\u5bf9i\u81ea\u52a0\uff0c\u5bf9j\u81ea\u51cf\uff0c\u8fd9\u79cd\u64cd\u4f5c\u662f\u53ef\u884c\u7684\uff0c\u56e0\u4e3a\u5f53\u524di\u548cj\u5143\u7d20\u4ea4\u6362\uff0c\u6ee1\u8db3i\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8epivot\uff0cj\u5143\u7d20\u5927\u4e8e\u7b49\u4e8epivot\u3002\u6539\u8fdb\u5982\u4e0b\uff1a</p> C<pre><code>   i = left + 1;  // \u4e00\u5f00\u59cb\u5c31\u5c06i\u7f6e\u4e3aleft+1\n        j = right - 2; // \u4e00\u5f00\u59cb\u5c31\u5c06j\u7f6e\u4e3aright-2\n\n        for (;;)\n        {\n            while (arr[i] &lt; pivot)\n            {\n                ++i;\n            }\n            while (arr[j] &gt; pivot)\n            {\n                --j;\n            }\n            if (i &lt; j)\n            {\n                swap(arr[i], arr[j]);\n                ++i; // \u4fee\u6539i\n                --j; // \u4fee\u6539j\n            }\n            else\n            {\n                break;\n            }\n        }\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#analysis","title":"Analysis","text":"\\[ T(N)=T(i)+T(N-i-1)+cN \\] <ul> <li> <p>\\(i\\) is the number of the elements in \\(S_1\\).</p> </li> <li> <p>The Worst Case   $$   T(N)=T(N-1)+cN   $$</p> </li> </ul> <p>$$   T(N-1)=T(N-2)+c(N-1)   $$</p> <p>$$   \\cdots   $$</p> <p>$$   T(2)=T(1)+2c   $$</p> <p>$$   T(N)=T(1)+c\\sum^N_{i=2}i=O(N^2)   $$</p> <ul> <li>The Best Case   $$   T(N)=2T(N/2)+cN   $$</li> </ul> <p>$$   \\frac{T(N)}{N}=\\frac{T(N/2)}{N/2}+c   $$</p> <p>$$   \\frac{T(N/2)}{N/2}=\\frac{T(N/4)}{N/4}+c   $$</p> <p>$$   \\cdots   $$</p> <p>$$   \\frac{T(2)}{2}=\\frac{T(1)}{1}+c   $$</p> <p>$$   \\frac{T(N)}{N}=\\frac{T(1)}{1}+c\\log N\\frac{T(N)}{N}=\\frac{T(1)}{1}+c\\log N   $$</p> <p>$$   T(N)=cN\\log N+N=O(N\\log N)   $$</p> <ul> <li> <p>The Average Case</p> </li> <li> <p>Assume the average value of \\(T( i )\\) for any \\(i\\) is \\(\\frac{1}{N}\\left[\\sum^{N-1}_{j=0}T(j)\\right]\\)     $$     T(N)=\\frac{2}{N}\\left[\\sum^{N-1}_{j=0}T(j)\\right]+cN     $$</p> </li> </ul> <p>$$   NT(N)=2\\left[\\sum^{N-1}_{j=0}T(j)\\right]+cN^2   $$</p> <p>$$   (N-1)T(N-1)=2\\left[\\sum^{N-2}_{j=0}T(j)\\right]+c(N-1)^2   $$</p> <p>$$   NT(N)-(N-1)T(N-1)=2T(N-1)+2cN-c   $$</p> <p>$$   NT(N)=(N+1)T(N-1)+2cN   $$</p> <p>$$   \\frac{T(N)}{N+1}=\\frac{T(N-1)}{N}+\\frac{2c}{N+1}   $$</p> <p>$$   \\frac{T(N-1)}{N}=\\frac{T(N-2)}{N-1}+\\frac{2c}{N}   $$</p> <p>$$   \\cdots   $$</p> <p>$$   \\frac{T(2)}{3}=\\frac{T(1)}{2}+\\frac{2c}{3}   $$</p> <p>$$   \\frac{T(N)}{N+1}=\\frac{T(1)}{2}+2c\\sum^{N+1}_{i=3}\\frac{1}{i}   $$</p> <p>$$   T(N)=O(N\\log N)   $$</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#quickselect","title":"Quickselect","text":"<ul> <li>\u67e5\u627e\u7b2c\\(K\\)\u6700\u5927(\u6700\u5c0f)\u5143</li> </ul> C<pre><code>/*Places the kth sma11est element in the kth position*/\n/*Because arrays start at 0, this will be index k-1*/\nvoid Qselect(ElementType A[ ], int k, int Left, int Right)\n{\n    int i, j;\n    ElementType Pivot;\n\n    if (Left + Cutoff &lt;= Right)\n    {\n        Pivot = Median3(A, Left, Right);\n        i = Left; \n        j = Right-1;\n        for( ; ; )\n        {\n            while(A[ ++i ] &lt; Pivot){ }\n            while(A[ --j ] &gt; Pivot){ }\n            if(i &lt; j)\n                Swap(&amp;A[ i ], &amp;A[ j ]);\n            else\n                break;\n        }\n        Swap(&amp;A[ i ], &amp;A[ Right-1 ]); /*Restore pivot*/\n\n        if(k &lt;= i)\n            Qselect(A, k, Left, i-1);\n        else if (k &gt; i+1)\n            Qselect(A, k, i+1, Right);\n    }\n    else /*Doan insertion sort on the subarray*/\n        InsertionSort(A+Left, Right-Left+1);\n}\n</code></pre> <p>\u6b63\u786e\u7b54\u6848\u662fD</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#78-sorting-large-structures","title":"7.8 Sorting Large Structures","text":"<ul> <li>Swapping large structures can be very much expensive.</li> <li>Add a pointer field to the structure and swap pointers instead \u2013 indirect sorting. Physically rearrange the structures at last if it is really necessary.</li> <li>Table Sort</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#79-a-general-lower-bound-for-sorting","title":"7.9 A General Lower Bound for Sorting","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#theorem-any-algorithm-that-sorts-by-comparisons-only-must-have-a-worst-case-computing-time-of-omeganlog-n","title":"[Theorem] Any algorithm that sorts by comparisons only must have a worst case computing time of \\(\\Omega(N\\log N)\\).","text":"<ul> <li>When sorting \\(N\\) distinct elements, there are \\(N!\\) different possible resu lts.</li> <li>Thus any decision tree must have at least \\(N!\\) leaves.</li> <li>If the height of the tree is \\(k\\), then \\(N! \\leq 2^{k-1}\\rarr k\\geq\\log(N!)+1\\) </li> <li>Since \\(N!\\geq (N/2)^{N/2}\\) and \\(\\log_2N!\\geq(N/2)\\log_2(N/2) = \\Theta(N\\log_2N )\\)</li> <li>Therefore \\(T(N)=k\\geq c\\cdot N\\log_2 N\\)</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#710-bucket-sort","title":"7.10 Bucket Sort","text":"Text Only<pre><code>Algorithm\n{\n    initialize count[ ];\n    while(read in a student\u2019s record)\n        insert to list count[stdnt.grade];\n    for(int i = 0; i &lt; M; i++) \n    {\n        if(count[i]) output list count[i];\n    }\n}\n</code></pre> \\[ T(N,M)=O(M+N) \\]"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#711-radix-sort","title":"7.11 Radix Sort","text":"<ul> <li>\\(T=O(P(N+B))\\) where \\(P\\) is the number of passes, \\(N\\) is the number of elements to sort, and \\(B\\) is the number of buckets.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK13/#msdmost-significant-digit-sort-and-lsdleast-significant-digit-sort","title":"MSD(Most Significant Digit) Sort and LSD(Least Significant Digit) Sort","text":"<ul> <li>\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff1a\u5192\u6ce1\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u57fa\u6570\u6392\u5e8f</li> <li>\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff1a\u9009\u62e9\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u5e0c\u5c14\u6392\u5e8f\u3001\u5806\u6392\u5e8f</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/","title":"hasing linear probing separate chaining","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#week-14","title":"WEEK 14","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#8-hashing","title":"8 Hashing","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#81-general-idea","title":"8.1 General Idea","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#symbol-table-adt","title":"Symbol Table ADT","text":"<ul> <li>Objects : A set of name-attribute pairs, where the names are unique</li> <li>Operations :</li> <li>SymTab Create(TableSize) </li> <li>Boolean IsIn(symtab, name)</li> <li>Attribute  Find(symtab, name) </li> <li>SymTab  Insert(symtab, name, attr)</li> <li>SymTab  Delete(symtab, name) </li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#hash-tables","title":"Hash Tables","text":"<ul> <li>A collision occurs when we hash two nonidentical identifiers into the same bucket.</li> <li>An overflow occurs when we hash a new identifier into a full bucket.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#82-hash-function","title":"8.2 Hash Function","text":"<ul> <li>\\(f(x)\\) must be easy to compute and minimize the number of collisions.</li> <li>\\(f(x)\\) should be unbiased. For any \\(x\\) and any \\(i\\), we have that \\(Probability(f(x)=i)=\\frac{1}{b}\\). Such kind of a hash function is called a uniform hash function.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#83-separate-chaining","title":"8.3 Separate Chaining","text":"<ul> <li>keep a list of all keys that hash to the same value</li> </ul> C<pre><code>struct ListNode; \ntypedef struct ListNode *Position; \nstruct HashTbl; \ntypedef struct HashTbl *HashTable; \nstruct ListNode { \n    ElementType Element; \n    Position Next; \n}; \ntypedef Position List; \n/* List *TheList will be an array of lists, allocated later */ \n/* The lists use headers (for simplicity), */ \n/* though this wastes space */ \nstruct HashTbl { \n    int TableSize; \n    List *TheLists; \n}; \n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#create-an-empty-table","title":"Create an empty table","text":"C<pre><code>HashTable InitializeTable( int TableSize ) \n{   \n    HashTable H; \n    int i; \n    if ( TableSize &lt; MinTableSize ) \n    { \n        Error( \"Table size too small\" );  \n        return NULL;  \n    } \n    H = malloc( sizeof( struct HashTbl ) );  /*Allocate table*/\n    if ( H == NULL ) FatalError( \"Out of space!!!\" ); \n    H-&gt;TableSize = NextPrime( TableSize );  /*Better be prime*/\n    H-&gt;TheLists = malloc( sizeof( List )* H-&gt;TableSize );  /*Array of lists*/\n    if ( H-&gt;TheLists == NULL ) FatalError( \"Out of space!!!\" );\n    H-&gt;TheList = malloc(H-&gt;TableSize*sizeof(struct ListNode));\n    for( i = 0; i &lt; H-&gt;TableSize; i++ ) \n    {   /*Allocate list headers*/\n        //H-&gt;TheLists[ i ] = malloc( sizeof( struct ListNode ) ); /* Slow! */\n        if ( H-&gt;TheLists[ i ] == NULL ) FatalError( \"Out of space!!!\" ); \n        else H-&gt;TheLists[ i ]-&gt;Next = NULL;\n    } \n    return H; \n} \n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#find-a-key-from-a-hash-table","title":"Find a key from a hash table","text":"C<pre><code>Position Find ( ElementType Key, HashTable H ) \n{ \n    Position P; \n    List L; \n    L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; \n    P = L-&gt;Next; \n    while( P != NULL &amp;&amp; P-&gt;Element != Key )  /*Probably need strcmp*/ \n        P = P-&gt;Next; \n    return P; \n} \n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#insert-a-key-into-a-hash-table","title":"Insert a key into a hash table","text":"C<pre><code>void Insert ( ElementType Key, HashTable H ) \n{ \n    Position Pos, NewCell; \n    List L; \n    Pos = Find( Key, H ); \n    if ( Pos == NULL ) \n    {   /*Key is not found, then insert*/\n        NewCell = malloc( sizeof( struct ListNode ) ); \n        if ( NewCell == NULL ) FatalError( \"Out of space!!!\" ); \n        else \n        { \n            L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; /*Compute again is bad*/\n            NewCell-&gt;Next = L-&gt;Next; \n            NewCell-&gt;Element = Key; /*Probably need strcpy!*/ \n            L-&gt;Next = NewCell; \n        } \n    } \n} \n</code></pre> <p>Note : Make the TableSize about as large as the number of keys expected (i.e. to make the loading density factor \\(\\lambda\\approx\\)1).</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#84-open-addressing","title":"8.4 Open Addressing","text":"<ul> <li>find another empty cell to solve collision(avoiding pointers)</li> </ul> Text Only<pre><code>Algorithm: insert key into an array of hash table\n{\n    index = hash(key);\n    initialize i = 0 ------ the counter of probing;\n    while (collision at index) \n    {\n        index = (hash(key)+f(i))%TableSize; /*f(i) is collision resolving function*/\n        if (table is full) break;\n        else i++;\n    }\n    if (table is full) ERROR (\u201cNo space left\u201d);\n    else insert key at index;\n}\n</code></pre> <p>Note : Generally \\(\\lambda&lt;0.5\\).</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK14/#linear-probing","title":"Linear Probing","text":"<ul> <li>\\(F(i)\\) is a linear function of \\(i\\), such as \\(F(i)=i\\).</li> <li>\u9010\u4e2a\u63a2\u6d4b\u6bcf\u4e2a\u5355\u5143(\u5fc5\u8981\u65f6\u53ef\u4ee5\u7ed5\u56de)\u4ee5\u67e5\u627e\u51fa\u4e00\u4e2a\u7a7a\u5355\u5143</li> <li>\u4f7f\u7528\u7ebf\u6027\u63a2\u6d4b\u7684\u9884\u671f\u63a2\u6d4b\u6b21\u6570\u5bf9\u4e8e\u63d2\u5165\u548c\u4e0d\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u5927\u7ea6\u662f\\(\\frac{1}{2}(1+\\frac{1}{(1-\\lambda)^2})\\)\uff0c\u5bf9\u4e8e\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u662f\\(\\frac{1}{2}(1+\\frac{1}{1-\\lambda})\\)</li> <li>Cause primary clustering : any key that hashes into the cluster will add to the cluster after several attempts to resolve the collision.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK15/","title":"rehashing quadratic probing","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK15/#week-15","title":"WEEK 15","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK15/#quadratic-probing","title":"Quadratic Probing","text":"<ul> <li>\\(F(i)\\) is a quadratic function of \\(i\\), such as \\(F(i)=i^2\\).</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK15/#theorem-if-quadratic-probing-is-used-and-the-table-size-is-prime-then-a-new-element-can-always-be-inserted-if-the-table-is-at-least-half-empty","title":"[Theorem] If quadratic probing is used, and the table size is prime, then a new element can always be inserted if the table is at least half empty.","text":"<p>Note : If the table size is a prime of the form \\(4k + 3\\), then the quadratic probing  \\(f(i) = \\pm i^2\\) can probe the entire table.</p> C<pre><code>HashTable InitializeTable(int TableSize)\n{\n    HashTable H;\n    int i;\n    if(TableSize &lt; MinTableSize)\n    {\n        Error(\"Table size too small\");\n        return NULL;\n    }\n    /*Allocate table*/\n    H = malloc(sizeof(struct HashTbl));\n    if(H == NULL)\n        Fatal Error(\"Out of space!!!\");\n    H-&gt;TableSize = NextPrime(TableSize);\n\n    /*Allocate array of Cells*/\n    H-&gt;TheCells = malloc(sizeof(Cell)*H-&gt;TableSize);\n    if(H-&gt;TheCells == NULL)\n        FatalError(\"Out of space!!!\");\n\n    for(i = 0; i &lt; H-&gt;TableSize; i++)\n        H-&gt;TheCells[ i ].Info = Empty;\n    return H;\n}\n</code></pre> C<pre><code>Position Find(ElementType Key, HashTable H) \n{   \n    Position CurrentPos; \n    int CollisionNum; \n    CollisionNum = 0; \n    CurrentPos = Hash(Key, H-&gt;TableSize); \n    while(H-&gt;TheCells[ CurrentPos ].Info != Empty &amp;&amp;\n          H-&gt;TheCells[ CurrentPos ].Element != Key) \n    { \n        CurrentPos += 2*++CollisionNum-1; \n        if (CurrentPos &gt;= H-&gt;TableSize)  \n            CurrentPos -= H-&gt;TableSize;   /*Faster than mod*/\n    } \n    return CurrentPos; \n} \n</code></pre> C<pre><code>void Insert(ElementType Key, HashTable H) \n{ \n    Position Pos; \n    Pos = Find(Key, H); \n    if (H-&gt;TheCells[ Pos ].Info != Legitimate) \n    { /*OK to insert here*/ \n        H-&gt;TheCells[ Pos ].Info = Legitimate; \n        H-&gt;TheCells[ Pos ].Element = Key; /*Probably need strcpy*/ \n    } \n} \n</code></pre> <p>Note :</p> <ul> <li>Insertion will be seriously slowed down if there are too many deletions intermixed with insertions.</li> <li>Although primary clustering is solved, secondary clustering occurs, that is, keys that hash to the same position will probe the same alternative cells.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK15/#double-hashing","title":"Double Hashing","text":"<ul> <li>\\(f(i)=i*hash_2(x)\\)</li> <li>\\(hash_2(x)\\not\\equiv 0\\)</li> <li>make sure that all cells can be probed</li> <li>\\(hash_2(x)=R-(x\\%R)\\) with \\(R\\) a prime smaller than TableSize, will work well.</li> </ul> <p>Note :</p> <ul> <li>If double hashing is correctly implemented, simulations imply that the expected number of probes is almost the same as for a random collision resolution strategy.</li> <li>Quadratic probing does not require the use of a second hash function and is thus likely to be simpler and faster in practice.</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/2%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/webnotes/DS%20WEEK15/#85-rehashing","title":"8.5 Rehashing","text":"<ul> <li>Build another table that is about twice as big.</li> <li>Scan down the entire original hash table for non-deleted elements.</li> <li>Use a new function to hash those elements into the new table.</li> <li>When to rehash</li> <li>As soon as the table is half full</li> <li>When an insertion fails</li> <li>When the table reaches a certain load factor</li> </ul> <p>Note : Usually there should have been N/2 insertions before rehash, so O(N) rehash only adds a constant cost to each insertion. However, in an interactive system, the unfortunate user whose insertion caused a rehash could see a slowdown.</p> C<pre><code>HashTable Rehash(HashTable H)\n{\n    int i, OldSize;\n    Cell *OldCells;\n    OldCells = H-&gt;TheCells;\n    OldSize = H-&gt;TableSize;\n\n    /*Get a new, empty table*/\n    H = InitializeTable(2*OldSize);\n    /*Scan through old table, reinserting into new*/\n    for(i = 0; i &lt; OldSize; i++)\n        if(OldCells[i].Info == Legitimate)\n            Insert(OldCells[i].Element, H);\n    free(OldCells);\n\n    return H;\n}\n</code></pre>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/","title":"DIP","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#_1","title":"\u56fe\u50cf\u4fe1\u606f\u5904\u7406","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#_2","title":"\u8bfe\u7a0b\u5b66\u4e60\u5185\u5bb9\u00b6","text":"<p>\u6559\u6388\u5185\u5bb9\u4ee5\u56fe\u50cf\u57fa\u672c\u6982\u5ff5\u3001\u57fa\u672c\u64cd\u4f5c\u4e3a\u57fa\u7840\uff0c\u56f4\u7ed5\u56fe\u50cf\u5408\u6210\u4e0e\u7f16\u8f91\u6838\u5fc3\uff0c\u5e76\u4ecb\u7ecd\u4e86\u5f53\u524d\u6570\u5b57\u56fe\u50cf\u5904\u7406\u7684\u73b0\u72b6\u3001\u53d1\u5c55\u548c\u4e00\u4e9b\u5173\u952e\u6280\u672f\u3002 \u4e3b\u8981\u77e5\u8bc6\u70b9\u4e3a\uff1a</p> <ul> <li>\u56fe\u50cf\u83b7\u53d6</li> <li>\u56fe\u50cf\u663e\u793a\u548c\u6253\u5370</li> <li>\u56fe\u50cf\u5b58\u50a8\u548c\u4f20\u8f93</li> <li>\u56fe\u50cf\u589e\u5f3a\u548c\u6062\u590d</li> <li>\u56fe\u50cf\u8bc6\u522b\u548c\u7406\u89e3</li> </ul>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#_3","title":"\u5206\u6570\u6784\u6210\u00b6","text":"<p>\u5377\u9762\uff0860%\uff09+ \u4f5c\u4e1a\uff0840%\uff09</p> <p>\u4e00\u5b66\u671f\u5927\u6982\u4f1a\u6709 5~7 \u6b21\u4f5c\u4e1a\uff0c\u8981\u4f7f\u7528 C/C++ \u7f16\u7a0b\uff0c\u4e0d\u53ef\u8c03\u7528 OpenCV \u7b49\u56fe\u5f62\u5904\u7406\u5e93\u3002</p> <p>\u77e2\u91cf\u56fe\u683c\u5f0f</p> <p>BITMAPFILEHEADER</p> <p>BITMAPINFOHEDER</p> <p>morphing \u53d8\u5f62\u3001\u6620\u5c04</p> <p>bilateral filter \u53cc\u8fb9\u6ee4\u6ce2</p> <p>guided filter</p> <p>\u6570\u5b57\u56fe\u50cf\u57fa\u672c\u5904\u7406\u2014\u2014\u7a7a\u95f4\u6ee4\u6ce2(spatial filtering) - Bracer - \u535a\u5ba2\u56ed (cnblogs.com)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-1-basic-concept-and-programming-introduction","title":"Chapter 1 Basic concept and programming introduction","text":"<p>\u56fe\u50cf\u4fe1\u606f\u5904\u7406\u7684\u5e94\u7528\uff1a image retrieval, scene classification</p> <p>Object recognition: face detection </p> <p>Interactive image retrieval: Mindfinder-&gt; \u6839\u636esketch\u548c\u9644\u52a0\u7684prompt\uff08\u989c\u8272\uff0c\u6587\u672c\uff09\u6765\u627e\u7f51\u4e0a\u7684\u56fe\u7247</p> <p>\u25aaGrayscale image and color image representation</p> <p>\u25aaColor space transfer</p> <p>\u25aaImage format</p> <p></p> <p></p> <p></p> <p>\u25aaData structure of image: some typical ones</p> <p>\u25aaProgramming for image processing</p> <p>\u25aaAn image in computer: array(s)</p> <p>\u25aaImage file: its format and read/write</p> <p>\u25aaAccess DIB: some Windows APIs</p> <p>\u25aaAn image processing example for VC++</p> <p>\u25aaImage processing in Matlab: some typical instructions</p> <p>\u25aaPopular image processing softwares</p> <p>\u5149\u5708\u7684\u5927\u5c0f\u4e0e\u666f\u6df1\u6709\u5bc6\u5207\u5173\u7cfb</p> <p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e3b\u4f53\u53d6\u666f\u548c\u76f8\u673a\u4f4d\u7f6e\uff0cDOF \u53d7\u955c\u5934\u5149\u5708\u76f4\u5f84\u7684\u63a7\u5236\uff0c\u5149\u5708\u76f4\u5f84\u901a\u5e38\u6307\u5b9a\u4e3a f \u6570\uff0c\u5373\u955c\u5934\u7126\u8ddd\u4e0e\u5149\u5708\u76f4\u5f84\u7684\u6bd4\u503c\u3002\u51cf\u5c0f\u5149\u5708\u76f4\u5f84\uff08\u589e\u5927 f \u503c\uff09\u53ef\u4ee5\u589e\u5927\u666f\u6df1\uff1b\u4f46\u540c\u65f6\u4e5f\u4f1a\u51cf\u5c0f\u900f\u5c04\u5149\u7684\u6570\u91cf\uff0c\u5e76\u589e\u52a0\u884d\u5c04\uff0c\u8fd9\u5c31\u5bf9\u901a\u8fc7\u51cf\u5c0f\u5149\u5708\u76f4\u5f84\u6765\u589e\u5927\u666f\u6df1\u7684\u7a0b\u5ea6\u65bd\u52a0\u4e86\u5b9e\u9645\u9650\u5236\u3002</p> <p>\u7126\u70b9\u524d\u540e\u5404\u6709\u4e00\u4e2a\u5bb9\u8bb8\u5f25\u6563\u5706\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u53eb\u505a\u666f\u6df1\u3002\u666f\u6df1\u968f\u955c\u5934\u7684\u7126\u8ddd\u3001\u5149\u5708\u503c\u3001\u62cd\u6444\u8ddd\u79bb\u800c\u53d8\u5316</p> <p>](1)\u3001\u955c\u5934\u5149\u5708\uff1a  \u5149\u5708\u8d8a\u5927\uff0c\u666f\u6df1\u8d8a\u5c0f\uff1b\u5149\u5708\u8d8a\u5c0f\uff0c\u666f\u6df1\u8d8a\u5927\uff1b  (2)\u3001\u955c\u5934\u7126\u8ddd  \u955c\u5934\u7126\u8ddd\u8d8a\u957f\uff0c\u666f\u6df1\u8d8a\u5c0f\uff1b\u7126\u8ddd\u8d8a\u77ed\uff0c\u666f\u6df1\u8d8a\u5927\uff1b  (3)\u3001\u62cd\u6444\u8ddd\u79bb  \u8ddd\u79bb\u8d8a\u8fdc\uff0c\u666f\u6df1\u8d8a\u5927\uff1b\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u666f\u6df1\u8d8a\u5c0f</p> <p>For a given subject framing and camera position, the DOF is controlled by the lens aperture diameter, which is usually specified as the f-number, the ratio of lens focal length to aperture diameter. Reducing the aperture diameter (increasing the f-number) increases the DOF; however, it also reduces the amount of light transmitted, and increases diffraction, placing a practical limit on the extent to which DOF can be increased by reducing the aperture diameter.</p> <p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e3b\u4f53\u53d6\u666f\u548c\u76f8\u673a\u4f4d\u7f6e\uff0c\u666f\u6df1\u53d7\u955c\u5934\u5149\u5708\u76f4\u5f84\u7684\u63a7\u5236\uff0c\u5149\u5708\u76f4\u5f84\u901a\u5e38\u6307\u5b9a\u4e3a f \u6570\uff0c\u5373\u955c\u5934\u7126\u8ddd\u4e0e\u5149\u5708\u76f4\u5f84\u7684\u6bd4\u503c\u3002\u51cf\u5c0f\u5149\u5708\u76f4\u5f84\uff08\u589e\u5927 f \u503c\uff09\u53ef\u4ee5\u589e\u5927\u666f\u6df1\uff1b\u4f46\u540c\u65f6\u4e5f\u4f1a\u51cf\u5c0f\u900f\u5c04\u5149\u7684\u6570\u91cf\uff0c\u5e76\u589e\u52a0\u884d\u5c04\uff0c\u8fd9\u5c31\u5bf9\u901a\u8fc7\u51cf\u5c0f\u5149\u5708\u76f4\u5f84\u6765\u589e\u5927\u666f\u6df1\u7684\u7a0b\u5ea6\u65bd\u52a0\u4e86\u5b9e\u9645\u9650\u5236\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-2-binary-image-and-morphology","title":"Chapter 2 \u2022Binary image and morphology","text":"<p>\u2013Binary image</p> <p>\u2013How to obtain a binary image: binarization</p> <p>\u2013Image morphological operation</p> <p>\u2013Definition of \u2018set\u2019</p> <p>\u2013Erosion</p> <p>\u2013Dilation</p> <p>\u2013\u2018Open\u2019 operation</p> <p>\u2013\u2018Close\u2019 operation</p> <p>\u2013Hit-or-miss transform</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-3-basic-operations-on-image-i","title":"Chapter 3 \u2022Basic operations on image (I)","text":"<p>\u2013Grayscale image transform</p> <p>\u2022Visibility of image</p> <p>\u2022Visibility enhancement: Logarithm</p> <p>\u2022Histogram of image</p> <p>\u2022Histogram equalization</p> <p>\u2022Etc.</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-4-basic-operations-on-imageii","title":"Chapter 4 \u2022Basic operations on image\uff08II\uff09","text":"<p>\u2013Simple geometric transform</p> <p>\u65cb\u8f6c</p> <p>\u2013Interpolation</p> <p>\u2013Application</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-5-image-morphing","title":"Chapter 5 \u2022Image morphing","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#image-morphing-basic","title":"\u2013Image morphing basic","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#static-morphing","title":"\u2013Static morphing","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#dynamic-morphing","title":"\u2013Dynamic morphing","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#feature-point-based-morphing","title":"\u2013Feature point based morphing","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#grid-based-morphing","title":"\u2013Grid based morphing","text":"<p>\u8fd9\u91cc\u8ba8\u8bba\u7684Morph\u53d8\u5f62\u4e0d\u540c\u4e8e\u4e00\u822c\u7684\u51e0\u4f55\u53d8\u6362(Warp)\u3002</p> <p>Morph\u53d8\u5f62\u6307\u666f\u7269\u7684\u5f62\u4f53\u53d8\u5316\uff0c\u5b83\u662f\u4f7f\u4e00\u5e45\u56fe\u50cf\u9010\u6b65\u53d8\u5316\u5230\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u5904\u7406\u65b9\u6cd5\u3002</p> <p>\u8fd9\u662f\u4e00\u79cd\u8f83\u590d\u6742\u7684\u4e8c\u7ef4\u56fe\u50cf\u5904\u7406\uff0c\u9700\u8981\u5bf9\u5404\u50cf\u7d20\u70b9\u7684\u989c\u8272\u3001\u4f4d\u7f6e\u4f5c\u53d8\u6362\u3002</p> <p>\u53d8\u5f62\u7684\u8d77\u59cb\u56fe\u50cf\u548c\u7ed3\u675f\u56fe\u50cf\u5206\u522b\u4e3a\u4e24\u5e45\u5173\u952e\u5e27\uff0c\u4ece\u8d77\u59cb\u5f62\u72b6\u53d8\u5316\u5230\u7ed3\u675f\u5f62\u72b6\u7684\u5173\u952e\u5728\u4e8e\u81ea\u52a8\u5730\u751f\u6210\u4e2d\u95f4\u5f62\u72b6\uff0c\u4e5f\u5373\u81ea\u52a8\u751f\u6210\u4e2d\u95f4\u5e27\u3002</p> <p>\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5e45\u56fe\u7684\u8f6c\u6362\u4f5c\u9759\u6001\u53d8\u6362\u3002\u4ece\u4e00\u5e45\u56fea\u9010\u6e10\u53d8\u5316\u6210\u7b2c\u4e8c\u5e45\u56feb\u3002</p> <p>\u539f\u7406\uff1a\u8ba9\u56fea\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\uff0c\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u50cf\u7d20\u7684\u989c\u8272\u3002</p> <p>\u65b9\u6cd5\uff1a\u6839\u636e\u53d8\u6362\u7684\u5feb\u6162\uff0c\u8bbe\u7f6e\u76f8\u5e94\u7684\u6b65\u957f\uff0c\u5c06\u56fea\u6bcf\u4e00\u70b9\u7684RGB\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u8c61\u7d20\u7684RGB\u3002\u53ef\u4ee5\u9009\u62e9\u7b49\u6bd4\u6216\u7b49\u5dee\u7684\u65b9\u5f0f\uff0c\u6216\u5176\u5b83\u65b9\u5f0f\u8ba9\uff1ara--&gt;rb\u3002</p> <p>\u5bf9\u4e8e\u7070\u5ea6\u56fe\u50cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u6bd4\u6216\u7b49\u5dee\u7ea7\u6570\u5b9a\u4e49\u6b65\u957f\uff0c\u4f7f\u989c\u8272\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#_4","title":"\u57fa\u4e8e\u7279\u5f81\u70b9\u7684\u53d8\u5f62","text":"<p>\u57fa\u4e8e\u7279\u5f81\u70b9\u7684\u53d8\u5f62\u6d89\u53ca\u8bc6\u522b\u4e24\u5e45\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u7279\u5b9a\u7279\u5f81\u6216\u6807\u5fd7\uff0c\u4f8b\u5982\u9762\u90e8\u53d8\u5f62\u65f6\u8138\u90e8\u7684\u5173\u952e\u70b9\u3002\u8fd9\u4e9b\u7279\u5f81\u70b9\u88ab\u7528\u4f5c\u53d8\u5f62\u8fc7\u7a0b\u7684\u53c2\u8003\u70b9\uff0c\u786e\u4fdd\u5728\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u91cd\u8981\u7684\u89c6\u89c9\u5143\u7d20\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#_5","title":"\u57fa\u4e8e\u7f51\u683c\u7684\u53d8\u5f62","text":"<p>\u57fa\u4e8e\u7f51\u683c\u7684\u53d8\u5f62\uff0c\u4e5f\u79f0\u4e3a\u57fa\u4e8e\u683c\u7684\u53d8\u5f62\uff0c\u5c06\u56fe\u50cf\u5206\u6210\u7f51\u683c\u6216\u683c\u70b9\u3002\u8fd9\u4e9b\u70b9\u4f5c\u4e3a\u63a7\u5236\u9876\u70b9\uff0c\u53ef\u4ee5\u88ab\u64cd\u7eb5\u4ee5\u4f7f\u56fe\u50cf\u53d1\u751f\u53d8\u5f62\u3002\u901a\u8fc7\u5e73\u6ed1\u5730\u63d2\u503c\u8fd9\u4e9b\u7f51\u683c\u70b9\u7684\u79fb\u52a8\uff0c\u4ece\u7b2c\u4e00\u5e45\u56fe\u50cf\u5230\u7b2c\u4e8c\u5e45\u56fe\u50cf\uff0c\u5b9e\u73b0\u4e86\u56fe\u50cf\u7684\u53d8\u5f62\uff0c\u4f7f\u5f97\u53d8\u5f62\u66f4\u52a0\u7075\u6d3b\u548c\u8be6\u7ec6\u3002</p> <p>\u603b\u4e4b\uff0c\u56fe\u50cf\u53d8\u5f62\u6d89\u53ca\u901a\u8fc7\u4e00\u7cfb\u5217\u4e2d\u95f4\u56fe\u50cf\u5c06\u4e00\u5e45\u56fe\u50cf\u8f6c\u6362\u6210\u53e6\u4e00\u5e45\u56fe\u50cf\u3002\u9759\u6001\u53d8\u5f62\u5173\u6ce8\u5355\u4e00\u3001\u9759\u6001\u7684\u8f6c\u6362\uff0c\u800c\u52a8\u6001\u53d8\u5f62\u8003\u8651\u4e86\u65f6\u95f4\u4e0a\u7684\u8f6c\u6362\u3002\u57fa\u4e8e\u7279\u5f81\u70b9\u7684\u53d8\u5f62\u4f9d\u8d56\u4e8e\u7279\u5b9a\u7684\u6807\u5fd7\u6765\u8fdb\u884c\u53d8\u5f62\uff0c\u800c\u57fa\u4e8e\u7f51\u683c\u7684\u53d8\u5f62\u4f7f\u7528\u4e00\u7cfb\u5217\u70b9\u6765\u8fdb\u884c\u66f4\u52a0\u7075\u6d3b\u548c\u8be6\u7ec6\u7684\u53d8\u5f62\u3002\u6bcf\u79cd\u65b9\u6cd5\u90fd\u63d0\u4f9b\u4e86\u72ec\u7279\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u89c6\u89c9\u4e0a\u5f15\u4eba\u6ce8\u76ee\u7684\u56fe\u50cf\u8f6c\u6362\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-6-image-convolution","title":"Chapter 6 \u2022Image convolution","text":"<p>\u20131-D convolution</p> <p>\u2013Property of convolution</p> <p>\u2013Discrete convolution</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-7-image-filtering","title":"Chapter 7 \u2022Image filtering","text":"<p>\u2013Smoothing</p> <p>\u2013Sharpening</p> <p>\u2013Bilateral filter</p> <p>\u2013Guided filter (Optional)</p> <p>\u53bb\u9664\u566a\u97f3 image smoothing</p> <p>\u9ad8\u65af\u6a21\u7cca</p> <p>Split an image into:</p> <p>large-scale features, structure</p> <p>small-scale features, texture</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#bilateral-filtering","title":"bilateral filtering\uff1a","text":"<p>An image has two main characteristics</p> <p>\u25aaThe space domain S, which is the set of possible positions in an image. This is related to the resolution, i.e., the number of rows and columns in the image.</p> <p>\u25aaThe intensity domain R, which is the set of possible pixel values. The number of bits used to represent the pixel value may vary. Common pixel representations are unsigned bytes (0 to 255) and floating point.</p> <p>Every sample is replaced by a weighted average of its neighbors,</p> <p>These weights reflect two forces</p> <p>\u25aaHow close are the neighbor and the center sample, so that larger weight to closer samples,</p> <p>\u25aaHow similar are the neighbor and the center sample \u2013 larger weight to similar samples.</p> <p>All the weights should be normalized to preserve the local mean.</p> <p>\u56de\u987e\u9ad8\u65af\u6a21\u7cca\u7684\u95ee\u9898\uff1a\u786e\u5b9e\u4f7f\u56fe\u7247\u66f4\u5e73\u6ed1\u4e86\uff0c\u4f46\u662f\u6ca1\u6709\u4fdd\u7559\u8fb9\u7f18\u4fe1\u606f\uff0c</p> <p>Does smooth images  But smooths too much:  edges are blurred.</p> <p>\u25aaOnly spatial distance matters</p> <p>\u25aaNo edge term</p> <p>Space and Intensity Parameters</p> <p>\u25fcspace \\(\\sigma_s\\) : spatial extent of the kernel, size of the considered neighborhood.</p> <p>\u25fcintensity \\(\\sigma_r\\) : amplitude extent of an edge</p> <p></p> <p>\\(\\sigma_{r}\\)\u8d8b\u4e8e\u65e0\u7a77\uff0c\u5c31\u662f\u9ad8\u65af\u6a21\u7cca\uff08\u6574\u4e2a\u56fe\u90fd\u8003\u8651\uff0c\u76f8\u5f53\u4e8e\u6ca1\u8003\u8651\uff09</p> <p>\\(\\sigma_{s}\\)\u53d8\u5927\u7684\u65f6\u5019\u8fb9\u754c\u5185\u90e8\u7684\u7eb9\u7406\u88ab\u6a21\u7cca\u7684\u7a0b\u5ea6\u52a0\u6df1\uff0c\u4f46\u8fb9\u754c\u88ab\u4fdd\u7559</p> <p>\u9009\u62e9\u53c2\u6570\u53d6\u51b3\u4e8e\u5e94\u7528\u573a\u666f</p> <p>For instance:</p> <p>space parameter: proportional to image size e.g., 2% of image diagonal </p> <p>intensity parameter: proportional to edge amplitude</p> <p>e.g., mean or median of image gradients independent of resolution and exposure</p> <p>\u56fe\u50cf\u7070\u5ea6\u68af\u5ea6\u7684\u4e2d\u4f4d\u6570/\u5e73\u5747\u6570\u53d7\u6781\u7aef\u60c5\u51b5\u5f71\u54cd\u8f83\u5c0f\uff0c\u80fd\u591f\u53cd\u6620\u56fe\u50cf\u6574\u4f53\u8fb9\u7f18\u7eb9\u7406\u7279\u5f81\u7684\u5f3a\u70c8\u7a0b\u5ea6\uff0c\u4e0d\u53d7\u5206\u8fa8\u7387\u548c\u66dd\u5149\u7a0b\u5ea6\u5f71\u54cd</p> <p>\u964d\u566a\u9009\u62e9\u5c0f\u7684spatial \\(\\sigma_{s}\\)\u4e0d\u7528\u52a0\u901f\u64cd\u4f5c\uff0cAdapt intensity sigma \\(\\sigma_{s}\\) to noise level </p> <p>\u5bfc\u5411\u6ee4\u6ce2\uff1aguided filtering  \u8f93\u5165\u4e00\u4e2aguided image</p> <p>\u89e3\u51b3gradient reversal\u7684\u95ee\u9898</p> <p>\u5728\u5bfc\u5411\u6ee4\u6ce2\uff08guided filtering\uff09\u4e2d\uff0c\u5bfc\u5411\u56fe\u50cf\uff08guided image\uff09\u901a\u5e38\u662f\u4ece\u8f93\u5165\u56fe\u50cf\u4e2d\u5f97\u5230\u7684\u3002\u5bfc\u5411\u56fe\u50cf\u7528\u4e8e\u6307\u5bfc\u6ee4\u6ce2\u5668\u4ee5\u66f4\u597d\u5730\u4fdd\u7559\u56fe\u50cf\u7684\u7ec6\u8282\u548c\u8fb9\u7f18\u4fe1\u606f\u3002</p> <p>\u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u8f93\u5165\u56fe\u50cf\u672c\u8eab\u4f5c\u4e3a\u5bfc\u5411\u56fe\u50cf\u3002\u8fd9\u610f\u5473\u7740\u5728\u8fdb\u884c\u6ee4\u6ce2\u65f6\uff0c\u8f93\u5165\u56fe\u50cf\u7684\u67d0\u4e2a\u7248\u672c\uff08\u901a\u5e38\u662f\u5e73\u6ed1\u7248\u672c\uff09\u88ab\u7528\u4f5c\u81ea\u8eab\u7684\u5f15\u5bfc\u3002\u8fd9\u79cd\u65b9\u6cd5\u6709\u52a9\u4e8e\u786e\u4fdd\u5728\u8fdb\u884c\u6ee4\u6ce2\u65f6\u4fdd\u7559\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u548c\u7ed3\u6784\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7\u4f7f\u7528\u4e0e\u8f93\u5165\u56fe\u50cf\u76f8\u5173\u7684\u5176\u4ed6\u4fe1\u606f\u6765\u751f\u6210\u5bfc\u5411\u56fe\u50cf\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f93\u5165\u56fe\u50cf\u7684\u68af\u5ea6\u4fe1\u606f\u6216\u8005\u5176\u4ed6\u76f8\u5173\u56fe\u50cf\u7684\u4fe1\u606f\u4f5c\u4e3a\u5bfc\u5411\u56fe\u50cf\uff0c\u4ee5\u4fbf\u5728\u6ee4\u6ce2\u8fc7\u7a0b\u4e2d\u66f4\u597d\u5730\u4fdd\u7559\u7279\u5b9a\u7684\u7ec6\u8282\u548c\u7ed3\u6784\u3002</p> <p>\u603b\u7684\u6765\u8bf4\uff0c\u5bfc\u5411\u56fe\u50cf\u7684\u83b7\u53d6\u65b9\u5f0f\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5e94\u7528\u573a\u666f\u548c\u5bf9\u56fe\u50cf\u7ec6\u8282\u4fdd\u7559\u7684\u8981\u6c42\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#lab-1","title":"Lab 1","text":"<p>\u25fcRead a color bmp;</p> <p>\u25fcRGB-&gt;YUV;</p> <p>\u25fcColor to gray: gray=Y in YUV color space;</p> <p>\u25fcRearrange gray intensity to lie between [0,255];</p> <p>\u25fcWrite a grayscale bmp;</p> <p>\u25fcChange the luminance value Y;</p> <p>\u25fcYUV-&gt;RGB;</p> <p>\u25fcWrite a color bmp.</p> <p>\u56fe\u50cf\u6587\u4ef6\u5934\uff0c\u4fe1\u606f\u5934\u683c\u5f0f\uff0c\u8bfb\u5199\u64cd\u4f5c</p> <p>\u56fe\u50cf\u589e\u5f3a\u6280\u672f</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-8-fourier-transform","title":"Chapter 8 \u2022Fourier transform","text":"<p>\u2013Fourier and his work</p> <p>\u2013Background of Fourier transform</p> <p>\u2013Fourier transform</p> <p>\u2013Discrete Fourier transform (1D)</p> <p>\u2013FFT</p> <p>\u2013FFT in Matlab</p> <p>\u20132D Fourier transform</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/DIP/#chapter-9-image-feature","title":"Chapter 9 \u2022Image feature","text":"<p>\u2013SIFT</p> <p>\u2013SURF</p> <p>\u2013Deep feature</p> <p>\u5f15\u5165\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u53ef\u4ee5\u5927\u89c4\u6a21\u51cf\u5c11\u6743\u91cd\u53c2\u6570\u8bad\u7ec3\u91cf\u7684\u4e3b\u8981\u539f\u56e0\u5982\u4e0b\uff1a</p> <ol> <li>\u53c2\u6570\u5171\u4eab\uff1a\u5728CNN\u4e2d\uff0c\u5377\u79ef\u5c42\u4f7f\u7528\u53c2\u6570\u5171\u4eab\u7684\u65b9\u5f0f\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002\u8fd9\u610f\u5473\u7740\u5377\u79ef\u6838\u5728\u6574\u4e2a\u8f93\u5165\u56fe\u50cf\u4e0a\u6ed1\u52a8\uff0c\u901a\u8fc7\u540c\u6837\u7684\u6743\u91cd\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002\u8fd9\u79cd\u5171\u4eab\u6743\u91cd\u7684\u65b9\u5f0f\u5927\u5927\u51cf\u5c11\u4e86\u9700\u8981\u8bad\u7ec3\u7684\u53c2\u6570\u6570\u91cf\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e00\u4e2a3x3\u7684\u5377\u79ef\u6838\uff0c\u5728\u8f93\u5165\u56fe\u50cf\u7684\u4e0d\u540c\u4f4d\u7f6e\u4f7f\u7528\u7684\u6743\u91cd\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u53c2\u6570\u7684\u6570\u91cf\u5927\u5927\u51cf\u5c11\u4e86\u3002</li> <li>\u7a00\u758f\u8fde\u63a5\uff1a\u5728\u4f20\u7edf\u7684\u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u4e0e\u4e0a\u4e00\u5c42\u7684\u6240\u6709\u795e\u7ecf\u5143\u76f8\u8fde\uff0c\u5bfc\u81f4\u53c2\u6570\u6570\u91cf\u5de8\u5927\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cCNN\u4e2d\u7684\u5377\u79ef\u5c42\u53ea\u4e0e\u8f93\u5165\u7684\u5c40\u90e8\u533a\u57df\u76f8\u8fde\u63a5\uff0c\u901a\u8fc7\u5377\u79ef\u64cd\u4f5c\u5b9e\u73b0\u7279\u5f81\u63d0\u53d6\uff0c\u8fd9\u6837\u7684\u7a00\u758f\u8fde\u63a5\u65b9\u5f0f\u4e5f\u5927\u5927\u51cf\u5c11\u4e86\u53c2\u6570\u6570\u91cf\u3002</li> <li>\u5e73\u79fb\u4e0d\u53d8\u6027\uff1a\u56fe\u50cf\u4e2d\u7684\u7269\u4f53\u901a\u5e38\u4e0d\u4f9d\u8d56\u4e8e\u5176\u7edd\u5bf9\u4f4d\u7f6e\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e\u5176\u76f8\u5bf9\u4f4d\u7f6e\u3002\u5377\u79ef\u64cd\u4f5c\u53ef\u4ee5\u6355\u6349\u5230\u5e73\u79fb\u4e0d\u53d8\u6027\uff0c\u5373\u5b66\u4e60\u5230\u7684\u7279\u5f81\u5bf9\u4e8e\u56fe\u50cf\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\u90fd\u662f\u6709\u6548\u7684\u3002\u8fd9\u79cd\u7279\u6027\u51cf\u5c11\u4e86\u9700\u8981\u8bad\u7ec3\u7684\u53c2\u6570\u6570\u91cf\uff0c\u56e0\u4e3a\u76f8\u540c\u7684\u7279\u5f81\u53ef\u4ee5\u5728\u4e0d\u540c\u4f4d\u7f6e\u5171\u4eab\u76f8\u540c\u7684\u6743\u91cd\u3002</li> </ol> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u5f15\u5165CNN\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u5171\u4eab\u3001\u7a00\u758f\u8fde\u63a5\u548c\u5e73\u79fb\u4e0d\u53d8\u6027\u7b49\u7279\u6027\uff0c\u5927\u89c4\u6a21\u51cf\u5c11\u6743\u91cd\u53c2\u6570\u8bad\u7ec3\u91cf\uff0c\u4ece\u800c\u4f7f\u5f97\u795e\u7ecf\u7f51\u7edc\u5728\u5904\u7406\u56fe\u50cf\u7b49\u4e8c\u7ef4\u6570\u636e\u65f6\u66f4\u52a0\u9ad8\u6548\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/Scale%20Invariant%20Detector/","title":"\u5c3a\u5ea6\u4e0d\u53d8\u6027\u68c0\u6d4b\u5668","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/Scale%20Invariant%20Detector/#scale-invariant-feature-transform","title":"Scale Invariant Feature Transform","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u540c\u5c3a\u5ea6\u7684\u56fe\u7247\uff0c\u8fd8\u662f\u4f7f\u7528harris corner detector \u6765\u68c0\u6d4b\u53ef\u80fd\u7684\u7279\u6b8a\u70b9</p> <p>\u5728\u4e0d\u540c\u5c3a\u5ea6\u4e0a\u68c0\u67e5\u7279\u6b8a\u70b9\uff0c\u4f7f\u7528Laplace\u7b97\u5b50\uff0c\u4e5f\u5c31\u662f\u4e24\u4e2a\u4e8c\u6b21\u504f\u5bfc\u548c\u7684\u5f62\u5f0f\uff0c\u8fd9\u4e2a\u503c\u4ea7\u751f\u5cf0\u503c\u7684\u5730\u65b9\uff0c\u4e14\u5728\u4e0d\u540c\u5927\u5c0f\u7684\u56fe\u7247\u4e2d\u4ea7\u751f\u5cf0\u503c\u7684\u5730\u65b9\u5c31\u662f\u7279\u6b8a\u70b9blob\u53ef\u80fd\u51fa\u73b0\u7684\u4f4d\u7f6e</p> <p>DoG\uff1adifference of guassian:\u9ad8\u65af\u51fd\u6570\u7684\u5dee\u5206\u503c</p> <p>Maxima and minima</p> <p>Compare x with its 26 neighbors at 3 scales </p> <p>\u57fa\u672c\u601d\u60f3</p> <ul> <li>\u5728\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u89d2\u70b9\u5468\u56f4\u9009\u53d6 16\u00d716 \u7684\u65b9\u5f62\u7a97\u53e3</li> <li>\u8ba1\u7b97\u6bcf\u4e2a\u50cf\u7d20\u7684\u8fb9\u7684\u671d\u5411(\u68af\u5ea6\u7684\u89d2\u5ea6- 90\u00b0)</li> <li>\u5254\u9664\u5f31\u8fb9\u7f18(\u5c0f\u4e8e\u9608\u503c\u68af\u5ea6\u5e45\u5ea6)</li> <li>\u521b\u5efa\u5269\u4e0b\u8fb9\u7684\u65b9\u5411\u7684\u76f4\u65b9\u56fe</li> </ul> <p></p> <p></p> <p>\u5b8c\u6574\u7248\uff1a</p> <ul> <li>\u5c06 16\u00d716 \u7684\u7a97\u53e3 \u5212\u5206\u4e3a 4\u00d74 \u7684\u7f51\u683c</li> <li>\u5bf9\u6bcf\u4e2a\u7f51\u683c\u8ba1\u7b97\u5176\u65b9\u5411\u76f4\u65b9\u56fe</li> <li>16 cells * 8 orientations = 128 dimensional descriptor(128 \u7ef4\u5411\u91cf)</li> </ul> <p>SIFT Feature</p> <ul> <li>Descriptor 128-D</li> <li> <li>\u53ef\u4ee5\u901a\u8fc7\u53bb\u6389\u5149\u7167\u53d8\u5316\u5e26\u6765\u7684\u5f71\u54cd</li> <li>\u4f4d\u7f6e (\ufffd,\ufffd)</li> <li>\u5c3a\u5ea6\uff0c\u63a7\u5236\u7279\u5f81\u63d0\u53d6\u7684\u8986\u76d6\u8303\u56f4</li> <li>\u65b9\u5411\uff0c\u5b9e\u73b0\u65cb\u8f6c\u4e0d\u53d8\u7684 descriptor</li> <p>SIFT \u7279\u5f81\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b Bag of visual words \u63d0\u53d6SIFT\u7279\u5f81\uff0c\u5c06\u7279\u5f81\u505a\u4e00\u4e2a\u805a\u7c7b(kmeans)\uff0c\u5c06\u6bcf\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u79f0\u4e3a visual word \u89c6\u89c9\u5355\u8bcd</p> <p>Conclusion of SIFT</p> <ul> <li>\u4f18\u70b9</li> <li>\u671f\u671b\u5728\u6bd4\u4f8b\u3001\u65cb\u8f6c\u3001\u5149\u7167\u7b49\u53d8\u5316\u4e2d\u7684\u4e0d\u53d8\u6027\u3002</li> <li>\u5c40\u90e8 patch \u5177\u6709\u5f88\u5f3a\u7684\u533a\u5206\u6027\u548c\u8868\u5f81\u80fd\u529b\u3002</li> <li>\u5728\u521a\u6027\u5bf9\u8c61\u8868\u793a\u4e0a\u975e\u5e38\u6709\u6548\u3002</li> <li>\u7f3a\u70b9</li> <li>\u63d0\u53d6\u8017\u65f6     \u5bf9\u4e8e\u5927\u5c0f\u4e3a400 * 400\u7684\u56fe\u50cf\uff0c\u5e73\u5747\u9700\u89811\u79d2\u3002</li> <li>\u5bf9\u975e\u521a\u6027\u7269\u4f53\u6027\u80fd\u8f83\u5dee\u3002     \u5982\u4eba\u8138\u3001\u52a8\u7269\u7b49\u3002</li> <li>\u5728\u4e25\u91cd\u7684\u4eff\u5c04\u5931\u771f\u4e0b\u53ef\u80fd\u65e0\u6cd5\u5de5\u4f5c\u3002     \u5c40\u90e8\u8865\u4e01\u662f\u4e00\u4e2a\u5706\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u692d\u5706\u8c03\u6574\u5230\u4eff\u5c04\u5931\u771f\u3002</li> </ul> <p>\u521b\u5efa\u76f4\u65b9\u56fe\u7684\u4f5c\u7528\u662f\u4e3a\u4e86\u5bf9\u5173\u952e\u70b9\u5468\u56f4\u7684\u68af\u5ea6\u65b9\u5411\u8fdb\u884c\u7edf\u8ba1\uff0c\u4ee5\u4fbf\u540e\u7eed\u786e\u5b9a\u5173\u952e\u70b9\u7684\u4e3b\u5bfc\u65b9\u5411\u3002\u8fd9\u79cd\u65b9\u5411\u76f4\u65b9\u56fe\u7684\u521b\u5efa\u6709\u52a9\u4e8e\u5b9e\u73b0SIFT\u7b97\u6cd5\u7684\u65b9\u5411\u4e0d\u53d8\u6027\uff0c\u5177\u4f53\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u65b9\u5411\u4fe1\u606f\u7edf\u8ba1\uff1a\u901a\u8fc7\u5c06\u5173\u952e\u70b9\u5468\u56f4\u7684\u50cf\u7d20\u6839\u636e\u5176\u68af\u5ea6\u65b9\u5411\u5206\u914d\u5230\u5bf9\u5e94\u7684\u65b9\u5411\u533a\u95f4\u5185\uff0c\u5e76\u5bf9\u8be5\u533a\u95f4\u5185\u7684\u8ba1\u6570\u8fdb\u884c\u7d2f\u52a0\uff0c\u53ef\u4ee5\u5f97\u5230\u8be5\u533a\u95f4\u5185\u68af\u5ea6\u65b9\u5411\u7684\u7edf\u8ba1\u4fe1\u606f\u3002</li> <li>\u4e3b\u5bfc\u65b9\u5411\u9009\u62e9\uff1a\u901a\u8fc7\u5206\u6790\u8fd9\u4e9b\u7edf\u8ba1\u4fe1\u606f\uff0cSIFT\u7b97\u6cd5\u4f1a\u9009\u62e9\u5728\u65b9\u5411\u76f4\u65b9\u56fe\u4e2d\u5177\u6709\u6700\u5927\u7d2f\u52a0\u8ba1\u6570\u7684\u65b9\u5411\u4f5c\u4e3a\u8be5\u5173\u952e\u70b9\u7684\u4e3b\u5bfc\u65b9\u5411\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u786e\u4fdd\u63cf\u8ff0\u7b26\u80fd\u591f\u76f8\u5bf9\u4e8e\u4e3b\u5bfc\u65b9\u5411\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u4ee5\u5b9e\u73b0\u65cb\u8f6c\u4e0d\u53d8\u6027\u3002</li> <li>\u63cf\u8ff0\u7b26\u8ba1\u7b97\uff1a\u5728\u540e\u7eed\u8ba1\u7b97\u5173\u952e\u70b9\u7684\u63cf\u8ff0\u7b26\u65f6\uff0c\u4f1a\u76f8\u5bf9\u4e8e\u4e3b\u5bfc\u65b9\u5411\u5bf9\u68af\u5ea6\u65b9\u5411\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u786e\u4fdd\u63cf\u8ff0\u7b26\u5bf9\u4e8e\u65cb\u8f6c\u7684\u53d8\u5316\u662f\u4e0d\u53d8\u7684\u3002\u8fd9\u610f\u5473\u7740\u65e0\u8bba\u56fe\u50cf\u5982\u4f55\u65cb\u8f6c\uff0c\u63cf\u8ff0\u7b26\u90fd\u80fd\u591f\u5728\u65cb\u8f6c\u540e\u6b63\u786e\u5339\u914d\u3002</li> </ol> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5411\u76f4\u65b9\u56fe\u7684\u521b\u5efa\u548c\u4e3b\u5bfc\u65b9\u5411\u7684\u9009\u62e9\uff0cSIFT\u7b97\u6cd5\u5b9e\u73b0\u4e86\u5bf9\u4e8e\u56fe\u50cf\u5c40\u90e8\u7279\u5f81\u7684\u65b9\u5411\u4e0d\u53d8\u6027\uff0c\u4f7f\u5f97\u68c0\u6d4b\u5230\u7684\u5173\u952e\u70b9\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u62b5\u6297\u56fe\u50cf\u7684\u65cb\u8f6c\u53d8\u6362\u3002</p> <p>SURF\u76f8\u6bd4SIFT\u7684\u8fdb\u6b65\u4e4b\u5904\u5728\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a</p> <ol> <li>\u8ba1\u7b97\u901f\u5ea6\uff1aSURF\u4f7f\u7528\u79ef\u5206\u56fe\u50cf\uff08Integral Image\uff09\u8fdb\u884c\u5feb\u901f\u8ba1\u7b97\uff0c\u8fd9\u4f7f\u5f97\u7279\u5f81\u70b9\u68c0\u6d4b\u548c\u63cf\u8ff0\u7b26\u8ba1\u7b97\u7684\u901f\u5ea6\u5f97\u5230\u663e\u8457\u63d0\u9ad8\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cSIFT\u7b97\u6cd5\u4e2d\u4f7f\u7528\u9ad8\u65af\u91d1\u5b57\u5854\u8fdb\u884c\u56fe\u50cf\u5c3a\u5ea6\u7a7a\u95f4\u7684\u53d8\u6362\uff0c\u8ba1\u7b97\u91cf\u8f83\u5927\uff0c\u56e0\u6b64\u5728\u901f\u5ea6\u4e0a\u4e0d\u5982SURF\u3002</li> <li>\u63cf\u8ff0\u7b26\u8ba1\u7b97\uff1aSURF\u4f7f\u7528\u76d2\u72b6\u6ee4\u6ce2\u5668\uff08Box Filter\uff09\u6765\u8fd1\u4f3c\u9ad8\u65af\u5dee\u5206\u6ee4\u6ce2\u5668\uff0c\u8fd9\u7b80\u5316\u4e86\u63cf\u8ff0\u7b26\u8ba1\u7b97\u7684\u590d\u6742\u5ea6\uff0c\u4f7f\u5f97SURF\u7684\u7279\u5f81\u63cf\u8ff0\u7b26\u8ba1\u7b97\u66f4\u52a0\u9ad8\u6548\u3002</li> <li>\u7ef4\u5ea6\u4f4e, \u53ea\u7528 64 \u7ef4\u7279\u5f81</li> <li>\u5728\u5747\u5300\u3001\u6e10\u53d8\u3001\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u56fe\u50cf\u4e0a SIFT \u65e0\u6cd5\u5206\u8fa8\uff0c\u4f46 SURF \u53ef\u4ee5</li> <li>\u5e26\u566a\u58f0\u4f1a\u4f7f SIFT \u7279\u5f81\u51cc\u4e71\uff0c\u5bf9 SURF \u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd</li> </ol> <p>\u5173\u4e8eIntegral Image \u5141\u8bb8\u6211\u4eec\u5bf9\u6ee4\u6ce2\u5668\u8fdb\u884c\u4e0a\u91c7\u6837\u800c\u4e0d\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u4e0b\u91c7\u6837\u7684\u610f\u601d\u662f\uff0c\u79ef\u5206\u56fe\u50cf\u7684\u4f7f\u7528\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u5bf9\u6ee4\u6ce2\u5668\u8fdb\u884c\u4e0a\u91c7\u6837\u6765\u5b9e\u73b0\u5c3a\u5ea6\u4e0d\u53d8\u6027\uff0c\u800c\u4e0d\u662f\u50cfSIFT\u90a3\u6837\u901a\u8fc7\u5bf9\u56fe\u50cf\u8fdb\u884c\u4e0b\u91c7\u6837\u6765\u5b9e\u73b0\u5c3a\u5ea6\u4e0d\u53d8\u6027\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f7f\u5f97\u7b97\u6cd5\u66f4\u5feb\u901f\uff0c\u56e0\u4e3a\u4e0a\u91c7\u6837\u53ef\u4ee5\u901a\u8fc7\u79ef\u5206\u56fe\u50cf\u76f4\u63a5\u5b9e\u73b0\uff0c\u800c\u65e0\u9700\u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u590d\u6742\u7684\u64cd\u4f5c\u3002</p> <p>\u81f3\u4e8e\u4e3a\u4ec0\u4e48SURF\u9700\u8981\u8ba1\u7b97\u4e8c\u9636\u5bfc\u6570\uff0c\u8fd9\u662f\u56e0\u4e3aSURF\u4e2d\u7684\u63cf\u8ff0\u7b26\u8ba1\u7b97\u6d89\u53ca\u5bf9Hessian\u77e9\u9635\u7684\u8ba1\u7b97\uff0c\u800cHessian\u77e9\u9635\u5305\u62ec\u4e8c\u9636\u5bfc\u6570\u4fe1\u606f\uff0c\u8fd9\u5bf9\u4e8e\u786e\u5b9a\u7279\u5f81\u70b9\u7684\u5c40\u90e8\u7279\u5f81\u5f62\u72b6\u975e\u5e38\u91cd\u8981\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e9x9\u6ee4\u6ce2\u5668\u7684\u60c5\u51b5\uff0cl0 = 3 \u8868\u793a\u5728\u5bfc\u6570\u65b9\u5411\u4e0a\u6b63\u8d1f\u534a\u8f74\u7684\u957f\u5ea6\u3002\u4e3a\u4e86\u4fdd\u6301\u4e2d\u5fc3\u50cf\u7d20\uff0c\u5fc5\u987b\u81f3\u5c11\u589e\u52a02\u4e2a\u50cf\u7d20\uff0c\u56e0\u6b64\u5fc5\u987b\u5c06 l0 \u589e\u52a0\u81f3\u5c112\u4e2a\u50cf\u7d20\uff0c\u8fd9\u610f\u5473\u7740\u9700\u8981\u589e\u52a06\u4e2a\u50cf\u7d20\u7684\u6ee4\u6ce2\u5668\u7ef4\u5ea6\u3002\u56e0\u6b64\uff0c\u6ee4\u6ce2\u5668\u7684\u5c3a\u5bf8\u4e3a\uff1a9x9, 15x15, 21x21, 27x27\u3002</p> <p>\u8fd9\u4e9b\u5185\u5bb9\u7684\u5177\u4f53\u542b\u4e49\u662f\uff0cSURF\u7b97\u6cd5\u901a\u8fc7\u4f7f\u7528\u79ef\u5206\u56fe\u50cf\u5b9e\u73b0\u4e86\u5bf9\u6ee4\u6ce2\u5668\u7684\u4e0a\u91c7\u6837\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u5c3a\u5ea6\u4e0d\u53d8\u6027\uff0c\u540c\u65f6\u5229\u7528\u4e8c\u9636\u5bfc\u6570\u4fe1\u606f\u6765\u8ba1\u7b97\u7279\u5f81\u70b9\u7684\u5c40\u90e8\u7279\u5f81\u5f62\u72b6\uff0c\u8fd9\u4e9b\u90fd\u662fSURF\u76f8\u5bf9\u4e8eSIFT\u7684\u6539\u8fdb\u4e4b\u5904\u3002</p> <p>Hessian\u77e9\u9635\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u626e\u6f14\u7740\u91cd\u8981\u7684\u89d2\u8272\uff0c\u7279\u522b\u662f\u5728\u7279\u5f81\u68c0\u6d4b\u548c\u7279\u5f81\u63cf\u8ff0\u65b9\u9762\u3002\u5176\u4f5c\u7528\u4e3b\u8981\u4f53\u73b0\u5728\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\uff1a</p> <ol> <li>\u7279\u5f81\u70b9\u68c0\u6d4b\uff1aHessian\u77e9\u9635\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u89d2\u70b9\u6216\u8005\u8fb9\u7f18\u7b49\u5c40\u90e8\u7279\u5f81\u3002\u901a\u8fc7\u8ba1\u7b97Hessian\u77e9\u9635\u7684\u7279\u5f81\u503c\uff0c\u53ef\u4ee5\u5224\u65ad\u5c40\u90e8\u56fe\u50cf\u533a\u57df\u7684\u66f2\u7387\uff0c\u4ece\u800c\u627e\u5230\u6f5c\u5728\u7684\u5173\u952e\u70b9\u4f4d\u7f6e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cHessian\u77e9\u9635\u7684\u7279\u5f81\u503c\u80fd\u591f\u6307\u793a\u51fa\u56fe\u50cf\u533a\u57df\u7684\u53d8\u5316\u60c5\u51b5\uff0c\u5e2e\u52a9\u786e\u5b9a\u56fe\u50cf\u4e2d\u7684\u5173\u952e\u70b9\u3002</li> <li>\u7279\u5f81\u63cf\u8ff0\uff1a\u5728\u7279\u5f81\u70b9\u786e\u5b9a\u540e\uff0cHessian\u77e9\u9635\u4e5f\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u63cf\u8ff0\u8be5\u7279\u5f81\u70b9\u5468\u56f4\u533a\u57df\u7684\u5f62\u72b6\u4fe1\u606f\u3002\u8fd9\u79cd\u5f62\u72b6\u4fe1\u606f\u5bf9\u4e8e\u540e\u7eed\u7684\u7279\u5f81\u5339\u914d\u548c\u8bc6\u522b\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u80fd\u591f\u5e2e\u52a9\u533a\u5206\u4e0d\u540c\u7684\u7279\u5f81\u70b9\uff0c\u5e76\u63d0\u4f9b\u66f4\u52a0\u4e30\u5bcc\u7684\u7279\u5f81\u63cf\u8ff0\u4fe1\u606f\u3002</li> </ol> <p>\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u63d2\u503c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u5b9e\u9645\u56fe\u50cf\u4e2d\uff0c\u7279\u5f81\u70b9\u7684\u4f4d\u7f6e\u901a\u5e38\u4e0d\u4f1a\u7cbe\u786e\u5730\u843d\u5728\u50cf\u7d20\u7684\u4e2d\u5fc3\u70b9\u4e0a\uff0c\u800c\u662f\u843d\u5728\u50cf\u7d20\u4e4b\u95f4\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u4e3a\u4e86\u66f4\u51c6\u786e\u5730\u8ba1\u7b97Hessian\u77e9\u9635\uff0c\u9700\u8981\u5bf9\u5c40\u90e8\u56fe\u50cf\u533a\u57df\u8fdb\u884c\u63d2\u503c\uff0c\u4ee5\u4fbf\u5728\u5b50\u50cf\u7d20\u7ea7\u522b\u4e0a\u8ba1\u7b97\u68af\u5ea6\u548c\u66f2\u7387\u4fe1\u606f\u3002\u901a\u8fc7\u63d2\u503c\uff0c\u53ef\u4ee5\u66f4\u7cbe\u786e\u5730\u4f30\u8ba1\u5c40\u90e8\u7279\u5f81\u70b9\u7684\u68af\u5ea6\u548c\u66f2\u7387\uff0c\u4ece\u800c\u63d0\u9ad8\u7279\u5f81\u70b9\u68c0\u6d4b\u548c\u63cf\u8ff0\u7684\u7cbe\u5ea6\u3002</p> <p>Harris\u89d2\u70b9\u68c0\u6d4b\u7b97\u6cd5\u4f7f\u7528Hessian\u77e9\u9635\u7684\u7279\u5f81\u503c\u6765\u5224\u65ad\u56fe\u50cf\u4e2d\u7684\u89d2\u70b9\u3002\u5728\u8be5\u7b97\u6cd5\u4e2d\uff0c\u4f7f\u7528\u03bb1\u548c\u03bb2\u4e2d\u7684\u8f83\u5c0f\u503c\u4f5c\u4e3a\u68c0\u6d4b\u4f9d\u636e\u7684\u539f\u56e0\u5982\u4e0b\uff1a</p> <ol> <li>Sensitivity to Edges\uff1aHarris\u89d2\u70b9\u68c0\u6d4b\u7b97\u6cd5\u65e8\u5728\u68c0\u6d4b\u89d2\u70b9\uff0c\u800c\u4e0d\u662f\u8fb9\u7f18\u3002\u8fb9\u7f18\u901a\u5e38\u5177\u6709\u4e00\u4e2a\u7279\u5f81\u503c\u8fdc\u8fdc\u5927\u4e8e\u53e6\u4e00\u4e2a\u7279\u5f81\u503c\u7684Hessian\u77e9\u9635\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u9009\u62e9\u8f83\u5c0f\u7684\u7279\u5f81\u503c\uff0c\u53ef\u4ee5\u786e\u4fdd\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u66f4\u53ef\u80fd\u4ee3\u8868\u89d2\u70b9\u800c\u975e\u8fb9\u7f18\u3002</li> <li>Local Image Structure\uff1a\u5728\u89d2\u70b9\u5468\u56f4\u7684\u56fe\u50cf\u533a\u57df\uff0c\u7279\u5f81\u503c\u03bb1\u548c\u03bb2\u7684\u5927\u5c0f\u4e0e\u56fe\u50cf\u5c40\u90e8\u7ed3\u6784\u7684\u53d8\u5316\u6709\u5173\u3002\u8f83\u5c0f\u7684\u7279\u5f81\u503c\u901a\u5e38\u5bf9\u5e94\u7740\u56fe\u50cf\u4e2d\u7684\u53d8\u5316\u8f83\u5c0f\u7684\u65b9\u5411\u3002\u56e0\u6b64\uff0c\u9009\u62e9\u8f83\u5c0f\u7684\u7279\u5f81\u503c\u6709\u52a9\u4e8e\u6355\u6349\u5c40\u90e8\u7ed3\u6784\u7684\u53d8\u5316\uff0c\u8fd9\u6b63\u662f\u89d2\u70b9\u6240\u5177\u6709\u7684\u7279\u6027\u3002</li> <li>Noise Robustness\uff1a\u9009\u62e9\u8f83\u5c0f\u7684\u7279\u5f81\u503c\u8fd8\u53ef\u4ee5\u589e\u5f3a\u7b97\u6cd5\u5bf9\u566a\u58f0\u7684\u9c81\u68d2\u6027\u3002\u5728\u53d7\u5230\u566a\u58f0\u5f71\u54cd\u65f6\uff0c\u8f83\u5c0f\u7684\u7279\u5f81\u503c\u66f4\u4e0d\u5bb9\u6613\u53d7\u5230\u5e72\u6270\uff0c\u56e0\u6b64\u80fd\u591f\u66f4\u53ef\u9760\u5730\u53cd\u6620\u56fe\u50cf\u5c40\u90e8\u7684\u89d2\u70b9\u7ed3\u6784\u3002</li> </ol> <p>\u7efc\u4e0a\u6240\u8ff0\uff0cHarris\u89d2\u70b9\u68c0\u6d4b\u4e2d\u4f7f\u7528\u03bb1\u548c\u03bb2\u7684\u8f83\u5c0f\u503c\u4f5c\u4e3a\u68c0\u6d4b\u4f9d\u636e\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u786e\u4fdd\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u66f4\u53ef\u80fd\u4ee3\u8868\u89d2\u70b9\u800c\u975e\u8fb9\u7f18\uff0c\u540c\u65f6\u63d0\u9ad8\u7b97\u6cd5\u5bf9\u566a\u58f0\u7684\u9c81\u68d2\u6027\uff0c\u5e76\u6355\u6349\u5c40\u90e8\u7ed3\u6784\u7684\u53d8\u5316\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/gauss%20filtering%20medium%20filtering/","title":"\u9ad8\u65af/\u4e2d\u503c\u6ee4\u6ce2","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/gauss%20filtering%20medium%20filtering/#_1","title":"\u9ad8\u65af\u6ee4\u6ce2\u548c\u4e2d\u503c\u6ee4\u6ce2","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/gauss%20filtering%20medium%20filtering/#snf-sparse-norm-filtering","title":"SNF sparse norm filtering","text":"<p>\u9ad8\u65af\u6ee4\u6ce2\u3001\u5747\u503c\u6ee4\u6ce2\u548c\u4e2d\u503c\u6ee4\u6ce2\u662f\u5e38\u89c1\u7684\u56fe\u50cf\u6ee4\u6ce2\u6280\u672f\uff0c\u5b83\u4eec\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u6709\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u548c\u6548\u679c\u7279\u70b9\u3002</p> <ol> <li>\u9ad8\u65af\u6ee4\u6ce2\uff1a</li> <li>\u539f\u7406\uff1a \u9ad8\u65af\u6ee4\u6ce2\u4f7f\u7528\u4e00\u4e2a\u9ad8\u65af\u6838\u5bf9\u56fe\u50cf\u8fdb\u884c\u5377\u79ef\uff0c\u6838\u7684\u4e2d\u5fc3\u5177\u6709\u6700\u9ad8\u7684\u6743\u91cd\uff0c\u5468\u56f4\u7684\u6743\u91cd\u9010\u6e10\u51cf\u5c0f\uff0c\u5f62\u6210\u4e00\u4e2a\u9ad8\u65af\u5206\u5e03\u3002\u8fd9\u79cd\u6743\u91cd\u5206\u5e03\u6709\u52a9\u4e8e\u5e73\u6ed1\u56fe\u50cf\uff0c\u540c\u65f6\u4fdd\u7559\u8fb9\u7f18\u3002</li> <li>\u6548\u679c\u7279\u70b9\uff1a \u9ad8\u65af\u6ee4\u6ce2\u4e3b\u8981\u7528\u4e8e\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u9ad8\u9891\u566a\u58f0\uff0c\u540c\u65f6\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4fdd\u7559\u56fe\u50cf\u7684\u8fb9\u7f18\u3002\u5b83\u5bf9\u4e8e\u5e73\u6ed1\u56fe\u50cf\u6574\u4f53\u7ed3\u6784\u6548\u679c\u8f83\u597d\u3002</li> <li>\u5747\u503c\u6ee4\u6ce2\uff1a</li> <li>\u539f\u7406\uff1a \u5747\u503c\u6ee4\u6ce2\u4f7f\u7528\u4e00\u4e2a\u5e73\u5747\u6743\u91cd\u7684\u6838\u5bf9\u56fe\u50cf\u8fdb\u884c\u5377\u79ef\uff0c\u6838\u4e2d\u7684\u6bcf\u4e2a\u6743\u91cd\u90fd\u76f8\u7b49\u3002\u8fd9\u6837\u7684\u5e73\u5747\u64cd\u4f5c\u6709\u52a9\u4e8e\u53bb\u9664\u566a\u58f0\uff0c\u4f46\u4e5f\u53ef\u80fd\u5bfc\u81f4\u56fe\u50cf\u7684\u6a21\u7cca\u3002</li> <li>\u6548\u679c\u7279\u70b9\uff1a \u5747\u503c\u6ee4\u6ce2\u9002\u7528\u4e8e\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u5747\u5300\u566a\u58f0\uff0c\u4f46\u5728\u5e73\u6ed1\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u635f\u5931\u4e00\u4e9b\u56fe\u50cf\u7684\u7ec6\u8282\u4fe1\u606f\u3002\u5b83\u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u573a\u666f\u7684\u566a\u58f0\u53bb\u9664\u6548\u679c\u8f83\u597d\u3002</li> <li>\u4e2d\u503c\u6ee4\u6ce2\uff1a</li> <li>\u539f\u7406\uff1a \u4e2d\u503c\u6ee4\u6ce2\u4f7f\u7528\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u5728\u7a97\u53e3\u4e2d\u53d6\u4e2d\u503c\u4f5c\u4e3a\u5f53\u524d\u50cf\u7d20\u7684\u503c\u3002\u8fd9\u79cd\u64cd\u4f5c\u5bf9\u4e8e\u53bb\u9664\u6912\u76d0\u566a\u58f0\u7b49\u79bb\u7fa4\u503c\u975e\u5e38\u6709\u6548\u3002</li> <li>\u6548\u679c\u7279\u70b9\uff1a \u4e2d\u503c\u6ee4\u6ce2\u5728\u5904\u7406\u56fe\u50cf\u4e2d\u7684\u6912\u76d0\u566a\u58f0\u7b49\u79bb\u7fa4\u503c\u65f6\u8868\u73b0\u51fa\u8272\uff0c\u80fd\u591f\u6709\u6548\u5730\u4fdd\u7559\u56fe\u50cf\u7684\u7ec6\u8282\u3002\u4f46\u5bf9\u4e8e\u9ad8\u65af\u566a\u58f0\u7b49\u5747\u5300\u566a\u58f0\u6548\u679c\u76f8\u5bf9\u8f83\u5dee\u3002</li> </ol> <p></p> <p>p=2\u65f6\u4e3a\u5747\u503c\u6ee4\u6ce2\uff0cp=1\u65f6\u662f\u4e2d\u503c\u6ee4\u6ce2</p> <p>p\u503c\u8db3\u591f\u5c0f\uff1a\u80fd\u591f\u4fdd\u8fb9</p> <p>HDR compression</p> <p>\u4fdd\u8bc1\u68af\u5ea6\u4e0d\u4f1a\u9006\u8f6c</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2%20bilateral%20filtering/","title":"\u53cc\u8fb9\u6ee4\u6ce2","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2%20bilateral%20filtering/#_1","title":"\u53cc\u8fb9\u6ee4\u6ce2\u539f\u7406","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2%20bilateral%20filtering/#bilateral-filtering","title":"Bilateral filtering","text":"<p>\u80fd\u591f\u4fdd\u8fb9\uff0c\u4f46\u4e0d\u80fd\u4fdd\u65b9\u5411</p> <p>\u5b58\u5728\u68af\u5ea6\u9006\u8f6c\u95ee\u9898</p> <p></p> <p></p> <p>sigma s \u4e00\u822c\u8bbe\u4e3a\u56fe\u50cf\u5bf9\u89d2\u7ebf\u76842%\u8fd9\u4e48\u5927 sigma r \u4e00\u822c\u8bbe\u4e3agradient\u7684\u5747\u503c\u6216\u4e2d\u4f4d\u503c\uff1f</p> <p>the halo nightmare</p> <p>HDR\u538b\u7f29\u5230\u6807\u51c6\u52a8\u6001\u8303\u56f4</p> <p>\u901a\u8fc7\u611f\u53d7\u91ce\u538b\u7f29\u56fe\u50cf \u4ece\u4f4e\u5230\u9ad8</p> <p>residual \u611f\u53d7\u91ce\u7684\u5927\u5c0f\u5e26\u6765\u7684\u6b8b\u5dee</p> <p>\u9ad8\u9891\uff0c\u4f4e\u9891</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2%20bilateral%20filtering/#_2","title":"\u4f7f\u7528\u4fe1\u53f7\u5904\u7406\u65b9\u5f0f\u5feb\u901f\u8fd1\u4f3c\u53cc\u8fb9\u6ee4\u6ce2","text":"<p>\u53cc\u8fb9\u6ee4\u6ce2\u52a0\u901f\u7b97\u6cd5 Fast Bilateral Filter - \u77e5\u4e4e (zhihu.com)</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B71/","title":"\u56de\u5fc6\u53771","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B71/#1","title":"\u8bfe\u7a0b\u5171\u4eab\u8ba1\u5212 \u56de\u5fc6\u53771","text":"<ol> <li> <p>\u7b80\u8ff0\u5149\u5708\u548c\u666f\u6df1\u7684\u5173\u7cfb\uff1b\u76f8\u673a\u662f\u5982\u4f55\u8c03\u6574\u5149\u5708\u7684\uff1b\u7b80\u8ff0\u6570\u7801\u76f8\u673a\u7684\u539f\u7406\u3002</p> </li> <li> <p>\u5149\u5708\u548c\u666f\u6df1\u7684\u5173\u7cfb\uff1a</p> <ul> <li>\u5149\u5708\uff08Aperture\uff09\uff1a \u6307\u7684\u662f\u76f8\u673a\u955c\u5934\u4e2d\u7684\u5149\u5708\u5b54\u5f84\u7684\u5927\u5c0f\u3002\u5149\u5708\u7684\u5927\u5c0f\u901a\u5e38\u7528f\u503c\u8868\u793a\uff0c\u4f8b\u5982f/2.8\u3001f/4\u7b49\uff0c\u5176\u4e2d\u8f83\u5c0f\u7684f\u503c\u8868\u793a\u8f83\u5927\u7684\u5149\u5708\uff0c\u800c\u8f83\u5927\u7684f\u503c\u8868\u793a\u8f83\u5c0f\u7684\u5149\u5708\u3002</li> <li>\u666f\u6df1\uff08Depth of Field\uff0cDOF\uff09\uff1a \u662f\u6307\u4e00\u5f20\u7167\u7247\u4e2d\u88ab\u89c6\u4e3a\u6e05\u6670\u7684\u533a\u57df\u3002\u8f83\u5927\u7684\u666f\u6df1\u610f\u5473\u7740\u7167\u7247\u4e2d\u66f4\u591a\u7684\u533a\u57df\u90fd\u662f\u6e05\u6670\u7684\uff0c\u800c\u8f83\u5c0f\u7684\u666f\u6df1\u5219\u4f7f\u5f97\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u533a\u57df\u662f\u6e05\u6670\u7684\u3002</li> <li>\u5173\u7cfb\uff1a \u5149\u5708\u7684\u5927\u5c0f\u76f4\u63a5\u5f71\u54cd\u666f\u6df1\u3002\u8f83\u5927\u7684\u5149\u5708\uff08\u5c0ff\u503c\uff09\u4ea7\u751f\u8f83\u5c0f\u7684\u666f\u6df1\uff0c\u800c\u8f83\u5c0f\u7684\u5149\u5708\uff08\u5927f\u503c\uff09\u5219\u4ea7\u751f\u8f83\u5927\u7684\u666f\u6df1\u3002\u8fd9\u662f\u56e0\u4e3a\u8f83\u5927\u7684\u5149\u5708\u5141\u8bb8\u66f4\u591a\u7684\u5149\u7ebf\u901a\u8fc7\uff0c\u5bfc\u81f4\u805a\u7126\u8303\u56f4\u8f83\u5c0f\uff0c\u800c\u8f83\u5c0f\u7684\u5149\u5708\u51cf\u5c11\u4e86\u5149\u7ebf\u7684\u8fdb\u5165\uff0c\u5bfc\u81f4\u66f4\u591a\u533a\u57df\u4fdd\u6301\u6e05\u6670\u3002</li> </ul> </li> <li>\u76f8\u673a\u8c03\u6574\u5149\u5708\u7684\u65b9\u6cd5\uff1a<ul> <li>\u5149\u5708\u73af\uff1a \u5927\u591a\u6570\u76f8\u673a\u955c\u5934\u4e0a\u90fd\u6709\u4e00\u4e2a\u5149\u5708\u73af\uff0c\u901a\u8fc7\u65cb\u8f6c\u8be5\u73af\u53ef\u4ee5\u8c03\u6574\u5149\u5708\u5927\u5c0f\u3002</li> <li>\u6444\u5f71\u6a21\u5f0f\uff1a \u5728\u4e00\u4e9b\u76f8\u673a\u4e0a\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684\u6444\u5f71\u6a21\u5f0f\uff08\u5982\u5149\u5708\u4f18\u5148\u6a21\u5f0f\u6216\u624b\u52a8\u6a21\u5f0f\uff09\u6765\u624b\u52a8\u8bbe\u7f6e\u5149\u5708\u503c\u3002</li> </ul> </li> <li>\u6570\u7801\u76f8\u673a\u7684\u5de5\u4f5c\u539f\u7406\uff1a<ul> <li>\u5149\u5b66\u7cfb\u7edf\uff1a \u6570\u7801\u76f8\u673a\u7684\u955c\u5934\u901a\u8fc7\u5149\u5b66\u7cfb\u7edf\u5c06\u573a\u666f\u4e2d\u7684\u5149\u7ebf\u805a\u7126\u5230\u611f\u5149\u5143\u4ef6\u4e0a\uff08\u5982CMOS\u6216CCD\u82af\u7247\uff09\u3002</li> <li>\u611f\u5149\u5143\u4ef6\uff1a \u5149\u7ebf\u8fdb\u5165\u611f\u5149\u5143\u4ef6\u540e\uff0c\u5149\u80fd\u88ab\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7\uff0c\u5f62\u6210\u56fe\u50cf\u3002</li> <li>\u6570\u5b57\u4fe1\u53f7\u5904\u7406\uff1a \u6570\u5b57\u76f8\u673a\u5c06\u611f\u5149\u5143\u4ef6\u6355\u6349\u5230\u7684\u6a21\u62df\u4fe1\u53f7\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0c\u7136\u540e\u901a\u8fc7\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\u8fdb\u884c\u5904\u7406\uff0c\u5305\u62ec\u767d\u5e73\u8861\u3001\u8272\u5f69\u6821\u6b63\u3001\u9510\u5316\u7b49\u3002</li> <li>\u5b58\u50a8\u548c\u663e\u793a\uff1a \u5904\u7406\u540e\u7684\u56fe\u50cf\u53ef\u4ee5\u88ab\u5b58\u50a8\u5728\u5b58\u50a8\u5361\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7LCD\u5c4f\u5e55\u6216\u53d6\u666f\u5668\u8fdb\u884c\u5b9e\u65f6\u9884\u89c8\u3002\u540e\u7eed\u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5\u5230\u8ba1\u7b97\u673a\u6216\u6253\u5370\u673a\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\u6216\u8f93\u51fa\u3002</li> </ul> </li> </ol> <p>### 2.    </p> <p>### 1. \u8ba1\u7b97\u673a\u91cc\u7070\u5ea6\u7528\u51e0\u4f4d\u8868\u793a\uff0c\u4e00\u5171\u51e0\u4e2a\u7070\u5ea6\u68af\u5ea6\uff1b</p> <p>###  2. \u5199\u51fa\u81f3\u5c11\u4e94\u79cd\u989c\u8272\u7a7a\u95f4\uff0c\u5e76\u89e3\u91ca\u4e24\u79cd\u989c\u8272\u7a7a\u95f4\u6bcf\u4e00\u7ef4\u7684\u542b\u4e49\uff1b</p> <p>###  3. \u7528\u4e8e\u8868\u793a\u52a0\u8272\u548c\u51cf\u8272\u7684\u989c\u8272\u7a7a\u95f4\u662f\u4ec0\u4e48\uff0c\u89e3\u91ca\u8fd9\u4e24\u4e2a\u7a7a\u95f4\u6bcf\u4e00\u7ef4\u7684\u542b\u4e49\uff0c\u5e76\u8bf4\u660e\u5b83\u4eec\u7684\u5e94\u7528\u573a\u5408\u3002</p> <ol> <li>\u7070\u5ea6\u8868\u793a\uff1a<ul> <li>\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u7070\u5ea6\u901a\u5e38\u75288\u4f4d\uff081\u5b57\u8282\uff09\u8868\u793a\uff0c\u53d6\u503c\u8303\u56f4\u4e3a0\u5230255\u3002\u8fd9\u610f\u5473\u7740\u6709256\u4e2a\u4e0d\u540c\u7684\u7070\u5ea6\u7ea7\u522b\uff0c\u4ece\u7eaf\u9ed1\u8272\uff080\uff09\u5230\u7eaf\u767d\u8272\uff08255\uff09\u3002</li> </ul> </li> <li>\u989c\u8272\u7a7a\u95f4\u548c\u5404\u81ea\u542b\u4e49\uff1a<ul> <li>RGB\uff08\u7ea2\u7eff\u84dd\uff09\uff1a \u6bcf\u4e2a\u50cf\u7d20\u7531\u7ea2\u8272\uff08R\uff09\u3001\u7eff\u8272\uff08G\uff09\u3001\u84dd\u8272\uff08B\uff09\u4e09\u4e2a\u5206\u91cf\u7ec4\u6210\u3002\u6bcf\u4e2a\u5206\u91cf\u7684\u53d6\u503c\u8303\u56f4\u901a\u5e38\u4e3a0\u5230255\uff0c\u8868\u793a\u989c\u8272\u7684\u4eae\u5ea6\u3002</li> <li>HSV\uff08\u8272\u76f8\u3001\u9971\u548c\u5ea6\u3001\u660e\u5ea6\uff09\uff1a \u8272\u76f8\u8868\u793a\u989c\u8272\u7684\u7c7b\u578b\uff0c\u9971\u548c\u5ea6\u8868\u793a\u989c\u8272\u7684\u7eaf\u5ea6\uff0c\u660e\u5ea6\u8868\u793a\u989c\u8272\u7684\u4eae\u5ea6\u3002HSV\u7a7a\u95f4\u66f4\u7b26\u5408\u4eba\u7c7b\u5bf9\u989c\u8272\u7684\u611f\u77e5\u3002</li> <li>CMYK\uff08\u9752\u3001\u54c1\u7ea2\u3001\u9ec4\u3001\u9ed1\uff09\uff1a \u4e3b\u8981\u7528\u4e8e\u5370\u5237\uff0c\u6bcf\u4e2a\u5206\u91cf\u8868\u793a\u4e00\u79cd\u989c\u8272\u7684\u6d53\u5ea6\uff0c\u800c\u9ed1\u8272\u8868\u793a\u989c\u8272\u7684\u6df1\u5ea6\u3002</li> <li>YUV\uff08\u4eae\u5ea6\u3001\u8272\u5ea6\uff09\uff1a Y\u8868\u793a\u4eae\u5ea6\u4fe1\u606f\uff0c\u800cUV\u8868\u793a\u989c\u8272\u4fe1\u606f\u3002\u8fd9\u79cd\u989c\u8272\u7a7a\u95f4\u5e38\u7528\u4e8e\u89c6\u9891\u7f16\u7801\u3002</li> <li>LAB\uff08CIE Lab\uff09\uff1a L\u8868\u793a\u4eae\u5ea6\uff0ca\u8868\u793a\u7ea2\u7eff\u901a\u9053\uff0cb\u8868\u793a\u9ec4\u84dd\u901a\u9053\u3002LAB\u662f\u4e00\u79cd\u8bbe\u5907\u65e0\u5173\u7684\u989c\u8272\u7a7a\u95f4\uff0c\u5bf9\u4e8e\u8272\u5f69\u548c\u4eae\u5ea6\u7684\u611f\u77e5\u66f4\u52a0\u4e00\u81f4\u3002</li> </ul> </li> <li>\u52a0\u8272\u548c\u51cf\u8272\u7684\u989c\u8272\u7a7a\u95f4\uff1a<ul> <li>\u52a0\u8272\u7a7a\u95f4\uff1a RGB\u662f\u4e00\u4e2a\u5178\u578b\u7684\u52a0\u8272\u7a7a\u95f4\u3002\u5728RGB\u4e2d\uff0c\u901a\u8fc7\u53e0\u52a0\u4e0d\u540c\u5f3a\u5ea6\u7684\u7ea2\u3001\u7eff\u3001\u84dd\u5149\u53ef\u4ee5\u5f62\u6210\u5404\u79cd\u989c\u8272\u3002\u6bcf\u4e2a\u5206\u91cf\u8868\u793a\u4e00\u79cd\u989c\u8272\u7684\u4eae\u5ea6\uff0c\u53e0\u52a0\u4ea7\u751f\u5f69\u8272\u3002</li> <li>\u51cf\u8272\u7a7a\u95f4\uff1a CMYK\u662f\u4e00\u4e2a\u5178\u578b\u7684\u51cf\u8272\u7a7a\u95f4\u3002\u5728CMYK\u4e2d\uff0c\u901a\u8fc7\u6df7\u5408\u4e0d\u540c\u6d53\u5ea6\u7684\u9752\u3001\u54c1\u7ea2\u3001\u9ec4\u989c\u6599\u53ef\u4ee5\u51cf\u5c11\u5149\u7684\u53cd\u5c04\uff0c\u4ece\u800c\u5f62\u6210\u4e0d\u540c\u989c\u8272\u3002\u6bcf\u4e2a\u5206\u91cf\u8868\u793a\u4e00\u79cd\u989c\u8272\u7684\u6d53\u5ea6\u3002</li> </ul> </li> </ol> <p>\u5e94\u7528\u573a\u5408\uff1a</p> <ul> <li>\u52a0\u8272\u7a7a\u95f4\u7684\u5e94\u7528\u573a\u5408\uff1a \u7528\u4e8e\u663e\u793a\u8bbe\u5907\uff08\u5982\u7535\u8111\u663e\u793a\u5668\u3001\u7535\u89c6\u5c4f\u5e55\u7b49\uff09\uff0c\u6444\u5f71\u9886\u57df\u7b49\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u573a\u5408\u4e2d\u662f\u901a\u8fc7\u53d1\u5149\u6216\u53d1\u8272\u7684\u65b9\u5f0f\u6765\u5448\u73b0\u56fe\u50cf\u7684\u3002</li> <li> <p>\u51cf\u8272\u7a7a\u95f4\u7684\u5e94\u7528\u573a\u5408\uff1a \u7528\u4e8e\u5370\u5237\u884c\u4e1a\uff0c\u56e0\u4e3a\u5370\u5237\u662f\u901a\u8fc7\u51cf\u5c11\u5149\u7684\u53cd\u5c04\u6765\u5448\u73b0\u56fe\u50cf\u7684\uff0c\u4f7f\u7528CMYK\u989c\u8272\u7a7a\u95f4\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u989c\u8272\u548c\u6d53\u5ea6\uff0c\u4ee5\u9002\u5e94\u5370\u5237\u673a\u7684\u7279\u6027\u3002</p> </li> <li> <p>BMP \u56fe\u50cf\u7684\u56fe\u50cf\u6570\u636e\uff08bitmap data\uff09\u90e8\u5206\u4e2d\uff0c\u6bcf\u4e00\u884c\u7684\u6570\u636e\u5b58\u50a8\u6709\u4ec0\u4e48\u8981\u6c42\uff1f\u5982\u679c\u60f3\u8981\u5b58\u50a8 12 34 56 78 9A BC\uff08\u5177\u4f53\u6570\u636e\u4e0d\u662f\u8fd9\u4e2a\uff0c\u5fd8\u4e86\uff0c\u4e0d\u8fc7\u6ca1\u5dee- -\uff09\uff0c\u5e94\u8be5\u600e\u6837\u5b58\u50a8\uff1f \uff08\u6211\u4e0d\u77e5\u9053\u63cf\u8ff0\u6e05\u695a\u4e86\u6ca1\u6709- -\u5e94\u8be5\u95ee\u7684\u662f\u56db\u5b57\u8282\u5bf9\u9f50\u7684\u4e8b\u60c5...\uff09</p> </li> <li> <p>\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u6784\u5143\u548c\u4e00\u4e2a\u4e8c\u503c\u56fe\u50cf\uff0c\u95ee\u8fd9\u4e2a\u7ed3\u6784\u5143\u548c\u4e8c\u503c\u56fe\u50cf\u8fdb\u884c\u81a8\u80c0\u64cd\u4f5c\u540e\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff0c\u5e76\u7b80\u8ff0\u81a8\u80c0\u64cd\u4f5c\u7684\u7269\u7406\u610f\u4e49\u3002</p> </li> <li> <ol> <li>\u7b80\u8ff0\u628a\u7070\u5ea6\u56fe\u50cf\u4e8c\u503c\u5316\u7684\u6b65\u9aa4\uff1b\u5982\u679c\u4e00\u5f20\u7070\u5ea6\u56fe\u50cf\u7684\u5149\u7167\u53d8\u5316\u6bd4\u8f83\u5927\uff0c\u5e94\u8be5\u5982\u4f55\u4e8c\u503c\u5316\uff1f</li> </ol> </li> <li>\u7ed9\u51fa\u4e00\u5f20\u4e8c\u503c\u56fe\u50cf\uff0c\u6c42\u884c\u8fdb\u95f4\u7f16\u7801\uff0c\u5e76\u7b80\u8ff0\u4f60\u662f\u600e\u4e48\u6c42\u51fa\u6765\u7684\u3002</li> </ul> <p>\u5f53\u4e00\u5f20\u7070\u5ea6\u56fe\u50cf\u7684\u5149\u7167\u53d8\u5316\u6bd4\u8f83\u5927\u65f6\uff0c\u7b80\u5355\u7684\u5168\u5c40\u9608\u503c\u4e8c\u503c\u5316\u65b9\u6cd5\u53ef\u80fd\u65e0\u6cd5\u5f88\u597d\u5730\u5904\u7406\u56fe\u50cf\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u81ea\u9002\u5e94\u9608\u503c\u4e8c\u503c\u5316\u65b9\u6cd5\uff0c\u4f8b\u5982\u5c40\u90e8\u81ea\u9002\u5e94\u9608\u503c\u4e8c\u503c\u5316\u3002\u8fd9\u79cd\u65b9\u6cd5\u5141\u8bb8\u6839\u636e\u56fe\u50cf\u7684\u5c40\u90e8\u7279\u5f81\u6765\u786e\u5b9a\u6bcf\u4e2a\u50cf\u7d20\u7684\u9608\u503c\uff0c\u4ece\u800c\u66f4\u597d\u5730\u5904\u7406\u5149\u7167\u53d8\u5316\u8f83\u5927\u7684\u56fe\u50cf\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u7684\u7b97\u6cd5\uff0c\u5982\u57fa\u4e8e\u5c40\u90e8\u5747\u503c\u7684\u65b9\u6cd5\uff08\u5982Sauvola\u7b97\u6cd5\uff09\uff0c\u57fa\u4e8e\u5c40\u90e8\u9ad8\u65af\u6a21\u578b\u7684\u65b9\u6cd5\uff08\u5982Niblack\u7b97\u6cd5\uff09\uff0c\u6216\u8005\u57fa\u4e8e\u5c40\u90e8\u4e2d\u503c\u7684\u65b9\u6cd5\uff08\u5982Otsu\u7b97\u6cd5\uff09\u6765\u8fdb\u884c\u5c40\u90e8\u81ea\u9002\u5e94\u9608\u503c\u4e8c\u503c\u5316\u3002</p> <ol> <li> <p>\u7ed9\u4e00\u4e2a 8 \u4e2a\u68af\u5ea6\u7684\u7070\u5ea6\u5206\u5e03\uff0c\u6c42\u7070\u5ea6\u5747\u8861\u5316\u540e\u7684\u7ed3\u679c\uff0c\u5e76\u7b80\u8ff0\u6b65\u9aa4\uff08\u6211\u8bb0\u5f97\u8fd9\u9898\u7684\u6570\u636e\u548c ppt \u4e0a\u7684\u597d\u50cf\u662f\u4e00\u6837\u7684\uff09\u3002</p> </li> <li> <ol> <li>\u7b80\u8ff0\u5982\u4f55\u5229\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u6c42\u51fa\u67d0\u4e2a\u70b9\u7684\u7070\u5ea6\uff1b</li> </ol> </li> <li> <p>\u7ed9\u4e00\u5f20 5 \u00d7 5 \u7684\u7070\u5ea6\u56fe\uff0c\u6c42\u7528 3 \u00d7 3 \u7684 mask \u8fdb\u884c\u4e2d\u503c\u6ee4\u6ce2\u540e\u7684\u7ed3\u679c\uff0c\u5ffd\u7565\u56fe\u50cf\u8fb9\u754c\u3002</p> </li> <li> <p>\u7b80\u8ff0\u7528 ratio image \u5c06 source \u4eba\u8138\u7684\u8868\u60c5\u8f6c\u79fb\u5230 target \u4eba\u8138\u4e0a\u7684\u6b65\u9aa4\u3002</p> </li> <li> <p>\u7ed9\u51fa\u53cc\u8fb9\u6ee4\u6ce2\u7684\u516c\u5f0f\uff0c\u7b80\u8ff0\u53cc\u8fb9\u6ee4\u6ce2\u7684\u57fa\u672c\u601d\u60f3\uff0c\u5e76\u89e3\u91ca\u516c\u5f0f\u91cc\u5404\u7b26\u53f7\u7684\u610f\u4e49\u3002</p> </li> <li> <p>\u7b80\u8ff0\u5982\u4f55\u7528 log algorithm \u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u6027\u3002</p> </li> <li> <p>\u9009\u62e9\u56fe\u50cf\u4fe1\u606f\u5904\u7406\u7684\u4e00\u79cd\u5e94\u7528\uff0c\u5c3d\u91cf\u8be6\u7ec6\u5730\u8bf4\u660e\u539f\u7406\u3002</p> </li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B72/","title":"\u56de\u5fc6\u53772","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B72/#dip-2022-2023","title":"[DIP] [\u56fe\u50cf\u4fe1\u606f\u5904\u7406] 2022-2023\u79cb\u51ac\u5b66\u671f\u771f\u9898","text":"<p>\u6ce8\uff1a\u9898\u76ee\u662f\u4e2d\u82f1\u5bf9\u7167\u7684\uff0c\u56de\u7b54\u7528\u4e2d\u6587\u6216\u82f1\u6587\u5747\u53ef</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B72/#1n","title":"\u4e00\u3001\u586b\u7a7a\u9898\uff081*n\uff09","text":"<ol> <li> <p>Digital image (or video stream) \u6570\u5b57\u56fe\u50cf is the main form to present information. For human beings, more than 60% of information is obtained through vision \u89c6\u89c9.</p> </li> <li> <p>\u8bbe\u5907\u76f8\u5173\u7684\u989c\u8272\u7a7a\u95f4\uff1a\uff08RGB\uff09\uff08YUV\uff09\uff08CMYK\uff09</p> </li> </ol> <p>\u8bbe\u5907\u65e0\u5173\u7684\u989c\u8272\u7a7a\u95f4\uff1a\uff08sRGB\uff09\uff08CIEXYZ\uff09\uff08Lab\uff09</p> <ol> <li> <p>Image Data \u8981\u6c42\u6bcf\u4e00\u884c\u5fc5\u987b\u662f 4 \u7684\u500d\u6570\uff0c\u4f8b\u5982 <code>13 A1 17 19 18 15</code> \u5728\u6587\u4ef6\u4e2d\u5b58\u50a8\u4e3a\uff1a\uff0813 A1 17 19\uff09\uff0818 15 00 00\uff09</p> </li> <li> <p>BMP\u56fe\u50cf\u7684\u6587\u4ef6\u7ed3\u6784\uff1a\uff08\u6587\u4ef6\u5934\uff09\uff08\u4f4d\u56fe\u4fe1\u606f\u5934\uff09\uff08\u8c03\u8272\u677f\uff09\uff08\u56fe\u50cf\u6570\u636e\uff09</p> </li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B72/#_1","title":"\u4e8c\u3001\u8bf4\u660e\u9898","text":"<ol> <li>\u6570\u7801\u76f8\u673a\u6210\u50cf\u539f\u7406\uff086'\uff09</li> </ol> <p>\u7ed9\u4e86PPT\u4e0a\u90a3\u5f20\u56fe</p> <ol> <li>JPEG\u538b\u7f29\u7684\u57fa\u672c\u601d\u60f3\u548c\u4f18\u52bf</li> </ol> <p>\u538b\u7f29\u7b56\u7565\uff1a\u6839\u636e\u538b\u7f29\u6bd4\u8981\u6c42\uff0c\u4ece\u9ad8\u9891\u5230\u4f4e\u9891\u9010\u6b65\u524a\u51cf\u4fe1\u606f</p> <p>\u4f18\u52bf\uff1a\u9ad8\u9891\u4fe1\u606f\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\uff0c\u51cf\u5c11\u9ad8\u9891\u4fe1\u606f\u66f4\u5bb9\u6613\u83b7\u5f97\u9ad8\u538b\u7f29\u6bd4\uff1b\u4f4e\u9891\u4fe1\u606f\u53ef\u4ee5\u4fdd\u7559\u7269\u4f53\u7684\u57fa\u672c\u8f6e\u5ed3\u548c\u8272\u5f69\u5206\u5e03\uff0c\u6700\u5927\u9650\u5ea6\u7ef4\u6301\u56fe\u50cf\u8d28\u91cf\uff1b\u9002\u5408\u7528\u4e8e\u4e92\u8054\u7f51\u7684\u89c6\u89c9\u5a92\u4f53\u3002</p> <ol> <li>BMP\u56fe\u50cf\u8c03\u8272\u677f\u7684\u4f5c\u7528\uff084'\uff09</li> <li>\u83b7\u53d6\u4e8c\u503c\u56fe\u50cf\u65f6\uff0c\u5982\u4f55\u786e\u5b9a\u4e00\u4e2a\u597d\u7684\u9608\u503c</li> <li>\u8150\u8680\u64cd\u4f5c\u7684\u7269\u7406\u610f\u4e49\uff1b\u7ed9\u51fa input image \u548c struct element \u8981\u6c42\u753b\u51fa\u8150\u8680\u540e\u7684\u77e9\u9635</li> <li>\u89e3\u91ca\u53ef\u89c6\u5316\u589e\u5f3a\u7684\u5bf9\u6570\u64cd\u4f5c</li> <li>\u76f4\u65b9\u56fe\u5747\u8861\u5316\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u505a\u5230\u771f\u6b63\u5747\u8861</li> <li>\u89e3\u91ca\u6700\u8fd1\u90bb\u63d2\u503c\u7684\u8fc7\u7a0b</li> <li>\u8868\u60c5\u6bd4\u4f8b\u56fe\u7684\u65b9\u6cd5</li> <li>\u5199\u51fa\u53cc\u8fb9\u6ee4\u6ce2\u7684 general idea \u548c\u53cc\u8fb9\u6ee4\u6ce2\u4e0e\u9ad8\u65af\u6ee4\u6ce2\u7684\u533a\u522b</li> <li>SIFT \u7684 full version</li> <li>Back-propagation \u7684\u65b9\u6cd5</li> <li>RLE\uff08\u7ed9\u4e00\u5f20\u56fe\uff0c\u8981\u6c42\u5199\u51fa\u7f16\u7801\uff09</li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B72/#5","title":"\u4e09\u3001\u8ba1\u7b97\u9898\uff085\uff09","text":"<ol> <li>w=0.8, \u6a21\u578b\u53d6\u70b9\u6570\u4e3a3\uff0c\u95ee\u6700\u5c11\u8981\u53d6\u51e0\u4e2a\u70b9\u624d\u80fd\u4fdd\u8bc1\u6982\u7387&gt;95%RANSEC\u6536\u655b</li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B72/#46","title":"\u56db\u3001\u8bc1\u660e\u9898\uff084+6\uff09","text":"<ol> <li>\u8bf7\u8bc1\u660e\u81a8\u80c0\u548c\u8150\u8680\u7684\u5bf9\u5076\u5173\u7cfb\uff084'\uff09</li> <li>\u8bf7\u8bc1\u660eSNF\u4e2dp=1\u65f6\u662f\u4e2d\u503c\u6ee4\u6ce2\uff0cp=2\u65f6\u662f\u5747\u503c\u6ee4\u6ce2\uff086'\uff09</li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B73/","title":"\u56de\u5fc6\u53773","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B73/#2022-2023","title":"2022-2023\u79cb\u51ac","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B73/#_1","title":"\u586b\u7a7a\u9898","text":"<ol> <li>\u6210\u50cf\u65b9\u5f0f\uff0c\u9664\u4e86\u53ef\u89c1\u5149\u4e4b\u5916\u5199\u4e09\u79cd</li> <li>\u7070\u5ea6\u56fe\u548c\u5f69\u8272\u56fe\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u50a8\u5b58\uff08\u5b57\u8282\u6570\uff0c\u8272\u5f69\u6570\uff09</li> <li>\u5747\u503c\u6ee4\u6ce2\u3001\u4e2d\u503c\u6ee4\u6ce2\u3001\u6807\u51c6\u62c9\u666e\u62c9\u65af\u6ee4\u6ce2\u7ed3\u679c</li> <li>\u56fe\u50cf\u538b\u7f29\u65b9\u5f0f\uff08\u53e6\u5355\u72ec\u95ee\u4e86JPEG\u7684\u538b\u7f29\u65b9\u5f0f\uff09</li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B73/#_2","title":"\u7b80\u7b54\u9898","text":"<ol> <li>\u5149\u5708\u5927\u5c0f\u5bf9\u6210\u50cf\u7684\u5f71\u54cd\uff1f\u5149\u5708\u5982\u4f55\u5f71\u54cd\u666f\u6df1\uff0c\u4e3a\u4ec0\u4e48\uff1f</li> <li>\u89e3\u91ca\u89c6\u89c9\u611f\u77e5\u7cfb\u7edf\u7684\u8ba4\u77e5\u4f18\u5148\u7ea7\u548c\u654f\u611f\u5ea6</li> <li>\u53cc\u8fb9\u6ee4\u6ce2\u548c\u5f15\u5bfc\u6ee4\u6ce2\u7684\u539f\u7406\uff0c\u4ee5\u53ca\u4e0d\u540c\u4e4b\u5904</li> <li>Harris\u89d2\u70b9\u68c0\u6d4b\u5bf9\u4e8e\u4eae\u5ea6\u3001\u65cb\u8f6c\u3001\u5e73\u79fb\u548c\u5c3a\u5ea6\u7684\u4e0d\u53d8\u6027\uff1f\u89e3\u91ca\u539f\u56e0</li> <li>\u89e3\u91caRANSAC</li> <li>Expression Mapping\u7684\u8fc7\u7a0b</li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B73/#_3","title":"\u8ba1\u7b97\u9898","text":"<ol> <li>\u7ed9\u56fe\uff0c\u8ba1\u7b97\u8150\u8680\u3001\u81a8\u80c0\u3001\u5f00\u8fd0\u7b97\u3001\u95ed\u8fd0\u7b97\u7ed3\u679c</li> <li>\u8ba1\u7b97\u53cc\u7ebf\u6027\u63d2\u503c\uff0c\u7ed9\u516c\u5f0f\u548c\u8fc7\u7a0b</li> <li>\u76f4\u65b9\u56fe\u5747\u8861\u5316\u586b\u8868\uff08\u548cppt\u57fa\u672c\u4e00\u81f4\uff09</li> </ol>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%9B%9E%E5%BF%86%E5%8D%B73/#_4","title":"\u8bc1\u660e\u9898","text":"<ol> <li>\u76f4\u65b9\u56fe\u5747\u8861\u5316\u516c\u5f0f\u63a8\u5bfc\uff08s\u548cr\u7684\u5173\u7cfb\uff0c\u4ec5\u8fde\u7eed\u60c5\u51b5\uff09</li> <li>Harris\u89d2\u70b9\u68c0\u6d4b\u516c\u5f0f\u63a8\u5bfc\uff0c\u8bf4\u660e\u4e24\u4e2a\u77e9\u9635\u7279\u5f81\u503c\u4e0e\u89d2\u70b9\u5224\u65ad\u7684\u5173\u7cfb\uff08\u4e09\u79cd\u60c5\u51b5\uff09</li> </ol> <p>\u4e0d\u540c\u683c\u5f0f\u7684\u56fe\u50cf\u538b\u7f29\u65b9\u5f0f\u53ef\u4ee5\u5206\u4e3a\u6709\u635f\u538b\u7f29\u548c\u65e0\u635f\u538b\u7f29\u4e24\u79cd\u3002\u4ee5\u4e0b\u662f\u51e0\u79cd\u5e38\u89c1\u56fe\u50cf\u683c\u5f0f\uff08JPEG\u3001TIFF\u3001BMP\u3001JPG\uff09\u7684\u538b\u7f29\u65b9\u5f0f\uff1a</p> <ol> <li>JPEG\uff08Joint Photographic Experts Group\uff09:</li> <li>\u538b\u7f29\u65b9\u5f0f\uff1a JPEG \u4f7f\u7528\u6709\u635f\u538b\u7f29\uff0c\u901a\u8fc7\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u9ad8\u9891\u4fe1\u606f\u548c\u4e00\u4e9b\u7ec6\u8282\uff0c\u4ee5\u8fbe\u5230\u538b\u7f29\u7684\u76ee\u7684\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a \u4e3b\u8981\u7528\u4e8e\u5b58\u50a8\u7167\u7247\u548c\u5f69\u8272\u56fe\u50cf\uff0c\u9002\u5408\u4e8e\u9700\u8981\u8f83\u9ad8\u538b\u7f29\u6bd4\u4f46\u53ef\u4ee5\u5bb9\u5fcd\u4e00\u5b9a\u8d28\u91cf\u635f\u5931\u7684\u5e94\u7528\u3002</li> <li>TIFF\uff08Tagged Image File Format\uff09:</li> <li>\u538b\u7f29\u65b9\u5f0f\uff1a TIFF \u6587\u4ef6\u683c\u5f0f\u652f\u6301\u591a\u79cd\u538b\u7f29\u65b9\u5f0f\uff0c\u53ef\u4ee5\u662f\u65e0\u635f\u7684\uff08\u4f8b\u5982LZW\u538b\u7f29\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u6709\u635f\u7684\uff08\u4f8b\u5982JPEG\u538b\u7f29\uff09\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a TIFF \u53ef\u4ee5\u5b58\u50a8\u65e0\u635f\u6216\u6709\u635f\u7684\u56fe\u50cf\uff0c\u9002\u7528\u4e8e\u9700\u8981\u4fdd\u5b58\u56fe\u50cf\u8d28\u91cf\u7684\u4e13\u4e1a\u56fe\u50cf\u5904\u7406\u548c\u6253\u5370\u9886\u57df\u3002</li> <li>BMP\uff08Bitmap\uff09:</li> <li>\u538b\u7f29\u65b9\u5f0f\uff1a BMP \u4f7f\u7528\u65e0\u635f\u538b\u7f29\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u7cbe\u786e\u7684\u989c\u8272\u4fe1\u606f\uff0c\u4e0d\u8fdb\u884c\u6570\u636e\u4e22\u5931\u7684\u538b\u7f29\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a \u9002\u5408\u5b58\u50a8\u56fe\u50cf\u8d28\u91cf\u8981\u6c42\u9ad8\uff0c\u4e0d\u5e0c\u671b\u6709\u4efb\u4f55\u538b\u7f29\u635f\u5931\u7684\u5e94\u7528\u3002\u4f46\u6587\u4ef6\u5927\u5c0f\u76f8\u5bf9\u8f83\u5927\u3002</li> <li>JPG\uff08JPEG Image\uff09:</li> <li>\u538b\u7f29\u65b9\u5f0f\uff1a JPG \u662f JPEG \u683c\u5f0f\u7684\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u4f7f\u7528\u6709\u635f\u538b\u7f29\uff0c\u9002\u7528\u4e8e\u5b58\u50a8\u7167\u7247\u548c\u5f69\u8272\u56fe\u50cf\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a \u5e38\u7528\u4e8e Web \u4e0a\u7684\u56fe\u50cf\u5c55\u793a\uff0c\u7531\u4e8e\u5176\u8f83\u9ad8\u7684\u538b\u7f29\u6bd4\uff0c\u9002\u5408\u7528\u4e8e\u5728\u7ebf\u4f20\u8f93\u548c\u5b58\u50a8\u3002</li> </ol> <p>\u603b\u7684\u6765\u8bf4\uff0c\u9009\u62e9\u56fe\u50cf\u683c\u5f0f\u548c\u538b\u7f29\u65b9\u5f0f\u53d6\u51b3\u4e8e\u5e94\u7528\u9700\u6c42\u3002\u65e0\u635f\u538b\u7f29\u9002\u5408\u9700\u8981\u4fdd\u6301\u56fe\u50cf\u8d28\u91cf\u7684\u573a\u666f\uff0c\u800c\u6709\u635f\u538b\u7f29\u9002\u5408\u5bf9\u56fe\u50cf\u8d28\u91cf\u8981\u6c42\u8f83\u4f4e\u4f46\u9700\u8981\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u6216\u52a0\u5feb\u4f20\u8f93\u901f\u5ea6\u7684\u573a\u666f\u3002</p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%AF%BC%E5%90%91%E6%BB%A4%E6%B3%A2%E8%A7%A3%E9%87%8A%20guided%20filtering/","title":"\u5bfc\u5411\u6ee4\u6ce2","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E5%AF%BC%E5%90%91%E6%BB%A4%E6%B3%A2%E8%A7%A3%E9%87%8A%20guided%20filtering/#guided-filtering","title":"Guided filtering","text":"<p>\u5f15\u5bfc\u6ee4\u6ce2\uff0c\u57fa\u672c\u601d\u60f3</p> <p>\u5bfc\u5411\u6ee4\u6ce2\u662f\u4e00\u79cd\u56fe\u50cf\u5904\u7406\u6280\u672f\uff0c\u4e3b\u8981\u7528\u4e8e\u56fe\u50cf\u53bb\u566a\u548c\u589e\u5f3a\u7684\u76ee\u7684\u3002\u5176\u57fa\u672c\u539f\u7406\u662f\u5229\u7528\u4e00\u4e2a\u9644\u52a0\u7684\u8f85\u52a9\u56fe\u50cf\uff08\u79f0\u4e3a\u5bfc\u5411\u56fe\u50cf\uff09\u7684\u4fe1\u606f\u6765\u5f15\u5bfc\u6ee4\u6ce2\u8fc7\u7a0b\uff0c\u4ece\u800c\u66f4\u597d\u5730\u4fdd\u7559\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u548c\u7ed3\u6784\u3002</p> <p>\u4ee5\u4e0b\u662f\u5bfc\u5411\u6ee4\u6ce2\u7684\u57fa\u672c\u539f\u7406\u548c\u4f5c\u7528\uff1a</p> <ol> <li>\u5bfc\u5411\u56fe\u50cf\uff1a \u5bfc\u5411\u6ee4\u6ce2\u4f7f\u7528\u4e86\u4e00\u4e2a\u9644\u52a0\u7684\u5bfc\u5411\u56fe\u50cf\uff0c\u8be5\u56fe\u50cf\u5305\u542b\u4e86\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u4e00\u4e9b\u7279\u5f81\u4fe1\u606f\uff0c\u6bd4\u5982\u68af\u5ea6\u3001\u8fb9\u7f18\u7b49\u3002\u5bfc\u5411\u56fe\u50cf\u7528\u4e8e\u6307\u5bfc\u6ee4\u6ce2\u5668\u5982\u4f55\u5728\u56fe\u50cf\u4e0a\u8fdb\u884c\u5e73\u6ed1\u3002</li> <li>\u6ee4\u6ce2\u8fc7\u7a0b\uff1a \u5bfc\u5411\u6ee4\u6ce2\u7684\u6838\u5fc3\u662f\u5728\u6bcf\u4e2a\u50cf\u7d20\u4f4d\u7f6e\u4e0a\u5e94\u7528\u4e00\u4e2a\u6ee4\u6ce2\u5668\uff0c\u8be5\u6ee4\u6ce2\u5668\u7684\u65b9\u5411\u548c\u5f3a\u5ea6\u7531\u5bfc\u5411\u56fe\u50cf\u7684\u5bf9\u5e94\u4f4d\u7f6e\u51b3\u5b9a\u3002\u8fd9\u6837\uff0c\u6ee4\u6ce2\u5668\u7684\u884c\u4e3a\u5728\u4e0d\u540c\u7684\u56fe\u50cf\u533a\u57df\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u66f4\u597d\u5730\u9002\u5e94\u56fe\u50cf\u7684\u7ed3\u6784\u3002</li> <li>\u4fdd\u7559\u7ec6\u8282\u548c\u8fb9\u7f18\uff1a \u7531\u4e8e\u5bfc\u5411\u6ee4\u6ce2\u4f7f\u7528\u5bfc\u5411\u56fe\u50cf\u7684\u4fe1\u606f\uff0c\u5b83\u80fd\u591f\u66f4\u597d\u5730\u4fdd\u7559\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u548c\u8fb9\u7f18\u3002\u5728\u5bfc\u5411\u56fe\u50cf\u4e2d\u6709\u5f3a\u70c8\u68af\u5ea6\u7684\u533a\u57df\uff0c\u6ee4\u6ce2\u5668\u66f4\u52a0\u6ce8\u91cd\u4fdd\u7559\u7ec6\u8282\uff0c\u800c\u5728\u5e73\u5766\u533a\u57df\u5219\u8fdb\u884c\u66f4\u5f3a\u7684\u5e73\u6ed1\u3002</li> <li>\u53bb\u566a\u548c\u589e\u5f3a\uff1a \u5bfc\u5411\u6ee4\u6ce2\u5e7f\u6cdb\u5e94\u7528\u4e8e\u56fe\u50cf\u53bb\u566a\u548c\u589e\u5f3a\u3002\u901a\u8fc7\u7ed3\u5408\u5bfc\u5411\u56fe\u50cf\u7684\u4fe1\u606f\uff0c\u5b83\u80fd\u591f\u6709\u6548\u5730\u51cf\u5c11\u56fe\u50cf\u4e2d\u7684\u566a\u58f0\uff0c\u540c\u65f6\u589e\u5f3a\u56fe\u50cf\u4e2d\u7684\u6709\u7528\u4fe1\u606f\u3002</li> <li>\u9002\u7528\u8303\u56f4\uff1a \u5bfc\u5411\u6ee4\u6ce2\u9002\u7528\u4e8e\u5404\u79cd\u56fe\u50cf\u5904\u7406\u4efb\u52a1\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u53bb\u566a\u3001\u589e\u5f3a\u3001\u56fe\u50cf\u5e73\u6ed1\u548c\u8fb9\u7f18\u4fdd\u7559\u7b49\u3002\u5b83\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u56fe\u50cf\u5904\u7406\u9886\u57df\u4e2d\u5f97\u5230\u4e86\u5e7f\u6cdb\u7684\u5e94\u7528\u3002</li> </ol> <p>\u603b\u4f53\u800c\u8a00\uff0c\u5bfc\u5411\u6ee4\u6ce2\u901a\u8fc7\u7ed3\u5408\u5bfc\u5411\u56fe\u50cf\u7684\u4fe1\u606f\uff0c\u4f7f\u5f97\u6ee4\u6ce2\u8fc7\u7a0b\u66f4\u5177\u65b9\u5411\u6027\u548c\u9002\u5e94\u6027\uff0c\u4ece\u800c\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u53d6\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002</p> <p>\u66b4\u529b\u53cc\u8fb9\u6ee4\u6ce2\u8fed\u4ee3\u6b21\u6570\u975e\u5e38\u5927</p> <p></p> <p>\u89e3\u51b3\u53cc\u8fb9\u6ee4\u6ce2\u4e2d\u7684\u68af\u5ea6\u53cd\u8f6c\u3001\u8ba1\u7b97\u7f13\u6162\u95ee\u9898\uff0c\u80fd\u591f\u4fdd\u8fb9\u3001\u975e\u8fed\u4ee3 I\u662fguide\uff0cp\u662f\u8f93\u5165\u56fe\uff0cq\u662f\u8f93\u51fa\u56fe\u3002\u8f93\u51fa\u662fI\u7684\u7ebf\u6027\u8868\u8fbe $$     min\\sum(aI_i+b-p_i)^2+\\epsilon a^2\\     q_i=\\hat a_iI_i+\\hat b_i $$ \u200b    </p> <p></p>"},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2%20spatial%20filtering/","title":"\u7a7a\u95f4\u6ee4\u6ce2","text":""},{"location":"JY_HU/%E5%A4%A7%E4%BA%8C%E4%B8%8A/3%20%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%20DIP/%E7%A9%BA%E9%97%B4%E6%BB%A4%E6%B3%A2%20spatial%20filtering/#_1","title":"\u7a7a\u95f4\u6ee4\u6ce2","text":"<p>\u6570\u5b57\u56fe\u50cf\u57fa\u672c\u5904\u7406\u2014\u2014\u7a7a\u95f4\u6ee4\u6ce2(spatial filtering) - Bracer - \u535a\u5ba2\u56ed (cnblogs.com)</p> <p></p> <p></p>"},{"location":"Others/CS61A-python/","title":"CS61A","text":""},{"location":"Others/CS61A-python/#cs61a-python","title":"CS61a PYTHON","text":"<p>answer = get_string()</p> <p>print(\"hello,\",answer)  \u4e24\u4e2a\u53c2\u6570\u4e2d\u95f4\u81ea\u52a8\u52a0\u62ec\u53f7</p> <p>print(f\"hello,{answer}\")</p> <p>f\u4e3aformatted string \u683c\u5f0f\u5316\u5b57\u7b26\u4e32</p> <p>\u6570\u636e\u7c7b\u578b</p> <p>\u5220\u53bb\u4e86c\u4e2d\u7684  long double</p> <p>\u53ea\u6709bool float int str</p> <p>\u52a0\u4e86range list tuple dict set</p> Python<pre><code>words = set() #\u76f4\u63a5\u5c06\u4e00\u4e2ahash table \u8d4b\u7ed9word\n#dict\u7684\u5b9e\u73b0\uff1f\ndef check(word):\n    if word.lower() in words:\n        return True\n    else:\n        return False\ndef load(dictionary):\n    file = open(dictionary, \"r\")\n    for line in file:\n        word = line.rstrip() #\n        words.add(line)\n    close(file)\n    return True\n\ndef size():\n    return len(word)\n\ndef unload():\n    #free memory\n    return True\n</code></pre> <p></p> <p>\u6240\u8c13oop\u5c31\u662f\u6709\u5185\u7f6e\u7684\u51fd\u6570</p> <p>s.lower() \u8981\u975e\u5e38\u6ce8\u610fpython\u4e2d\u7684\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d</p> <p></p> Python<pre><code>#py\u4e0d\u9700\u8981prototype\uff0c\u4f46\u662f\u9700\u8981call main\n\nmain\u51fd\u6570\u5199\u5728\u6700\u540e\uff0c\u4e0d\u7528\u7f29\u8fdb\n</code></pre> Python<pre><code>#try-except\u8bed\u53e5\n#\u629b\u51fa\u9519\u8bef\uff0c\u7136\u540e\ntry:\n\nexcept:\n\nelse:\n</code></pre> Python<pre><code>for i in range(4):\n    print(\"?\",end=\"\\n\")-&gt;print(\"?\",end=\"\")\n=print(\"?\"*4)\n#\u6ca1\u6709\u5206\u914d\u5185\u5b58\uff0c\u6ca1\u6709\u6307\u9488\n</code></pre>"},{"location":"Others/CS61A-python/#global-frame","title":"global frame(\u5168\u5c40\u5e27)","text":"<p>\u5168\u5c40\u5e27\u662f\u7a0b\u5e8f\u7684\u9876\u5c42\u5e27\uff0c\u5305\u542b\u4e86\u5168\u5c40\u8303\u56f4\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\u3002\u8fd9\u4e9b\u53d8\u91cf\u88ab\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u5728\u6574\u4e2a\u7a0b\u5e8f\u7684\u4efb\u4f55\u5730\u65b9\u8bbf\u95ee\u3002\u5168\u5c40\u5e27\u4e2d\u7684\u53d8\u91cf\u5bf9\u6574\u4e2a\u7a0b\u5e8f\u90fd\u662f\u53ef\u89c1\u7684\u3002</p>"},{"location":"Others/CS61A-python/#local-frame","title":"local frame\uff08\u5c40\u90e8\u5e27\uff09","text":"<p>\u6bcf\u5f53\u4f60\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\uff0cPython\u4f1a\u4e3a\u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5c40\u90e8\u5e27\u3002\u8fd9\u4e2a\u5c40\u90e8\u5e27\u5305\u542b\u4e86\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u548c\u53c2\u6570\u3002\u8fd9\u4e9b\u53d8\u91cf\u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u8bbf\u95ee\uff0c\u800c\u5728\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5c40\u90e8\u5e27\u4e5f\u4f1a\u88ab\u9500\u6bc1\u3002\u8fd9\u6709\u52a9\u4e8e\u4fdd\u6301\u53d8\u91cf\u7684\u9694\u79bb\u6027\uff0c\u9632\u6b62\u4e0d\u540c\u51fd\u6570\u4e4b\u95f4\u7684\u53d8\u91cf\u540d\u51b2\u7a81\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u5728Python\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u5185\u7684\u53d8\u91cf\u4f1a\u5b58\u5728\u4e8e\u8be5\u51fd\u6570\u7684\u5c40\u90e8\u5e27\u4e2d\u3002\u540c\u65f6\uff0c\u5982\u679c\u4f60\u5728\u51fd\u6570\u5916\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff0c\u5b83\u4f1a\u5b58\u5728\u4e8e\u5168\u5c40\u5e27\u4e2d\u3002\u8fd9\u79cd\u5206\u5c42\u7684\u5e27\u7ed3\u6784\u6709\u52a9\u4e8e\u7ec4\u7ec7\u548c\u7ba1\u7406\u53d8\u91cf\uff0c\u4f7f\u5176\u5177\u6709\u9002\u5f53\u7684\u4f5c\u7528\u57df\u3002\u5c40\u90e8\u5e27\u548c\u5168\u5c40\u5e27\u7684\u4ea4\u4e92\u662fPython\u4e2d\u53d8\u91cf\u4f5c\u7528\u57df\u7684\u6838\u5fc3\u6982\u5ff5\uff0c\u5b83\u786e\u4fdd\u4e86\u53d8\u91cf\u5728\u7a0b\u5e8f\u4e2d\u7684\u5408\u7406\u53ef\u89c1\u6027\u548c\u9694\u79bb\u6027\u3002</p>"},{"location":"Others/CS61A-python/#python3-i-examplepy","title":"$python3 -i example.py","text":"<p>\u4ee5\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u8fd0\u884cpython\uff0c\u53ef\u4ee5\u901a\u8fc7\u952e\u5165\u53d8\u91cf\u503c\u67e5\u770b\u6267\u884c\u5b8c\u6210\u540e\u7684\u5404\u4e2a\u53d8\u91cf\uff0c\u65e0\u9700print</p>"},{"location":"Others/CS61A-python/#python3-m-doctest-examplepy","title":"$python3 -m doctest example.py","text":"<p>\u8fd0\u884cdocstring\u6240\u6307\u5b9a\u7684\u793a\u4f8b\uff0c\u5982\u679c\u6ca1\u6709\u8f93\u51fa\u5219\u76f4\u63a5\u8fd4\u56de</p>"},{"location":"Others/CS61A-python/#python3-m-doctest-v-examplepy","title":"$python3 -m doctest -v example.py","text":"<p>\u6253\u5370\u8f93\u51fa\u6240\u6709\u7684docstring\u6d4b\u8bd5\u7ed3\u679c\uff0c\u76f8\u5f53\u4e8e\u81ea\u6d4b\u60c5\u51b5</p> <p>def\u5d4c\u5957\u5b9a\u4e49</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>lambda x  :  f(x)==y \u8fd4\u56de\u4e00\u4e2ax</p> <p></p> <p>control statements</p> <p></p>"},{"location":"Others/CS61A-python/#-n-1n-1n","title":"\u9a8c\u8bc1\u9012\u5f52\u7684\u6b63\u786e\u6027/\u5982\u4f55\u5199\u9012\u5f52-&gt;\u5206\u89e3\u95ee\u9898\uff0c\u5c31\u597d\u50cfn-1\u7684\u7b54\u6848\u5df2\u7ecf\u5199\u597d\u4e86\uff0c\u53ea\u9700\u8981\u4ecen-1\u5f97\u5230n","text":"<p>\u7528\u6570\u5f52\uff01</p> <p>1.base case</p> <p>2.\u5047\u8bben-1\u7684\u60c5\u51b5\u6b63\u786e\u6267\u884c\uff0c\u6b63\u786e\u8fd4\u56de\uff0c\u5982\u4f55\u5229\u7528n-1\u7684\u60c5\u51b5\u5f97\u51fan</p> <p></p> <p></p> <p>\u4e0a\u9762\u662f\u5faa\u73af\uff0c\u8fed\u4ee3</p> <p>\u4e0b\u9762\u662f\u9012\u5f52\uff01</p> <p>\u8fed\u4ee3\u6bcf\u6b21while\u5faa\u73af\u5185\u7684\u8d4b\u503c\u53d8\u6210\u4e86\u9012\u5f52\u8c03\u7528\u65f6\u7684\u53c2\u6570</p> Python<pre><code>def factorial_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n - 1)\n\ndef factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n</code></pre> <p>\u5206\u6e05\u695abase case\u548celse</p> <p></p> <p></p> <p></p> <p>\u600e\u4e48\u5206\u89e3\u95ee\u9898\u6bd4\u8f83\u5173\u952e</p> <p>counting partitions</p> <p></p> <p></p> <p></p> <p>python\u5217\u8868(list)\u548c\u5143\u7ec4(tuple)\u8be6\u89e3_\u6728\u5b50\u6797_\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p> <p>\u4e00\u7bc7\u8bb2list\u548ctuple\u533a\u522b\u7684blog\uff0c\u975e\u5e38\u7ec6\u81f4\uff0c\u53ef\u4ee5\u7ec6\u770b</p> <p>Python\u7684enumerate\u51fd\u6570-CSDN\u535a\u5ba2</p> <p>method \uff1a\u548cinstance\u7ed1\u5b9a\u7684\u51fd\u6570</p> <p>method\u7684\u7b2c\u4e00\u4e2a\u9690\u5f62\u7684\u53c2\u6570\u662fself\uff0c\u8c03\u7528\u7684\u65b9\u5f0f\u662fdot\uff08.\uff09</p> <p>instance\u6709\u5c5e\u6027\uff0c\u4f46\u662fclass\u4e5f\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u5c5e\u6027</p> <p>\u7c7b\u540d.\u51fd\u6570\u540d</p> <p>Account.deposit\uff08account_john\uff0c10\uff09\u5c5e\u4e8e\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684method</p> Python<pre><code>class Account:\n    interest = 0.02\n    def __init__(self,account_holder):\n        self.balance = 0\n        self.holder = account_holder\n    def withdraw(self,amount):\n        if self.balance-amount&lt;0:\n            return 'Insufficient funds'\n        else\n        self.balance = self.balance-amount\n        return self.balance\n    def deposit(slef,amount):\n        self.balance = self.balance+amount\n        return self.balance\n    #additional methods would be defined here\nclass CheckingAccount(Account):\n    #\u9012\u5f52\u67e5\u770b\u662f\u5426\u6709\u5bf9\u5e94\u7684attribute\uff0c\u5982\u679c\u627e\u5230\u7684attribute\u662f\u4e00\u4e2abound method\u5c31\u8fd4\u56de\u51fd\u6570\u8ba1\u7b97\u540e\u7684\u503c\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u503c\uff0c\u5c31\u8fd4\u56de\u8be5\u503c\n    #\u521d\u59cb\u5316\u7684\u65f6\u5019\n    withdraw_fee = 1\n    interest = 0.01\n    def withdraw(self,amount):\n        return Account.withdraw(self,amount+self.withdraw_fee)#\u8fd9\u91cc\u4f53\u73b0\u4e86\u7ee7\u627f\u7684\u53e6\u4e00\u79cd\u7528\u6cd5\n    #\u9012\u5f52\u67e5\u770b\uff0cwithdraw\u5728\u5b50\u7c7b\u4e2d\u6709\u540c\u540d\u7684\u91cd\u6784\u5b9e\u73b0\uff0c\u6240\u4ee5\u6309\u7167\u5b50\u7c7b\u7684\u6765\uff0c\u4f46\u662f\u56e0\u4e3a\u65b9\u4fbf\uff0c\u53ef\u4ee5\u8c03\u7528\u7236\u7c7b\u7684withdraw\u51fd\u6570\uff0c\u6240\u4ee5\u4f7f\u7528Account.withdraw\u6765\u8bbf\u95ee\u7236\u7c7b\u4e2d\u7684withdraw\uff0c\u4f46\u9700\u8981\u63d0\u4f9bself\u53c2\u6570\uff0c\u56e0\u4e3a\u5e76\u672a\u521d\u59cb\u5316account\u5c5e\u6027\u4e0b\u7684withdraw\uff0c\u6240\u4ee5\u9700\u8981\u63d0\u4f9bself\u53c2\u6570\n    #\u5373\u4f7f\u5df2\u88aboverridden\u7684\u5c5e\u6027\u4e5f\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8bbf\u95ee\u7c7b\u5bf9\u8c61\u8bbf\u95ee\ntom_account = Account(\"Tom\")\n&gt;&gt;&gt;tom_account.interest\na = Account(\"John\")\nb = CheckingAccount('Jack')\n&gt;&gt;&gt;a.deposit(100)\n100\n&gt;&gt;&gt;b.deposit(100)\n100\n&gt;&gt;&gt;a.withdraw(100)\n90\n&gt;&gt;&gt;b.withdraw(100)\n89\n    0.02\n    #\u521d\u59cb\u5316\u7684\u5b9e\u4f8b\u6ca1\u6709interest\u8fd9\u4e2a\u5c5e\u6027\uff0c\u4f46\u662f\u7c7b\u6709\uff0c\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5230\n</code></pre> <p>\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\uff0c\u6240\u6709\u4e1c\u897f\u662fobject\uff1a\u5bf9\u8c61</p> <p>\u5728oop python\u4e2d\uff0c\u6240\u6709\u4e1c\u897f\uff08object\uff09\u90fd\u6709\u5c5e\u6027\uff08attributes\uff09\uff0c\u4ee5\u952e\u503c\u5bf9\uff08name-value pairs)\u8868\u793a</p> <p>\u7c7b\uff08classes\uff09\u4e5f\u662fobject\uff1a\u5bf9\u8c61\uff0c\u56e0\u6b64\u7c7b\u6709\u81ea\u5df1\u7684\u5c5e\u6027</p> <p>\u5b9e\u4f8b\u7684\u5c5e\u6027\uff1a\u521d\u59cb\u5316\u7684\u5b9e\u4f8b\u5177\u6709\u7684\u5c5e\u6027</p> <p>\u7c7b\u7684\u5c5e\u6027\uff1a\u521d\u59cb\u5316\u7684\u5b9e\u4f8b\u6240\u5c5e\u7684\u7c7b\u6240\u5177\u6709\u7684\u5c5e\u6027</p> <p>\u7c7b\u7684def\u65b9\u6cd5\u5b9a\u4e49\u7684method/\u51fd\u6570\u8fd4\u56de\u4e0d\u8fd4\u56de\uff08return\u6709\u6ca1\u6709\u5185\u5bb9\u89c6\u60c5\u51b5\u9700\u8981\uff0c\u5982\u679c\u5728\u5b9e\u9645\u5b9e\u4f8b\u5316\u8c03\u7528\u7c7b\u65f6\u9700\u8981\u5c06\u521d\u59cb\u5316\u8fc7\u7684\u4e1c\u897f\u63a5\u6536\uff0c\u4f8b\u5982a = open_account(\"john\",5),\u5219\u9700\u8981\u8fd4\u56de\uff0c\u5426\u5219\u4e0d\u4e00\u5b9a\u9700\u8981\u5199return\u4ec0\u4e48</p> <p>has-a\u548cis-a\u5173\u7cfb</p> Python<pre><code>class Bank:\n    #a bank has accounts:has-a\u5173\u7cfb\n    def __init__(self):\n        self.accounts = []\n    def open_account(self,holder,amount,kind = Account):\n        account = kind(holder)\n        account.deposit(amount)\n        self.accounts.append(account)\n        return account\n    def pay_interest(self):\n        for a in self.accounts:\n            a.deposit(a.balance*a.interest)\n    def too_big_to_fail(self):\n        return len(self.account)&gt;1\n</code></pre> Python<pre><code>class A:\n    z = -1\n    def f(self,x):\n        return B(x-1)\nclass B(A):\n    n = 4\n    def __init__(self,y):\n        if y:\n            self.z = self.f(y)\n        else:\n            self.z = C(y+1)\nclass C(B):\n    def f(self,x):\n        return x\na = A()\nb = B(1)\nb.n = 5\nprint(C(2).n)\nprint(a.z==C.z)\nprint(a.z==b.z)\nprint(b.z)\nprint(b.z.z)\nprint(b.z.z.z)\nprint(b.z.z.z.z)\n</code></pre>"},{"location":"Others/content%20block%20example/","title":"content","text":"<p>Nested Code Blocks</p> Unordered ListOrdered List Markdown<pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> Markdown<pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre> <p>Another List</p> Unordered ListOrdered List Markdown<pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> Markdown<pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre> <p>nested code block</p> CC++ C<pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello world!\\n\");\n    return 0;\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n    std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> \u5c55\u5f00\u67e5\u770bnested <p>note</p> <p>\u200b         </p> <p>\u8bed\u6cd5\u683c\u5f0f:</p> <p>tab\u95f4\u9694\uff0c\u5efa\u8bae\u5728vscode/typora\u539f\u683c\u5f0f(raw)\u4e0b\u7f16\u8f91\uff0c\u53ef\u4ee5\u9009\u4e2dtab alt text\u5f62\u5f0f\u662f\u76f4\u63a5\u91c7\u7528\u5728md\u6587\u4ef6\u7684\u540c\u76ee\u5f55\u4e0b\u63d2\u5165\uff0c\u53ef\u4ee5\u5728nested tab\u4e2d\u63d2\u5165 </p>"},{"location":"Others/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","title":"Git \u57fa\u7840","text":""},{"location":"Others/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#git","title":"git\u4f7f\u7528\u6559\u7a0b","text":"<p>\u53d1\u73b0\u53ea\u8981\u662f\u5728\u8fd9\u4e2a\u6587\u4ef6\u7ed3\u6784\u4e0b\u7684\u56fe\u7247\u90fd\u4f1a\u6b63\u5e38\u663e\u793a</p> <p>\u56e0\u4e3a\u5b9e\u9645\u4e0atypora\u7f16\u8f91\u5668\u7684\u8bbe\u7f6e\u4e2d\u62f7\u8d1d\u56fe\u7247\u65f6\u4f1a\u5c06assets\u4f1a\u5355\u72ec\u590d\u5236\u4e00\u4efd</p> <p></p> <p>\u7136\u800c\uff0c\u62f7\u8d1d\u540e\u8fdb\u884c\u7f29\u653e\uff0c\u5c31\u662f\u6539\u4e3a\u4e86html\u683c\u5f0f\uff0c\u5c31\u4e0d\u80fd\u591f\u6b63\u5e38\u6e32\u67d3\uff1f</p> <p></p> <p></p>"},{"location":"Others/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#mkdocshtmlmd","title":"\u53d1\u73b0mkdocs\u5728\u6e32\u67d3\u5bfc\u51faHTML\u65f6\u662f\u4f1a\u5c06\u9664\u4e86md\u683c\u5f0f\u7684\u6240\u6709\u4e1c\u897f\u90fd\u62f7\u8d1d\u4e00\u4efd\u5230\u81ea\u5df1\u7684\u76ee\u5f55\u4e0b\u9762\u7684","text":""},{"location":"Others/linux%20%E5%90%AF%E5%8A%A8/","title":"Linux\u670d\u52a1\u5668\u8fd0\u7ef4(x)\u628a\u73a9(\u221a)","text":""},{"location":"Others/linux%20%E5%90%AF%E5%8A%A8/#linux","title":"linux","text":"<ol> <li>\u4e91\u8ba1\u7b97\u548c\u865a\u62df\u5316\uff1a</li> <li>\u5b66\u4e60\u5982\u4f55\u914d\u7f6e\u548c\u7ba1\u7406\u4e91\u670d\u52a1\u5668\uff0c\u7406\u89e3\u4e91\u8ba1\u7b97\u6982\u5ff5\u548c\u670d\u52a1\u6a21\u578b\u3002</li> <li>\u638c\u63e1\u865a\u62df\u5316\u6280\u672f\uff0c\u5982\u5bb9\u5668\u5316\u548c\u865a\u62df\u673a\u7ba1\u7406\u3002</li> <li>\u7f51\u7edc\u548c\u5b89\u5168\uff1a</li> <li>\u914d\u7f6e\u548c\u7ba1\u7406\u7f51\u7edc\u670d\u52a1\uff0c\u5b66\u4e60\u7f51\u7edc\u5b89\u5168\u7684\u57fa\u7840\u77e5\u8bc6\u3002</li> <li>\u5b9e\u65bd\u9632\u706b\u5899\u3001\u8eab\u4efd\u9a8c\u8bc1\u548c\u8bbf\u95ee\u63a7\u5236\u3002</li> <li>\u5206\u5e03\u5f0f\u7cfb\u7edf\uff1a</li> <li>\u5b66\u4e60\u5982\u4f55\u6784\u5efa\u548c\u7ba1\u7406\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u5305\u62ec\u6570\u636e\u5e93\u3001\u6d88\u606f\u961f\u5217\u548c\u8d1f\u8f7d\u5747\u8861\u5668\u3002</li> <li>\u7814\u7a76\u5bb9\u9519\u6027\u548c\u5206\u5e03\u5f0f\u4e00\u81f4\u6027\u7684\u7406\u8bba\u548c\u5b9e\u8df5\u3002</li> <li>\u81ea\u52a8\u5316\u548c\u7f16\u6392\uff1a</li> <li>\u4f7f\u7528\u81ea\u52a8\u5316\u5de5\u5177\u548c\u7f16\u6392\u6846\u67b6\u6765\u7ba1\u7406\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002</li> <li>\u5b66\u4e60\u811a\u672c\u8bed\u8a00\u548c\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\u3002</li> <li>\u5927\u6570\u636e\u548c\u6570\u636e\u79d1\u5b66\uff1a</li> <li>\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u4e91\u5e73\u53f0\u5904\u7406\u548c\u5206\u6790\u5927\u89c4\u6a21\u6570\u636e\u3002</li> <li>\u63a2\u7d22\u673a\u5668\u5b66\u4e60\u548c\u4eba\u5de5\u667a\u80fd\u5e94\u7528\u3002</li> <li>Web\u5f00\u53d1\u548c\u5e94\u7528\u90e8\u7f72\uff1a</li> <li>\u6784\u5efa\u548c\u90e8\u7f72Web\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e86\u89e3\u4e91\u4e0a\u7684\u6258\u7ba1\u670d\u52a1\u3002</li> <li>\u5b66\u4e60\u4f7f\u7528\u5bb9\u5668\u548c\u670d\u52a1\u5668less\u67b6\u6784\u3002</li> <li>\u5bb9\u5668\u5316\u6280\u672f\uff1a</li> <li>\u4f7f\u7528Docker\u7b49\u5bb9\u5668\u6280\u672f\u6784\u5efa\u3001\u90e8\u7f72\u548c\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u3002</li> <li>\u5b66\u4e60Kubernetes\u7b49\u5bb9\u5668\u7f16\u6392\u5de5\u5177\u3002</li> </ol> <p>aliyun\u670d\u52a1\u5668\uff1a ssh root@101.201.46.135</p> <p>\u5b9d\u5854\u9762\u677f </p> <p>\u6700\u540e\u8fd8\u662f\u91c7\u7528ssh\u7684\u65b9\u6cd5</p> <p>SSH\u514d\u5bc6\u767b\u5f55\uff08SSH Public Key Authentication\uff09\u662f\u4e00\u79cd\u901a\u8fc7\u4f7f\u7528\u5bc6\u94a5\u5bf9\u800c\u4e0d\u662f\u5bc6\u7801\u8fdb\u884cSSH\u767b\u5f55\u7684\u65b9\u6cd5\uff0c\u63d0\u9ad8\u4e86\u5b89\u5168\u6027\u5e76\u7b80\u5316\u4e86\u767b\u5f55\u8fc7\u7a0b\u3002\u4ee5\u4e0b\u662fSSH\u514d\u5bc6\u767b\u5f55\u7684\u914d\u7f6e\u8fc7\u7a0b\uff1a</p> <ol> <li>\u751f\u6210\u5bc6\u94a5\u5bf9\uff1a \u5728\u672c\u5730\u673a\u5668\u4e0a\u751f\u6210\u4e00\u5bf9\u5bc6\u94a5\uff0c\u5305\u62ec\u79c1\u94a5\u548c\u516c\u94a5\u3002\u79c1\u94a5\u5b58\u50a8\u5728\u672c\u5730\u673a\u5668\u4e0a\uff0c\u800c\u516c\u94a5\u4f1a\u88ab\u4f20\u8f93\u5230\u8fdc\u7a0b\u673a\u5668\u4e0a\u3002</li> </ol> <p>\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\u5bc6\u94a5\u5bf9\uff1a</p> Text Only<pre><code>bashCopy code\nssh-keygen -t rsa\n</code></pre> <p>\u8fd9\u4f1a\u5728<code>~/.ssh/</code>\u76ee\u5f55\u4e0b\u751f\u6210<code>id_rsa</code>\uff08\u79c1\u94a5\uff09\u548c<code>id_rsa.pub</code>\uff08\u516c\u94a5\uff09\u6587\u4ef6\u3002</p> <ol> <li>\u5c06\u516c\u94a5\u590d\u5236\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\uff1a \u5c06\u672c\u5730\u751f\u6210\u7684\u516c\u94a5\u590d\u5236\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u7684<code>~/.ssh/authorized_keys</code>\u6587\u4ef6\u4e2d\u3002\u53ef\u4ee5\u4f7f\u7528<code>ssh-copy-id</code>\u547d\u4ee4\uff0c\u5b83\u4f1a\u81ea\u52a8\u5c06\u516c\u94a5\u6dfb\u52a0\u5230\u76ee\u6807\u7528\u6237\u7684<code>authorized_keys</code>\u6587\u4ef6\u4e2d\u3002</li> </ol> Text Only<pre><code>bashCopy code\nssh-copy-id username@remote_host\n</code></pre> <p>\u5982\u679c<code>ssh-copy-id</code>\u547d\u4ee4\u4e0d\u53ef\u7528\uff0c\u53ef\u4ee5\u624b\u52a8\u5c06\u516c\u94a5\u5185\u5bb9\u8ffd\u52a0\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u7684<code>~/.ssh/authorized_keys</code>\u6587\u4ef6\u4e2d\u3002</p> <ol> <li>\u8bbe\u7f6e\u6743\u9650\uff1a \u786e\u4fdd<code>~/.ssh/</code> \u76ee\u5f55\u548c <code>~/.ssh/authorized_keys</code> \u6587\u4ef6\u7684\u6743\u9650\u6b63\u786e\u3002\u6743\u9650\u8bbe\u7f6e\u5bf9\u4e8eSSH\u7684\u5b89\u5168\u6027\u81f3\u5173\u91cd\u8981\u3002</li> </ol> Text Only<pre><code>bashCopy codechmod 700 ~/.ssh\nchmod 600 ~/.ssh/authorized_keys\n</code></pre> <ol> <li>\u6d4b\u8bd5SSH\u514d\u5bc6\u767b\u5f55\uff1a \u5c1d\u8bd5\u4f7f\u7528SSH\u8fde\u63a5\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u5e94\u8be5\u4e0d\u518d\u9700\u8981\u8f93\u5165\u5bc6\u7801\u3002</li> </ol> Text Only<pre><code>bashCopy code\nssh username@remote_host\n</code></pre> <p>\u5982\u679c\u4e00\u5207\u8bbe\u7f6e\u6b63\u786e\uff0c\u4f60\u5c06\u53ef\u4ee5\u65e0\u5bc6\u7801\u767b\u5f55\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u79c1\u94a5\u6587\u4ef6\uff08<code>id_rsa</code>\uff09\u5e94\u8be5\u4fdd\u6301\u5728\u672c\u5730\u673a\u5668\u4e0a\uff0c\u5e76\u4e14\u4e0d\u5e94\u8be5\u5206\u4eab\u7ed9\u5176\u4ed6\u4eba\u3002\u540c\u65f6\uff0c\u516c\u94a5\u6587\u4ef6\uff08<code>id_rsa.pub</code>\uff09\u9700\u8981\u4f20\u8f93\u5230\u9700\u8981\u8bbf\u95ee\u7684\u8fdc\u7a0b\u670d\u52a1\u5668\u3002</p> <p>[Linux]\u521b\u5efa\u65b0\u7528\u6237\u53ca\u7528\u6237\u6743\u9650 - \u77e5\u4e4e (zhihu.com)</p> C<pre><code>scp -r /home/user/documents username@remote_host:/var/www/\nscp -P 80 baseline2.cu hjy@10.78.18.247:~/gemm\n</code></pre>"},{"location":"Others/linux%20%E5%90%AF%E5%8A%A8/#11-16","title":"11-16","text":"<p>\u670d\u52a1\u5668\u6539\u540d</p> <p>\u627e\u5230/etc/hosts  sudo vim hosts \u6dfb\u52a0\u4e00\u884c  101.201.46.135  server_jy \u518d\u5728ssh\u65f6\u91cd\u65b0add\u4e00\u4e0b\u8fd9\u4e2a\u522b\u540d\uff0c\u5b8c\u6210</p> <p>\u4ee5\u540e\u5c31\u53ebserver_jy\u4e86~</p> <p>\u76d1\u542c\u7aef\u53e3</p> <p>\u5b89\u5168\u7ec4</p> <p>\u67e5\u627e\u547d\u4ee4</p> <p>```[root@iZ2ze72tpnr9ta1r8uvbujZ /]# find / -name nginx [root@iZ2ze72tpnr9ta1r8uvbujZ /]# find / -name nginx /www/server/nginx /www/server/nginx/src/objs/nginx /www/server/nginx/sbin/nginx /www/server/panel/rewrite/nginx /www/server/panel/vhost/nginx /www/server/panel/vhost/template/nginx /etc/rc.d/init.d/nginx /usr/bin/nginx /usr/local/nginx [root@iZ2ze72tpnr9ta1r8uvbujZ /]# </p>Text Only<pre><code>/usr/bin\n\n/usr/local\n\n```c\n[root@iZ2ze72tpnr9ta1r8uvbujZ /]# start nginx\n-bash: start: command not found\n[root@iZ2ze72tpnr9ta1r8uvbujZ /]# nginx\nnginx: [emerg] bind() to 0.0.0.0:888 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:888 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:888 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:888 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:888 failed (98: Address already in use)\nnginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\nnginx: [emerg] still could not bind()\n[root@iZ2ze72tpnr9ta1r8uvbujZ /]# sudo lsof -i :80\nCOMMAND      PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nAliYunDun   1473 root   11u  IPv4  27166      0t0  TCP iZ2ze72tpnr9ta1r8uvbujZ:37902-&gt;100.100.30.26:http (ESTABLISHED)\nnginx     269834 root    9u  IPv4 679139      0t0  TCP *:http (LISTEN)\nnginx     269835  www    9u  IPv4 679139      0t0  TCP *:http (LISTEN)\nnginx     269836  www    9u  IPv4 679139      0t0  TCP *:http (LISTEN)\n[root@iZ2ze72tpnr9ta1r8uvbujZ /]#\n</code></pre>"},{"location":"Others/linux%20%E5%90%AF%E5%8A%A8/#grep","title":"grep","text":"<p><code>grep</code>\u662f\u4e00\u4e2a\u5728\u6587\u672c\u4e2d\u641c\u7d22\u6a21\u5f0f\u7684\u5f3a\u5927\u547d\u4ee4\u884c\u5de5\u5177\u3002\u5b83\u7684\u540d\u5b57\u6765\u6e90\u4e8e\u5168\u5c40\u6b63\u5219\u8868\u8fbe\u5f0f\u6253\u5370\uff08Global Regular Expression Print\uff09\u3002</p> <p>\u4e0b\u9762\u662f<code>grep</code>\u547d\u4ee4\u7684\u57fa\u672c\u7528\u6cd5\u548c\u4e00\u4e9b\u5e38\u89c1\u9009\u9879\uff1a</p> Text Only<pre><code>bashCopy code\ngrep [options] pattern [file...]\n</code></pre> <ul> <li><code>pattern</code>\uff1a\u8981\u641c\u7d22\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u3002</li> <li><code>file</code>\uff1a\u8981\u5728\u5176\u4e2d\u641c\u7d22\u6a21\u5f0f\u7684\u6587\u4ef6\u3002\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u6587\u4ef6\u540d\uff0c<code>grep</code>\u5c06\u4ece\u6807\u51c6\u8f93\u5165\u4e2d\u8bfb\u53d6\u3002</li> </ul> <p>\u5e38\u89c1\u9009\u9879\uff1a</p> <ul> <li><code>-i</code>\uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u3002</li> <li><code>-r</code>\u6216<code>-R</code>\uff1a\u9012\u5f52\u641c\u7d22\u5b50\u76ee\u5f55\u3002</li> <li><code>-n</code>\uff1a\u663e\u793a\u5339\u914d\u884c\u7684\u884c\u53f7\u3002</li> <li><code>-v</code>\uff1a\u53cd\u5411\u9009\u62e9\uff0c\u663e\u793a\u4e0d\u5339\u914d\u7684\u884c\u3002</li> <li><code>-l</code>\uff1a\u53ea\u663e\u793a\u5305\u542b\u5339\u914d\u9879\u7684\u6587\u4ef6\u540d\u3002</li> <li><code>-c</code>\uff1a\u53ea\u663e\u793a\u5339\u914d\u7684\u884c\u6570\u800c\u4e0d\u663e\u793a\u5339\u914d\u7684\u5185\u5bb9\u3002</li> <li><code>-A</code>\uff0c<code>-B</code>\uff0c<code>-C</code>\uff1a\u663e\u793a\u5339\u914d\u884c\u7684\u4e0a\u4e0b\u6587\u884c\u3002</li> <li><code>-e</code>\uff1a\u6307\u5b9a\u591a\u4e2a\u6a21\u5f0f\u3002</li> </ul> <p>\u793a\u4f8b\uff1a</p> <ol> <li>\u5728\u6587\u4ef6\u4e2d\u641c\u7d22\u5305\u542b\u5173\u952e\u5b57\u7684\u884c\uff1a</li> </ol> Text Only<pre><code>bashCopy code\ngrep \"keyword\" filename\n</code></pre> <ol> <li>\u9012\u5f52\u641c\u7d22\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u4e2d\u5305\u542b\u5173\u952e\u5b57\u7684\u884c\uff1a</li> </ol> Text Only<pre><code>bashCopy code\ngrep -r \"keyword\" directory\n</code></pre> <ol> <li>\u5ffd\u7565\u5927\u5c0f\u5199\uff1a</li> </ol> Text Only<pre><code>bashCopy code\ngrep -i \"keyword\" filename\n</code></pre> <ol> <li>\u663e\u793a\u5339\u914d\u884c\u7684\u884c\u53f7\uff1a</li> </ol> Text Only<pre><code>bashCopy code\ngrep -n \"keyword\" filename\n</code></pre> <ol> <li>\u53cd\u5411\u9009\u62e9\uff0c\u663e\u793a\u4e0d\u5339\u914d\u7684\u884c\uff1a</li> </ol> Text Only<pre><code>bashCopy code\ngrep -v \"keyword\" filename\n</code></pre> <p>\u8fd9\u53ea\u662f\u4e00\u4e9b<code>grep</code>\u547d\u4ee4\u7684\u57fa\u672c\u7528\u6cd5\u548c\u9009\u9879\uff0c<code>grep</code>\u6709\u5f88\u591a\u5176\u4ed6\u9009\u9879\u548c\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7<code>man grep</code>\u67e5\u770b<code>grep</code>\u7684\u624b\u518c\u9875\u4ee5\u83b7\u53d6\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\\</p> <p>\u7adf\u7136\u6ca1\u6709apt-get\uff1f\uff1f</p> C<pre><code>[root@iZ2ze72tpnr9ta1r8uvbujZ hjy]# lsb_release -a\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\nDistributor ID: AlibabaCloud\nDescription:    Alibaba Cloud Linux release 3 (Soaring Falcon)\nRelease:        3\nCodename:       SoaringFalcon\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u547d\u4ee4\u67e5\u627e\u4e0d\u5230\u662fbash\u6253\u5934</p> C<pre><code>bash: apt-get: command not found\n</code></pre> <p>\u5982\u679c\u4f60\u5728\u4f7f\u7528\u547d\u4ee4\u65f6\u9047\u5230 \"\u547d\u4ee4\u627e\u4e0d\u5230\" \u7684\u9519\u8bef\uff0c\u8fd9\u53ef\u80fd\u6709\u591a\u4e2a\u539f\u56e0\u3002\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u7cfb\u7edf\u65e0\u6cd5\u627e\u5230\u6216\u8bc6\u522b\u8be5\u547d\u4ee4\uff0c\u8fd9\u53ef\u80fd\u4e0e\u73af\u5883\u53d8\u91cf\u6216\u547d\u4ee4\u7684\u4f4d\u7f6e\u6709\u5173\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u80fd\u7684\u539f\u56e0\u548c\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <ol> <li>\u73af\u5883\u53d8\u91cf\u95ee\u9898\uff1a \u786e\u4fdd\u547d\u4ee4\u6240\u5728\u7684\u8def\u5f84\u5305\u542b\u5728\u7cfb\u7edf\u7684<code>PATH</code>\u73af\u5883\u53d8\u91cf\u4e2d\u3002<code>PATH</code>\u73af\u5883\u53d8\u91cf\u5305\u542b\u4e00\u7ec4\u76ee\u5f55\uff0c\u7cfb\u7edf\u5728\u8fd9\u4e9b\u76ee\u5f55\u4e2d\u67e5\u627e\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b<code>PATH</code>\uff1a</li> </ol> Text Only<pre><code>bashCopy code\necho $PATH\n</code></pre> <p>\u5982\u679c\u547d\u4ee4\u6240\u5728\u7684\u76ee\u5f55\u4e0d\u5728<code>PATH</code>\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u6dfb\u52a0\u5230<code>PATH</code>\u3002\u4f8b\u5982\uff1a</p> Text Only<pre><code>bashCopy code\nexport PATH=$PATH:/path/to/your/command\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u5c06<code>/path/to/your/command</code>\u66ff\u6362\u4e3a\u5305\u542b\u4f60\u7684\u547d\u4ee4\u7684\u5b9e\u9645\u8def\u5f84\u3002</p> <ol> <li> <p>\u547d\u4ee4\u672a\u5b89\u88c5\uff1a \u786e\u4fdd\u4f60\u5c1d\u8bd5\u8fd0\u884c\u7684\u547d\u4ee4\u5df2\u7ecf\u5b89\u88c5\u5728\u7cfb\u7edf\u4e0a\u3002\u6709\u4e9b\u547d\u4ee4\u53ef\u80fd\u9700\u8981\u5355\u72ec\u5b89\u88c5\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u7684\u5305\u7ba1\u7406\u5668\u5b89\u88c5\u5b83\u4eec\u3002</p> </li> <li> <p>\u6587\u4ef6\u6743\u9650\u95ee\u9898\uff1a \u68c0\u67e5\u547d\u4ee4\u6587\u4ef6\u7684\u6743\u9650\uff0c\u786e\u4fdd\u4f60\u6709\u6267\u884c\u6743\u9650\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528<code>ls -l</code>\u547d\u4ee4\u67e5\u770b\u6587\u4ef6\u6743\u9650\uff0c\u4f8b\u5982\uff1a</p> </li> </ol> Text Only<pre><code>bashCopy code\nls -l /path/to/your/command\n</code></pre> <p>\u5982\u679c\u6ca1\u6709\u6267\u884c\u6743\u9650\uff0c\u53ef\u4ee5\u4f7f\u7528<code>chmod</code>\u547d\u4ee4\u6dfb\u52a0\u6267\u884c\u6743\u9650\uff1a</p> Text Only<pre><code>bashCopy code\nchmod +x /path/to/your/command\n</code></pre> <ol> <li>\u547d\u4ee4\u62fc\u5199\u9519\u8bef\uff1a \u8bf7\u786e\u4fdd\u4f60\u6b63\u786e\u62fc\u5199\u4e86\u8981\u8fd0\u884c\u7684\u547d\u4ee4\u3002</li> </ol> <p>\u5982\u679c\u4f60\u80fd\u63d0\u4f9b\u66f4\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\u6216\u547d\u4ee4\u793a\u4f8b\uff0c\u6211\u53ef\u4ee5\u63d0\u4f9b\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u3002</p> Text Only<pre><code>[root@iZ2ze72tpnr9ta1r8uvbujZ hjy]# echo $PATH\n/home/hjy/.local/bin:/home/hjy/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin\n</code></pre> <p>\u53d1\u884c\u7248\u95ee\u9898</p> <p>\u6ca1\u6709apt-get</p> C<pre><code>sudo dnf install ?\n[root@iZ2ze72tpnr9ta1r8uvbujZ hjy]# sudo dnf install pip\nLast metadata expiration check: 3:41:20 ago on Sat Nov 18 08:06:48 2023.\nNo match for argument: pip\nError: Unable to find a match: pip\n</code></pre> <p>wordpress\u5efa\u7ad9  ok</p> <p>mysql\u6570\u636e\u5e93\u4f7f\u7528</p> <p>\u57df\u540d\u53ea\u4e0d\u8fc7\u662f\u5c06101.201.46.135\u4e4b\u7c7b\u7684ip\u5730\u5740\u7528DNS\u670d\u52a1\u5668\u6620\u5c04\u5230\u53ef\u8bb0\u5fc6\u7684\u5b57\u7b26\u4e32\uff1f</p> <p>\u662f\u7684\uff0c\u57df\u540d\u7cfb\u7edf\uff08DNS\uff09\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u5c06\u6613\u4e8e\u8bb0\u5fc6\u7684\u57df\u540d\u6620\u5c04\u5230\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\u7684IP\u5730\u5740\u3002IP\u5730\u5740\u662f\u4e92\u8054\u7f51\u4e0a\u8ba1\u7b97\u673a\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u901a\u8fc7\u5c06\u57df\u540d\u6620\u5c04\u5230IP\u5730\u5740\uff0c\u4eba\u4eec\u53ef\u4ee5\u4f7f\u7528\u5bb9\u6613\u8bb0\u5fc6\u7684\u540d\u79f0\u6765\u8bbf\u95ee\u7f51\u7ad9\u3001\u670d\u52a1\u5668\u6216\u5176\u4ed6\u7f51\u7edc\u670d\u52a1\uff0c\u800c\u4e0d\u5fc5\u8bb0\u4f4f\u590d\u6742\u7684\u6570\u5b57\u5730\u5740\u3002</p> <p>\u4f8b\u5982\uff0c\u5c06\u57df\u540d \"example.com\" \u6620\u5c04\u5230 IP \u5730\u5740 \"101.201.46.135\"\u3002\u5f53\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u952e\u5165 \"example.com\" \u65f6\uff0c\u8ba1\u7b97\u673a\u9996\u5148\u4f1a\u67e5\u8be2DNS\u670d\u52a1\u5668\uff0c\u83b7\u53d6\u4e0e \"example.com\" \u76f8\u5173\u8054\u7684IP\u5730\u5740\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e2aIP\u5730\u5740\u5efa\u7acb\u8fde\u63a5\u5230\u76f8\u5e94\u7684\u670d\u52a1\u5668\u3002</p> <p>DNS\u4f7f\u7528\u4e00\u4e2a\u5c42\u6b21\u5316\u7684\u7ed3\u6784\uff0c\u5305\u62ec\u9876\u7ea7\u57df\uff08\u5982.com\u3001.org\uff09\u3001\u4e8c\u7ea7\u57df\uff08\u5982example.com\uff09\u3001\u5b50\u57df\u7b49\u3002\u8fd9\u4e2a\u7ed3\u6784\u5141\u8bb8\u5168\u7403\u8303\u56f4\u5185\u552f\u4e00\u5730\u6807\u8bc6\u4e0d\u540c\u7684\u57df\u540d\uff0c\u5e76\u901a\u8fc7\u5206\u5e03\u5f0f\u7684DNS\u670d\u52a1\u5668\u7cfb\u7edf\u6765\u7ba1\u7406\u8fd9\u4e9b\u6620\u5c04\u5173\u7cfb\u3002</p> <p>\u603b\u7684\u6765\u8bf4\uff0c\u57df\u540d\u7684\u4f5c\u7528\u662f\u63d0\u4f9b\u4e00\u4e2a\u4fbf\u4e8e\u8bb0\u5fc6\u548c\u4f7f\u7528\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u4e92\u8054\u7f51\u4e0a\u7684\u8d44\u6e90\uff0c\u800c\u4e0d\u5fc5\u8bb0\u4f4f\u5b83\u4eec\u7684\u5177\u4f53IP\u5730\u5740\u3002</p> <p>\u81ea\u884c\u5efa\u7ad9\u6709\u5f88\u591a\u9009\u62e9\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u6280\u672f\u6c34\u5e73\u3001\u9700\u6c42\u3001\u9884\u7b97\u548c\u4e2a\u4eba\u504f\u597d\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u81ea\u884c\u5efa\u7ad9\u5de5\u5177\u548c\u5e73\u53f0\uff1a</p> <ol> <li>WordPress\uff1a WordPress \u662f\u4e00\u4e2a\u6d41\u884c\u7684\u5f00\u6e90\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf (CMS)\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u7c7b\u578b\u7684\u7f51\u7ad9\uff0c\u4ece\u535a\u5ba2\u5230\u4f01\u4e1a\u7f51\u7ad9\u3002\u5b83\u6709\u5927\u91cf\u7684\u4e3b\u9898\u548c\u63d2\u4ef6\uff0c\u6613\u4e8e\u4f7f\u7528\uff0c\u9002\u5408\u4e0d\u5177\u5907\u7f16\u7a0b\u6280\u80fd\u7684\u7528\u6237\u3002</li> <li>Jekyll\uff1a Jekyll \u662f\u4e00\u4e2a\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\uff0c\u4f7f\u7528 Ruby \u8bed\u8a00\u3002\u5b83\u9002\u7528\u4e8e\u535a\u5ba2\u548c\u7b80\u5355\u7684\u7f51\u7ad9\uff0c\u751f\u6210\u7684\u7f51\u7ad9\u53ef\u4ee5\u90e8\u7f72\u5230\u51e0\u4e4e\u4efb\u4f55\u6258\u7ba1\u670d\u52a1\u4e0a\u3002</li> <li>Hugo\uff1a Hugo \u662f\u53e6\u4e00\u4e2a\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\uff0c\u7528 Go \u8bed\u8a00\u7f16\u5199\uff0c\u5177\u6709\u5feb\u901f\u7684\u6784\u5efa\u901f\u5ea6\u3002\u5b83\u9002\u7528\u4e8e\u4e2a\u4eba\u535a\u5ba2\u548c\u5c0f\u578b\u7f51\u7ad9\u3002</li> <li>GitHub Pages\uff1a \u5982\u679c\u4f60\u4f7f\u7528 Git \u8fdb\u884c\u7248\u672c\u63a7\u5236\uff0c\u5e76\u4e14\u559c\u6b22\u5728 GitHub \u4e0a\u6258\u7ba1\u4ee3\u7801\uff0cGitHub Pages \u662f\u4e00\u4e2a\u514d\u8d39\u7684\u9759\u6001\u7f51\u7ad9\u6258\u7ba1\u670d\u52a1\u3002\u5b83\u4e0e Jekyll \u96c6\u6210\u5f97\u5f88\u597d\uff0c\u4f46\u4e5f\u652f\u6301\u5176\u4ed6\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\u3002</li> <li>Wix\uff1a Wix \u662f\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u7f51\u7ad9\u6784\u5efa\u5e73\u53f0\uff0c\u63d0\u4f9b\u5404\u79cd\u6a21\u677f\u548c\u62d6\u653e\u5f0f\u7f16\u8f91\u5668\u3002\u9002\u5408\u90a3\u4e9b\u4e0d\u5177\u5907\u7f16\u7801\u7ecf\u9a8c\u7684\u7528\u6237\u3002</li> <li>Squarespace\uff1a Squarespace \u662f\u4e00\u4e2a\u96c6\u6210\u7684\u7f51\u7ad9\u5efa\u8bbe\u5e73\u53f0\uff0c\u63d0\u4f9b\u4e13\u4e1a\u8bbe\u8ba1\u7684\u6a21\u677f\u548c\u7b80\u5355\u7684\u62d6\u653e\u7f16\u8f91\u5de5\u5177\u3002\u9002\u7528\u4e8e\u521b\u610f\u548c\u5546\u4e1a\u7f51\u7ad9\u3002</li> <li>Django\uff1a \u5982\u679c\u4f60\u6709\u7f16\u7a0b\u7ecf\u9a8c\uff0c\u5e76\u4e14\u60f3\u8981\u66f4\u5927\u7684\u7075\u6d3b\u6027\uff0cDjango \u662f\u4e00\u4e2a\u5f3a\u5927\u7684Python\u6846\u67b6\uff0c\u9002\u7528\u4e8e\u5f00\u53d1\u590d\u6742\u7684Web\u5e94\u7528\u7a0b\u5e8f\u3002</li> <li>VuePress \u548c Nuxt.js\uff1a \u5982\u679c\u4f60\u719f\u6089 Vue.js\uff0cVuePress \u9002\u7528\u4e8e\u6587\u6863\u548c\u535a\u5ba2\u3002\u800c Nuxt.js \u5219\u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efaVue.js\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u670d\u52a1\u5668\u6e32\u67d3\u548c\u9759\u6001\u7ad9\u70b9\u751f\u6210\u3002</li> </ol> <p>\u9009\u62e9\u54ea\u4e2a\u5de5\u5177\u53d6\u51b3\u4e8e\u4f60\u7684\u5177\u4f53\u9700\u6c42\u548c\u6280\u672f\u504f\u597d\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\uff0c\u4f7f\u7528WordPress\u3001Wix\u6216Squarespace\u53ef\u80fd\u662f\u66f4\u5bb9\u6613\u4e0a\u624b\u7684\u9009\u62e9\u3002\u5bf9\u4e8e\u6709\u4e00\u4e9b\u7f16\u7a0b\u7ecf\u9a8c\u7684\u4eba\u6765\u8bf4\uff0c\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\u5982Jekyll\u3001Hugo\u6216VuePress\u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002</p> <p></p> <p>2023_DD\u662fguahao\u8001\u5e08\u5728github\u4e0a\u7684\u4ed3\u5e93\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u5176\u4e2d\u5e76\u672a\u5305\u62ecnode_modules,src/assets/javascripts\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u8bf7\u95ee</p> <p>github.io\u5efa\u7ad9\u8fc7\u7a0b</p> <p>\u4f7f\u7528</p> <p></p> <p></p>"},{"location":"Others/memories/","title":"memories","text":""},{"location":"Others/memories/#memories-should-be-well-kept","title":"memories should be well kept","text":""},{"location":"artifacts/test/","title":"Embedding a PDF file","text":""}]}